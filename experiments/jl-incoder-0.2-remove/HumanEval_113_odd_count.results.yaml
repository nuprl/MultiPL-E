language: jl
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += findall(x -> x % 2\
    \ == 1, i)\n    end\n    return odd_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn70swydd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpn70swydd.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpn70swydd.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpn70swydd.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpn70swydd.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpn70swydd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn70swydd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = []\n    for str in lst\n        odd_count_list += count_odd_digits(str)\n\
    \    end\n    return odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgvcpw6a1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgvcpw6a1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpgvcpw6a1.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvcpw6a1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvcpw6a1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgvcpw6a1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgvcpw6a1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvcpw6a1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvcpw6a1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgvcpw6a1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgvcpw6a1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvcpw6a1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_vec\
    \ =  Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n        odd_count_vec[i]\
    \ = length(findall(string(i),lst[i]))\n    end\n    return odd_count_vec\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplv3604pm.jl:14\nin expression starting at\
    \ /tmp/tmplv3604pm.jl:14\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list\
    \ = append!(odd_count_list,findall(str->str==\"1\",str))\n    end\n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc_yosedi.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpc_yosedi.jl:20\n  Expression: candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    \   Evaluated: String[] == [\"the number of odd elements 4n the str4ng 4 of the\
    \ 4nput.\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc_yosedi.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc_yosedi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_yosedi.jl:21\n  Expression: candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n   Evaluated: String[] ==\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc_yosedi.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc_yosedi.jl:19\ntest set: Test Failed at /tmp/tmpc_yosedi.jl:22\n\
    \  Expression: candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the\
    \ str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the\
    \ 2nput.\"]\n   Evaluated: String[] == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc_yosedi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ "
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnbb65vmw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpnbb65vmw.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpnbb65vmw.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpnbb65vmw.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnbb65vmw.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnbb65vmw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnbb65vmw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979722
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"1\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"1\",\"2\",\"3\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"\
    4\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"\
    4\",\"5\",\"6\",\"7\",\"8\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"\
    \nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrpdiikw.jl:11\nin expression starting at\
    \ /tmp/tmpcrpdiikw.jl:11\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_str .= findall(str->str[end-1]=='1',str)\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"11\",\"22\",\"33\",\"44\",\"55\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"11\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\",\"88\",\"99\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector where each element is the sum of the lengths of the strings\
    \ in the input vector. For example, [\"11\",\"22\",\"33\",\"44\",\"55\"] should\
    \ return [5,5,5,5,5].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx99ji7i.jl:14\nin expression starting at\
    \ /tmp/tmpqx99ji7i.jl:14\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(strsplit(lst[i],\"\\d\")[end].==1)\n    end\n    return odd_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps5vmqlgh.jl:11\nin expression starting at /tmp/tmps5vmqlgh.jl:11\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zhdo9x_.jl:15\nin expression starting at\
    \ /tmp/tmp0zhdo9x_.jl:15\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for i in lst\n      \
    \  odd_count_list[i] = length(filter(x -> x == \"1\", i))\n    end\n    \n   \
    \ return odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp27vhulx2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp27vhulx2.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  ArgumentError: invalid index: \"1234567\" of type\
    \ String\n  Stacktrace:\n    [1] to_index(i::String)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::String)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] setindex!\n      @ ./abstractarray.jl:1315\
    \ [inlined]\n    [6] odd_count(lst::Vector{String})\n      @ Main /tmp/tmp27vhulx2.jl:12\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp27vhulx2.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp27vhulx2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp27vhulx2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  ArgumentError: invalid index: \"3\" of type String\n  Stacktrace:\n    [1]\
    \ to_index(i::String)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::String)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] setindex!\n\
    \      @ ./abstractarray.jl:1315 [inlined]\n    [6] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmp27vhulx2.jl:12\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp27vhulx2.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp27vhulx2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp27vhulx2.jl:2"
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec=Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_count_vec[i]=length(findall(string(i),lst[i]))\n    end\n    return\
    \ odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_93lyzv2.jl:15\nin expression starting at\
    \ /tmp/tmp_93lyzv2.jl:15\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    \n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(i .== \"0\", lst[i]))\n    end\n \
    \   \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a vector\
    \ of strings and returns a vector of strings where each element of the output\
    \ is the string that starts with the same number of odd characters as that of\
    \ the corresponding element of the input vector. For example, if the input vector\
    \ is [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\",\
    \ \"100\"], then the output vector should be [\"10\", \"20\", \"30\", \"40\",\
    \ \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi025cxkg.jl:17\nin expression starting at\
    \ /tmp/tmpi025cxkg.jl:17\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}(undef,0)\n    for str in lst\n        odds = append(odds,sum(map(x\
    \ -> x % 2 != 0,str)))\n    end\n    return odds\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyn187dme.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpyn187dme.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpyn187dme.jl:11\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpyn187dme.jl:11\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpyn187dme.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpyn187dme.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyn187dme.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpyn187dme.jl:11\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpyn187dme.jl:11\n  \
    \ [4] macro expansion\n     @ ~/."
  timestamp: 1659979722
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count_str[i]\
    \ = length(findall(string(i), lst))\n    end\n    return odd_count_str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpklq4zqvm.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpklq4zqvm.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::String,\
    \ ::Vector{String})\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpklq4zqvm.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklq4zqvm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklq4zqvm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpklq4zqvm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::String, ::Vector{String})\n  Closest\
    \ candidates are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpklq4zqvm.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklq4zqvm.jl:21 [inlined]\n"
  timestamp: 1659979722
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list = append(odd_count_list,length(findall(str,\"\
    [0-9]\"))) \n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nFor example, if the input string is\
    \ \"abc\", the output should be 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffs16su_.jl:14\nin expression starting at\
    \ /tmp/tmpffs16su_.jl:14\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for i in lst\n      \
    \  odd_count_list = append!(odd_count_list,count(i)) \n    end\n    \n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp96p45y1z.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp96p45y1z.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ #count#271\n     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp96p45y1z.jl:12\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp96p45y1z.jl:22 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp96p45y1z.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp96p45y1z.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n  \
    \ [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2] #count#271\n  \
    \   @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199 [inlined]\n\
    \   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp96p45y1z.jl:12\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp96p45y1z.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp96p45y1z.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp96p45y1z.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of"
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = zeros(Int, length(lst))\n    for i = 1:length(lst)\n        odds[i]\
    \ = length(findall(string(i), lst))\n    end\n    return vec(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzj8ss871.jl:15\nin expression starting at\
    \ /tmp/tmpzj8ss871.jl:15\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{Int}()\n    for i in lst\n        odds = append(odds, sum(map(x ->\
    \ x % 2 != 0, i)))\n    end\n    return odds\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6m39ggvf.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6m39ggvf.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmp6m39ggvf.jl:10\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp6m39ggvf.jl:10\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6m39ggvf.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6m39ggvf.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6m39ggvf.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmp6m39ggvf.jl:10\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp6m39ggvf.jl:10\n  \
    \ [4] macro expansion\n     @ ~/."
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list = append(odd_count_list,length(findall(str,\"\
    [0-9]\"))) \n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5y4zgwo.jl:14\nin expression starting at\
    \ /tmp/tmpc5y4zgwo.jl:14\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = sum(isodd(lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the input string. For example,\
    \ if the input string is \"abcabc\", the output should be \"3abc3\".\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1a83j9m.jl:15\nin expression starting at\
    \ /tmp/tmpu1a83j9m.jl:15\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvozoj8d5.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpvozoj8d5.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpvozoj8d5.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpvozoj8d5.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvozoj8d5.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvozoj8d5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvozoj8d5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979722
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of the number of odd characters\
    \ in each string. For example, [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"] should return [3, 5, 7, 9, 11, 13, 15, 17, 19].\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps56ce33l.jl:14\nin expression starting at\
    \ /tmp/tmps56ce33l.jl:14\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[findall(str)\
    \ .== 1] .+= 1\n    end\n    return odd_counts\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1pza3lhk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp1pza3lhk.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n    [1] iterate(::Base.Iterators.Filter{Base.var\"#108#110\",\
    \ Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String}, String}},\
    \ Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n    [2]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [3] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [4] collect(itr::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #108#110\", Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}}, Base.var\"#107#109\"})\n      @ Base ./array.jl:721\n\
    \    [5] findall\n      @ ./array.jl:2300 [inlined]\n    [6] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmp1pza3lhk.jl:10\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1pza3lhk.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1pza3lhk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1pza3lhk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n  \
    \  [1] iterate(::Base.Iterators.Filter{Base.var\"#108#110\", Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [2] iterate\n      @ ./generator.jl:44 [inlined]\n    [3] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [4] collect(itr::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #108#110\", Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{"
  timestamp: 1659979722
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are vowels.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9imntl7.jl:10\nin expression starting at\
    \ /tmp/tmpw9imntl7.jl:10\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd05p61.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd05p61.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpnjd05p61.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpnjd05p61.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnjd05p61.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnjd05p61.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnjd05p61.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vector = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_vector[i] = length(findall(i .== \"0\", lst[i]))\n    end\n\
    \    return odd_count_vector\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnofobqf.jl:15\nin expression starting at\
    \ /tmp/tmpgnofobqf.jl:15\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for str in lst\n    \
    \    odd_count_list = append!(odd_count_list,count_odd_digits(str))\n    end\n\
    \    \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    10\",\"20\",\"30\",\"40\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string where each character is replaced by the\
    \ number of times it appears in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4mi9dht.jl:17\nin expression starting at\
    \ /tmp/tmpn4mi9dht.jl:17\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odds = append!(odds,count(i))\
    \ \n    end\n    return odds\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphfwsetfw.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphfwsetfw.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ #count#271\n     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmphfwsetfw.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphfwsetfw.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphfwsetfw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphfwsetfw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n  \
    \ [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2] #count#271\n  \
    \   @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199 [inlined]\n\
    \   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmphfwsetfw.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphfwsetfw.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphfwsetfw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphfwsetfw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of"
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpryfevan3.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpryfevan3.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpryfevan3.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpryfevan3.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpryfevan3.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpryfevan3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpryfevan3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n    end\n   \
    \ return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector where\
    \ each element is the length of the longest string in the input vector. \nFor\
    \ example, [\"abc\",\"def\",\"ghi\"] should return [3,3,3]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3py0g3z.jl:15\nin expression starting at\
    \ /tmp/tmpm3py0g3z.jl:15\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for str in lst\n        odd_count_vec += count_odd_digits(str)\n\
    \    end\n    \n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2aevm4l.jl:16\nin expression starting at\
    \ /tmp/tmpc2aevm4l.jl:16\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(string(i), lst))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of strings as input and returns a list of strings where each string consists\
    \ of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e01vz69.jl:15\nin expression starting at\
    \ /tmp/tmp2e01vz69.jl:15\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp908nfu51.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp908nfu51.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmp908nfu51.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmp908nfu51.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp908nfu51.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp908nfu51.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp908nfu51.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    \n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxn94plvv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpxn94plvv.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Float64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Float64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Float64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Float64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] odd_count(lst::Vector{String})\n      @ Main /tmp/tmpxn94plvv.jl:14\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpxn94plvv.jl:21 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpxn94plvv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxn94plvv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Float64 to an object of type\
    \ String\n  Clo"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for str in lst\n        odds = append(odds,\
    \ length(findall(str, \"[0-9]\")))\n    end\n    return odds\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are digits.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are digits and are less than 10.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are digits and are less than or equal to 10.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are digits and\
    \ are greater than 10.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are digits and are greater than or equal to\
    \ 10.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 10 and 20.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 10 and 20.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 20 and\
    \ 30.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 20 and 30.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 30 and 40.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 30 and\
    \ 40.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 40 and 50.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 40 and 50.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 50 and\
    \ 60.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 50 and 60.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 60 and 70.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 60 and\
    \ 70.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 70 and 80.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 70 and 80.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 80 and\
    \ 90.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 80 and 90.\nWrite \nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_la46v8p.jl:15\nin expression starting at\
    \ /tmp/tmp_la46v8p.jl:15\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec =  Vector{String}(undef,0)\n    for i in lst\n        odd_count_vec[findall(i\
    \ .== \"d\")] .= length(findall(i .== \"d\"))\n    end\n    odd_count_vec\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjxzbqum7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjxzbqum7.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] fill!(A::SubArray{String, 1, Vector{String}, Tuple{Vector{Int64}},\
    \ false}, x::Int64)\n     @ Base ./multidimensional.jl:1062\n   [2] copyto!\n\
    \     @ ./broadcast.jl:921 [inlined]\n   [3] materialize!\n     @ ./broadcast.jl:871\
    \ [inlined]\n   [4] materialize!\n     @ ./broadcast.jl:868 [inlined]\n   [5]\
    \ odd_count(lst::Vector{String})\n     @ Main /tmp/tmpjxzbqum7.jl:11\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjxzbqum7.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjxzbqum7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjxzbqum7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/"
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec =  Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_vec[i] = length(findall(string(i),lst))\n    end\n    return\
    \ odd_count_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmzx3om28.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmzx3om28.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::String,\
    \ ::Vector{String})\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpmzx3om28.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmzx3om28.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmzx3om28.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmzx3om28.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::String, ::Vector{String})\n  Closest\
    \ candidates are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpmzx3om28.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmzx3om28.jl:21 [inlined]\n"
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = zeros(Int, length(lst))\n    for i in 1:length(lst)\n        odds[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odds\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplfgcgh2q.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmplfgcgh2q.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmplfgcgh2q.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmplfgcgh2q.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplfgcgh2q.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmplfgcgh2q.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplfgcgh2q.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef,0)\n    for s in lst\n        odd_digits = union(odd_digits,findall(isdigit,s))\n\
    \    end\n    return odd_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvx0c6jmt.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvx0c6jmt.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] odd_count(lst::Vector{String})\n      @ Main /tmp/tmpvx0c6jmt.jl:12\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpvx0c6jmt.jl:19 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpvx0c6jmt.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvx0c6jmt.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidate"
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list\
    \ = vcat(odd_count_list,findall(str->str==\"1\",str->str==\"1\",init=true))\n\
    \    end\n    odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpv_n3a_42.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpv_n3a_42.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::var\"\
    #1#3\", ::var\"#2#4\"; init=true)\n  Closest candidates are:\n    findall(::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253 got unsupported\
    \ keyword argument \"init\"\n    findall(::Function, !Matched::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317\
    \ got unsupported keyword argument \"init\"\n    findall(::Function, !Matched::SparseArrays.AbstractSparseMatrixCSC)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1515\
    \ got unsupported keyword argument \"init\"\n    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpv_n3a_42.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_n3a_42.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_n3a_42.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpv_n3a_42.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::var\"#1#3\", ::var\"#2#4\"; init=true)\n\
    \  Closest candidates are:\n    findall(::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\
    \ got unsupported keyword argument \"init\"\n    findall(::Function, !Matched::Number)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317 got unsupported keyword\
    \ argument \"init\"\n    findall(::Function, !Matched::SparseArrays.AbstractSparseMatrixCSC)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1515\
    \ got unsupported keyword argument \"init\"\n    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{Str"
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_digits[i]\
    \ = count(lst[i])\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings where each string consists of only digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyekbk8i.jl:14\nin expression starting at\
    \ /tmp/tmphyekbk8i.jl:14\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings as an argument and\
    \ returns a vector where each element is the length of the longest string in the\
    \ input vector. For example, [\"a\", \"b\", \"c\", \"d\"] -> [4, 3, 2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxpkd5ad.jl:15\nin expression starting at\
    \ /tmp/tmpxxpkd5ad.jl:15\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_vec\
    \ =  Vector{String}(undef,0)\n    for str in lst\n        odd_count_vec[findall(str->isdigit(str))]\
    \ =  length(findall(str->isdigit(str))) \n    end\n    return odd_count_vec\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nFor example, if the input is \"abc\"\
    , the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpquq_qutf.jl:14\nin expression starting at\
    \ /tmp/tmpquq_qutf.jl:14\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = zeros(length(lst))\n    for i in 1:length(lst)\n        odds[i] =\
    \ length(findall(string(i) .== \"1\"))\n    end\n    return odds\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_28eqcs.jl:15\nin expression starting at\
    \ /tmp/tmpr_28eqcs.jl:15\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwt97n28.jl:15\nin expression starting at\
    \ /tmp/tmpxwt97n28.jl:15\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpryfevan3.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpryfevan3.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpryfevan3.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpryfevan3.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpryfevan3.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpryfevan3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpryfevan3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i=1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    \n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpv_5nlsu8.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpv_5nlsu8.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpv_5nlsu8.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpv_5nlsu8.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpv_5nlsu8.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpv_5nlsu8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpv_5nlsu8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}()\n    \n    for i in lst\n        odd_digits\
    \ = append!(odd_digits, count(digits(i)))\n    end\n    \n    return odd_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmperqrzk6l.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmperqrzk6l.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmperqrzk6l.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmperqrzk6l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmperqrzk6l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmperqrzk6l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::String)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmperqrzk6l.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmperqrzk6l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmperqrzk6l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmperqrzk6l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_counts[i] = length(findall(string(i),lst))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings where\
    \ each string consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgw40lt_q.jl:15\nin expression starting at\
    \ /tmp/tmpgw40lt_q.jl:15\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_count\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ length of the longest string in the input.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3o1o0u4z.jl:14\nin expression starting at\
    \ /tmp/tmp3o1o0u4z.jl:14\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(string(i),lst))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"10\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of integers where the ith element is\
    \ the number of times the ith string appears in the vector of strings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncos3tti.jl:14\nin expression starting at\
    \ /tmp/tmpncos3tti.jl:14\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(strsplit(lst[i], \"\")[end-1] == 1)\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9ybdfrrw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9ybdfrrw.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp9ybdfrrw.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ybdfrrw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ybdfrrw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9ybdfrrw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp9ybdfrrw.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ybdfrrw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ybdfrrw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9ybdfrrw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp9ybdfrrw.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ybdfrrw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   \n    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps670t7p8.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmps670t7p8.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmps670t7p8.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmps670t7p8.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmps670t7p8.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmps670t7p8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmps670t7p8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Dict()\n    for str in lst\n        odd_counts[str] = sum(str == \"1\" ? 1\
    \ : 0 for str in str)\n    end\n    return collect(values(odd_counts))\nend\n\
    </cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gyype2j.jl:14\nin expression starting at\
    \ /tmp/tmp1gyype2j.jl:14\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n        odd_digits\
    \ += findall(i .== \"0\") \n    end\n    \n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"\
    1\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"\
    1\",\"2\",\"3\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"\
    4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"\
    7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"\
    7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblvirfkf.jl:17\nin expression starting at\
    \ /tmp/tmpblvirfkf.jl:17\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Dict{String,Int}()\n    for i in lst\n        odd_counts[i] = sum(isodd(i))\
    \ \n    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaj59auf.jl:14\nin expression starting at\
    \ /tmp/tmpyaj59auf.jl:14\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i,\
    \ digits=true))\n    end\n    return odds\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1kpntjhv.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp1kpntjhv.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching count(::String;\
    \ digits=true)\n  Closest candidates are:\n    count(::Union{AbstractPattern,\
    \ AbstractChar, AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:511\
    \ got unsupported keyword argument \"digits\"\n    count(::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1199\
    \ got unsupported keyword argument \"digits\"\n    count(::Any, !Matched::SparseArrays.AbstractSparseMatrixCSC)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:133\
    \ got unsupported keyword argument \"digits\"\n    ...\n  Stacktrace:\n   [1]\
    \ kwerr(::NamedTuple{(:digits,), Tuple{Bool}}, ::Function, ::String)\n     @ Base\
    \ ./error.jl:163\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp1kpntjhv.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1kpntjhv.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1kpntjhv.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1kpntjhv.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching count(::String; digits=true)\n  Closest candidates\
    \ are:\n    count(::Union{AbstractPattern, AbstractChar, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:511 got unsupported\
    \ keyword argument \"digits\"\n    count(::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1199\
    \ got unsupported keyword argument \"digits\"\n    count(::Any, !Matched::SparseArrays.AbstractSparseMatrixCSC)\
    \ at ~/.conda/envs"
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for str in lst\n        odd_count_vec += findall(str)\
    \ do i\n            if str[i] == '1'\n                1\n            else\n  \
    \              0\n            end\n        end\n    end\n    odd_count_vec\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\"\
    , \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\"\
    , \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\"\
    , \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\"\
    , \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\"\
    , \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\"\
    , \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\"\
    , \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\"\
    , \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\"\
    , \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\"\
    , \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\"\
    , \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\"\
    , \"222\", \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprk5zh8_k.jl:21\nin expression starting at\
    \ /tmp/tmprk5zh8_k.jl:21\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n    end\n   \
    \ \n    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplfh1j9_d.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmplfh1j9_d.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmplfh1j9_d.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplfh1j9_d.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplfh1j9_d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmplfh1j9_d.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odds = odds + findall(i\
    \ -> i == '1', i)\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7038n9f_.jl:14\nin expression starting at\
    \ /tmp/tmp7038n9f_.jl:14\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = zeros(length(lst))\n    for i in 1:length(lst)\n        odds[i] = sum(isodd(lst[i]))\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpssf9a4ur.jl:14\nin expression starting at\
    \ /tmp/tmpssf9a4ur.jl:14\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = zeros(length(lst))\n    for i in 1:length(lst)\n        odds[i] =\
    \ length(findall(i, isodd, lst))\n    end\n    return odds\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt1b9wix4.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpt1b9wix4.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Int64,\
    \ ::typeof(isodd), ::Vector{String})\n  Closest candidates are:\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n  Stacktrace:\n  \
    \ [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpt1b9wix4.jl:11\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1b9wix4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1b9wix4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt1b9wix4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Int64, ::typeof(isodd), ::Vector{String})\n\
    \  Closest candidates are:\n    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpt1b9wix4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1b9wix4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1b9wix4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt1b9wix4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n"
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n        odd_digits\
    \ = union(odd_digits,findall(i .== \"1\",digits))\n    end\n    \n    return odd_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmprdetbayp.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmprdetbayp.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Bool,\
    \ ::typeof(digits))\n  Closest candidates are:\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2316\n    findall(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n  Stacktrace:\n  \
    \ [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmprdetbayp.jl:12\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdetbayp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdetbayp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprdetbayp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Bool, ::typeof(digits))\n  Closest\
    \ candidates are:\n    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::Bool) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2316\n\
    \    findall(::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmprdetbayp.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdetbayp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdetbayp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprdetbayp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate"
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgk4748yq.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgk4748yq.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpgk4748yq.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpgk4748yq.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgk4748yq.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgk4748yq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgk4748yq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(String(i),lst))\n    end\n    return odd_count_list\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"\
    0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5xfs1ad.jl:14\nin expression starting at\
    \ /tmp/tmpo5xfs1ad.jl:14\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list\
    \ = append!(odd_count_list,count_odd_digits(str))\n    end\n    odd_count_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1xogg1s4.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp1xogg1s4.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp1xogg1s4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xogg1s4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xogg1s4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1xogg1s4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp1xogg1s4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xogg1s4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xogg1s4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1xogg1s4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp1xogg1s4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xogg1s4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = zeros(length(lst))\n    for i in 1:length(lst)\n        odds[i] =\
    \ sum(strsplit(lst[i],\"-\")[end].isdigit())\n    end\n    return odds\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5mogbp6n.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp5mogbp6n.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp5mogbp6n.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5mogbp6n.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5mogbp6n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5mogbp6n.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp5mogbp6n.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5mogbp6n.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5mogbp6n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5mogbp6n.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp5mogbp6n.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5mogbp6n.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_o5g516g.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_o5g516g.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp_o5g516g.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_o5g516g.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_o5g516g.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_o5g516g.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i,\
    \ \"^\"))\n    end\n    odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where all the characters are capitalized.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g2a967z.jl:15\nin expression starting at\
    \ /tmp/tmp5g2a967z.jl:15\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for str in lst\n    \
    \    odd_count_list = append(odd_count_list,length(findall(str,\"\\d\")))\n  \
    \  end\n    \n    return odd_count_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ge8hi7o.jl:12\nin expression starting at /tmp/tmp7ge8hi7o.jl:12\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = @view lst |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\".\"\
    )) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"-\"\
    )) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w9qwxkx.jl:25\nin expression starting at\
    \ /tmp/tmp1w9qwxkx.jl:25\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits += count(i, digits)\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldt4_78e.jl:14\nin expression starting at\
    \ /tmp/tmpldt4_78e.jl:14\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef,0)\n    for str in lst\n        odd_digits\
    \ += findall(str->isdigit(str),str)\n    end\n    return odd_digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa8e1j155.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa8e1j155.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(7),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n\
    \     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{String}, Bs::Vector{Int64})\n\
    \     @ Base ./arraymath.jl:45\n   [4] odd_count(lst::Vector{String})\n     @\
    \ Main /tmp/tmpa8e1j155.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa8e1j155.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa8e1j155.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa8e1j155.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(0),), b\
    \ has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169\
    \ [inlined]\n   [3] +(A::Vector{String}, Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n\
    \   [4] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpa8e1j155.jl:11\n \
    \  [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa8e1j155.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa8e1j155.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa8e1j155.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of t"
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i,\
    \ \"odd\"))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptftj16j6.jl:15\nin expression starting at\
    \ /tmp/tmptftj16j6.jl:15\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for str in lst\n    \
    \    odd_count_list = append!(odd_count_list,count(str,\"0\"))\n    end\n    \n\
    \    return odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3dahpjbe.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp3dahpjbe.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!\n     @ ./array.jl:1060 [inlined]\n\
    \   [3] append!\n     @ ./array.jl:1050 [inlined]\n   [4] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp3dahpjbe.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp3dahpjbe.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp3dahpjbe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3dahpjbe.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::"
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(i, digits)) \n    end\n    \n    return odd_count_str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4la9dc4f.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4la9dc4f.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::String,\
    \ ::typeof(digits))\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp4la9dc4f.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4la9dc4f.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4la9dc4f.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4la9dc4f.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::String, ::typeof(digits))\n  Closest\
    \ candidates are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp4la9dc4f.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4la9dc4f.jl:22 [inlined]\n\
    \   [4] m"
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n        odd_digits\
    \ = union(odd_digits,findall(i .== \"1\",digits))\n    end\n    \n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings as input and returns a vector where each element is\
    \ the length of the longest string in the input vector. \nFor example, if the\
    \ input vector is [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], then\
    \ the output vector should be [5,4,3,2,1,6,5,4,3,2].\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lk0ue0q.jl:17\nin expression starting at\
    \ /tmp/tmp5lk0ue0q.jl:17\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of strings and returns a list of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw1jlfmt.jl:11\nin expression starting at\
    \ /tmp/tmpxw1jlfmt.jl:11\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i,\
    \ \"odd\"))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a list of strings, where each string consists of only digits, return\
    \ a list.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3_nc9ia.jl:15\nin expression starting at\
    \ /tmp/tmpn3_nc9ia.jl:15\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == '1',lst[i]))\n    end\n    return\
    \ odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwjfjj1jb.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpwjfjj1jb.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpwjfjj1jb.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwjfjj1jb.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwjfjj1jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwjfjj1jb.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for str in lst\n    \
    \    odd_count_list = append!(odd_count_list,length(findall(str,\"\\d\")))\n \
    \   end\n    \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the input string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_84mao5h.jl:12\nin expression starting at /tmp/tmp_84mao5h.jl:12\n"
  stdout: ''
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_count\nend\n\
    </cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfs5nemki.jl:15\nin expression starting at\
    \ /tmp/tmpfs5nemki.jl:15\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = zeros(Int, length(lst))\n    for i = 1:length(lst)\n        odds[i] = sum(map(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabpzsx4g.jl:14\nin expression starting at\
    \ /tmp/tmpabpzsx4g.jl:14\n"
  stdout: ''
  timestamp: 1659979728
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8matj902.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp8matj902.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmp8matj902.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmp8matj902.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8matj902.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp8matj902.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8matj902.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x == \"1\", lst[i]))\n    end\n    return odd_counts\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpowsrry0x.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpowsrry0x.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Float64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Float64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Float64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Float64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] odd_count(lst::Vector{String})\n      @ Main /tmp/tmpowsrry0x.jl:12\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpowsrry0x.jl:19 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpowsrry0x.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpowsrry0x.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Float64 to an object of type\
    \ String\n  Clo"
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for i in lst\n        odd_count_vec += count(i)\n\
    \    end\n    odd_count_vec\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmptv4dmz93.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmptv4dmz93.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ #count#271\n     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmptv4dmz93.jl:11\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptv4dmz93.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmptv4dmz93.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptv4dmz93.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n  \
    \ [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2] #count#271\n  \
    \   @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199 [inlined]\n\
    \   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmptv4dmz93.jl:11\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmptv4dmz93.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmptv4dmz93.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptv4dmz93.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of"
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count\
    \ = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n        odd_count[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_count\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"\
    0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2zn0s71.jl:14\nin expression starting at\
    \ /tmp/tmph2zn0s71.jl:14\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odds = append!(odds,count(i))\
    \ \n    end\n    return odds\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphfwsetfw.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphfwsetfw.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2]\
    \ #count#271\n     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmphfwsetfw.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphfwsetfw.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphfwsetfw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphfwsetfw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n  \
    \ [1] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [2] #count#271\n  \
    \   @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199 [inlined]\n\
    \   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmphfwsetfw.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmphfwsetfw.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmphfwsetfw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphfwsetfw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of"
  timestamp: 1659979723
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    \n    return odd_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"\
    8\",\"9\"])\n</cell>\n<text>\nExercise: Write a function that takes a string as\
    \ input and returns the number of characters in the string. \n    For example,\
    \ if the input string is \"abc\", the output should be 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbgnedlja.jl:17\nin expression starting at\
    \ /tmp/tmpbgnedlja.jl:17\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i in 1:length(lst)\n        odd_count[i]\
    \ = length(findall(i, lst)) - length(findall(i, lst)%2)\n    end\n    \n    return\
    \ odd_count\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",\
    \ \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp769km5.jl:16\nin expression starting at\
    \ /tmp/tmpsp769km5.jl:16\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_count_str[i] = length(findall(strsplit(lst[i],\"\\\\D+\"),\"odd\"\
    ))\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpu4cbow4q.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpu4cbow4q.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpu4cbow4q.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4cbow4q.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4cbow4q.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpu4cbow4q.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpu4cbow4q.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4cbow4q.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4cbow4q.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpu4cbow4q.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpu4cbow4q.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4cbow4q.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}(undef,0)\n    for s in lst\n        odds = append!(odds,findall(isodd,s))\n\
    \    end\n    \n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a list of strings, and returns a list\
    \ of strings where each string consists of only digits.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkt30rtx.jl:16\nin expression starting at\
    \ /tmp/tmpzkt30rtx.jl:16\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list[]\
    \ = length(findall(str, \"[0-9]\"))\n    end\n    return odd_count_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqd3_4qz5.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpqd3_4qz5.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  BoundsError: attempt to access 0-element Vector{String}\
    \ at index []\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String}, I::Tuple{})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _setindex!\n     @ ./abstractarray.jl:1337 [inlined]\n   [4]\
    \ setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpqd3_4qz5.jl:11\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpqd3_4qz5.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpqd3_4qz5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqd3_4qz5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index []\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{String}, I::Tuple{})\n     @ Base ./abstractarray.jl:691\n\
    \   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] _setindex!\n\
    \     @ ./abstractarray.jl:1337 [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315\
    \ [inlined]\n   [5] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpqd3_4qz5.jl:11\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpqd3_4qz5.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpqd3_4qz5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqd3_4qz5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"13"
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{Int}()\n    \n    for i in lst\n        odd_counts[i]\
    \ = length(findall(i .== \"0\"))\n    end\n    \n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings as input and returns a vector of strings where each\
    \ string consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfoszlr0l.jl:17\nin expression starting at\
    \ /tmp/tmpfoszlr0l.jl:17\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odds = strcat(odds,\
    \ findall(str -> str == '1', str))\n    end\n    return odds\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsy19chth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpsy19chth.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strcat not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpsy19chth.jl:10\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsy19chth.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsy19chth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpsy19chth.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpsy19chth.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsy19chth.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsy19chth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpsy19chth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n \
    \    @ Main /tmp/tmpsy19chth.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsy19chth.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = []\n    for i in lst\n        odd_count_list += count(i)\n\
    \    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\"\
    , \"236\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenmlnoo4.jl:15\nin expression starting at\
    \ /tmp/tmpenmlnoo4.jl:15\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef, length(lst))\n    \n    for i in 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   \n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string where each\
    \ character is replaced by the number of times that character appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x0x3ar1.jl:17\nin expression starting at\
    \ /tmp/tmp8x0x3ar1.jl:17\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4k6y23r.jl:16\nin expression starting at\
    \ /tmp/tmpi4k6y23r.jl:16\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits += count(i, '[O]')\n\
    \    end\n    return odd_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkwkc_kh0.jl:10\nin expression\
    \ starting at /tmp/tmpkwkc_kh0.jl:10\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits = append(odd_digits,\
    \ count(digits(i)))\n    end\n    return odd_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpad96euj8.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpad96euj8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpad96euj8.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad96euj8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad96euj8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpad96euj8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::String)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpad96euj8.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad96euj8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad96euj8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpad96euj8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(String(i),lst))\n    end\n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjml8d2y6.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjml8d2y6.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpjml8d2y6.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjml8d2y6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjml8d2y6.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjml8d2y6.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching String(::Int64)\n  Closest candidates are:\n\
    \    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpjml8d2y6.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjml8d2y6.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjml8d2y6.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjml8d2y6.jl:22\n  Test thr"
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for i in lst\n        odd_count_vec[i] = length(findall(i,\
    \ digits(i)))\n    end\n    return odd_count_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8zkpt3sy.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8zkpt3sy.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp8zkpt3sy.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zkpt3sy.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8zkpt3sy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8zkpt3sy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::String)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp8zkpt3sy.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zkpt3sy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8zkpt3sy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8zkpt3sy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, s)\n    end\n    return odd_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplf7vp7yj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmplf7vp7yj.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmplf7vp7yj.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmplf7vp7yj.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmplf7vp7yj.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmplf7vp7yj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmplf7vp7yj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiodbyrwc.jl:15\nin expression starting at\
    \ /tmp/tmpiodbyrwc.jl:15\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjl9ycev.jl:15\nin expression starting at\
    \ /tmp/tmpyjl9ycev.jl:15\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_vec\
    \ = []\n    for str in lst\n        odd_count_vec += findall(str.isdigit, str)\n\
    \    end\n    return odd_count_vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpoyfykwvd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpoyfykwvd.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  type String has no field isdigit\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpoyfykwvd.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoyfykwvd.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoyfykwvd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpoyfykwvd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  type String has no field isdigit\n  Stacktrace:\n   [1] getproperty\n   \
    \  @ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpoyfykwvd.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoyfykwvd.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoyfykwvd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpoyfykwvd.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  type\
    \ String has no field isdigit\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpoyfykwvd.jl:10\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /"
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = sum(isodd(lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_7yv0n_.jl:15\nin expression starting at\
    \ /tmp/tmps_7yv0n_.jl:15\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for str in lst\n        odd_count_vec += findall(str)\
    \ do i\n            sum(str[i] == '1') for i in 1:length(str)\n        end\n \
    \   end\n    odd_count_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"do\" at /tmp/tmpx2dvh6qg.jl:11 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2dvh6qg.jl:12\n\
    in expression starting at /tmp/tmpx2dvh6qg.jl:12\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Dict()\n    for i in lst\n        odd_counts[i] = sum(map(x -> x % 2 != 0,\
    \ i))\n    end\n    return collect(values(odd_counts))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2hv8zo29.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp2hv8zo29.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmp2hv8zo29.jl:10\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp2hv8zo29.jl:10\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2hv8zo29.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2hv8zo29.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2hv8zo29.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmp2hv8zo29.jl:10\n\
    \   [2] map(f::var\"#1#2\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp2hv8zo29.jl:10\n  \
    \ [4] macro expansion\n     @ ~/."
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i] = length(findall(string(i),\
    \ lst))\n    end\n    return odd_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpw3qgsl66.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpw3qgsl66.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::String,\
    \ ::Vector{String})\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpw3qgsl66.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw3qgsl66.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw3qgsl66.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw3qgsl66.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::String, ::Vector{String})\n  Closest\
    \ candidates are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpw3qgsl66.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw3qgsl66.jl:20 [inlined]\n"
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(String(i) .== \"0\"))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsq06u4x.jl:14\nin expression starting at\
    \ /tmp/tmpzsq06u4x.jl:14\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x == \"1\", lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"\
    17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\",\
    \ \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ndo83b5.jl:14\nin expression starting at\
    \ /tmp/tmp9ndo83b5.jl:14\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuny3fleh.jl:14\nin expression starting at\
    \ /tmp/tmpuny3fleh.jl:14\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n  \
    \      odds[i] = sum(map(x -> isodd(x), lst[i]))\n    end\n    return odds\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlrwc02n.jl:15\nin expression starting at\
    \ /tmp/tmpwlrwc02n.jl:15\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(string(i),lst[i]))\n    end\n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3tu205nw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp3tu205nw.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp3tu205nw.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3tu205nw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3tu205nw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3tu205nw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = @view [odd_count(i) for i in lst]\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmp_9h0ktq2.jl:1\nin expression starting at /tmp/tmp_9h0ktq2.jl:1\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(i, \"\\d\"))\n    end\n    odd_count_str = odd_count_str[2:end]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6x8ajye.jl:11\nin expression starting at /tmp/tmp_6x8ajye.jl:11\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(i, lst[i]) .== 1)\n    end\n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpp8atqu9j.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpp8atqu9j.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Int64,\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpp8atqu9j.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8atqu9j.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8atqu9j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp8atqu9j.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Int64, ::String)\n  Closest candidates\
    \ are:\n    findall(!Matched::Union{AbstractPattern, AbstractString}, ::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::AbstractChar,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpp8atqu9j.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8atqu9j.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/sha"
  timestamp: 1659979735
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(i .== \"0\", lst[i]))\n    end\n \
    \   return odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphxriyn52.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmphxriyn52.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Bool,\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmphxriyn52.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxriyn52.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxriyn52.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphxriyn52.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Bool, ::String)\n  Closest candidates\
    \ are:\n    findall(!Matched::Union{AbstractPattern, AbstractString}, ::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::AbstractChar,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmphxriyn52.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxriyn52.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i).^2)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodds = odd_count(digits)\n\
    </cell>\n<code language=julia-1.5>\nodds\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns a string where all the characters are\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5j7xks6.jl:15\nin expression starting at\
    \ /tmp/tmpl5j7xks6.jl:15\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}()\n    for s in lst\n        odds = append!(odds, count(digits(s)))\n\
    \    end\n    return odds\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp031ta0r1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp031ta0r1.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp031ta0r1.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp031ta0r1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp031ta0r1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp031ta0r1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::String)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp031ta0r1.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp031ta0r1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp031ta0r1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp031ta0r1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979735
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings as an argument and\
    \ returns a vector of the number of odd characters in each string. For example,\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] should return\
    \ [3, 5, 7, 9, 11, 13, 15, 17, 19].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qlxq4x8.jl:15\nin expression starting at\
    \ /tmp/tmp6qlxq4x8.jl:15\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = Vector{String}(undef,0)\n    \n    for str in lst\n     \
    \   odd_count_str = [strcat(odd_count_str,str)]\n    end\n    \n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgpn2jymd.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgpn2jymd.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strcat not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpgpn2jymd.jl:12\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpn2jymd.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpn2jymd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgpn2jymd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgpn2jymd.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpn2jymd.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpn2jymd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgpn2jymd.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n \
    \    @ Main /tmp/tmpgpn2jymd.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpn2jymd.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0l1flwah.jl:15\nin expression starting at\
    \ /tmp/tmp0l1flwah.jl:15\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[findall(str\
    \ .== \"0\")] = length(findall(str .== \"0\"))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyfi1_kxa.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyfi1_kxa.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  ArgumentError: indexed assignment with a single\
    \ value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{String}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpyfi1_kxa.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpyfi1_kxa.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpyfi1_kxa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyfi1_kxa.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  ArgumentError: indexed assignment with a single value to possibly many locations\
    \ is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n  \
    \ [1] setindex_shape_check(::Int64, ::Int64)\n     @ Base ./indices.jl:261\n \
    \  [2] _unsafe_setindex!(#unused#::IndexLinear, A::Vector{String}, x::Int64, I::Vector{Int64})\n\
    \     @ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ odd_count(lst::Vector{String})\n     @ Main /tmp/tmpyfi1_kxa.jl:10\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpyfi1_kxa.jl:20 [inlined]\n\
    \   [8] macro e"
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn0uw54d.jl:14\nin expression starting at\
    \ /tmp/tmpgn0uw54d.jl:14\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list = append!(odd_count_list,count(str))\n\
    \    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a list of strings, where each string consists of only digits, return\
    \ a list.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps92gi4tx.jl:14\nin expression starting at\
    \ /tmp/tmps92gi4tx.jl:14\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec =  Vector{String}(undef,0)\n    for str in lst\n        odd_count_vec\
    \ =  append(odd_count_vec,length(findall(str,\"[0-9]\"))) \n    end\n    \n  \
    \  return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given\
    \ a list of strings, where each string consists of only digits, return a list.\n\
    \    Each element i of the output should be \"the number of even elements in the\n\
    \    string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb7hvfx7.jl:16\nin expression starting at\
    \ /tmp/tmpyb7hvfx7.jl:16\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i, strsplit(lst[i], \"\")))\n    end\n\
    \    \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of integers\
    \ where the ith element of the output is the number of times the ith string appears\
    \ in the input vector. For example, if the input vector is [\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\"], the output should be [1, 1, 2, 1, 1, 2].\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9xhz0e_.jl:16\nin expression starting at\
    \ /tmp/tmpm9xhz0e_.jl:16\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_count_list .= findall(x\
    \ -> x % 2 != 0, str)\n    end\n    return odd_count_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string where all the characters are capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo26ecqql.jl:14\nin expression starting at\
    \ /tmp/tmpo26ecqql.jl:14\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_counts[i] = length(findall(string(i),lst))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9efwwoch.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9efwwoch.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::String,\
    \ ::Vector{String})\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp9efwwoch.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9efwwoch.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9efwwoch.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9efwwoch.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::String, ::Vector{String})\n  Closest\
    \ candidates are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp9efwwoch.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9efwwoch.jl:21 [inlined]\n"
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \",\", \"\")\n    odd_count_str = replace(odd_count_str, \"(\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"{\", \"\")\n    odd_count_str = replace(odd_count_str, \"}\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"{\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"}\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"[\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"]\", \"\")\n    odd_count_str = replace(odd_count_str, \"{\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"}\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"{\", \"\")\n    odd_count_str = replace(odd_count_str, \"}\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"[\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"]\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = \nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3au6avu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph3au6avu.jl:1\n\
    in expression starting at /tmp/tmph3au6avu.jl:1\n"
  stdout: ''
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_count_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpw6t1vusd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpw6t1vusd.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpw6t1vusd.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpw6t1vusd.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw6t1vusd.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpw6t1vusd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw6t1vusd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_str[i]\
    \ = length(findall(i, lst)) - length(findall(i, lst[findall(i, lst)])\n    end\n\
    \    return odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp680q_2hx.jl:11\nin expression starting at\
    \ /tmp/tmp680q_2hx.jl:11\n"
  stdout: ''
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = []\n    for str in lst\n        odd_count_vec += findall(x\
    \ -> x % 2 != 0, str)\n    end\n    odd_count_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp69uaca7j.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp69uaca7j.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmp69uaca7j.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmp69uaca7j.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp69uaca7j.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp69uaca7j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp69uaca7j.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_vec = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_vec[i] = length(findall(i .== \"0\", lst[i]))\n    end\n  \
    \  return odd_count_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq148uemf.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpq148uemf.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Bool,\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpq148uemf.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq148uemf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq148uemf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq148uemf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Bool, ::String)\n  Closest candidates\
    \ are:\n    findall(!Matched::Union{AbstractPattern, AbstractString}, ::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::AbstractChar,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpq148uemf.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq148uemf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i, digits(lst[i])))\n    end\n    return\
    \ odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppsinozuf.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmppsinozuf.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmppsinozuf.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsinozuf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsinozuf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppsinozuf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::String)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmppsinozuf.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsinozuf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsinozuf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppsinozuf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ztmmra4.jl:14\nin expression starting at\
    \ /tmp/tmp7ztmmra4.jl:14\n"
  stdout: ''
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where each string consists of only digits.\nFor example, [\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] should return [\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1iqc4ut.jl:15\nin expression starting at\
    \ /tmp/tmph1iqc4ut.jl:15\n"
  stdout: ''
  timestamp: 1659979734
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odd_digits += findall(i\
    \ -> i == '1', i)\n    end\n    return odd_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxig6zz6i.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpxig6zz6i.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n\
    \     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{String}, Bs::Vector{Int64})\n\
    \     @ Base ./arraymath.jl:45\n   [4] odd_count(lst::Vector{String})\n     @\
    \ Main /tmp/tmpxig6zz6i.jl:10\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxig6zz6i.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxig6zz6i.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxig6zz6i.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(0),), b\
    \ has dims (Base.OneTo(8),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169\
    \ [inlined]\n   [3] +(A::Vector{Union{}}, Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n\
    \   [4] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpxig6zz6i.jl:10\n \
    \  [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxig6zz6i.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxig6zz6i.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxig6zz6i.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of "
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_digits[findall(str\
    \ .== \"0\")] = length(findall(str .== \"0\"))\n    end\n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit0jl73e.jl:14\nin expression starting at\
    \ /tmp/tmpit0jl73e.jl:14\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n    end\n   \
    \ return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuxzchxb8.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpuxzchxb8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpuxzchxb8.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuxzchxb8.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuxzchxb8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuxzchxb8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odd_count_list[i] = length(findall(i\
    \ .== \"0\"))\n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mtdtg0g.jl:14\nin expression starting at\
    \ /tmp/tmp_mtdtg0g.jl:14\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfmw73nvm.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpfmw73nvm.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpfmw73nvm.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpfmw73nvm.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfmw73nvm.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfmw73nvm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfmw73nvm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25_g2245.jl:10\nin expression starting at\
    \ /tmp/tmp25_g2245.jl:10\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, i)\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"23\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsbjx2n6.jl:14\nin expression starting at\
    \ /tmp/tmpcsbjx2n6.jl:14\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   \n    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkxt69ywi.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpkxt69ywi.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpkxt69ywi.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpkxt69ywi.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpkxt69ywi.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpkxt69ywi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkxt69ywi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(string(i) .== \"0\"))\n    end\n    return odd_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvgt4jx3i.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvgt4jx3i.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpvgt4jx3i.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvgt4jx3i.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvgt4jx3i.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvgt4jx3i.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, 0)\n    for i in lst\n        odd_count_list\
    \ = append(odd_count_list, length(findall(i, digits_only)))\n    end\n    return\
    \ odd_count_list\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb1zcos84.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpb1zcos84.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: digits_only not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpb1zcos84.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1zcos84.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1zcos84.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpb1zcos84.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: digits_only not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpb1zcos84.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1zcos84.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1zcos84.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpb1zcos84.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ digits_only not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpb1zcos84.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1zcos84.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odd_count_list = append(odd_count_list,length(findall(i,\
    \ digits_only)))\n    end\n    return odd_count_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppsktihpl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmppsktihpl.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: digits_only not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmppsktihpl.jl:10\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsktihpl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsktihpl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppsktihpl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: digits_only not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmppsktihpl.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsktihpl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsktihpl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppsktihpl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ digits_only not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmppsktihpl.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsktihpl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i in 1:length(lst)\n        odd_count[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmprqjq5dgf.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmprqjq5dgf.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Float64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Float64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Float64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Float64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] odd_count(lst::Vector{String})\n      @ Main /tmp/tmprqjq5dgf.jl:13\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmprqjq5dgf.jl:20 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmprqjq5dgf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprqjq5dgf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Float64 to an object of type\
    \ String\n  Clo"
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = sum(map(x -> isodd(x), lst[i]))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30s43478.jl:15\nin expression starting at\
    \ /tmp/tmp30s43478.jl:15\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnjd05p61.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpnjd05p61.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpnjd05p61.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpnjd05p61.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnjd05p61.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnjd05p61.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnjd05p61.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979724
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_vec\
    \ = []\n    for i in lst\n        odd_count_vec += findall(i -> i == '1', i)\n\
    \    end\n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of strings as an argument\
    \ and returns a list of strings where each string consists of only digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjbfax0h.jl:14\nin expression starting at\
    \ /tmp/tmpfjbfax0h.jl:14\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}(undef,0)\n    for i in lst\n        odds = append!(odds,count(i))\
    \ \n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nFor example, if the input string is \"abc\", the output should\
    \ be 3.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajpuvi6u.jl:15\nin expression starting at\
    \ /tmp/tmpajpuvi6u.jl:15\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits += findall(i .== \"\
    0\", i).length\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns a string\
    \ where all the characters that are not digits have been replaced by \"#\".\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfinnfk40.jl:14\nin expression starting at\
    \ /tmp/tmpfinnfk40.jl:14\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[str2double(str)]=sum(str==\"\
    1\") for str in str\n    end\n    return odd_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppq9gyyyn.jl:9 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppq9gyyyn.jl:10\n\
    in expression starting at /tmp/tmppq9gyyyn.jl:10\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for i in lst\n        odd_count_list[i]\
    \ = length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_count_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpulex8stn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpulex8stn.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpulex8stn.jl:11\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpulex8stn.jl:11\n \
    \  [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpulex8stn.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpulex8stn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpulex8stn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpulex8stn.jl:11\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpulex8stn.jl:11\n \
    \  [4] macro expans"
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(map(x -> isodd(x), lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of strings as input and returns a list where each element is the sum\
    \ of the lengths of the strings in the input list. For example, [\"a\", \"b\"\
    , \"c\"] should return [3, 3, 4].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfg2uvqy.jl:14\nin expression starting at\
    \ /tmp/tmpxfg2uvqy.jl:14\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfmw73nvm.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpfmw73nvm.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpfmw73nvm.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpfmw73nvm.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfmw73nvm.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfmw73nvm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfmw73nvm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifpxszw7.jl:15\nin expression starting at\
    \ /tmp/tmpifpxszw7.jl:15\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = sum(isodd(lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpritxsx6t.jl:15\nin expression starting at\
    \ /tmp/tmpritxsx6t.jl:15\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ -> i == '1', i)\n    end\n    odd_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7_77q3ma.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp7_77q3ma.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n\
    \     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64}, Bs::Vector{Int64})\n\
    \     @ Base ./arraymath.jl:45\n   [4] odd_count(lst::Vector{String})\n     @\
    \ Main /tmp/tmp7_77q3ma.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7_77q3ma.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7_77q3ma.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7_77q3ma.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(0),), b\
    \ has dims (Base.OneTo(8),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169\
    \ [inlined]\n   [3] +(A::Vector{Int64}, Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n\
    \   [4] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp7_77q3ma.jl:11\n \
    \  [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7_77q3ma.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7_77q3ma.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7_77q3ma.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the"
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6vksc2k.jl:14\nin expression starting at\
    \ /tmp/tmpz6vksc2k.jl:14\n"
  stdout: ''
  timestamp: 1659979737
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in that string that are uppercase\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlj81o6g.jl:14\nin expression starting at\
    \ /tmp/tmpzlj81o6g.jl:14\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits += findall(i .== \"\
    0\", i) == 0 ? [] : findall(i == 0, i)\n    end\n    return odd_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwfwnktnl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwfwnktnl.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Bool,\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwfwnktnl.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwfwnktnl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwfwnktnl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwfwnktnl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Bool, ::String)\n  Closest candidates\
    \ are:\n    findall(!Matched::Union{AbstractPattern, AbstractString}, ::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::AbstractChar,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwfwnktnl.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwfwnktnl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = []\n    for i in lst\n        odd_count_list.append(count(i,\
    \ \"^\"))\n    end\n    return odd_count_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9c1ufsxy.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9c1ufsxy.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp9c1ufsxy.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9c1ufsxy.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9c1ufsxy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9c1ufsxy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  type Array has no field append\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp9c1ufsxy.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9c1ufsxy.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9c1ufsxy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9c1ufsxy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  type\
    \ Array has no field append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp9c1ufsxy.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tm"
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i, \"\
    ^[0-9]+$\"))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72oawtkv.jl:10\nin expression starting at\
    \ /tmp/tmp72oawtkv.jl:10\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = length(findall(string(i) .== \"0\"))\n    end\n    return odd_count\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2037c6s2.jl:15\nin expression starting at\
    \ /tmp/tmp2037c6s2.jl:15\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings as input and returns a vector of strings as output.\nEach\
    \ element of the output should be \"the number of even elements in the string\
    \ of the input.\" where all the strings in the input should be replaced by the\
    \ number of even elements in the string of the input.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo62he6er.jl:14\nin expression starting at\
    \ /tmp/tmpo62he6er.jl:14\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(strsplit(lst[i], \"\")[[1]] .== \"0\")\n    end\n    return odd_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpie7ctfmr.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpie7ctfmr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpie7ctfmr.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie7ctfmr.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie7ctfmr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpie7ctfmr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpie7ctfmr.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie7ctfmr.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie7ctfmr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpie7ctfmr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpie7ctfmr.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie7ctfmr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for str in lst\n        odd_digits += findall(str) do\
    \ i\n            digit = digits(i)\n            digit.count(digit.last)\n    \
    \    end\n    end\n    return odd_digits\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpo9u23xwb.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpo9u23xwb.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::Char)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(i::Char)\n      @ Main /tmp/tmpo9u23xwb.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpo9u23xwb.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpo9u23xwb.jl:22 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpo9u23xwb.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo9u23xwb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching digits(::Char)\n  Closest candidates are:\n\
    \    digits(!Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n\
    \    digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n    [1]"
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str\
    \ -> str == \"1\", str))\n    end\n    return odd_count_str\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpztam5p87.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpztam5p87.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpztam5p87.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpztam5p87.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpztam5p87.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpztam5p87.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching +(::String, ::Int64)\n  Closest candidates\
    \ are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpztam5p87.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Tes"
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    \n    for i in lst\n        odds = append!(odds,\
    \ count(i, \"0\"))\n    end\n    \n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are digits.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rlxj8ub.jl:17\nin expression starting at\
    \ /tmp/tmp1rlxj8ub.jl:17\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = []\n    for str in lst\n        odd_count_list.append(length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_count_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp66ozo02x.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp66ozo02x.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp66ozo02x.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp66ozo02x.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp66ozo02x.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp66ozo02x.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  type Array has no field append\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp66ozo02x.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp66ozo02x.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp66ozo02x.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp66ozo02x.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  type\
    \ Array has no field append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp66ozo02x.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tm"
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[findall(str\
    \ .== \"0\")] = length(findall(str .== \"0\"))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov0pc8p5.jl:14\nin expression starting at\
    \ /tmp/tmpov0pc8p5.jl:14\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_digits[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqgefneos.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpqgefneos.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpqgefneos.jl:10\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpqgefneos.jl:10\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpqgefneos.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpqgefneos.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpqgefneos.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    \n    for i in lst\n      \
    \  odd_count_list = append(odd_count_list,length(filter(x -> x==1, i)))\n    end\n\
    \    \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyg2jjcnk.jl:17\nin expression starting at\
    \ /tmp/tmpyg2jjcnk.jl:17\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(map(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of integers where the ith element is\
    \ the length of the longest string in the vector that begins with the ith element\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzijyeean.jl:15\nin expression starting at\
    \ /tmp/tmpzijyeean.jl:15\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_digits\
    \ = Vector{String}()\n    for s in lst\n        odd_digits = union(odd_digits,\
    \ findall(x -> x % 2 != 0, s))\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvkx0kik.jl:14\nin expression starting at\
    \ /tmp/tmprvkx0kik.jl:14\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcat(count_odd_digits(str), \" \"))\n    end\n    odd_count_str = odd_count_str[1:end]\n\
    \    return split(odd_count_str, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl_voqbjx.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpl_voqbjx.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpl_voqbjx.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_voqbjx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_voqbjx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl_voqbjx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpl_voqbjx.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_voqbjx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_voqbjx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl_voqbjx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpl_voqbjx.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_voqbjx.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x == '1', lst[i]))\n    end\n    return odd_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpej0v8i2r.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpej0v8i2r.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpej0v8i2r.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpej0v8i2r.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpej0v8i2r.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpej0v8i2r.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] odd_count(lst::Vector{String})\n     @ Main\
    \ /t"
  timestamp: 1659979742
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(string(i) .== \"0\"))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx2i8z66.jl:15\nin expression starting at\
    \ /tmp/tmpqx2i8z66.jl:15\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = sum(map(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_count\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of strings as input and returns a list of strings where each string consists\
    \ of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp153ahqxc.jl:15\nin expression starting at\
    \ /tmp/tmp153ahqxc.jl:15\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpddsh_h8y.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpddsh_h8y.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpddsh_h8y.jl:11\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpddsh_h8y.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpddsh_h8y.jl:20 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpddsh_h8y.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpddsh_h8y.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matche"
  timestamp: 1659979742
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0m5cpsg.jl:10\nin expression starting at\
    \ /tmp/tmpq0m5cpsg.jl:10\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_str\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_str[i]\
    \ = length(findall(i, lst)) - length(findall(i, lst)%2)\n    end\n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt_5k0drd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpt_5k0drd.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Int64,\
    \ ::Vector{String})\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpt_5k0drd.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_5k0drd.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt_5k0drd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpt_5k0drd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Int64, ::Vector{String})\n  Closest\
    \ candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2426\n    findall(!Matched::Function,\
    \ ::AbstractArray) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2257\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpt_5k0drd.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_5k0drd.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659979742
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfseruwl_.jl:15\nin expression starting at\
    \ /tmp/tmpfseruwl_.jl:15\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count_list\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(i .== \"0\", lst[i]))\n    end\n    return odd_count_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqrge2kcg.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpqrge2kcg.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching findall(::Bool,\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpqrge2kcg.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrge2kcg.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrge2kcg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpqrge2kcg.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching findall(::Bool, ::String)\n  Closest candidates\
    \ are:\n    findall(!Matched::Union{AbstractPattern, AbstractString}, ::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::AbstractChar,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpqrge2kcg.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrge2kcg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659979742
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odds\
    \ = zeros(Int, length(lst))\n    for i = 1:length(lst)\n        odds[i] = sum(isodd(lst[i]))\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given\
    \ a list of strings, where each string consists of only digits, return a list.\n\
    \    Each element i of the output should be \"the number of even elements in the\n\
    \    string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_no56mdw.jl:14\nin expression starting at\
    \ /tmp/tmp_no56mdw.jl:14\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list\
    \ = append!(odd_count_list,length(findall(str,\"[0-9]\"))) \n    end\n    return\
    \ odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgie5_1_.jl:15\nin expression starting at\
    \ /tmp/tmpfgie5_1_.jl:15\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(string(i) .== \"0\"))\n    end\n \
    \   odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nx86rfg.jl:15\nin expression starting at\
    \ /tmp/tmp5nx86rfg.jl:15\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_count = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i]\
    \ = sum(strsplit(lst[i], \"\")[end].chars.filter(x -> x == '1'))\n    end\n  \
    \  return odd_count\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector where each element is the length of\
    \ the longest string in the input vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvfa0fsw.jl:15\nin expression starting at\
    \ /tmp/tmpdvfa0fsw.jl:15\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for str in lst\n        odds = append(odds,\
    \ count_odd_digits(str))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2_21c1.jl:15\nin expression starting at\
    \ /tmp/tmpmh2_21c1.jl:15\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_count\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_count[i] = length(findall(x\
    \ -> x % 2 != 0, lst[i]))\n    end\n    return odd_count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ as input a vector of strings, and returns a vector of the number of characters\
    \ in each string in the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfh1yv1h.jl:14\nin expression starting at\
    \ /tmp/tmpkfh1yv1h.jl:14\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yp7idmc.jl:15\nin expression starting at\
    \ /tmp/tmp7yp7idmc.jl:15\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each element\
    \ is the string formed by concatenating the first character of each string in\
    \ the input vector. For example, [\"a\", \"b\", \"c\"] -> [\"a\", \"b\", \"c\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1htxoze.jl:10\nin expression starting at\
    \ /tmp/tmpc1htxoze.jl:10\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits = union(odd_digits,\
    \ count(digits(i)))\n    end\n    \n    return odd_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaq6pk10v.jl:16\nin expression starting at\
    \ /tmp/tmpaq6pk10v.jl:16\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odds = Vector{String}()\n    for i in lst\n        odds = append(odds, count(i,\
    \ \"odd\"))\n    end\n    return odds\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppykunait.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmppykunait.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: append not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmppykunait.jl:11\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppykunait.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppykunait.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppykunait.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: append not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmppykunait.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppykunait.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppykunait.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppykunait.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n \
    \    @ Main /tmp/tmppykunait.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppykunait.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  timestamp: 1659979742
- exit_code: 1
  program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n      \
    \      \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n    \n\
    \    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of strings and returns a list of\
    \ strings where each string consists of only digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp445ohpsb.jl:15\nin expression starting at\
    \ /tmp/tmp445ohpsb.jl:15\n"
  stdout: ''
  timestamp: 1659979741
