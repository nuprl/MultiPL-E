name: HumanEval_134_check_if_last_char_is_a_letter
language: jl
prompt: "\"\"\"\n    Create a function that returns True if the last character\n \
  \   of a given string is an alphabetical character and is not\n    a part of a word,\
  \ and False otherwise.\n    Note: \"word\" is a group of characters separated by\
  \ space.\n\n    Examples:\n                    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
  \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
  \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"\
  Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
  \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple\
  \ pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
completions: ["    txt = txt.trim()\n    if txt.length == 0 \n        return false\n\
    \    else if txt.head == txt.tail\n        return true\n    else\n        return\
    \ txt.head.isalpha() && !txt.tail.isalpha()\nend", "    \n    if txt.length ==\
    \ 1\n        return true\n    end\n    \n    if txt[end-1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    txt = txt.trim()\n    if txt.length ==\
    \ 1\n        return true\n    else\n        return txt[txt.length-1] != \" \"\
    \ && txt[txt.length-1] != \".\"\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "    txt = txt.trim()\n    if txt.length == 0 \n   \
    \     return false\n    else if txt[txt.length - 1] == ' ' \n        return true\n\
    \    else if txt[txt.length - 1] == '.' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt.length - 1] == '-' \n        return\
    \ true\n    else if txt[txt.length - 1] == '_' \n        return true\n    else\
    \ if txt[txt.length - 1] == '*' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n", "    \n    if txt.length == 1\n      \
    \  return true\n    end\n    \n    if txt[end-1] == \" \"\n        return false\n\
    \    end\n    \n    if txt[end-1] in string.ascii_letters\n        return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that returns True if the last character\n    of a given\
    \ string is an alphabetical character and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length - 1] == ' ' \n        then return False\n\
    \    else if txt[txt.length - 1] == '.' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '?' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '!' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '_' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '&' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '$' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '&' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '%' \n        then return False\n\
    \    else if txt[txt.length - 1] == '$' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '&' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '*' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        ", "    txt =\
    \ txt.trim()\n    if txt.length == 1\n        return true\n    else\n        return\
    \ txt[txt.length-1] \u2209 \" \" \u2227 txt[txt.length-1] \u2209 \"\\n\"\n   \
    \ end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the last\
    \ character is a digit.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ digits and letters.\n<|/ c |>\n<| a |>\nI wrote this simple function which works\
    \ for me:\n<code>", "    \n    if txt[txt.length - 1] == \" \" \n        then\
    \ return False\n        else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    local last_char = txt[txt.length -1]\n    local is_letter\
    \ = false\n    \n    if last_char == \"a\" or last_char == \"e\" or last_char\
    \ == \"i\" or last_char == \"o\" or last_char == \"u\" then\n        is_letter\
    \ = true\n    end\n    \n    return is_letter\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a vowel, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    \nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\n\"\"\"\n    Create a function that returns True if the last\
    \ character\n    of a given string is an alphabetical character and is not\n \
    \   a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.length == 1\n        return true\n \
    \   end\n    \n    if txt[end-1] == \" \"\n        return false\n    end\n   \
    \ \n    if txt[end-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt[end-1] == \" \" \n        then return False\n\
    \        else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] == \"_\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"-\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"/\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"\\\\\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"!\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"$\" \n        then return False\n    else if txt[txt.length-1] == \"%\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"^\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"&\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"*\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"(\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \")\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"-\" \n        then return False\n    else if txt[txt.length-1] == \"_\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"+\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"=\"\n        then return\
    \ False\n    else if txt[txt.length-1] == \"{\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"}\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"[\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"]\" \n        then return False\n    else if txt[txt.length-1] == \"|\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"~\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"<\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"=\"\n        then return False\n \
    \   else if txt[txt.length-1] == \"{\" \n        then return False\n    else if\
    \ txt[txt.length-1] == \"}\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"[\" \n        then return False\n    else if txt[txt.length-1] == \"]\"\
    \ ", "    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt =\
    \ txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n", "    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length-1] == ' '\n   \
    \     then return False\n    else if txt[txt.length-1] == '.'\n        then return\
    \ False\n    else if txt[txt.length-1] == '?'\n        then return False\n   \
    \ else if txt[txt.length-1] == '!'\n        then return False\n    else if txt[txt.length-1]\
    \ == '-'\n        then return False\n    else if txt[txt.length-1] == '_'\n  \
    \      then return False\n    else if txt[txt.length-1] == '*'\n        then return\
    \ False\n    else if txt[txt.length-1] == '&'\n        then return False\n   \
    \ else if txt[txt.length-1] == '%'\n        then return False\n    else if txt[txt.length-1]\
    \ == '$'\n        then return False\n    else if txt[txt.length-1] == '^'\n  \
    \      then return False\n    else if txt[txt.length-1] == '&'\n        then return\
    \ False\n    else if txt[txt.length-1] == '%'\n        then return False\n   \
    \ else if txt[txt.length-1] == '$'\n        then return False\n    else if txt[txt.length-1]\
    \ == '^'\n        then return False\n    else if txt[txt.length-1] == '&'\n  \
    \      then return False\n    else if txt[txt.length-1] == '%'\n        then return\
    \ False\n    else if txt[txt.length-1] == '$'\n        then return False\n   \
    \ else if txt[txt.length-1] == '^'\n        then return False\n    else if txt[txt.length-1]\
    \ == '&'\n        then return False\n    else if txt[txt.length-1] == '%'\n  \
    \      then return False\n    else if txt[txt.length-1] == '$'\n        then return\
    \ False\n    else if txt[txt.length-1] == '^'\n        then return False\n   \
    \ else if txt[txt.length-1] == '&'\n        then return False\n    else if txt[txt.length-1]\
    \ == '%'\n        then return False\n    else if txt[txt.length-1] == '$'\n  \
    \      then return False\n    else if txt[txt.length-1] == '^'\n        then return\
    \ False\n    else if txt[txt.length-1] == '&'\n        then return False\n   \
    \ else if txt[txt.length-1] == '%'\n        then return False\n    else if txt[txt.length",
  "    \n    local last_char = txt[txt.length -1]\n    local is_letter = false\n \
    \   \n    if last_char == \" \" then\n        return false\n    elseif last_char\
    \ == \"'\" then\n        return false\n    elseif last_char == \"-\" then\n  \
    \      return false\n    elseif last_char == \"_\" then\n        return false\n\
    \    elseif last_char == \"/\" then\n        return false\n    elseif last_char\
    \ == \"[\" then\n        return false\n    elseif last_char == \"]\" then\n  \
    \      return false\n    elseif last_char == \"{\" then\n        return false\n\
    \    elseif last_char == \"}\" then\n        return false\n    elseif last_char\
    \ == \"(\" then\n        return false\n    elseif last_char == \")\" then\n  \
    \      return false\n    elseif last_char == \"%\" then\n        return false\n\
    \    elseif last_char == \"!\" then\n        return false\n    elseif last_char\
    \ == \"?\" then\n        return false\n    elseif last_char == \"<\" then\n  \
    \      return false\n    elseif last_char == \">\" then\n        return false\n\
    \    elseif last_char == \"=\" then\n        return false\n    elseif last_char\
    \ == \"&\" then\n        return false\n    elseif last_char == \"|\" then\n  \
    \      return false\n    elseif last_char == \"+\" then\n        return false\n\
    \    elseif last_char == \"*\" then\n        return false\n    elseif last_char\
    \ == \"?\" then\n        return false\n    elseif last_char == \"^\" then\n  \
    \      return false\n    elseif last_char == \"~\" then\n        return false\n\
    \    elseif last_char == \"?\" then\n        return false\n    elseif last_char\
    \ == \"_\" then\n        return false\n    elseif last_char == \"-\" then\n  \
    \      return false\n    elseif last_char == \"=\" or last_char == \"+\" then\n\
    \        return false\n    elseif last_char == \"|\" then\n        return false\n\
    \    elseif last_char == \"&\" then\n        return false\n    elseif last_char\
    \ == \"<\" then\n        return false\n    elseif last_char == \">\" then\n  \
    \      return false\n    elseif last_char == \"/\" then\n        return false\n\
    \    elseif last_char == \"%\" then\n        return false\n    elseif last_char\
    \ == \"!\" then\n        return false\n    elseif last_char == \"?\" then\n  \
    \      return false\n    elseif last_char == \"{\" then\n        return false\n\
    \    elseif last_char == \"}\" then\n        return false\n    elseif last_char\
    \ == \"[\" then\n        return false\n    elseif last_char == \"]\" then\n  \
    \      return false\n    elseif last_char == \"(\" then\n        return false\n",
  "    \n    lett = txt[end]\n    \n    if lett \u2209 [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.6>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt[length(txt)-1] == ' ' \n        then return False\n\
    \        else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        return false\n\
    \    else if txt[txt.length - 1] == ' ' \n        return true\n    else if txt[txt.length\
    \ - 1] == '-' \n        return false\n    else if txt[txt.length - 1] == '.' \n\
    \        return false\n    else if txt[txt.length - 1] == '!' \n        return\
    \ false\n    else if txt[txt.length - 1] == '?' \n        return false\n    else\
    \ if txt[txt.length - 1] == '\\'' \n        return false\n    else if txt[txt.length\
    \ - 1] == '\\\"' \n        return false\n    else if txt[txt.length - 1] == '('\
    \ \n        return false\n    else if txt[txt.length - 1] == ')' \n        return\
    \ false\n    else if txt[txt.length - 1] == '[' \n        return false\n    else\
    \ if txt[txt.length - 1] == ']' \n        return false\n    else if txt[txt.length\
    \ - 1] == '{' \n        return false\n    else if txt[txt.length - 1] == '}' \n\
    \        return false\n    else if txt[txt.length - 1] == '*' \n        return\
    \ false\n    else if txt[txt.length - 1] == '+' \n        return false\n    else\
    \ if txt[txt.length - 1] == ',' \n        return false\n    else if txt[txt.length\
    \ - 1] == '-' \n        return false\n    else if txt[txt.length - 1] == '.' \n\
    \        return false\n    else if txt[txt.length - 1] == '!' \n        return\
    \ false\n    else if txt[txt.length - 1] == '?' \n        return false\n    else\
    \ if txt[txt.length - 1] == '\\'' \n        return false\n    else if txt[txt.length\
    \ - 1] == '\\\"' \n        return false\n    else if txt[txt.length - 1] == '('\
    \ \n        return false\n    else if txt[txt.length - 1] == ')' \n        return\
    \ false\n    else if txt[txt.length - 1] == '[' \n        return false\n    else\
    \ if txt[txt.length - 1] == ']' \n        return false\n    else if txt[txt.length\
    \ - 1] == '{' \n        return false\n    else if txt[txt.length - 1] == '}' \n\
    \        return false\n    else if txt[txt.length - 1] == '*' \n        return\
    \ false\n    else if txt[txt.length - 1] == '+' \n        return false\n    else\
    \ if txt[txt.length - 1] == ',' \n        return false\n    else if txt[txt.length\
    \ - 1] == '-' \n        return false\n    else if txt[txt.length - 1] == '.' \n\
    \        return false\n    else if txt[txt", "    txt = txt.trim()\n    txt =\
    \ txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n",
  "    \n    if txt[length(txt)-1] == ' ' \n        then return False\n        else\
    \ return True\n    end\nend\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)", "    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n", "    \n   \
    \ txt = txt.trim()\n    \n    if txt.length == 0 \n        then return false\n\
    \    else \n        txt = txt.substring(txt.length - 1)\n        \n        if\
    \ txt.matches(\"[a-zA-Z]+\")\n            then return true\n        else return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    local last_char\
    \ = txt[txt.length - 1]\n    local is_letter = false\n    \n    if last_char ==\
    \ \"a\" or last_char == \"e\" or last_char == \"i\" or last_char == \"o\" or last_char\
    \ == \"u\" then\n        is_letter = true\n    end\n    \n    return is_letter\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    txt = txt.strip()\n    \n    if txt.length == 0\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    for w in txt\n        \n        if\
    \ w.length == 1\n            return false\n        \n        if w[w.length-1]\
    \ == \" \"\n            return false\n        \n        if w[w.length-1] != \"\
    \ \" && w[w.length-1] != \".\" && w[w.length-1] != \"!\"\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    txt = txt.strip() # remove leading and trailing whitespace\n    txt = txt.strip(\"\
    ,.?!\") # remove punctuation\n    txt = txt.strip(\"'\") # remove single quotes\n\
    \    txt = txt.strip(\"!\") # remove exclamation marks\n    txt = txt.strip(\"\
    ;\") # remove semicolons\n    txt = txt.strip(\"$\") # remove dollar signs\n \
    \   txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"^\")\
    \ # remove caret signs\n    txt = txt.strip(\"&\") # remove ampersands\n    txt\
    \ = txt.strip(\"*\") # remove asterisks\n    txt = txt.strip(\"(\") # remove left\
    \ parentheses\n    txt = txt.strip(\")\") # remove right parentheses\n    txt\
    \ = txt.strip(\"_\") # remove underscores\n    txt = txt.strip(\"`\") # remove\
    \ grave accents\n    txt = txt.strip(\"~\") # remove tildes\n    txt = txt.strip(\"\
    [\") # remove left brackets\n    txt = txt.strip(\"]\") # remove right brackets\n\
    \    txt = txt.strip(\"{\") # remove left curly brackets\n    txt = txt.strip(\"\
    }\") # remove right curly brackets\n    txt = txt.strip(\"|\") # remove vertical\
    \ bars\n    txt = txt.strip(\"'\") # remove single quotes\n    txt = txt.strip(\"\
    !\") # remove exclamation marks\n    txt = txt.strip(\";\") # remove semicolons\n\
    \    txt = txt.strip(\"$\") # remove dollar signs\n    txt = txt.strip(\"%\")\
    \ # remove percent signs\n    txt = txt.strip(\"^\") # remove caret signs\n  \
    \  txt = txt.strip(\"&\") # remove ampersands\n    txt = txt.strip(\"*\") # remove\
    \ asterisks\n    txt = txt.strip(\"(\") # remove left parentheses\n    txt = txt.strip(\"\
    )\") # remove right parentheses\n    txt = txt.strip(\"_\") # remove underscores\n\
    \    txt = txt.strip(\"`\") # remove grave accents\n    txt = txt.strip", "  \
    \  txt = txt.trim()\n    if txt.length == 0 \n        return false\n    if txt[txt.length\
    \ - 1] == \" \" \n        return false\n    if txt[txt.length - 1] == \"\\n\"\
    \ \n        return false\n    if txt[txt.length - 1] == \"\\r\" \n        return\
    \ false\n    if txt[txt.length - 1] == \"\\t\" \n        return false\n    if\
    \ txt[txt.length - 1] == \"\\v\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"\\f\" \n        return false\n    if txt[txt.length - 1] == \"\\e\"\
    \ \n        return false\n    if txt[txt.length - 1] == \"\\\"\" \n        return\
    \ false\n    if txt[txt.length - 1] == \"\\'\" \n        return false\n    if\
    \ txt[txt.length - 1] == \"\\\\\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"%\" \n        return false\n    if txt[txt.length - 1] == \"&\" \n\
    \        return false\n    if txt[txt.length - 1] == \"'\" \n        return false\n\
    \    if txt[txt.length - 1] == \"(\" \n        return false\n    if txt[txt.length\
    \ - 1] == \")\" \n        return false\n    if txt[txt.length - 1] == \"*\" \n\
    \        return false\n    if txt[txt.length - 1] == \"+\" \n        return false\n\
    \    if txt[txt.length - 1] == \"-\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"/\" \n        return false\n    if txt[txt.length - 1] == \"=\"\n\
    \        return false\n    if txt[txt.length - 1] == \":\" \n        return false\n\
    \    if txt[txt.length - 1] == \";\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"<\" \n        return false\n    if txt[txt.length - 1] == \">\" \n\
    \        return false\n    if txt[txt.length - 1] == \"?\" \n        return false\n\
    \    if txt[txt.length - 1] == \"[\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"]\" \n        return false\n    if txt[txt.length - 1] == \"^\" \n\
    \        return false\n    if txt[txt.length - 1] == \"_\" \n        return false\n\
    \    if txt[txt.length - 1] == \"`\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"{\" \n        return false\n    if txt[txt.length - 1] == \"|\" \n\
    \        return false\n    if txt[txt.length - 1] == \"}\" \n        return false\n\
    \    if txt[txt.length - 1] == \"~\" \n        return false\n    if txt[txt.length\
    \ - 1] == \"?\" \n        return false\n    if txt[txt.length - 1] == \"|\" \n\
    \        return false\n    if txt[txt.length - 1] == \"\\\\\" \n        return\
    \ false\n    if txt[txt.length - 1] == \"{\" \n        return false\n    if txt",
  "    txt = txt.trim()\n    if txt.length == 1\n        true\n    else\n        if\
    \ txt[txt.length-1] == ' '\n            false\n        else\n            if txt[txt.length-1]\
    \ == '.'\n                false\n            else\n                if txt[txt.length-1]\
    \ == '?'\n                    false\n                else\n                  \
    \  if txt[txt.length-1] == '!'\n                        false\n              \
    \      else\n                        if txt[txt.length-1] == ';'\n           \
    \                 false\n                        else\n                      \
    \      if txt[txt.length-1] == ':'\n                                false\n  \
    \                          else\n                                if txt[txt.length-1]\
    \ == '\"'\n                                    false\n                       \
    \         else\n                                    if txt[txt.length-1] == '('\n\
    \                                        false\n                             \
    \       else\n                                        if txt[txt.length-1] ==\
    \ ')'\n                                            false\n                   \
    \                     else\n                                            if txt[txt.length-1]\
    \ == '['\n                                                false\n            \
    \                                else\n                                      \
    \          if txt[txt.length-1] == ']'\n                                     \
    \               false\n                                                else\n\
    \                                                    if txt[txt.length-1] == '{'\n\
    \                                                        false\n             \
    \                                       else\n                               \
    \                         if txt[txt.length-1] == '}'\n                      \
    \                                      false\n                               \
    \                         else\n                                             \
    \               true\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\nI wanted to add another answer because I thought it would be helpful to\
    \ see a more Julian way of doing this (I find it easier to read and understand\
    \ than a lot of if/else statements). \n<code>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    letters = txt[end-1]\n    \n    if letters\
    \ in \"abcdefghijklmnopqrstuvwxyz\"\n        && letters !in \"aeiou\"\n      \
    \  && letters !in \"qwertyuiopasdfghjklzxcvbnm\"\n        && letters !in \"z\"\
    \n        && letters !in \"0\"\n        && letters !in \"1\"\n        && letters\
    \ !in \"2\"\n        && letters !in \"3\"\n        && letters !in \"4\"\n    \
    \    && letters !in \"5\"\n        && letters !in \"6\"\n        && letters !in\
    \ \"7\"\n        && letters !in \"8\"\n        && letters !in \"9\"\n        &&\
    \ letters !in \" \"\n        && letters !in \"-\"\n        && letters !in \"@\"\
    \n        && letters !in \"#\"\n        && letters !in \"$\"\n        && letters\
    \ !in \"~\"\n        && letters !in \"|\"\n        && letters !in \"/\"\n    \
    \    && letters !in \"\\\\\"\n        && letters !in \"*\"\n        && letters\
    \ !in \"?\"\n        && letters !in \"!\"\n        && letters !in \"=\"\n    \
    \    && letters !in \"+\"\n        && letters !in \"(\"\n        && letters !in\
    \ \")\"\n        && letters !in \"[\"\n        && letters !in \"]\"\n        &&\
    \ letters !in \"{\"\n        && letters !in \"}\"\n        && letters !in \"|\"\
    \n        && letters !in \"/\"\n        && letters !in \"\\\\\"\n        && letters\
    \ !in \"*\"\n        && letters !in \"?\"\n        && letters !in \"!\"\n    \
    \    && letters !in \"=\"\n        && letters !in \"+\"\n        && letters !in\
    \ \"(\"\n        && letters !in \")\"\n        && letters !in \"[\"\n        &&\
    \ letters !in \"]\"\n        && letters !in \"{\"\n        && letters !in \"}\"\
    \n        && letters !in \"|\"\n        && letters !in \"/\"\n        && letters\
    \ !in \"\\\\\"\n        && letters !in ", "    \n    if txt.length == 1\n    \
    \    return true\n    end\n    \n    last = txt[end-1]\n    \n    if last in string.ascii_letters\n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    txt = txt.strip()\n\
    \    \n    if txt.ends_with?(\" \")\n        txt = txt.strip(\" \")\n    end\n\
    \    \n    txt = txt.strip(\" \")\n    \n    if txt.ends_with?(\" \")\n      \
    \  txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n     \
    \   txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n    \
    \    txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n   \
    \     txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n  \
    \      txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n \
    \       txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    end\n    \n    if txt.ends_with?", "    \n\
    \    if txt[end-1] in string.ascii_letters \n        and not txt[end-1] in string.ascii_uppercase\n\
    \        and not txt[end-1] in string.ascii_lowercase\n        and not txt[end-1]\
    \ in string.punctuation\n        and not txt[end-1] in string.digits\n       \
    \ and not txt[end-1] in string.whitespace\n        and not txt[end-1] in string.digits\n\
    \        and not txt[end-1] in string.whitespace\n        and not txt[end-1] in\
    \ string.digits\n        and not txt[end-1] in string.whitespace\n        and\
    \ not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end", "    \n    \n    \nend\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"\"\"\n    Create a function that returns True\
    \ if the last character\n    of a given string is an alphabetical character and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 0 \n        return false\n    \n    if txt[txt.length - 1] == ' ' \n    \
    \    return true\n    \n    if txt[txt.length - 1] == '.' \n        return true\n\
    \    \n    if txt[txt.length - 1] == '?' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == '!' \n        return true\n    \n    if txt[txt.length - 1] == '-' \n\
    \        return true\n    \n    if txt[txt.length - 1] == '_' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == '/' \n        return true\n    \n\
    \    if txt[txt.length - 1] == '\\\\' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == '@' \n        return true\n    \n    if txt[txt.length - 1] == '$' \n\
    \        return true\n    \n    if txt[txt.length - 1] == '%' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == '^' \n        return true\n    \n\
    \    if txt[txt.length - 1] == '&' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == '*' \n        return true\n    \n    if txt[txt.length - 1] == '('\n\
    \        return true\n    \n    if txt[txt.length - 1] == ')' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == '+' \n        return true\n    \n\
    \    if txt[txt.length - 1] == '-' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == '=' \n        return true\n    \n    if txt[txt.length - 1] == '[' \n\
    \        return true\n    \n    if txt[txt.length - 1] == ']' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == ',' \n        return true\n    \n\
    \    if txt[txt.length - 1] == ';' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == ':' \n        return true\n    \n    if txt[txt.length - 1] == '<' \n\
    \        return true\n    \n    if txt[txt.length - 1] == '>' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == '?' \n        return true\n    \n\
    \    if txt[txt.length - 1] == '|' \n        return true\n    \n    if txt[txt.length\
    \ - 1] == '\"' \n        return true\n    \n    if txt[txt.length - 1] == '\\\
    '' \n        return true\n    \n    if txt[txt.length - 1] == '{' \n        return\
    \ true\n    \n    if txt[txt.length - 1] == '}' \n        return true\n    \n\
    \    if txt[txt.length - 1] == '~' \n        return true", "    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n",
  "    txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n       \
    \ if txt.last == ' ' || txt.last == '.'\n            false\n        else\n   \
    \         if txt.last == ','\n                false\n            else\n      \
    \          if txt.last == '?'\n                    false\n                else\n\
    \                    if txt.last == '!'\n                        false\n     \
    \               else\n                        if txt.last == ';'\n           \
    \                 false\n                        else\n                      \
    \      if txt.last == ':'\n                                false\n           \
    \                 else\n                                if txt.last == ';'\n \
    \                                   false\n                                else\n\
    \                                    if txt.last == '!'\n                    \
    \                    false\n                                    else\n       \
    \                                 if txt.last == '?'\n                       \
    \                     false\n                                        else\n  \
    \                                          if txt.last == '.'\n              \
    \                                  false\n                                   \
    \         else\n                                                if txt.last ==\
    \ ','\n                                                    false\n           \
    \                                     else\n                                 \
    \                   if txt.last == ';'\n                                     \
    \                   false\n                                                  \
    \  else\n                                                        if txt.last ==\
    \ ':'\n                                                            false\n   \
    \                                                     else\n                 \
    \                                           if txt.last == ';'\n             \
    \                                                   false\n                  \
    \                                          else\n                            \
    \                                    if txt.last == '!'\n                    \
    \                                                false\n                     \
    \                                               else\n                       \
    \                                 if txt.last == '?'\n                       \
    \                                     false\n                                \
    \                        else\n                                              \
    \              if txt.last == '.'\n                                          \
    \                      false\n                                               \
    \             else\n                                                         \
    \       if txt.last == ','\n                                                 \
    \                   false\n                                                  \
    \                  else\n                                                    \
    \    if txt.last == ';'\n                                                    \
    \            false\n                                                         \
    \           else\n                                                        if txt.last\
    \ == '!'\n                                                                false\n\
    \                                                                    else\n  \
    \                                                      if txt.last == '?'\n  \
    \                                                          false\n           \
    \                                                         else\n             \
    \                                           if txt.last == '.'\n             \
    \                                                   false\n                  \
    \                                                  else\n                    \
    \                                    if txt.last == ','\n                    \
    \                                            false\n                         \
    \                                           else\n                           \
    \                             if txt.last == ';'\n                           \
    \                                     false\n                                \
    \                                    else\n                                  \
    \                      if txt.last == '!'\n                                  \
    \                              false\n                                       \
    \                             else\n                                         \
    \               if txt.last == '?'\n                                         \
    \                   false\n                                                  \
    \                  else\n                                                    \
    \    if txt.last == '.'\n                                                    \
    \            false\n                                                         \
    \           else\n                                                        if txt.last\
    \ == ','\n                                                                false\n\
    \                                                                    else\n  \
    \                                                      if txt.last == ';'\n  \
    \                                                              false\n       \
    \                                                             else\n         \
    \                                               if txt.last == '!'\n         \
    \                                                       false\n              \
    \                                                      else\n                \
    \                                        if txt.last == '?'\n                \
    \                                            false\n                         \
    \                                           else\n                           \
    \                             if txt.last == '.'\n                           \
    \                                     false\n                                \
    \                                    else\n                                  \
    \                      if txt.last == ','\n                                  \
    \                              false\n                                       \
    \                             else\n                                         \
    \               if ", "    \n    txt = txt.trim()\n    \n    if txt.length ==\
    \ 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '^' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '&' \n        then return False\n\
    \    else if txt[txt.length - 1] == '*' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '('\n        then return False\n    else if txt[txt.length\
    \ - 1] == ')' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '+' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '=' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '|' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '/' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\\\' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '&' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '*' \n        then return False\n    else if txt[txt.length - 1] == '('\n  \
    \      then return False\n", "    \n    if txt[length(txt)-1] == ' ' \n      \
    \  then return False\n        else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if txt.length == 1\n        return\
    \ true\n    end\n    \n    if txt[end-1] == \" \"\n        return false\n    end\n\
    \    \n    if txt[end-1] in \"abcdefghijklmnopqrstuvwxyz\"\n        return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 1\n        return true\n    else\n        return txt[txt.length-1]\
    \ == \" \"\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>",
  "    txt = txt.trim()\n    if txt.length == 0 \n        true\n    else\n       \
    \ txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length -\
    \ 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length - 1] == '/' || txt[txt.length\
    \ - 1] == '\\\\' || txt[txt.length - 1] == '@' || txt[txt.length - 1] == '#' ||\
    \ txt[txt.length - 1] == '$' || txt[txt.length - 1] == '%' || txt[txt.length -\
    \ 1] == '^' || txt[txt.length - 1] == '&' || txt[txt.length - 1] == '*' || txt[txt.length\
    \ - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length\
    \ - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length\
    \ - 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length - 1] == '`' || txt[txt.length\
    \ - 1] == '?' || txt[txt.length - 1] == '\"' || txt[txt.length - 1] == '<' ||\
    \ txt[txt.length - 1] == '>' || txt[txt.length - 1] == '{' || txt[txt.length -\
    \ 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length\
    \ - 1] == '`' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '\"' ||\
    \ txt[txt.length - 1] == '<' || txt[txt.length - 1] == '>' || txt[txt.length -\
    \ 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length\
    \ - 1] == '~' || txt[txt.length - 1] == '`' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '\"' || txt[txt.length - 1] == '<' || txt[txt.length - 1] == '>' ||\
    \ txt[txt.length - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length -\
    \ 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length - 1] == '`' || txt[txt.length\
    \ - 1] == '?' || txt[txt.length - 1] == '\"' || txt[txt.length - 1] == '<' ||\
    \ txt[txt.length - 1] == '>' || txt[txt.length - 1] == '{' || txt[txt.length -\
    \ 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length\
    \ - 1] == '`' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '\"' ||\
    \ txt[txt.length - 1] == '<' || txt[txt.length", "    \n    txt = txt.strip()\n\
    \    \n    if txt.ends_with?(\" \")\n        txt = txt.drop(txt.size - 1)\n  \
    \  end\n    \n    if txt.ends_with?(\"a\")\n        txt = txt.drop(txt.size -\
    \ 1)\n    end\n    \n    if txt.ends_with?(\"A\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"e\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"E\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"i\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"I\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"o\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"O\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"u\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"U\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"y\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"Y\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"s\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"S\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"d\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"D\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"h\")\n        txt = txt.drop(txt.size\
    \ - 1)\n    end\n    \n    if txt.ends_with?(\"H\")\n        txt = txt.drop(txt.",
  "    \n    lets = string.ascii_letters\n    words = string.split(txt, \" \")\n \
    \   \n    for w in words\n        if w in lets\n            return false\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"\"\"\n    Create a function that returns True\
    \ if the last character\n    of a given string is an alphabetical character and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    local last_char = txt[txt.length - 1]\n\
    \    \n    if last_char == \" \" then\n        return true\n    elseif last_char\
    \ == \"_\" then\n        return true\n    elseif last_char == \"-\" then\n   \
    \     return true\n    elseif last_char == \"'\" then\n        return true\n \
    \   elseif last_char == \"!\" then\n        return true\n    elseif last_char\
    \ == \"?\" then\n        return true\n    elseif last_char == \",\" then\n   \
    \     return true\n    elseif last_char == \"-\" then\n        return true\n \
    \   elseif last_char == \"/\" then\n        return true\n    elseif last_char\
    \ == \"[\" then\n        return true\n    elseif last_char == \"]\" then\n   \
    \     return true\n    elseif last_char == \"(\" then\n        return true\n \
    \   elseif last_char == \")\" then\n        return true\n    elseif last_char\
    \ == \"{\" then\n        return true\n    elseif last_char == \"}\" then\n   \
    \     return true\n    elseif last_char == \"[\" then\n        return true\n \
    \   elseif last_char == \"]\" then\n        return true\n    elseif last_char\
    \ == \"(\" then\n        return true\n    elseif last_char == \")\" then\n   \
    \     return true\n    elseif last_char == \"{\" then\n        return true\n \
    \   elseif last_char == \"}\" then\n        return true\n    elseif last_char\
    \ == \"[\" then\n        return true\n    elseif last_char == \"]\" then\n   \
    \     return true\n    elseif last_char == \"(\" then\n        return true\n \
    \   elseif last_char == \")\" then\n        return true\n    elseif last_char\
    \ == \"{\" then\n        return true\n    elseif last_char == \"}\" then\n   \
    \     return true\n    elseif last_char == \"[\" then\n        return true\n \
    \   elseif last_char == \"]\" then\n        return true\n    elseif last_char\
    \ == \"(\" then\n        return true\n    elseif last_char == \")\" then\n   \
    \     return true\n    elseif last_char == \"{\" then\n        return true\n \
    \   elseif last_char == \"}\" then\n        return true\n    elseif last_char\
    \ == \"[\" then\n        return true\n    elseif last_char == \"]\" then\n   \
    \     return true\n    elseif last_char == \"(\" then\n        return true\n \
    \   elseif last_char == \")\" then\n        return true\n    elseif last_char\
    \ == \"{\" then\n        return true\n    elseif last_char == \"}\" then\n   \
    \     return true\n    elseif last_char == \"[\" then\n        return true\n \
    \   elseif last_char == \"]\" then\n        return true\n    elseif last_char\
    \ == \"(\" then\n        return true\n", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        return false\n    if txt[txt.length - 1] == \" \" \n        return\
    \ false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if txt.length ==\
    \ 1\n        return true\n    end\n    \n    if txt[txt.length - 1] in string.ascii_letters\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.ascii_lowercase\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.digits\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.punctuation\n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if txt.length\
    \ == 1\n        return true\n    end\n    \n    if txt[end-1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n        return false\n    end\n    \n    return true\nend", "    \n    if txt.length\
    \ == 1\n        true\n    else\n        txt[txt.length-1] == \" \"\n    end\n\
    end", "    txt = txt.trim()\n    if txt.length == 0 \n        error(\"The input\
    \ string cannot be empty\")\n    end\n    letter = txt[txt.length - 1]\n    letter\
    \ = letter.lower()\n    letter = letter.replace(\" \", \"\")\n    letter = letter.replace(\"\
    ,\", \"\")\n    letter = letter.replace(\"'\", \"\")\n    letter = letter.replace(\"\
    !\", \"\")\n    letter = letter.replace(\"?\", \"\")\n    letter = letter.replace(\"\
    (\", \"\")\n    letter = letter.replace(\")\", \"\")\n    letter = letter.replace(\"\
    [\", \"\")\n    letter = letter.replace(\"]\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    :\", \"\")\n    letter = letter.replace(\";\", \"\")\n    letter = letter.replace(\"\
    -\", \"\")\n    letter = letter.replace(\"_\", \"\")\n    letter = letter.replace(\"\
    +\", \"\")\n    letter = letter.replace(\"/\", \"\")\n    letter = letter.replace(\"\
    %\", \"\")\n    letter = letter.replace(\"^\", \"\")\n    letter = letter.replace(\"\
    &\", \"\")\n    letter = letter.replace(\"*\", \"\")\n    letter = letter.replace(\"\
    (\", \"\")\n    letter = letter.replace(\")\", \"\")\n    letter = letter.replace(\"\
    [\", \"\")\n    letter = letter.replace(\"]\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    :\", \"\")\n    letter = letter.replace(\";\", \"\")\n    letter = letter.replace(\"\
    -\", \"\")\n    letter = letter.replace(\"_\", \"\")\n    letter = letter.replace(\"\
    +\", \"\")\n    letter = letter.replace(\"/\", \"\")\n    letter = letter.replace(\"\
    %\", \"\")\n    letter = letter.replace(\"^\", \"\")\n    letter = letter.replace(\"\
    &\", \"\")\n    letter = letter.replace(\"*\", \"\")\n    letter = letter.replace(\"\
    (\", \"\")\n    letter = letter.replace(\")\", \"\")\n    letter = letter.replace(\"\
    [\", \"\")\n    letter = letter.replace(\"]\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    {\", \"\")\n    letter = letter.replace(\"}\", \"\")\n    letter = letter.replace(\"\
    :\", \"\")\n    letter = letter.replace(\";\", \"\")\n    letter = letter.replace(\"\
    -\", \"\")\n    letter = letter.replace(\"_\", \"\")\n    letter = letter.replace(\"\
    +\", \"\")\n    letter = letter.replace(\"/\", \"\")\n    letter = letter.replace(\"\
    %\", \"\")\n    letter = letter.replace(\"^\", \"\")\n    letter = letter.replace(\"\
    &\", \"\")\n    letter = letter", "    \n    if txt.length == 1\n        return\
    \ true\n    end\n    \n    if txt[end-1] == ' '\n        return false\n    end\n\
    \    \n    if txt[end-1] == '.'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '?'\n        return false\n    end\n    \n    if txt[end-1] == '!'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '-'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '_'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '='\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '&'\n        return false\n    end\n    \n    if txt[end-1] == '%'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '('\n        return false\n\
    \    end\n    \n    if txt[end-1] == ')'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '*'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '+'\n        return false\n    end\n    \n    if txt[end-1] == ','\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '-'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '.'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '/'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == ':'\n        return false\n    end\n    \n    if txt[end-1] == ';'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '<'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '='\n        return false\n    end\n    \n\
    \    if txt[end-1] == '>'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '?'\n        return false\n    end\n    \n    if txt[end-1] == '@'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '['\n        return false\n\
    \    end\n    \n    if txt[end-1] == ']'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '^'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '_'\n        return false\n    end\n    \n    if txt[end-1] == '`'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '{'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '|'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '}'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '~", "    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n   \
    \ txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n", "    \n    if txt[end-1] in string.ascii_letters\
    \ \n        and not txt[end-1] in string.ascii_lowercase\n        and not txt[end-1]\
    \ in string.ascii_uppercase\n        and not txt[end-1] in string.digits\n   \
    \     and not txt[end-1] in string.punctuation\n        and not txt[end-1] in\
    \ string.whitespace\n        and not txt[end-1] in string.digits\n        and\
    \ not txt[end-1] in string.whitespace\n        and not txt[end-1] in string.digits\n\
    \        and not txt[end-1] in string.whitespace\n        and not txt[end-1] in\
    \ string.digits\n        and not txt[end-1] in string.whitespace\n        and\
    \ not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end", "    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '^' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '&' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '+' \n     \
    \   then return False\n    else if txt[txt.length - 1] == '-' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '=' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '>' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '_' \n \
    \       then return False", "    \n    txt = txt.split(\" \")\n    \n    txt =\
    \ txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt\
    \ = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n   \
    \ txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n\
    \    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n  \
    \  \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n", "    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '&' \n        then return False\n    else if txt[txt.length - 1] == '%' \n\
    \        then return False\n    else if txt[txt.length - 1] == '^' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '*' \n        then return False\n\
    \    else if txt[txt.length - 1] == '('\n        then return False\n    else if\
    \ txt[txt.length - 1] == ')' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '=' \n        then return False\n    else if txt[txt.length - 1] == '[' \n \
    \       then return False\n    else if txt[txt.length - 1] == ']' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '{' \n        then return False\n\
    \    else if txt[txt.length - 1] == '}' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '|' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '<' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '>' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '_' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '/' \n        then return False", "    \n    txt = txt.strip()\n   \
    \ \n    if txt.ends_with(' ')\n        return false\n    else\n        return\
    \ txt.ends_with('!')\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns True if the last character\n    of a given\
    \ string is an alphabetical character and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        then return\
    \ False\n    else if txt.head == txt.tail\n        then return False\n    else\n\
    \        let\n            char_at_end = txt.last\n            char_at_start =\
    \ txt.head\n            \n            if char_at_end == char_at_start\n      \
    \          then return False\n            else\n                if char_at_end\
    \ == ' '\n                    then return False\n                else\n      \
    \              if char_at_end == '.'\n                        then return False\n\
    \                    else\n                        if char_at_end == '?'\n   \
    \                         then return False\n                        else\n  \
    \                          if char_at_end == '!'\n                           \
    \     then return False\n                            else\n                  \
    \              if char_at_end == '-'\n                                    then\
    \ return False\n                                else\n                       \
    \             if char_at_end == '_'\n                                        then\
    \ return False\n                                    else\n                   \
    \                     if char_at_end == '='\n                                \
    \            then return False\n                                        else\n\
    \                                            if char_at_end == ';'\n         \
    \                                       then return False\n                  \
    \                          else\n                                            \
    \    if char_at_end == '\"'\n                                                \
    \    then return False\n                                                else\n\
    \                                                    if char_at_end == '#'\n \
    \                                                       then return False\n  \
    \                                                  else\n                    \
    \                                    if char_at_end == '$'\n                 \
    \                                           then return False\n              \
    \                                          else\n                            \
    \                                if char_at_end == '%'\n                     \
    \                                           then return False\n              \
    \                                              else\n                        \
    \                                        if char_at_end == '&'\n             \
    \                                                       then return False\n  \
    \                                                              else\n        \
    \                                                            if char_at_end ==\
    \ '('\n                                                                      \
    \  then return False\n                                                       \
    \             else\n                                                         \
    \                               if char_at_end == ')'\n                      \
    \                                      then return False\n                   \
    \                                     else\n                                 \
    \                           if char_at_end == '*'\n                          \
    \                                      then return False\n                   \
    \                                         else\n                             \
    \                                   if char_at_end == '+'\n                  \
    \                                                  then return False\n       \
    \                                                         else\n             \
    \                                                       if char_at_end == '/'\n\
    \                                                                        then\
    \ return False\n                                                             \
    \       else\n                                                               \
    \         if char_at_end == '('\n                                            \
    \                then return False\n                                         \
    \               else\n                                                       \
    \     if char_at_end == ')'\n                                                \
    \                then return False\n                                         \
    \                   else\n                                                   \
    \             if char_at_end == '*'\n                                        \
    \                            then return False\n                             \
    \                                   else\n                                   \
    \                                 if char_at_end == '+'\n                    \
    \                                                    then return False\n     \
    \                                                               else\n       \
    \                                                                            \
    \     if char_at_end == '/'\n                                                \
    \            then return False\n                                             \
    \           else\n                                                           \
    \ if char_at_end == '('\n                                                    \
    \            then return False\n                                             \
    \               else\n                                                       \
    \         if char_at_end == '%'\n                                            \
    \                        then return False\n                                 \
    \                               else\n                                       \
    \                             if char_at_end == '$'\n                        \
    \                                                then return False\n", "    \n\
    \    if txt.length == 1\n        return true\n    end\n    \n    if txt[end-1]\
    \ == ' '\n        return false\n    end\n    \n    if txt[end-1] == '.'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '?'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '!'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '*'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '&'\n        return false\n    end\n    \n    if txt[end-1] == '('\n    \
    \    return false\n    end\n    \n    if txt[end-1] == ')'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '['\n        return false\n    end\n    \n\
    \    if txt[end-1] == ']'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '{'\n        return false\n    end\n    \n    if txt[end-1] == '}'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '|'\n        return false\n\
    \    end\n    \n    if txt[end-1] == ';'\n        return false\n    end\n    \n\
    \    if txt[end-1] == ':'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '\"'\n        return false\n    end\n    \n    if txt[end-1] == '\\''\n \
    \       return false\n    end\n    \n    if txt[end-1] == '<'\n        return\
    \ false\n    end\n    \n    if txt[end-1] == '>'\n        return false\n    end\n\
    \    \n    if txt[end-1] == '%'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '^'\n        return false\n    end\n    \n    if txt[end-1] == '&'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '%'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '\"'\n        return false\n    end\n   \
    \ \n    if txt[end-1] == '%'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '%'\n        return false\n    end\n    \n    if txt[end-1] == '%'\n    \
    \    return false\n    end\n    \n    if txt[end-1] == '%'\n        return false\n\
    \    end\n    \n    if txt[end-1] == '%'\n        return false\n    end\n    \n\
    \    if txt[end-1] == '%'\n        return false\n    end\n    \n    if txt[end-1]\
    \ == '%'\n        return false\n    end\n    \n    if txt[end-1] == '%'\n    \
    \    return false\n    end\n    ", "    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n\
    \    txt = txt.trim()\n    txt = txt.substring(0,txt.length-1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(0,txt.length-1)", "    \n    if txt.length == 0 \n  \
    \      then return False\n    else if txt[txt.length - 1] == ' ' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False\n    else if txt[txt.length - 1] == '/' \n \
    \       then return False\n    else if txt[txt.length - 1] == '\\\\' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '&' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '('\n        then return False\n \
    \   else if txt[txt.length - 1] == ')' \n        then return False\n    else if\
    \ txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '/' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\\\' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '&' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '[' \n     \
    \   then return False\n    else if txt[txt.length - 1] == ']", "    \n    letters\
    \ = Set{Char}()\n    \n    for char in txt\n        letters.add(char)\n    end\n\
    \    \n    letters.isdisjoint(Set(\"aeiou\"))\nend\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"hello world!!!\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_", "    \n    if txt.length == 0 \n        then return False\n \
    \   else \n        txt[txt.length-1] == ' ' \n            || txt[txt.length-1]\
    \ == '.' \n            || txt[txt.length-1] == '!' \n            || txt[txt.length-1]\
    \ == '?' \n            || txt[txt.length-1] == '-' \n            || txt[txt.length-1]\
    \ == '_'\n            || txt[txt.length-1] == '&' \n            || txt[txt.length-1]\
    \ == '('\n            || txt[txt.length-1] == ')' \n            || txt[txt.length-1]\
    \ == '[' \n            || txt[txt.length-1] == ']' \n            || txt[txt.length-1]\
    \ == '{' \n            || txt[txt.length-1] == '}' \n            || txt[txt.length-1]\
    \ == '|' \n            || txt[txt.length-1] == '\"' \n            || txt[txt.length-1]\
    \ == '\\'' \n            || txt[txt.length-1] == '<' \n            || txt[txt.length-1]\
    \ == '>' \n            || txt[txt.length-1] == '/' \n            || txt[txt.length-1]\
    \ == '\\\\' \n            || txt[txt.length-1] == '@' \n            || txt[txt.length-1]\
    \ == '$' \n            || txt[txt.length-1] == '%' \n            || txt[txt.length-1]\
    \ == '^' \n            || txt[txt.length-1] == '&' \n            || txt[txt.length-1]\
    \ == '*' \n            || txt[txt.length-1] == '+' \n            || txt[txt.length-1]\
    \ == '-' \n            || txt[txt.length-1] == '=' \n            || txt[txt.length-1]\
    \ == '|' \n            || txt[txt.length-1] == '~' \n            || txt[txt.length-1]\
    \ == '`' \n            || txt[txt.length-1] == '|' \n            || txt[txt.length-1]\
    \ == '+' \n            || txt[txt.length-1] == '.' \n            || txt[txt.length-1]\
    \ == '?' \n            || txt[txt.length-1] == '!' \n            || txt[txt.length-1]\
    \ == '-' \n            || txt[txt.length-1] == '_' \n            || txt[txt.length-1]\
    \ == '&' \n            || txt[txt.length-1] == '('\n            || txt[txt.length-1]\
    \ == ')' \n            || txt[txt.length-1] == '[' \n            || txt[txt.length-1]\
    \ == ']' \n            || txt[txt.length-1] == '{' \n            || txt[txt.length-1]\
    \ == '", "    \n    local last_char = txt[txt.length -1]\n    local is_letter\
    \ = false\n    \n    if last_char == \"a\" or last_char == \"e\" or last_char\
    \ == \"i\" or last_char == \"o\" or last_char == \"u\" then\n        is_letter\
    \ = true\n    end\n    \n    return is_letter\nend", "    \n    if txt.length\
    \ == 0 \n        then return false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        then return false\n    elseif txt[txt.length - 1] == \"\\n\" \n     \
    \   then return false\n    elseif txt[txt.length - 1] == \"\\r\" \n        then\
    \ return false\n    elseif txt[txt.length - 1] == \"\\t\" \n        then return\
    \ false\n    elseif txt[txt.length - 1] == \"\\v\" \n        then return false\n\
    \    elseif txt[txt.length - 1] == \"\\f\" \n        then return false\n    elseif\
    \ txt[txt.length - 1] == \"\\e\" \n        then return false\n    elseif txt[txt.length\
    \ - 1] == \"\\\"\" \n        then return false\n    elseif txt[txt.length - 1]\
    \ == \"\\'\" \n        then return false\n    elseif txt[txt.length - 1] == \"\
    \\\\\" \n        then return false\n    elseif txt[txt.length - 1] == \"%\" \n\
    \        then return false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ then return false\n    elseif txt[txt.length - 1] == \"'\" \n        then return\
    \ false\n    elseif txt[txt.length - 1] == \"(\" \n        then return false\n\
    \    elseif txt[txt.length - 1] == \")\" \n        then return false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        then return false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        then return false\n    elseif txt[txt.length - 1] ==\
    \ \".\" \n        then return false\n    elseif txt[txt.length - 1] == \":\" \n\
    \        then return false\n    elseif txt[txt.length - 1] == \"/\" \n       \
    \ then return false\n    elseif txt[txt.length - 1] == \"[\" \n        then return\
    \ false\n    elseif txt[txt.length - 1] == \"]\" \n        then return false\n\
    \    elseif txt[txt.length - 1] == \"?\" \n        then return false\n    elseif\
    \ txt[txt.length - 1] == \"@\" \n        then return false\n    elseif txt[txt.length\
    \ - 1] == \"{\" \n        then return false\n    elseif txt[txt.length - 1] ==\
    \ \"}\" \n        then return false\n    elseif txt[txt.length - 1] == \"~\" \n\
    \        then return false\n    elseif txt[txt.length - 1] == \"|\" \n       \
    \ then return false\n    elseif txt[txt.length - 1] == \"^\" \n        then return\
    \ false\n    elseif txt[txt.length - 1] == \"_\" \n        then return false\n\
    \    elseif txt[txt.length - 1] == \"`\" \n        then return false\n    elseif ",
  "    txt = txt.trim()\n    if txt.length == 0 \n        true\n    else\n       \
    \ if txt[txt.length - 1] == ' ' \n            false\n        else\n          \
    \  if txt[txt.length - 1] == '.' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '/' || txt[txt.length - 1] == '\\\\' || txt[txt.length - 1] == '@' ||\
    \ txt[txt.length - 1] == '#' || txt[txt.length - 1] == '$' || txt[txt.length -\
    \ 1] == '%' || txt[txt.length - 1] == '^' || txt[txt.length - 1] == '&' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length\
    \ - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length\
    \ - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length\
    \ - 1] == '`' || txt[txt.length - 1] == '\"' || txt[txt.length - 1] == '<' ||\
    \ txt[txt.length - 1] == '>' || txt[txt.length - 1] == '?' || txt[txt.length -\
    \ 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '/' || txt[txt.length - 1] == '\\\\' || txt[txt.length - 1] == '@' ||\
    \ txt[txt.length - 1] == '#' || txt[txt.length - 1] == '$' || txt[txt.length -\
    \ 1] == '%' || txt[txt.length - 1] == '^' || txt[txt.length - 1] == '&' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length\
    \ - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length\
    \ - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length - 1] == '~' || txt[txt.length\
    \ - 1] == '`' || txt[txt.length - 1] == '\"' || txt[txt.length - 1] == '<' ||\
    \ txt[txt.length - 1] == '>' || txt[txt.length - 1] == '?' || txt[txt.length -\
    \ 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '/' || txt[txt.length - 1] == '\\\\' || txt[txt.length - 1] == '@' ||\
    \ txt[txt.length - 1] == '#' || txt[txt.length - 1]", "    \n    txt = txt.strip()\n\
    \    \n    if txt.ends_with?(\" \")\n        txt = txt.sub!(\" \", \"\")\n   \
    \ end\n    \n    if txt.ends_with?(\"a\")\n        txt = txt.sub!(\"a\", \"\"\
    )\n    end\n    \n    if txt.ends_with?(\"A\")\n        txt = txt.sub!(\"A\",\
    \ \"\")\n    end\n    \n    if txt.ends_with?(\"e\")\n        txt = txt.sub!(\"\
    e\", \"\")\n    end\n    \n    if txt.ends_with?(\"E\")\n        txt = txt.sub!(\"\
    E\", \"\")\n    end\n    \n    if txt.ends_with?(\"i\")\n        txt = txt.sub!(\"\
    i\", \"\")\n    end\n    \n    if txt.ends_with?(\"I\")\n        txt = txt.sub!(\"\
    I\", \"\")\n    end\n    \n    if txt.ends_with?(\"o\")\n        txt = txt.sub!(\"\
    o\", \"\")\n    end\n    \n    if txt.ends_with?(\"O\")\n        txt = txt.sub!(\"\
    O\", \"\")\n    end\n    \n    if txt.ends_with?(\"u\")\n        txt = txt.sub!(\"\
    u\", \"\")\n    end\n    \n    if txt.ends_with?(\"U\")\n        txt = txt.sub!(\"\
    U\", \"\")\n    end\n    \n    if txt.ends_with?(\"y\")\n        txt = txt.sub!(\"\
    y\", \"\")\n    end\n    \n    if txt.ends_with?(\"Y\")\n        txt = txt.sub!(\"\
    Y\", \"\")\n    end\n    \n    if txt.ends_with?(\"s\")\n        txt = txt.sub!(\"\
    s\", \"\")\n    end\n    \n    if txt.ends_with?(\"S\")\n        txt = txt.sub!(\"\
    S\", \"\")\n    end\n    \n    if txt.ends_with?(\"t\")\n        txt = txt.sub!(\"\
    t\", \"\")\n    end\n    \n    if txt.ends_with?(\"T\")\n        txt = txt.sub!(\"\
    T\", \"\")\n    end\n    \n    if txt.ends_with?(\"h\")\n        txt = txt.sub!(\"\
    h\", \"\")\n    end\n    \n    if txt.ends_with?(\"H\")\n        txt = txt.sub!(\"\
    H\", \"\")\n    end\n    \n    if txt.ends_with?(\"n\")\n        ", "    \n  \
    \  txt = txt.trim()\n    \n    if txt.length == 0 \n        then return False\n\
    \    else \n        if txt[txt.length - 1] == ' ' \n            then return False\n\
    \        else \n            if txt[txt.length - 1] == '.' \n                then\
    \ return False\n            else \n                if txt[txt.length - 1] == '?'\
    \ \n                    then return False\n                else \n           \
    \         if txt[txt.length - 1] == '!' \n                        then return\
    \ False\n                    else \n                        if txt[txt.length\
    \ - 1] == '-' \n                            then return False\n              \
    \          else \n                            if txt[txt.length - 1] == '_' \n\
    \                                then return False\n                         \
    \   else \n                                if txt[txt.length - 1] == '%' \n  \
    \                                  then return False\n                       \
    \         else \n                                    if txt[txt.length - 1] ==\
    \ '&' \n                                        then return False\n          \
    \                          else \n                                        if txt[txt.length\
    \ - 1] == '('\n                                            then return False\n\
    \                                        else \n                             \
    \               if txt[txt.length - 1] == ')' \n                             \
    \                   then return False\n                                      \
    \      else \n                                                if txt[txt.length\
    \ - 1] == '+' \n                                                    then return\
    \ False\n                                                else \n             \
    \                                       if txt[txt.length - 1] == '-' \n     \
    \                                                   then return False\n      \
    \                                              else \n                       \
    \                                 if txt[txt.length - 1] == '/' \n           \
    \                                                 then return False\n        \
    \                                                else \n                     \
    \                                       if txt[txt.length - 1] == '*' \n     \
    \                                                           then return False\n\
    \                                                            else \n         \
    \                                                       if txt[txt.length - 1]\
    \ == '=' \n                                                                  \
    \  then return False\n                                                       \
    \             else \n                                                        if\
    \ txt[txt.length - 1] == '<' \n                                              \
    \              then return False\n                                           \
    \             else \n                                                        \
    \    if txt[txt.length - 1] == '>' \n                                        \
    \                        then return False\n                                 \
    \                           else \n                                          \
    \                      if txt[txt.length - 1] == '?' \n                      \
    \                                              then return False\n           \
    \                                                         else \n            \
    \                                            if txt[txt.length - 1] == '!' \n\
    \                                                            then return False\n\
    \                                                        else \n             \
    \                                               if txt[txt.length - 1] == '|'\
    \ \n                                                                then return\
    \ False\n                                                            else \n \
    \                                                               if txt[txt.length\
    \ - 1] == ';' \n                                                             \
    \       then return False\n                                                  \
    \                  else \n                                                   \
    \     if txt[txt.length - 1] == '#' \n                                       \
    \                     then return False\n                                    \
    \                    else \n                                                 \
    \           if txt[txt.length - 1] == '@' \n                                 \
    \                               then return False\n                          \
    \                                  else \n                                   \
    \                             if txt[txt.length - 1] == '$' \n               \
    \                                                     then return False\n    \
    \                                                                else \n     \
    \                                                   if txt[txt.length - 1] ==\
    \ '%' \n                                                            then return\
    \ False\n                                                        else \n     \
    \                                                       if txt[txt.length - 1]\
    \ == '^' \n                                                                then\
    \ return False", "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n\
    \        then return false\n    else if txt[txt.length - 1] == ' '\n        then\
    \ return false\n    else if txt[txt.length - 1] == '.'\n        then return false\n\
    \    else if txt[txt.length - 1] == '?'\n        then return false\n    else if\
    \ txt[txt.length - 1] == '!'\n        then return false\n    else if txt[txt.length\
    \ - 1] == ':'\n        then return false\n    else if txt[txt.length - 1] == ';'\n\
    \        then return false\n    else if txt[txt.length - 1] == '\"'\n        then\
    \ return false\n    else if txt[txt.length - 1] == '('\n        then return false\n\
    \    else if txt[txt.length - 1] == ')'\n        then return false\n    else if\
    \ txt[txt.length - 1] == '['\n        then return false\n    else if txt[txt.length\
    \ - 1] == ']'\n        then return false\n    else if txt[txt.length - 1] == '{'\n\
    \        then return false\n    else if txt[txt.length - 1] == '}'\n        then\
    \ return false\n    else if txt[txt.length - 1] == '<'\n        then return false\n\
    \    else if txt[txt.length - 1] == '>'\n        then return false\n    else if\
    \ txt[txt.length - 1] == '&'\n        then return false\n    else if txt[txt.length\
    \ - 1] == '%'\n        then return false\n    else if txt[txt.length - 1] == '#'\n\
    \        then return false\n    else if txt[txt.length - 1] == '$'\n        then\
    \ return false\n    else if txt[txt.length - 1] == '^'\n        then return false\n\
    \    else if txt[txt.length - 1] == '&'\n        then return false\n    else if\
    \ txt[txt.length - 1] == '*'\n        then return false\n    else if txt[txt.length\
    \ - 1] == '+'\n        then return false\n    else if txt[txt.length - 1] == '='\n\
    \        then return false\n    else if txt[txt.length - 1] == '|'\n        then\
    \ return false\n    else if txt[txt.length - 1] == '\"'\n        then return false\n\
    \    else if txt[txt.length - 1] == '~'\n        then return false\n    else if\
    \ txt[txt.length - 1] == '?'\n        then return false\n    else if txt[txt.length\
    \ - 1] == '*'\n        then return false\n    else if txt[txt.length - 1] == '/'\n\
    \        then return false", "    txt = txt.trim()\n    if txt.length == 0 \n\
    \        return false\n    if txt[txt.length-1] in string.ascii_letters\n    \
    \    return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n", "    txt = txt.trim()\n    if txt.length == 0 \n        return\
    \ false\n    else \n        return txt[txt.length - 1] \u2209 \" \" \u2227 txt[txt.length\
    \ - 1] \u2209 \"_\" \u2227 txt[txt.length - 1] \u2209 \"-\"\nend\n\"\"\"\n   \
    \ Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == ' ' \n        then return False\n    else if txt[txt.length-1] == '.' \n\
    \        then return False\n    else if txt[txt.length-1] == '?' \n        then\
    \ return False\n    else if txt[txt.length-1] == '!' \n        then return False\n\
    \    else if txt[txt.length-1] == '-' \n        then return False\n    else if\
    \ txt[txt.length-1] == '_' \n        then return False\n    else if txt[txt.length-1]\
    \ == '/' \n        then return False\n    else if txt[txt.length-1] == '\\\\'\
    \ \n        then return False\n    else if txt[txt.length-1] == '@' \n       \
    \ then return False\n    else if txt[txt.length-1] == '$' \n        then return\
    \ False\n    else if txt[txt.length-1] == '%' \n        then return False\n  \
    \  else if txt[txt.length-1] == '^' \n        then return False\n    else if txt[txt.length-1]\
    \ == '&' \n        then return False\n    else if txt[txt.length-1] == '*' \n\
    \        then return False\n    else if txt[txt.length-1] == '('\n        then\
    \ return False\n    else if txt[txt.length-1] == ')' \n        then return False\n\
    \    else if txt[txt.length-1] == '+' \n        then return False\n    else if\
    \ txt[txt.length-1] == '-' \n        then return False\n    else if txt[txt.length-1]\
    \ == '=' \n        then return False\n    else if txt[txt.length-1] == '[' \n\
    \        then return False\n    else if txt[txt.length-1] == ']' \n        then\
    \ return False\n    else if txt[txt.length-1] == '{' \n        then return False\n\
    \    else if txt[txt.length-1] == '}' \n        then return False\n    else if\
    \ txt[txt.length-1] == '|' \n        then return False\n    else if txt[txt.length-1]\
    \ == '~' \n        then return False\n    else if txt[txt.length-1] == '`' \n\
    \        then return False\n    else if txt[txt.length-1] == '\\'' \n        then\
    \ return False\n    else if txt[txt.length-1] == '<' \n        then return False\n\
    \    else if txt[txt.length-1] == '>' \n        then return False", "    \n  \
    \  \n    \nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n@test\
    \ check_if_last_char_is_a_letter(\"\"\"\n    Create a function that returns True\
    \ if the last character\n    of a given string is an alphabetical character and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    local last_char = txt[txt.length\
    \ - 1]\n    local is_letter = false\n    \n    if last_char == \"a\" or last_char\
    \ == \"e\" or last_char == \"i\" or last_char == \"o\" or last_char == \"u\" then\n\
    \        is_letter = true\n    end\n    \n    return is_letter\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    letter(txt)\n    \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length - 1] == ' ' \n        then return False\n\
    \    else if txt[txt.length - 1] == '.' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '?' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '!' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '_' \n \
    \       then return False\n    else if txt[txt.length - 1] == '/' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\\\' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '@' \n        then return False\n\
    \    else if txt[txt.length - 1] == '$' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '%' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '('\n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '=' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '|' \n        then return False\n    else if txt[txt.length - 1] == '[' \n \
    \       then return False\n    else if txt[txt.length - 1] == ']' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '{' \n        then return False\n\
    \    else if txt[txt.length - 1] == '}' \n        then return False\n    else\
    \ if txt[txt.length - 1] == ';' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ':' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\"' \n        then return False\n    else if txt[txt.length - 1] == '\\'' \n\
    \        then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if ", "    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 0 \n        then return false\n    else \n        txt = txt.last\n      \
    \  \n        if txt.isalpha\n            then return true\n        else return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 0 \n        return false\n    \n    if txt[txt.length\
    \ - 1] == ' ' \n        return true\n    \n    letters = txt.split(' ')\n    \n\
    \    for letter in letters \n        if letter == txt[txt.length - 1] \n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a test\")\n</cell>\n<code language=julia-1.5>\n\
    check_if_last_char_is_a_letter(\"This is a ", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        return false\n    else \n        return txt[txt.length-1] \u2209\
    \ \" abcdefghijklmnopqrstuvwxyz\"\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the last character is a digit.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use regex\n<|/ c |>\n<| c |>\nThis doesn't work if the last character\
    \ is a digit.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use regex\n\
    <|/ c |>\n<| a dscore=2 |>\nA simple solution using regex and no loops:\n<code>",
  "    \n    if txt[end-1] == ' ' \n        then return False\n        else return\
    \ True\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt[txt.length - 1] == ' ' \n        then return True\n\
    \        else return False\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n   \
    \     then return False\n    else \n        txt = txt.last\n        if txt ==\
    \ \" \" \n            then return False\n        else if txt == \"_\" \n     \
    \       then return False\n        else if txt == \"-\" \n            then return\
    \ False\n        else if txt == \".\" \n            then return False\n      \
    \  else if txt == \"!\" \n            then return False\n        else if txt ==\
    \ \"?\" \n            then return False\n        else if txt == \";\" \n     \
    \       then return False\n        else if txt == \":\" \n            then return\
    \ False\n        else if txt == \"'\" \n            then return False\n      \
    \  else if txt == \"/\" \n            then return False\n        else if txt ==\
    \ \"(\" \n            then return False\n        else if txt == \")\" \n     \
    \       then return False\n        else if txt == \"[\" \n            then return\
    \ False\n        else if txt == \"]\" \n            then return False\n      \
    \  else if txt == \"{\" \n            then return False\n        else if txt ==\
    \ \"}\" \n            then return False\n        else if txt == \"[\" \n     \
    \       then return False\n        else if txt == \"]\" \n            then return\
    \ False\n        else if txt == \"{\" \n            then return False\n      \
    \  else if txt == \"}\" \n            then return False\n        else if txt ==\
    \ \"<\" \n            then return False\n        else if txt == \">\" \n     \
    \       then return False\n        else if txt == \"/\" \n            then return\
    \ False\n        else if txt == \"\\\\\" \n            then return False\n   \
    \     else if txt == \"|\" \n            then return False\n        else if txt\
    \ == \"&\" \n            then return False\n        else if txt == \"*\" \n  \
    \          then return False\n        else if txt == \"!\" \n            then\
    \ return False\n        else if txt == \"?\" \n            then return False\n\
    \        else if txt == \"=\" \n            then return False\n        else if\
    \ txt == \"+\" \n            then return False\n        else if txt == \"-\" \n\
    \            then return False\n        else if txt == \".\" \n            then\
    \ return False\n        else if txt == \"!\" \n            then return False\n\
    \        else if txt == \"?\" \n            then return False\n        else if\
    \ txt == \";\" \n            then return False\n        else if txt == \":\" \n\
    \            then return False\n        else if txt == \"'\" \n            then\
    \ return False\n        else if txt == \"/\" \n            then return False\n\
    \        else if txt == \"(\" \n            then return False\n        else if\
    \ txt ", "    \n    txt = txt.split(\" \")\n    \n    for word in txt\n      \
    \  if word[end] == word[end - 1]\n            return false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ an alphabetical character and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length\
    \ - 1] == ' ' \n            false\n        else\n            if txt[txt.length\
    \ - 1] == '.' \n                false\n            else\n                if txt[txt.length\
    \ - 1] == '!' \n                    false\n                else\n            \
    \        if txt[txt.length - 1] == '?' \n                        false\n     \
    \               else\n                        if txt[txt.length - 1] == '-' \n\
    \                            false\n                        else\n           \
    \                 if txt[txt.length - 1] == '_' \n                           \
    \     false\n                            else\n                              \
    \  if txt[txt.length - 1] == '*' \n                                    false\n\
    \                                else\n                                    if\
    \ txt[txt.length - 1] == '+' \n                                        false\n\
    \                                    else\n                                  \
    \      if txt[txt.length - 1] == '/' \n                                      \
    \      false\n                                        else\n                 \
    \                           if txt[txt.length - 1] == '('\n                  \
    \                              false\n                                       \
    \     else\n                                                if txt[txt.length\
    \ - 1] == ')' \n                                                    false\n  \
    \                                              else\n                        \
    \                            if txt[txt.length - 1] == '[' \n                \
    \                                        false\n                             \
    \                       else\n                                               \
    \         if txt[txt.length - 1] == ']' \n                                   \
    \                         false\n                                            \
    \            else\n                                                          \
    \  if txt[txt.length - 1] == '\"' \n                                         \
    \                       false\n                                              \
    \              else\n                                                        \
    \        if txt[txt.length - 1] == '\\'' \n                                  \
    \                                  false\n                                   \
    \                             else\n                                         \
    \                           if txt[txt.length - 1] == '#' \n                 \
    \                                                       false\n              \
    \                                                      else\n                \
    \                                        if txt[txt.length - 1] == '%' \n    \
    \                                                            false\n         \
    \                                                   else\n                   \
    \                                             if txt[txt.length - 1] == '&' \n\
    \                                                                    false\n \
    \                                                               else\n       \
    \                                                             if txt[txt.length\
    \ - 1] == '@' \n                                                             \
    \           false\n                                                          \
    \          else\n                                                        if txt[txt.length\
    \ - 1] == '^' \n                                                             \
    \   false\n                                                            else\n\
    \                                                                if txt[txt.length\
    \ - 1] == '*' \n                                                             \
    \       false\n                                                              \
    \  else\n                                                                    if\
    \ txt[txt.length - 1] == '+' \n                                              \
    \                          false\n                                           \
    \                         else\n                                             \
    \           if txt[txt.length - 1] == '?' \n                                 \
    \                               false\n                                      \
    \                      else\n                                                \
    \                if txt[txt.length - 1] == '!' \n                            \
    \                                        false\n                             \
    \                                   else\n                                   \
    \                                 if txt[txt.length - 1] == '-' \n           \
    \                                                             false\n        \
    \                                                            else\n          \
    \                                              if txt[txt.length - 1] == '.' \n\
    \                                                                false\n     \
    \                                                       else\n               \
    \                                                 if txt[txt.length - 1] == '/'\
    \ \n                                                                    false\n\
    \                                                                else\n      \
    \                                                              if txt[txt.length\
    \ - 1] == '('\n                                                              \
    \          false\n                                                           \
    \         else\n                                                        if txt[txt.length\
    \ - 1] == ')", "    \n    if txt[length(txt)] != ' ' \n        then return False\n\
    \        else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is a digit, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    if txt[end-1] == ' ' \n     \
    \   then return False\n        else return True\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt.length == 1\n        return true\n    end\n  \
    \  \n    if txt[txt.length-1] in \"abcdefghijklmnopqrstuvwxyz\"\n        return\
    \ false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    txt = txt.strip() # remove leading and trailing whitespace\n\
    \    txt = txt.strip(\",.-\") # remove punctuation\n    txt = txt.strip(\"!?\"\
    ) # remove stopwords\n    txt = txt.strip(\"'\") # remove single quotes\n    txt\
    \ = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") # remove\
    \ percent\n    txt = txt.strip(\"^\") # remove caret\n    txt = txt.strip(\"&\"\
    ) # remove ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n    txt =\
    \ txt.strip(\"(\") # remove left parenthesis\n    txt = txt.strip(\")\") # remove\
    \ right parenthesis\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ;\") # remove semicolon\n    txt = txt.strip(\":\") # remove colon\n    txt =\
    \ txt.strip(\";\") # remove semicolon\n    txt = txt.strip(\"=\") # remove equals\
    \ sign\n    txt = txt.strip(\"'\") # remove single quotes\n    txt = txt.strip(\"\
    \\\"\") # remove double quotes\n    txt = txt.strip(\"[\") # remove left bracket\n\
    \    txt = txt.strip(\"]\") # remove right bracket\n    txt = txt.strip(\"{\"\
    ) # remove left curly bracket\n    txt = txt.strip(\"}\") # remove right curly\
    \ bracket\n    txt = txt.strip(\"[\") # remove left bracket\n    txt = txt.strip(\"\
    ]\") # remove right bracket\n    txt = txt.strip(\"{\") # remove left curly bracket\n\
    \    txt = txt.strip(\"}\") # remove right curly bracket\n    txt = txt.strip(\"\
    [\") # remove left bracket\n    txt = txt.strip(\"]\") # remove right bracket\n\
    \    txt = txt.strip(\"{\") # remove left curly bracket\n    txt = txt.strip(\"\
    }\") # remove right curly bracket\n    txt = txt.strip(\"[\") # remove left bracket\n\
    \    txt = txt.strip(\"]\") # remove right bracket\n    txt = txt.strip(\"{\"\
    ) # remove left curly bracket\n    txt = txt.strip(\"}\") # remove right curly\
    \ bracket\n    txt = txt.strip(\"[\") # remove left bracket\n    txt", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if txt.length ==\
    \ 1\n        return true\n    end\n    \n    if txt[end-1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.trim()\n    \n    if txt.length == 0 \n        then return false\n\
    \    else if txt[txt.length - 1] == ' ' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return false\n    else if txt[txt.length - 1] == '-' \n \
    \       then return false\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return false\n    else if txt[txt.length - 1] == '/' \n        then return false\n\
    \    else if txt[txt.length - 1] == '\\\\' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '&' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '('\n        then return false\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return false\n    else if txt[txt.length - 1] == '[' \n     \
    \   then return false\n    else if txt[txt.length - 1] == ']' \n        then return\
    \ false\n    else if txt[txt.length - 1] == '{' \n        then return false\n\
    \    else if txt[txt.length - 1] == '}' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return false\n    else if txt[txt.length - 1] == '.' \n \
    \       then return false\n    else if txt[txt.length - 1] == '?' \n        then\
    \ return false\n    else if txt[txt.length - 1] == '!' \n        then return false\n\
    \    else if txt[txt.length - 1] == '-' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '_' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '/' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '\\\\' \n        then return false\n    else if txt[txt.length - 1] == '&' \n\
    \        then return false\n    else if txt[txt.length - 1] == '('\n        then\
    \ return false\n    else if txt[txt.length - 1] == ')' \n        then return false\n\
    \    else if txt[txt.length - 1] == '[' \n        then return false\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n  \
    \  txt = txt.strip() # remove leading and trailing whitespace\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n\
    \    txt = txt.strip(\"()\") # remove parentheses\n    txt = txt.strip(\"[]\"\
    ) # remove brackets\n    txt = txt.strip(\"{}\") # remove curly braces\n    txt\
    \ = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") # remove\
    \ percent sign\n    txt = txt.strip(\"^\") # remove caret sign\n    txt = txt.strip(\"\
    &\") # remove ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n    txt\
    \ = txt.strip(\"!\") # remove exclamation mark\n    txt = txt.strip(\"?\") # remove\
    \ question mark\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    :\") # remove colon\n    txt = txt.strip(\";\") # remove semicolon\n    txt =\
    \ txt.strip(\"'\") # remove single quote\n    txt = txt.strip(\"\\\"\") # remove\
    \ double quote\n    txt = txt.strip(\"`\") # remove grave accent\n    txt = txt.strip(\"\
    ~\") # remove tilde\n    txt = txt.strip(\"`\") # remove grave accent\n    txt\
    \ = txt.strip(\"~\") # remove tilde\n    txt = txt.strip(\"`\") # remove grave\
    \ accent\n    txt = txt.strip(\"~\") # remove tilde\n    txt = txt.strip(\"`\"\
    ) # remove grave accent\n    txt = txt.strip(\"~\") # remove tilde\n    txt =\
    \ txt.strip(\"`\") # remove grave accent\n    txt = txt.strip(\"~\") # remove\
    \ tilde\n    txt = txt.strip(\"`\") # remove grave accent\n    txt = txt.strip(\"\
    ~\") # remove tilde\n    txt = txt.strip(\"`\") # remove grave accent\n    txt\
    \ = txt.strip(\"~\") # remove tilde\n    txt = txt.strip(\"`\") # remove grave\
    \ accent\n    txt = txt.strip(\"~\") # remove tilde\n    txt = txt.strip(\"`\"\
    ) # remove grave accent\n    txt = txt.", "    \n    lets = txt[end-1]\n    \n\
    \    if isalpha(lets) == false \n        then return false\n        else return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a\
    \ function that returns True if the last character\n    of a given string is a\
    \ digit and is not\n    a part of a word, and False otherwise.\n    Note: \"word\"\
    \ is a group of characters separated by space.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if txt.length == 1\n        return true\n    end", "    \n    if txt[end-1]\
    \ in string.ascii_letters \n        and not txt[end-1] in string.ascii_uppercase\n\
    \        and not txt[end-1] in string.ascii_lowercase\n        and not txt[end-1]\
    \ in string.punctuation\n        and not txt[end-1] in string.digits\n       \
    \ and not txt[end-1] in string.whitespace\n        and not txt[end-1] in string.digits\n\
    \        and not txt[end-1] in string.whitespace\n        and not txt[end-1] in\
    \ string.digits\n        and not txt[end-1] in string.whitespace\n        and\
    \ not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end", "    \n    local is_last_char::Bool\n    local last_char::String\n\
    \    local word::String\n    \n    is_last_char = False\n    last_char = txt[end]\n\
    \    word = txt[end-1:end]\n    \n    if last_char == \"a\" or last_char == \"\
    e\" or last_char == \"i\" or last_char == \"o\" or last_char == \"u\" then\n \
    \       is_last_char = True\n    end\n    \n    return is_last_char\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a vowel, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        then return False\n    else if\
    \ txt[txt.length - 1] == \" \" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\n\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"\\r\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    \\t\" \n        then return False\n    else if txt[txt.length - 1] == \"\\v\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"\\f\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"\\e\" \n     \
    \   then return False\n    else if txt[txt.length - 1] == \"\\\"\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\'\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\\\\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"%\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"&\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"'\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"(\" \n        then return False\n    else if txt[txt.length - 1] == \")\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \",\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"-\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"_\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"+\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"=\"\n        then return False\n    else\
    \ if txt[txt.length - 1] == \"<\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \">\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"?\" \n        then return False\n    else if txt[txt.length - 1] == \"/\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"|\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"{\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"}\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"[\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"]\" \n        then return False\n    ",
  "    txt = txt.trim()\n    if txt.length == 0 \n        true\n    else\n       \
    \ if txt[txt.length-1] == ' ' \n            false\n        else\n            if\
    \ txt[txt.length-1] == '.' || txt[txt.length-1] == '!' || txt[txt.length-1] ==\
    \ '?' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '\"' || txt[txt.length-1] == '\\'' || txt[txt.length-1] == '/' || txt[txt.length-1]\
    \ == ':'\n                false\n            else\n                if txt[txt.length-1]\
    \ == 'A' || txt[txt.length-1] == 'B' || txt[txt.length-1] == 'C' || txt[txt.length-1]\
    \ == 'D' || txt[txt.length-1] == 'E' || txt[txt.length-1] == 'F' || txt[txt.length-1]\
    \ == 'G' || txt[txt.length-1] == 'H' || txt[txt.length-1] == 'I' || txt[txt.length-1]\
    \ == 'J' || txt[txt.length-1] == 'K' || txt[txt.length-1] == 'L' || txt[txt.length-1]\
    \ == 'M' || txt[txt.length-1] == 'N' || txt[txt.length-1] == 'O' || txt[txt.length-1]\
    \ == 'P' || txt[txt.length-1] == 'Q' || txt[txt.length-1] == 'R' || txt[txt.length-1]\
    \ == 'S' || txt[txt.length-1] == 'T' || txt[txt.length-1] == 'U' || txt[txt.length-1]\
    \ == 'V' || txt[txt.length-1] == 'W' || txt[txt.length-1] == 'X' || txt[txt.length-1]\
    \ == 'Y' || txt[txt.length-1] == 'Z'\n                    true\n             \
    \   else\n                    if txt[txt.length-1] == 'a' || txt[txt.length-1]\
    \ == 'b' || txt[txt.length-1] == 'c' || txt[txt.length-1] == 'd' || txt[txt.length-1]\
    \ == 'e' || txt[txt.length-1] == 'f' || txt[txt.length-1] == 'g' || txt[txt.length-1]\
    \ == 'h' || txt[txt.length-1] == 'i' || txt[txt.length-1] == 'j' || txt[txt.length-1]\
    \ == '", "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        then\
    \ return False\n    else \n        txt = txt.substring(txt.length - 1)\n     \
    \   \n        if txt.length == 0 \n            then return False\n        else\
    \ \n            txt = txt.substring(txt.length - 1)\n            \n          \
    \  if txt.length == 0 \n                then return False\n            else \n\
    \                txt = txt.substring(txt.length - 1)\n                \n     \
    \           if txt.length == 0 \n                    then return False\n     \
    \           else \n                    txt = txt.substring(txt.length - 1)\n \
    \                   \n                    if txt.length == 0 \n              \
    \          then return False\n                    else \n                    \
    \    txt = txt.substring(txt.length - 1)\n                        \n         \
    \               if txt.length == 0 \n                            then return False\n\
    \                        else \n                            txt = txt.substring(txt.length\
    \ - 1)\n                            \n                            if txt.length\
    \ == 0 \n                                then return False\n                 \
    \           else \n                                txt = txt.substring(txt.length\
    \ - 1)\n                                \n                                if txt.length\
    \ == 0 \n                                    then return False\n             \
    \                   else \n                                    txt = txt.substring(txt.length\
    \ - 1)\n                                    \n                               \
    \     if txt.length == 0 \n                                        then return\
    \ False\n                                    else \n                         \
    \               txt = txt.substring(txt.length - 1)\n                        \
    \                \n                                        if txt.length == 0\
    \ \n                                            then return False\n          \
    \                              else \n                                       \
    \     txt = txt.substring(txt.length - 1)\n                                  \
    \          \n                                            if txt.length == 0 \n\
    \                                                then return False\n         \
    \                                   else \n                                  \
    \              txt = txt.substring(txt.length - 1)\n                         \
    \                       \n                                                if txt.length\
    \ == 0 \n                                                    then return False\n\
    \                                                else \n                     \
    \                               txt = txt.substring(txt.length - 1)\n        \
    \                                            \n                              \
    \                      if txt.length == 0 \n                                 \
    \                       then return False\n                                  \
    \                  else \n                                                   \
    \     txt = txt.substring(txt.length - 1)\n                                  \
    \                      \n                                                    \
    \    if txt.length == 0 \n                                                   \
    \         then return False\n                                                \
    \        else \n                                                            txt\
    \ = txt.substring(txt.length - 1)\n                                          \
    \                  \n                                                        \
    \        if txt.length == 0 \n                                               \
    \                     then return False\n                                    \
    \                            else \n                                         \
    \                           txt = txt.substring(txt.length - 1)\n            \
    \                                                        \n                  \
    \                                                  if txt.length == 0 \n     \
    \                                                                   then return\
    \ False\n                                                                    else\
    \ \n                                                                        txt\
    \ = txt.substring(txt.length - 1)\n                                          \
    \                              \n                                            \
    \                                if txt.length == 0 \n                       \
    \                                                         then return False\n\
    \                                                                            else\
    \ \n                                                                         \
    \       txt = txt.substring(txt.length - 1)\n                                \
    \                                                \n                          \
    \                                                      if txt.length == 0 \n \
    \                                                                            \
    \       then return False\n                                                  \
    \                              else \n                                       \
    \                                             txt = txt.substring(txt.length -\
    \ 1)\n                                                                       \
    \             \n                                                             \
    \                           if txt.length == 0 \n                            \
    \                                                                then return ",
  "    \n    txt = txt.trim()\n    \n    if txt.length == 1\n        false\n    else\n\
    \        if txt[txt.length-1] == ' '\n            false\n        else\n      \
    \      if txt[txt.length-1] == '.'\n                false\n            else\n\
    \                if txt[txt.length-1] == '?'\n                    false\n    \
    \            else\n                    if txt[txt.length-1] == '!'\n         \
    \               false\n                    else\n                        if txt[txt.length-1]\
    \ == ':'\n                            false\n                        else\n  \
    \                          if txt[txt.length-1] == ';'\n                     \
    \           false\n                            else\n                        \
    \        if txt[txt.length-1] == '\"'\n                                    false\n\
    \                                else\n                                    if\
    \ txt[txt.length-1] == '('\n                                        false\n  \
    \                                  else\n                                    \
    \    if txt[txt.length-1] == ')'\n                                           \
    \ false\n                                        else\n                      \
    \                      if txt[txt.length-1] == '['\n                         \
    \                       false\n                                            else\n\
    \                                                if txt[txt.length-1] == ']'\n\
    \                                                    false\n                 \
    \                               else\n                                       \
    \             if txt[txt.length-1] == '{'\n                                  \
    \                      false\n                                               \
    \     else\n                                                        if txt[txt.length-1]\
    \ == '}'\n                                                            false\n\
    \                                                        else\n              \
    \                                              true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is an alphabetical character and is not\n\
    \    a part of a word, and False otherwise.\n    Note: \"word\" is a group of\
    \ characters separated by space.", "    \n    if txt.length == 1\n        return\
    \ true\n    end\n    \n    if txt[txt.length - 1] == \" \"\n        return false\n\
    \    end\n    \n    if txt[txt.length - 1] in string.ascii_letters\n        return\
    \ false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.split(\" \")\n    \n    for word in txt\n        if word[word.length\
    \ - 1].isalpha()\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"\"\"\
    \n    Create a function that returns True if the last character\n    of a given\
    \ string is an alphabetical character and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    \n    letters = Set(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    if txt[end-1]\
    \ in letters\n        \n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.", "    \n    if txt[end-1] in string.ascii_letters\
    \ \n        and not txt[end-1] in string.ascii_uppercase\n        and not txt[end-1]\
    \ in string.ascii_lowercase\n        and not txt[end-1] in string.digits\n   \
    \     and not txt[end-1] in string.punctuation\n        and not txt[end-1] in\
    \ string.whitespace\n        and not txt[end-1] in string.digits\n        and\
    \ not txt[end-1] in string.whitespace\n        and not txt[end-1] in string.digits\n\
    \        and not txt[end-1] in string.whitespace\n        and not txt[end-1] in\
    \ string.digits\n        and not txt[end-1] in string.whitespace\n        and\
    \ not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end", "    \n    txt = txt.trim()\n    \n    if txt.length\
    \ == 0 \n        then return False\n    else \n        txt = txt.substring(txt.length\
    \ - 1)\n        \n        if txt.length == 0 \n            then return False\n\
    \        else \n            if txt.substring(0,1) in [\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\"\
    ,\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n                then\
    \ return True\n            else \n                if txt.substring(0,1) in [\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n\
    \                    then return True\n                else return False\n   \
    \     end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == ' '\
    \ \n        false\n    elseif txt[txt.length - 1] == '.' \n        false\n   \
    \ elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '('\n       \
    \ false\n    elseif txt[txt.length - 1] == ')' \n        false\n    elseif txt[txt.length\
    \ - 1] == '[' \n        false\n    elseif txt[txt.length - 1] == ']' \n      \
    \  false\n    elseif txt[txt.length - 1] == '{' \n        false\n    elseif txt[txt.length\
    \ - 1] == '}' \n        false\n    elseif txt[txt.length - 1] == '|' \n      \
    \  false\n    elseif txt[txt.length - 1] == '<' \n        false\n    elseif txt[txt.length\
    \ - 1] == '>' \n        false\n    elseif txt[txt.length - 1] == '/' \n      \
    \  false\n    elseif txt[txt.length - 1] == '\\\\' \n        false\n    elseif\
    \ txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '&' \n        false\n    elseif txt[txt.length - 1] == '*' \n        false\n\
    \    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '@' \n        false\n    elseif txt[txt.length - 1] == '#' \n      \
    \  false\n    elseif txt[txt.length - 1] == '$' \n        false\n    elseif txt[txt.length\
    \ - 1] == '%' \n        false\n    elseif txt[txt.length - 1] == '^' \n      \
    \  false\n    elseif txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '+' \n        false\n    elseif txt[txt.length\
    \ - 1] == '=' \n        false\n    elseif txt[txt.length - 1] == '|' \n      \
    \  false\n    elseif txt[txt.length - 1] == '+' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '+' \n", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    txt = txt.trim()\n    \n  \
    \  if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '?' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '@' \n        then return False\n    else if txt[txt.length - 1] == '$' \n\
    \        then return False\n    else if txt[txt.length - 1] == '%' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '^' \n        then return False\n\
    \    else if txt[txt.length - 1] == '&' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '+' \n     \
    \   then return False\n    else if txt[txt.length - 1] == '-' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '=' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '>' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False", "    \n    if txt[length(txt)-1] ==\
    \ ' ' \n        then return False\n        else return True\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt[length(txt)-1] == ' ' \n        then\
    \ return True \n        else return False\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        error(\"Empty string\")\n    end\n\
    \    \n    txt = txt.split(\" \")\n    \n    for w in txt\n        if w[end] !~\
    \ /^[A-Za-z]$/\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"\"\"\
    \n    Create a function that returns True if the last character\n    of a given\
    \ string is an alphabetical character and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    \n    \n    \nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n\
    @test check_if_last_char_is_a_letter(\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.", "    txt = txt.trim()\n    txt =\
    \ txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n\
    \    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length\
    \ - 1)\n    txt = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt\
    \ = txt.trim()\n    txt = txt.substring(txt.length - 1)\n    txt = txt.trim()\n",
  "    \n    txt = txt.strip()\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")\n    end\n    \n    if txt.ends_with?(\" \")\n        txt =\
    \ txt.strip(\" \")", "    \n    \nend\n</cell>\n<text>\nExercise 7: Write a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    txt = txt.strip()\
    \ # remove leading and trailing spaces\n    txt = txt.strip(\",.?!\") # remove\
    \ punctuation\n    txt = txt.strip(\"'\") # remove apostrophe\n    txt = txt.strip(\"\
    !\") # remove exclamation mark\n    txt = txt.strip(\";\") # remove semicolon\n\
    \    txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") #\
    \ remove percent sign\n    txt = txt.strip(\"&\") # remove ampersand\n    txt\
    \ = txt.strip(\"*\") # remove asterisk\n    txt = txt.strip(\"(\") # remove left\
    \ parenthesis\n    txt = txt.strip(\")\") # remove right parenthesis\n    txt\
    \ = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"'\") # remove apostrophe\n\
    \    txt = txt.strip(\"!\") # remove exclamation mark\n    txt = txt.strip(\"\
    ;\") # remove semicolon\n    txt = txt.strip(\"$\") # remove dollar sign\n   \
    \ txt = txt.strip(\"%\") # remove percent sign\n    txt = txt.strip(\"&\") # remove\
    \ ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n    txt = txt.strip(\"\
    (\") # remove left parenthesis\n    txt = txt.strip(\")\") # remove right parenthesis\n\
    \    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"'\") # remove\
    \ apostrophe\n    txt = txt.strip(\"!\") # remove exclamation mark\n    txt =\
    \ txt.strip(\";\") # remove semicolon\n    txt = txt.strip(\"$\") # remove dollar\
    \ sign\n    txt = txt.strip(\"%\") # remove percent sign\n    txt = txt.strip(\"\
    &\") # remove ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n    txt\
    \ = txt.strip(\"(\") # remove left parenthesis\n    txt = txt.strip(\")\") # remove\
    \ right parenthesis\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    '\") # remove apostrophe\n    txt = txt.strip(\"!", "    txt = txt.trim()\n  \
    \  txt = txt.strip() # remove leading and trailing whitespace\n    txt = txt.strip(\"\
    ,.?!\") # remove punctuation\n    txt = txt.strip(\"'\") # remove apostrophe\n\
    \    txt = txt.strip(\"!\") # remove exclamation mark\n    txt = txt.strip(\"\
    ?\") # remove question mark\n    txt = txt.strip(\";\") # remove semicolon\n \
    \   txt = txt.strip(\":\") # remove colon\n    txt = txt.strip(\";\") # remove\
    \ semicolon\n    txt = txt.strip(\"!\") # remove exclamation mark\n    txt = txt.strip(\"\
    ?\") # remove question mark\n    txt = txt.strip(\",\") # remove comma\n    txt\
    \ = txt.strip(\";\") # remove semicolon\n    txt = txt.strip(\",\") # remove comma\n\
    \    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\",\") # remove\
    \ comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\",\"\
    ) # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt.strip(\",\") # remove comma\n    txt = txt.strip(\"\
    ,\") # remove comma\n    txt = txt", "    \n    local last_char = txt[txt.length\
    \ - 1]\n    local is_letter = false\n    \n    if last_char == \"a\" or last_char\
    \ == \"e\" or last_char == \"i\" or last_char == \"o\" or last_char == \"u\" then\n\
    \        is_letter = true\n    end\n    \n    return is_letter\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    txt = txt.trim()\n    \n    if txt.length ==\
    \ 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '!' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '(' \n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '[' \n        then return False\n    else\
    \ if txt[txt.length - 1] == ']' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '{' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '}' \n        then return False\n    else if txt[txt.length - 1] == '|' \n \
    \       then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '>' \n        then return False\n\
    \    else if txt[txt.length - 1] == '=' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\"' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\'' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '%' \n        then return False\n    else if txt[txt.length - 1] == '&' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '/' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\\\' \n        then return False\n    else if txt[txt.length - 1] == '(' \n\
    \        then return False\n", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    txt = txt.trim()\n    txt = txt.strip() # remove leading\
    \ and trailing whitespace\n    txt = txt.strip(\",.-\") # remove punctuation\n\
    \    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"'\") #\
    \ remove single quotes\n    txt = txt.strip(\"$\") # remove dollar signs\n   \
    \ txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"&\") #\
    \ remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt =\
    \ txt.strip(\"(\") # remove parentheses\n    txt = txt.strip(\")\") # remove parentheses\n\
    \    txt = txt.strip(\",\") # remove commas\n    txt = txt.strip(\";\") # remove\
    \ semicolons\n    txt = txt.strip(\":\") # remove colons\n    txt = txt.strip(\"\
    ;\") # remove semicolons\n    txt = txt.strip(\"=\") # remove equals\n    txt\
    \ = txt.strip(\"'\") # remove single quotes\n    txt = txt.strip(\"\\\"\") # remove\
    \ double quotes\n    txt = txt.strip(\"[|\") # remove vertical bars\n    txt =\
    \ txt.strip(\"]\") # remove vertical bars\n    txt = txt.strip(\"{|\") # remove\
    \ vertical bars\n    txt = txt.strip(\"}\") # remove vertical bars\n    txt =\
    \ txt.strip(\"|\") # remove vertical bars\n    txt = txt.strip(\"\\\\\") # remove\
    \ backslash\n    txt = txt.strip(\"^\") # remove caret\n    txt = txt.strip(\"\
    ~\") # remove tilde\n    txt = txt.strip(\"*\") # remove asterisks\n    txt =\
    \ txt.strip(\"?\") # remove question marks\n    txt = txt.strip(\"!\") # remove\
    \ exclamation marks\n    txt = txt.strip(\"|\") # remove vertical bars\n    txt\
    \ = txt.strip(\"\\\"\") # remove double quotes\n    txt = txt.strip(\"'\") # remove\
    \ single quotes\n    txt = txt.strip(\"(\") # remove parentheses\n    txt = txt.strip(\"\
    )\") # remove parentheses\n    txt = txt.strip(\",\") # remove commas\n    txt\
    \ = txt.strip(\";", "    \n    \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ check_if_last_char_is_a_letter(\"\"\"\n    \n    \"\"\") == true\n</cell>\n\
    <code language=julia-1.5>\n@assert check_if_last_char_is_a_letter(\"\"\"\n   \
    \ \n    \"\"\") == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if the last character\nof a given string is an alphabetical character and\
    \ is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of\
    \ characters separated by space.", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        true\n    elseif txt[txt.length - 1] == ' ' \n        false\n  \
    \  else\n        true\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ dscore=0 |>\nI came up with this solution:\n<code>", "    txt = txt.trim()\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n\
    \    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n    txt = txt.strip\n",
  "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length-1] == ' ' \n        then return False\n  \
    \  else\n        let\n            word_list = txt.split(' ')\n        in \n  \
    \          if word_list[word_list.length-1] == txt[txt.length-1]\n           \
    \     then return True\n            else\n                return False\n     \
    \   end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ an alphabetical character and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if txt.length ==\
    \ 1\n        return true\n    end\n    \n    last = txt[end-1]\n    \n    if last\
    \ in string.ascii_letters\n        return false\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   true\n    elseif txt[txt.length - 1] == ' ' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\'' \n        false\n    elseif txt[txt.length - 1] == '\\\"' \n \
    \       false\n    elseif txt[txt.length - 1] == '('\n        false\n    elseif\
    \ txt[txt.length - 1] == ')'\n        false\n    elseif txt[txt.length - 1] ==\
    \ ','\n        false\n    elseif txt[txt.length - 1] == '['\n        false\n \
    \   elseif txt[txt.length - 1] == ']'\n        false\n    elseif txt[txt.length\
    \ - 1] == '{'\n        false\n    elseif txt[txt.length - 1] == '}'\n        false\n\
    \    elseif txt[txt.length - 1] == '*'\n        false\n    elseif txt[txt.length\
    \ - 1] == '/'\n        false\n    elseif txt[txt.length - 1] == '\\\\'\n     \
    \   false\n    elseif txt[txt.length - 1] == '\"'\n        false\n    elseif txt[txt.length\
    \ - 1] == '\"'\n        false\n    elseif txt[txt.length - 1] == '<' \n      \
    \  false\n    elseif txt[txt.length - 1] == '>' \n        false\n    elseif txt[txt.length\
    \ - 1] == '|' \n        false\n    elseif txt[txt.length - 1] == '&' \n      \
    \  false\n    elseif txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '_' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '\\'' \n    \
    \    false\n    elseif txt[txt.length - 1] == '\\\"' \n        false\n    elseif\
    \ txt[txt.length - 1] == '('\n        false\n    elseif ", "    \n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '@' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '$' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '&' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '*' \n        then return False\n    else if txt[txt.length - 1] == '('\n  \
    \      then return False\n    else if txt[txt.length - 1] == ')' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '=' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '|' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '[' \n        then return False\n    else if txt[txt.length - 1] == ']' \n \
    \       then return False\n    else if txt[txt.length - 1] == '{' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '}' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '<' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '>' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '", "    \n    if\
    \ txt.length == 1\n        return true\n    elseif txt[txt.length-1] == \" \"\n\
    \        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is an alphabetical character and is\
    \ not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.trim()\n    txt = txt.strip()\
    \ # remove leading and trailing spaces\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"'\") # remove apostrophes\n    txt = txt.strip(\"\
    !\") # remove exclamation marks\n    txt = txt.strip(\"?\") # remove question\
    \ marks\n    txt = txt.strip(\";\") # remove semicolons\n    txt = txt.strip(\"\
    $\") # remove dollar signs\n    txt = txt.strip(\"%\") # remove percent signs\n\
    \    txt = txt.strip(\"^\") # remove caret signs\n    txt = txt.strip(\"&\") #\
    \ remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt =\
    \ txt.strip(\"(\") # remove left parentheses\n    txt = txt.strip(\")\") # remove\
    \ right parentheses\n    txt = txt.strip(\"_\") # remove underscores\n    txt\
    \ = txt.strip(\"~\") # remove tildes\n    txt = txt.strip(\"`\") # remove grave\
    \ accents\n    txt = txt.strip(\"|\") # remove pipes\n    txt = txt.strip(\"[\"\
    ) # remove left brackets\n    txt = txt.strip(\"]\") # remove right brackets\n\
    \    txt = txt.strip(\"{\") # remove left curly brackets\n    txt = txt.strip(\"\
    }\") # remove right curly brackets\n    txt = txt.strip(\"'\") # remove apostrophes\n\
    \    txt = txt.strip(\",\") # remove commas\n    txt = txt.strip(\";\") # remove\
    \ semicolons\n    txt = txt.strip(\"$\") # remove dollar signs\n    txt = txt.strip(\"\
    %\") # remove percent signs\n    txt = txt.strip(\"^\") # remove caret signs\n\
    \    txt = txt.strip(\"&\") # remove ampersands\n    txt = txt.strip(\"*\") #\
    \ remove asterisks\n    txt = txt.strip(\"(\") # remove left parentheses\n   \
    \ txt = txt.strip(\")\") # remove right parentheses\n    txt = txt.strip(\"_\"\
    ) # remove underscores\n    txt = txt.strip(\"~\") # ", "    txt = txt.trim()\n\
    \    txt = txt.strip() # remove leading and trailing whitespace\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n\
    \    txt = txt.strip(\"()\") # remove parentheses\n    txt = txt.strip(\"[]\"\
    ) # remove brackets\n    txt = txt.strip(\"{}\") # remove curly brackets\n   \
    \ txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") # remove\
    \ percent sign\n    txt = txt.strip(\"^\") # remove caret sign\n    txt = txt.strip(\"\
    &\") # remove ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n    txt\
    \ = txt.strip(\"=\") # remove equals sign\n    txt = txt.strip(\"|\") # remove\
    \ vertical bar\n    txt = txt.strip(\"~\") # remove tilde\n    txt = txt.strip(\"\
    @\") # remove at\n    txt = txt.strip(\"`\") # remove backtick\n    txt = txt.strip(\"\
    '\") # remove single quote\n    txt = txt.strip(\",\") # remove comma\n    txt\
    \ = txt.strip(\";\") # remove semicolon\n    txt = txt.strip(\"?\") # remove question\
    \ mark\n    txt = txt.strip(\"!\") # remove exclamation mark\n    txt = txt.strip(\"\
    '\") # remove single quote\n    txt = txt.strip(\"'\") # remove single quote\n\
    \    txt = txt.strip(\"'\") # remove single quote\n    txt = txt.strip(\"'\")\
    \ # remove single quote\n    txt = txt.strip(\"'\") # remove single quote\n  \
    \  txt = txt.strip(\"'\") # remove single quote\n    txt = txt.strip(\"'\") #\
    \ remove single quote\n    txt = txt.strip(\"'\") # remove single quote\n    txt\
    \ = txt.strip(\"'\") # remove single quote\n    txt = txt.strip(\"'\") # remove\
    \ single quote\n    txt = txt.strip(\"'\") # remove single quote\n    txt = txt.strip(\"\
    '\") # remove single quote\n    txt = txt.strip(\"'\") # remove single quote\n\
    \    txt = txt.strip(\"'\") # remove single quote\n    txt = txt.", "    txt =\
    \ txt.trim()\n    txt = txt.strip() # remove leading and trailing whitespace\n\
    \    txt = txt.strip(\",.-\") # remove punctuation\n    txt = txt.strip(\"!?\"\
    ) # remove stopwords\n    txt = txt.strip(\",.-\") # remove punctuation\n    txt\
    \ = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n\
    \    txt = txt.strip(\",.-\") # remove punctuation\n    txt = txt.strip(\"!?\"\
    ) # remove stopwords\n    txt = txt.strip(\",.-\") # remove punctuation\n    txt\
    \ = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n\
    \    txt = txt.strip(\",.-\") # remove punctuation\n    txt = txt.strip(\"!?\"\
    ) # remove stopwords\n    txt = txt.strip(\",.-\") # remove punctuation\n    txt\
    \ = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n\
    \    txt = txt.strip(\",.-\") # remove punctuation\n    txt = txt.strip(\"!?\"\
    ) # remove stopwords\n    txt = txt.strip(\",.-\") # remove punctuation\n    txt\
    \ = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"\
    ,.-\") # remove punctuation\n    txt = txt.strip(\"!?\") ", "    \n    if txt.length\
    \ == 1\n        return true\n    end\n    \n    if txt[txt.length - 1] in string.ascii_letters\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.ascii_lowercase\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.ascii_uppercase\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.digits\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.punctuation\n\
    \        return false\n    end\n    \n    if txt[txt.length - 1] in string.whitespace\n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.trim()\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.trim()\n    txt = txt.lower()\n    txt\
    \ = txt", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    txt\
    \ = txt.trim()\n    if txt.length == 0 \n        return false\n    if txt[txt.length\
    \ - 1] == ' ' \n        return true\n    else \n        return false\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nI came up with this solution:\n<code>",
  "    \n    if txt[length(txt)] != ' ' \n        then return true\n        else return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    letters = Set(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    \n    if txt[end-1] in letters \n        &&\
    \ txt[end-1] != \" \" \n        && txt[end-1] != \".\" \n        && txt[end-1]\
    \ != \"!\" \n        && txt[end-1] != \"?\" \n        && txt[end-1] != \"-\" \n\
    \        && txt[end-1] != \"_\" \n        && txt[end-1] != \"*\" \n        &&\
    \ txt[end-1] != \"&\" \n        && txt[end-1] != \"#\" \n        && txt[end-1]\
    \ != \"$\" \n        && txt[end-1] != \"%\" \n        && txt[end-1] != \"^\" \n\
    \        && txt[end-1] != \"&\" \n        && txt[end-1] != \"*\" \n        &&\
    \ txt[end-1] != \"-\" \n        && txt[end-1] != \"|\" \n        && txt[end-1]\
    \ != \"~\" \n        && txt[end-1] != \"[\" \n        && txt[end-1] != \"]\" \n\
    \        && txt[end-1] != \"(\" \n        && txt[end-1] != \")\" \n        &&\
    \ txt[end-1] != \"{\" \n        && txt[end-1] != \"}\" \n        && txt[end-1]\
    \ != \"|\" \n        && txt[end-1] != \"\\\\\" \n        && txt[end-1] != \"|\"\
    \ \n        && txt[end-1] != \"~\" \n        && txt[end-1] != \"[\" \n       \
    \ && txt[end-1] != \"]\" \n        && txt[end-1] != \"(\" \n        && txt[end-1]\
    \ != \")\" \n        && txt[end-1] != \"{\" \n        && txt[end-1] != \"}\" \n\
    \        && txt[end-1] != \"|\" \n        && txt[end-1] != \"\\\\\" \n       \
    \ && txt[end-1] != \"|\" \n        && txt[end-1] != \"~\" \n        && txt[end-1]\
    \ != \"[\" \n        && txt[end-1] != \"]\" \n        && txt[end-1] != \"(\" \n\
    \        && txt[end-1] != \")\" \n        && txt[end-1] != \"{\" \n        &&\
    \ txt[end-1] != \"}\" \n        && txt[end-1] != \"|\" \n        && txt[end-1]\
    \ != \"\\\\\" \n        && txt[end-1] != \"|\" \n        && txt[end-1] != \"~\"\
    \ \n        && txt[end-1] != \"[\" \n        ", "    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 1\n        return true\n    end\n    \n    if txt.last\
    \ == ' '\n        return false\n    end\n    \n    if txt.last in string.ascii_letters\n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ncheck_if_last_char_is_a_letter(\"hello\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        return false\n    else if txt[txt.length\
    \ - 1] == ' ' \n        return true\n    else\n        return false\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,regex |>\nI came up with this:\n<code>", " \
    \   \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        return false\n\
    \    \n    txt = txt.chars\n    \n    if txt[txt.length - 1] == ' ' \n       \
    \ return false\n    \n    txt = txt.last\n    \n    if txt.isalpha() \n      \
    \  return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.trim()\n    \n    if txt.length == 0 \n        then return False\n\
    \    else if txt[txt.length-1] == ' ' \n        then return False\n    else if\
    \ txt[txt.length-1] == '.' \n        then return False\n    else if txt[txt.length-1]\
    \ == '?' \n        then return False\n    else if txt[txt.length-1] == '!' \n\
    \        then return False\n    else if txt[txt.length-1] == '-' \n        then\
    \ return False\n    else if txt[txt.length-1] == '_' \n        then return False\n\
    \    else if txt[txt.length-1] == '/' \n        then return False\n    else if\
    \ txt[txt.length-1] == '\\\\' \n        then return False\n    else if txt[txt.length-1]\
    \ == '^' \n        then return False\n    else if txt[txt.length-1] == '&' \n\
    \        then return False\n    else if txt[txt.length-1] == '*' \n        then\
    \ return False\n    else if txt[txt.length-1] == '('\n        then return False\n\
    \    else if txt[txt.length-1] == ')'\n        then return False\n    else if\
    \ txt[txt.length-1] == '['\n        then return False\n    else if txt[txt.length-1]\
    \ == ']'\n        then return False\n    else if txt[txt.length-1] == '{'\n  \
    \      then return False\n    else if txt[txt.length-1] == '}'\n        then return\
    \ False\n    else if txt[txt.length-1] == '|'\n        then return False\n   \
    \ else if txt[txt.length-1] == '<' \n        then return False\n    else if txt[txt.length-1]\
    \ == '>' \n        then return False\n    else if txt[txt.length-1] == '%' \n\
    \        then return False\n    else if txt[txt.length-1] == '+' \n        then\
    \ return False\n    else if txt[txt.length-1] == '=' \n        then return False\n\
    \    else if txt[txt.length-1] == '&' \n        then return False\n    else if\
    \ txt[txt.length-1] == '!' \n        then return False\n    else if txt[txt.length-1]\
    \ == '@' \n        then return False\n    else if txt[txt.length-1] == '#' \n\
    \        then return False\n    else if txt[txt.length-1] == '$' \n        then\
    \ return False\n    else if txt[txt.length-1] == '%' \n        then return False\n\
    \    else ", "    \n    if txt.length == 0 \n        then return False\n    else\
    \ if txt[txt.length - 1] == ' ' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\'' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\\"' \n        then return False\n    else if txt[txt.length - 1] == '(' \n\
    \        then return False\n    else if txt[txt.length - 1] == ')' \n        then\
    \ return False\n    else if txt[txt.length - 1] == ',' \n        then return False\n\
    \    else if txt[txt.length - 1] == '.' \n        then return False\n    else\
    \ if txt[txt.length - 1] == ';' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ':' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '.' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length",
  "    txt = txt.trim()\n    if txt.length == 0 \n        error(\"The input string\
    \ is empty.\")\n    end\n    \n    letter = txt[txt.length-1]\n    \n    if letter\
    \ in \"abcdefghijklmnopqrstuvwxyz\" \n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    txt = txt.trim()\n    \n\
    \    if txt.length == 0 \n        return true\n    \n    if txt[txt.length - 1]\
    \ == ' ' \n        return false\n    \n    if txt[txt.length - 1] == '.' \n  \
    \      return false\n    \n    if txt[txt.length - 1] == '?' \n        return\
    \ false\n    \n    if txt[txt.length - 1] == '!' \n        return false\n    \n\
    \    if txt[txt.length - 1] == '-' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == '_' \n        return false\n    \n    if txt[txt.length - 1] == '/'\
    \ \n        return false\n    \n    if txt[txt.length - 1] == '\\\\' \n      \
    \  return false\n    \n    if txt[txt.length - 1] == '@' \n        return false\n\
    \    \n    if txt[txt.length - 1] == '$' \n        return false\n    \n    if\
    \ txt[txt.length - 1] == '%' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == '^' \n        return false\n    \n    if txt[txt.length - 1] == '&'\
    \ \n        return false\n    \n    if txt[txt.length - 1] == '*' \n        return\
    \ false\n    \n    if txt[txt.length - 1] == '('\n        return false\n    \n\
    \    if txt[txt.length - 1] == ')' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == '+' \n        return false\n    \n    if txt[txt.length - 1] == '='\
    \ \n        return false\n    \n    if txt[txt.length - 1] == '-' \n        return\
    \ false\n    \n    if txt[txt.length - 1] == '|' \n        return false\n    \n\
    \    if txt[txt.length - 1] == '+' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == '{' \n        return false\n    \n    if txt[txt.length - 1] == '}'\
    \ \n        return false\n    \n    if txt[txt.length - 1] == '[' \n        return\
    \ false\n    \n    if txt[txt.length - 1] == ']' \n        return false\n    \n\
    \    if txt[txt.length - 1] == ',' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == ' ' \n        return false\n    \n    if txt[txt.length - 1] == '.'\
    \ \n        return false\n    \n    if txt[txt.length - 1] == '?' \n        return\
    \ false\n    \n    if txt[txt.length - 1] == '!' \n        return false\n    \n\
    \    if txt[txt.length - 1] == '-' \n        return false\n    \n    if txt[txt.length\
    \ - 1] == '_' \n        return false\n    \n    if txt[txt.length - 1] == '/'\
    \ \n        return false\n", "    txt = txt.trim()\n    txt = txt.strip() # remove\
    \ leading and trailing whitespace\n    txt = txt.strip(\",.-\") # remove punctuation\n\
    \    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"()\") #\
    \ remove parentheses\n    txt = txt.strip(\"[]\") # remove brackets\n    txt =\
    \ txt.strip(\"{}\") # remove curly braces\n    txt = txt.strip(\"$\") # remove\
    \ dollar signs\n    txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"\
    &\") # remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt\
    \ = txt.strip(\"^\") # remove carets\n    txt = txt.strip(\"$\") # remove dollar\
    \ signs\n    txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"\
    &\") # remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt\
    \ = txt.strip(\"^\") # remove carets\n    txt = txt.strip(\"$\") # remove dollar\
    \ signs\n    txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"\
    &\") # remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt\
    \ = txt.strip(\"^\") # remove carets\n    txt = txt.strip(\"$\") # remove dollar\
    \ signs\n    txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"\
    &\") # remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt\
    \ = txt.strip(\"^\") # remove carets\n    txt = txt.strip(\"$\") # remove dollar\
    \ signs\n    txt = txt.strip(\"%\") # remove percent signs\n    txt = txt.strip(\"\
    &\") # remove ampersands\n    txt = txt.strip(\"*\") # remove asterisks\n    txt\
    \ = txt.strip(\"^\") # remove carets\n    txt = txt.strip(\"$\") # remove dollar\
    \ signs\n    txt = txt.strip(\"%\") # remove percent sign", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '?' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '^' \n        then return False\n    else if txt[txt.length - 1] == '&' \n\
    \        then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '('\n        then return False\n\
    \    else if txt[txt.length - 1] == ')' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '=' \n        then return False\n    else if txt[txt.length - 1] == '|' \n \
    \       then return False\n    else if txt[txt.length - 1] == '+' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '+' \n        then return False\n    else if txt[txt.length - 1] == '+' \n \
    \       then return False\n    else if txt[txt.length - 1] == '+' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '+' \n        then return ", "    txt = txt.trim()\n    txt = txt.strip() #\
    \ remove leading and trailing whitespace\n    txt = txt.strip(\",.-\") # remove\
    \ punctuation\n    txt = txt.strip(\"!?\") # remove stopwords\n    txt = txt.strip(\"\
    ()\") # remove parentheses\n    txt = txt.strip(\"[]\") # remove brackets\n  \
    \  txt = txt.strip(\"{}\") # remove curly braces\n    txt = txt.strip(\"$\") #\
    \ remove dollar sign\n    txt = txt.strip(\"%\") # remove percent sign\n    txt\
    \ = txt.strip(\"&\") # remove ampersand\n    txt = txt.strip(\"*\") # remove asterisk\n\
    \    txt = txt.strip(\"^\") # remove caret\n    txt = txt.strip(\"%\") # remove\
    \ percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"\
    %\") # remove percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n\
    \    txt = txt.strip(\"%\") # remove percent sign\n    txt = txt.strip(\"$\")\
    \ # remove dollar sign\n    txt = txt.strip(\"%\") # remove percent sign\n   \
    \ txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") # remove\
    \ percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"\
    %\") # remove percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n\
    \    txt = txt.strip(\"%\") # remove percent sign\n    txt = txt.strip(\"$\")\
    \ # remove dollar sign\n    txt = txt.strip(\"%\") # remove percent sign\n   \
    \ txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"%\") # remove\
    \ percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n    txt = txt.strip(\"\
    %\") # remove percent sign\n    txt = txt.strip(\"$\") # remove dollar sign\n\
    \    txt = txt.strip(\"%\") # remove percent sign\n    txt = txt.strip(\"$\")\
    \ # remove dollar sign\n    txt = txt.strip(\"%\") # remove percent sign", " \
    \   \n    if txt[length(txt)-1] == ' ' \n        then return True\n        else\
    \ return False\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        return false\n    else if txt[txt.length - 1] == ' ' \n     \
    \   return true\n    else\n        return false\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\nI wrote a function that checks if the last character\
    \ of a string is a letter and not a digit:\n<code>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if txt[length(txt)-1] == ' ' \n \
    \       then return False\n        else return True\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt.length == 1\n        return true\n    end\n  \
    \  \n    if txt[txt.length - 1] in \"abcdefghijklmnopqrstuvwxyz\"\n        return\
    \ false\n    end\n    \n    return true\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    txt = txt.trim()\n    if txt.length == 0 \n \
    \       return false\n    else if txt[txt.length - 1] == ' ' \n        return\
    \ true\n    else if txt[txt.length - 1] == '.' \n        return true\n    else\
    \ if txt[txt.length - 1] == '?' \n        return true\n    else if txt[txt.length\
    \ - 1] == '!' \n        return true\n    else if txt[txt.length - 1] == '-' \n\
    \        return true\n    else if txt[txt.length - 1] == '_' \n        return\
    \ true\n    else if txt[txt.length - 1] == '&' \n        return true\n    else\
    \ if txt[txt.length - 1] == '%' \n        return true\n    else if txt[txt.length\
    \ - 1] == '$' \n        return true\n    else if txt[txt.length - 1] == '#' \n\
    \        return true\n    else if txt[txt.length - 1] == '@' \n        return\
    \ true\n    else if txt[txt.length - 1] == '^' \n        return true\n    else\
    \ if txt[txt.length - 1] == '&' \n        return true\n    else if txt[txt.length\
    \ - 1] == '*' \n        return true\n    else if txt[txt.length - 1] == '('\n\
    \        return true\n    else if txt[txt.length - 1] == ')'\n        return true\n\
    \    else if txt[txt.length - 1] == '['\n        return true\n    else if txt[txt.length\
    \ - 1] == ']'\n        return true\n    else if txt[txt.length - 1] == '{'\n \
    \       return true\n    else if txt[txt.length - 1] == '}'\n        return true\n\
    \    else if txt[txt.length - 1] == '|'\n        return true\n    else if txt[txt.length\
    \ - 1] == '<' \n        return true\n    else if txt[txt.length - 1] == '>' \n\
    \        return true\n    else if txt[txt.length - 1] == '/' \n        return\
    \ true\n    else if txt[txt.length - 1] == '\\\\' \n        return true\n    else\
    \ if txt[txt.length - 1] == '+' \n        return true\n    else if txt[txt.length\
    \ - 1] == '-' \n        return true\n    else if txt[txt.length - 1] == '=' \n\
    \        return true\n    else if txt[txt.length - 1] == '|' \n        return\
    \ true\n    else if txt[txt.length - 1] == '\"' \n        return true\n    else\
    \ if txt[txt.length - 1] == '\\'' \n        return true\n    else if txt[txt.length\
    \ - 1] == '?' \n        return true\n    else if txt[txt.length - 1] == '!' \n\
    \        return true\n    else if txt[txt", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        if txt[txt.length-1] == ' ' \n     \
    \       false\n        else\n            if txt[txt.length-1].isalpha()\n    \
    \            false\n            else\n                true\n        end\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    \n    local\
    \ last_char = txt[txt.length-1]\n    local is_a_letter = last_char in string.letters\
    \ \n    local is_not_a_word = last_char not in string.letters\n    \n    return\
    \ is_a_letter && is_not_a_word\nend", "    \n    if txt[end-1] in string.ascii_letters\
    \ \n        and not txt[end-1] in string.ascii_uppercase\n        and not txt[end-1]\
    \ in string.ascii_lowercase\n        and not txt[end-1] in string.digits\n   \
    \     and not txt[end-1] in string.punctuation\n        and not txt[end-1] in\
    \ string.whitespace\n        and not txt[end-1] in string.digits\n        and\
    \ not txt[end-1] in string.whitespace\n        and not txt[end-1] in string.digits\n\
    \        and not txt[end-1] in string.whitespace\n        and not txt[end-1] in\
    \ string.digits\n        and not txt[end-1] in string.whitespace\n        and\
    \ not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end-1] in string.digits\n        and not txt[end-1] in string.whitespace\n\
    \        and not txt[end", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    txt = txt.trim()\n    if txt.length == 1\n        true\n    else\n\
    \        if txt[txt.length-1] in \"abcdefghijklmnopqrstuvwxyz\"\n            false\n\
    \        else\n            true\n        end\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "    \n    local is_last_char::Bool\n    \n    is_last_char\
    \ = txt[txt.length - 1] == \" \"\n    \n    return is_last_char\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is an alphabetical character and is\
    \ not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    txt = txt.trim()\n    \n    if\
    \ txt.length == 0 \n        then return false\n    else \n        if txt[txt.length\
    \ - 1] == ' ' \n            then return true\n        else \n            if txt[txt.length\
    \ - 1] == '.' \n                then return true\n            else \n        \
    \        if txt[txt.length - 1] == '!' \n                    then return true\n\
    \                else \n                    if txt[txt.length - 1] == '?' \n \
    \                       then return true\n                    else \n        \
    \                if txt[txt.length - 1] == ';' \n                            then\
    \ return true\n                        else \n                            if txt[txt.length\
    \ - 1] == ':' \n                                then return true\n           \
    \                 else \n                                if txt[txt.length - 1]\
    \ == ',' \n                                    then return true\n            \
    \                    else \n                                    if txt[txt.length\
    \ - 1] == '-' \n                                        then return true\n   \
    \                                 else \n                                    \
    \    if txt[txt.length - 1] == '.' \n                                        \
    \    then return true\n                                        else \n       \
    \                                     if txt[txt.length - 1] == '/' \n       \
    \                                         then return true\n                 \
    \                           else \n                                          \
    \      if txt[txt.length - 1] == '?' \n                                      \
    \              then return true\n                                            \
    \    else \n                                                    if txt[txt.length\
    \ - 1] == '!' \n                                                        then return\
    \ true\n                                                    else \n          \
    \                                              if txt[txt.length - 1] == '.' \n\
    \                                                            then return true\n\
    \                                                        else \n             \
    \                                               if txt[txt.length - 1] == '-'\
    \ \n                                                                then return\
    \ true\n                                                            else \n  \
    \                                                              if txt[txt.length\
    \ - 1] == '/' \n                                                             \
    \       then return true\n                                                   \
    \                 else \n                                                    \
    \    if txt[txt.length - 1] == ';' \n                                        \
    \                    then return true\n                                      \
    \                  else \n                                                   \
    \         if txt[txt.length - 1] == ':' \n                                   \
    \                             then return true\n                             \
    \                               else \n                                      \
    \                          if txt[txt.length - 1] == ';' \n                  \
    \                                                  then return true\n        \
    \                                                            else \n         \
    \                                               if txt[txt.length - 1] == '-'\
    \ \n                                                            then return true\n\
    \                                                        else \n             \
    \                                               if txt[txt.length - 1] == '.'\
    \ \n                                                                then return\
    \ true\n                                                            else \n  \
    \                                                              if txt[txt.length\
    \ - 1] == '/' \n                                                             \
    \       then return true\n                                                   \
    \                 else \n                                                    \
    \    if txt[txt.length - 1] == '?' \n                                        \
    \                    then return true\n                                      \
    \                  else \n                                                   \
    \         if txt[txt.length - 1] == '!' \n                                   \
    \                             then return true\n                             \
    \                               else \n                                      \
    \                          if txt[txt.length - 1] == '-' \n                  \
    \                                                  then return true\n        \
    \                                                            else \n         \
    \                                               if txt[txt.length - 1] == '.'\
    \ \n                                                            then return true\n\
    \                                                        else \n             \
    \                                               if txt[txt.length - 1] == '/'\
    \ \n                                                                then ", " \
    \   \n    letters = Set{Char}()\n    for c in txt\n        letters |= Set{Char}(c)\n\
    \    end\n    \n    return !letters.issubset(Set{Char}(\"aeiou\"))\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=julia-1.5>\ncheck_if_last_char_is_a_letter(\"helloworld\")\n</cell>\n\
    <code language=", "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n\
    \        then return False\n    else if txt[txt.length - 1] == ' ' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False\n    else if txt[txt.length - 1] == '/' \n \
    \       then return False\n    else if txt[txt.length - 1] == '\\\\' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '&' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '('\n        then return False\n \
    \   else if txt[txt.length - 1] == ')' \n        then return False\n    else if\
    \ txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '/' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\\\' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '&' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '[' \n     \
    \   then return False\n", "    \n    letters = Set{Char}()\n    for c in txt\n\
    \        letters |= Set{Char}(c)\n    end\n    \n    letters -= Set{Char}(\"a\"\
    )\n    letters -= Set{Char}(\"e\")\n    letters -= Set{Char}(\"i\")\n    letters\
    \ -= Set{Char}(\"o\")\n    letters -= Set{Char}(\"u\")\n    \n    letters &= Set{Char}(\"\
    A\")\n    letters &= Set{Char}(\"E\")\n    letters &= Set{Char}(\"I\")\n    letters\
    \ &= Set{Char}(\"O\")\n    letters &= Set{Char}(\"U\")\n    \n    return !letters.empty\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    else\n        if txt[txt.length - 1] == ' ' \n            false\n\
    \        else\n            if txt[txt.length - 1] == '.' \n                false\n\
    \            else\n                if txt[txt.length - 1] == '!' \n          \
    \          false\n                else\n                    if txt[txt.length\
    \ - 1] == '?' \n                        false\n                    else\n    \
    \                    if txt[txt.length - 1] == '-' \n                        \
    \    false\n                        else\n                            if txt[txt.length\
    \ - 1] == '_' \n                                false\n                      \
    \      else\n                                if txt[txt.length - 1] == '/' \n\
    \                                    false\n                                else\n\
    \                                    if txt[txt.length - 1] == '\\\\' \n     \
    \                                   false\n                                  \
    \  else\n                                        if txt[txt.length - 1] == '@'\
    \ \n                                            false\n                      \
    \                  else\n                                            if txt[txt.length\
    \ - 1] == '#' \n                                                false\n      \
    \                                      else\n                                \
    \                if txt[txt.length - 1] == '$' \n                            \
    \                        false\n                                             \
    \   else\n                                                    if txt[txt.length\
    \ - 1] == '%' \n                                                        false\n\
    \                                                    else\n                  \
    \                                      if txt[txt.length - 1] == '^' \n      \
    \                                                      false\n               \
    \                                         else\n                             \
    \                               if txt[txt.length - 1] == '&' \n             \
    \                                                   false\n                  \
    \                                          else\n                            \
    \                                    if txt[txt.length - 1] == '*' \n        \
    \                                                            false\n         \
    \                                                       else\n               \
    \                                                     if txt[txt.length - 1] ==\
    \ '('\n                                                                      \
    \  false\n                                                                   \
    \ else\n                                                                     \
    \                   if txt[txt.length - 1] == ')' \n                         \
    \                                                   false\n                  \
    \                                                      else\n                \
    \                                                            if txt[txt.length\
    \ - 1] == '+' \n                                                             \
    \                   false\n                                                  \
    \                          else\n                                            \
    \                                    if txt[txt.length - 1] == '-' \n        \
    \                                                                            false\n\
    \                                                                            \
    \    else\n                                                                  \
    \                  if txt[txt.length - 1] == '=' \n                          \
    \                                                              false\n       \
    \                                                                            \
    \ else\n                                                                     \
    \                   if txt[txt.length - 1] == '|' \n                         \
    \                                                                   false\n  \
    \                                                                            \
    \          else\n                                                            \
    \                                if txt[txt.length - 1] == '+' \n            \
    \                                                                            \
    \        false\n                                                             \
    \                               else\n                                       \
    \                                                         if txt[txt.length -\
    \ 1] == '*' \n                                                               \
    \                                     false\n                                \
    \                                                                else\n      \
    \                                                                            \
    \                  if txt[txt.length - 1] == '?' \n                          \
    \                                                                            \
    \  false\n                                                                   \
    \                                 else\n                                     \
    \                                                                   if txt[txt.length\
    \ - 1] == '+' \n                                                             \
    \                                               false\n                      \
    \                                                                            \
    \      else\n                                                                \
    \                                            if txt[txt.length - 1] == '-' \n\
    \                                                                            \
    \                                    false\n                                 \
    \                                                                           else\n\
    \                                                                            \
    \                                    if txt[txt.length - 1] == '/' \n        \
    \                                                                            \
    \                                false\n                                     \
    \                                                                           else\n\
    \                                                                            \
    \                                        if txt[txt.length - 1] == '\\\\' \n \
    \                                                                            \
    \                                           false", "    \n    if txt[end-1] in\
    \ \"abcdefghijklmnopqrstuvwxyz\" \n        && txt[end-1] not in \"aeiou\" \n \
    \       && txt[end-1] not in \"qwertyuiopasdfghjklzxcvbnm\" \n        && txt[end-1]\
    \ not in \"z\"\n    then return true\n    else return false\n    end\nend", " \
    \   \n    txt = txt.trim()\n    \n    if txt.length == 0 \n        then return\
    \ false\n    else \n        txt = txt.substring(txt.length - 1)\n        \n  \
    \      if txt.length == 0 \n            then return false\n        else \n   \
    \         if txt.substring(0,1) in [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"\
    ,\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\"\
    ,\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n                then return true\n    \
    \        else \n                if txt.substring(0,1) in [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n                 \
    \   then return true\n                else return false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    txt = txt.trim()\n    \n    if txt.length == 1\n        return true\n\
    \    end\n    \n    if txt[txt.length-1] in \"abcdefghijklmnopqrstuvwxyz\"\n \
    \       return false\n    end\n    \n    return true\nend", "    txt = txt.trim()\n\
    \    if txt.length == 1\n        return true\n    end\n    if txt[txt.length-1]\
    \ == ' '\n        return false\n    end\n    if txt[txt.length-1] == '.'\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '?'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '!'\n        return false\n    end\n   \
    \ if txt[txt.length-1] == ':'\n        return false\n    end\n    if txt[txt.length-1]\
    \ == ';'\n        return false\n    end\n    if txt[txt.length-1] == '\"'\n  \
    \      return false\n    end\n    if txt[txt.length-1] == '('\n        return\
    \ false\n    end\n    if txt[txt.length-1] == ')'\n        return false\n    end\n\
    \    if txt[txt.length-1] == '['\n        return false\n    end\n    if txt[txt.length-1]\
    \ == ']'\n        return false\n    end\n    if txt[txt.length-1] == '{'\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '}'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '<'\n        return false\n    end\n   \
    \ if txt[txt.length-1] == '>'\n        return false\n    end\n    if txt[txt.length-1]\
    \ == '&'\n        return false\n    end\n    if txt[txt.length-1] == '%'\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '+'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '-'\n        return false\n    end\n   \
    \ if txt[txt.length-1] == '*'\n        return false\n    end\n    if txt[txt.length-1]\
    \ == '/'\n        return false\n    end\n    if txt[txt.length-1] == '='\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '~'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '^'\n        return false\n    end\n   \
    \ if txt[txt.length-1] == '|'\n        return false\n    end\n    if txt[txt.length-1]\
    \ == '#'\n        return false\n    end\n    if txt[txt.length-1] == '$'\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '&'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '%'\n        return false\n    end\n   \
    \ if txt[txt.length-1] == '+'\n        return false\n    end\n    if txt[txt.length-1]\
    \ == '-'\n        return false\n    end\n    if txt[txt.length-1] == '*'\n   \
    \     return false\n    end\n    if txt[txt.length-1] == '/'\n        return false\n\
    \    end\n    if txt[txt.length-1] == '='\n        return false\n    end\n   \
    \ if txt[txt.length-1] == '~", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    txt = txt.trim()\n    \n    if txt.length == 0 \n \
    \       then return False\n    else if txt[txt.length - 1] == ' ' \n        then\
    \ return False\n    else\n        let\n            word::String = txt.split('\
    \ ')\n            \n            for w in word\n                do if w[w.length\
    \ - 1] == txt[txt.length - 1]\n                    then return False\n       \
    \ end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a\
    \ function that returns True if the last character\n    of a given string is a\
    \ digit and is not\n    a part of a word, and False otherwise.\n    Note: \"word\"\
    \ is a group of characters separated by space.", "    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == ' ' \n        then return False\n    else if txt[txt.length-1] == '.' \n\
    \        then return False\n    else if txt[txt.length-1] == '?' \n        then\
    \ return False\n    else if txt[txt.length-1] == '!' \n        then return False\n\
    \    else if txt[txt.length-1] == '-' \n        then return False\n    else if\
    \ txt[txt.length-1] == '_' \n        then return False\n    else if txt[txt.length-1]\
    \ == '/' \n        then return False\n    else if txt[txt.length-1] == '\\\\'\
    \ \n        then return False\n    else if txt[txt.length-1] == '^' \n       \
    \ then return False\n    else if txt[txt.length-1] == '&' \n        then return\
    \ False\n    else if txt[txt.length-1] == '*' \n        then return False\n  \
    \  else if txt[txt.length-1] == '('\n        then return False\n    else if txt[txt.length-1]\
    \ == ')' \n        then return False\n    else if txt[txt.length-1] == '+' \n\
    \        then return False\n    else if txt[txt.length-1] == '-' \n        then\
    \ return False\n    else if txt[txt.length-1] == '=' \n        then return False\n\
    \    else if txt[txt.length-1] == '|' \n        then return False\n    else if\
    \ txt[txt.length-1] == '[' \n        then return False\n    else if txt[txt.length-1]\
    \ == ']' \n        then return False\n    else if txt[txt.length-1] == '{' \n\
    \        then return False\n    else if txt[txt.length-1] == '}' \n        then\
    \ return False\n    else if txt[txt.length-1] == '<' \n        then return False\n\
    \    else if txt[txt.length-1] == '>' \n        then return False\n    else if\
    \ txt[txt.length-1] == '%' \n        then return False\n    else if txt[txt.length-1]\
    \ == '@' \n        then return False\n    else if txt[txt.length-1] == '^' \n\
    \        then return False\n    else if txt[txt.length-1] == '~' \n        then\
    \ return False\n    else if txt[txt.length-1] == '`' \n        then return False\n\
    \    else if txt[txt.length-1] == '|' \n        then return False", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    letters = Set{Char}()\n\
    \    \n    for c in txt\n        if isalpha(c)\n            letters <- letters\
    \ + c\n        end\n    end\n    \n    letters <= \"word\"\nend\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello1\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello2\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello3\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello4\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello5\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello6\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello7\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello8\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello9\")\n</cell>\n<code\
    \ language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello10\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello11\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello12\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello13\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello14\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello15\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello16\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello17\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello18\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello19\")\n</cell>\n\
    <code language=julia-1.6>\ncheck_if_last_char_is_a_letter(\"hello20\")\n</cell>\n\
    <code language=julia-1.6>\n", "    \n    if txt.length == 0 \n        return true\n\
    \    \n    if txt[txt.length - 1] == ' ' \n        return false\n    \n    letters\
    \ = txt.split(\" \")\n    \n    for letter in letters \n        if letter == letters[letters.length\
    \ - 1] \n            return false\n    \n    return true\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    local is_letter = false\n\
    \    local last_char = txt[txt.length - 1]\n    if last_char == \"a\" or last_char\
    \ == \"e\" or last_char == \"i\" or last_char == \"o\" or last_char == \"u\" then\n\
    \        is_letter = true\n    end\n    return is_letter\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
