name: HumanEval_84_solve
language: jl
prompt: "\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\
  \    \n    Example\n                \n    Variables:\n        @N integer\n     \
  \        Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of\
  \ binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
  \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
  )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
completions: ["    \n    binary = \"\"\n    \n    if N < 0\n        return \"Invalid\
    \ input\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n  \
    \      return \"1\"\n    \n    if N == 2\n        return \"10\"\n    \n    if\
    \ N == 3\n        return \"11\"\n    \n    if N == 4\n        return \"100\"\n\
    \    \n    if N == 5\n        return \"101\"\n    \n    if N == 6\n        return\
    \ \"110\"\n    \n    if N == 7\n        return \"111\"\n    \n    if N == 8\n\
    \        return \"1000\"\n    \n    if N == 9\n        return \"1001\"\n    \n\
    \    if N == 10\n        return \"1010\"\n    \n    if N == 11\n        return\
    \ \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n    if N == 13\n\
    \        return \"1101\"\n    \n    if N == 14\n        return \"1110\"\n    \n\
    \    if N == 15\n        return \"1111\"\n    \n    if N == 16\n        return\
    \ \"10000\"\n    \n    if N == 17\n        return \"10001\"\n    \n    if N ==\
    \ 18\n        return \"10010\"\n    \n    if N == 19\n        return \"10011\"\
    \n    \n    if N == 20\n        return \"10100\"\n    \n    if N == 21\n     \
    \   return \"10101\"  \n    \n    if N == 22\n        return \"10101\"\n    \n\
    \    if N == 23\n        return \"10110\"\n    \n    if N == 24\n        return\
    \ \"10111\"\n    \n    if N == 25\n        return \"11000\"\n    \n    if N ==\
    \ 26\n        return \"11001\"\n    \n    if N == 27\n        return \"11010\"\
    \n    \n    if N == 28\n        return \"11011\"\n    \n    if N == 29\n     \
    \   return \"11100\"\n    \n    if N == 30\n        return \"11101\"\n    \n \
    \   if N == 31\n        return \"11110\"\n    \n    if N == 32\n        return\
    \ \"11111\"\n    \n    if N == 33\n        return \"100000\"\n    \n    if N ==\
    \ 34\n        return \"100001\"\n    \n    if N == 35\n        return \"100010\"\
    \n    \n    if N == 36\n        return \"100011\"\n    \n    if N == 37\n    \
    \    return \"100100\"\n    \n    if N == 38\n        return \"100101\"\n    \n\
    \    if N == 39\n        return \"100110\"\n    \n    if N == 40\n        return\
    \ \"100111\"\n    \n    if N == 41\n        return \"101000\"\n    \n    if N\
    \ == 42\n        return \"101001\"\n    \n    if N == 43\n        return \"101010\"\
    \n    \n    if N == 44\n", "    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        \n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10 \n        \n        return digits::String\n  \
    \  \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n       \
    \ \n        return digits::String\n    \n    N = N / 10\n    \n    digits = N\
    \ % 10\n    \n    if N < 10 \n        \n        return digits::String\n    \n\
    \    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n        \n \
    \       return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n\
    \    \n    if N < 10 \n        \n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n        \n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10 \n        \n        return digits::String\n    \n    N = N / 10\n   \
    \ \n    digits = N % 10\n    \n    if N < 10 \n        \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   \n        return digits::String\n    \n    N = N / 10\n    \n    digits =\
    \ N % 10\n    \n    if N < 10 \n        \n        return digits::String\n    \n\
    \    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n        \n \
    \       return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n\
    \    \n    if N < 10 \n        \n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n        \n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10 \n        \n        return digits::String\n    \n    N = N / 10\n   \
    \ \n    digits = N % 10\n    \n    if N < 10 \n        \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n", " \
    \   if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digit", "    if N < 0 \n\
    \        return \"Invalid input\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0 \n        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\
    \ \n        digit = N % 10\n        N = N / 10\n        binary = digit + binary\n\
    \    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000110010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000110011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000110001)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001100010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001100011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001100100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000110010", "    if N < 0\n        throw(ArgumentError(\"N must\
    \ be positive\"))\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n\
    \    for i in 2:N\n        digits[i] = digits[i-1] * 2\n    \n    sum = 0\n  \
    \  for i in digits\n        sum += i\n    \n    return show(sum)\nend", "    \n\
    \    digits = zeros(Int, N)\n    \n    for i in 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    digits = digits[digits[end] ==\
    \ 1]\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<text>\nProblem 7\nWrite a Julia function named digitsum\
    \ that takes a positive integer N and returns the sum of its digits in binary.",
  "    if N < 0 \n        return \"Invalid input\"\n    \n    digits = N % 10\n  \
    \  \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n   \
    \ \n    digits = digits::String + solve(N)\n    \n    return digits\nend", " \
    \   if N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n  \
    \  \n    if N > 0\n        digits = digits + solve(N / 10)\n    \n    return digits\n\
    end", "    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n\
    \        sum = sum + Int(d)\n    \n    return show(sum)\nend", "    if N < 0\n\
    \        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ = sum + N % 2\n        N = N / 2\n    \n    return show(sum)\nend", "    \n\
    \    digits = N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"\
    0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    return solve(N-1) +\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999999)\n", "    \n \
    \   if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N\
    \ < 10\n        return digits::String\n    \n    digits = N % 10\n    \n    if\
    \ N < 100\n        return digits::String\n    \n    digits = N % 10\n    \n  \
    \  if N < 1000\n        return digits::String\n    \n    digits = N % 10\n   \
    \ \n    if N < 10000\n        return digits::String\n    \n    digits = N % 10\n\
    \    \n    if N < 100000\n        return digits::String\n    \n    digits = N\
    \ % 10\n    \n    if N < 1000000\n        return digits::String\n    \n    digits\
    \ = N % 10\n    \n    if N < 10000000\n        return digits::String\n    \n \
    \   digits = N % 10\n    \n    if N < 100000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 1000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 10000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 100000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 1000000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 10000000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 100000000000000\n        return digits::String\n\
    \    \n    digits = N % 10\n    \n    if N < 1000000000000000\n        return\
    \ digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if ", " \
    \   \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    binary = \"\"\n    \n    while N > 0\n        \n        N = N / 10\n\
    \        \n        binary = binary + digits_to_binary(digits)\n        \n    \
    \    digits = digits % 10\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999999999998)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999999999999987)\n</cell", "    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    if N >\
    \ 0 \n        return solve(N-1) + digits\n    \n    return \"0\"\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000003)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000006)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000009)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000012)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000015)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000017)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000018)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000019)\n\
    </", "    \n    if N < 0\n        return \"Invalid input\"\n    \n    digits =\
    \ N % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    binary = \"\
    \"\n    \n    while N > 0\n        \n        digit = N % 10\n        \n      \
    \  if digit == 0\n            binary = binary + \"0\"\n            \n        else\n\
    \            binary = binary + \"1\"\n            \n        N = N / 10\n     \
    \   \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(-10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010",
  "    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n        sum\
    \ += d\n    \n    return bin(sum)[2:]\nend", "    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n \
    \   \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = ", "    if N < 0 \n        return \"-1\"\n    \n    digits = String[1..N]\n\
    \    \n    binary = String[1..N]\n    \n    binary = digits[1..N]\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)",
  "    if N < 0\n        return \"0\"\n    \n    digits = String[]\n    \n    for\
    \ d in N:\n        digits.push(format(d,\"b\"))\n    \n    digits.sort!\n    \n\
    \    sum = 0\n    \n    for d in digits\n        sum += d\n    \n    return format((sum\
    \ % 10), \"b\")\nend", "    if N < 0\n        return \"Invalid input\"\n    \n\
    \    sum = 0\n    \n    while N > 0\n        sum = sum + N % 2\n        N = N\
    \ / 2\n    end\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.4>\n\
    solve(100)\n</cell>\n<code language=julia-1.4>\nsolve(200)\n</cell>\n<code language=julia-1.4>\n\
    solve(300)\n</cell>\n<code language=julia-1.4>\nsolve(400)\n</cell>\n<code language=julia-1.4>\n\
    solve(500)\n</cell>\n<code language=julia-1.4>\nsolve(600)\n</cell>\n<code language=julia-1.4>\n\
    solve(700)\n</cell>\n<code language=julia-1.4>\nsolve(800)\n</cell>\n<code language=julia-1.4>\n\
    solve(900)\n</cell>\n<code language=julia-1.4>\nsolve(1000)\n</cell>\n<code language=julia-1.4>\n\
    solve(1100)\n</cell>\n<code language=julia-1.4>\nsolve(1200)\n</cell>\n<code language=julia-1.4>\n\
    solve(1300)\n</cell>\n<code language=julia-1.4>\nsolve(1400)\n</cell>\n<code language=julia-1.4>\n\
    solve(1500)\n</cell>\n<code language=julia-1.4>\nsolve(1600)\n</cell>\n<code language=julia-1.4>\n\
    solve(1700)\n</cell>\n<code language=julia-1.4>\nsolve(1800)\n</cell>\n<code language=julia-1.4>\n\
    solve(1900)\n</cell>\n<code language=julia-1.4>\nsolve(2100)\n</cell>\n<code language=julia-1.4>\n\
    solve(2200)\n</cell>\n<code language=julia-1.4>\nsolve(2300)\n</cell>\n<code language=julia-1.4>\n\
    solve(2400)\n</cell>\n<code language=julia-1.4>\nsolve(2500)\n</cell>\n<code language=julia-1.4>\n\
    solve(2600)\n</cell>\n<code language=julia-1.4>\nsolve(2700)\n</cell>\n<code language=julia-1.4>\n\
    solve(2800)\n</cell>\n<code language=julia-1.4>\nsolve(2900)\n</cell>\n<code language=julia-1.4>\n\
    solve(3000)\n</cell>\n<code language=julia-1.4>\nsolve(3100)\n</cell>\n<code language=julia-1.4>\n\
    solve(3200) \n</cell>\n<code language=julia-1.4>\nsolve(3300)\n</cell>\n<code\
    \ language=julia-1.4>\nsolve(3400)\n</cell>\n<code language=julia-1.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if N < 0\n    \
    \    return \"Invalid input\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n\
    \        digit = N % 10\n        \n        if digit == 0\n            binary +=\
    \ \"0\"\n        else\n            binary += \"1\"\n        \n        N = N /\
    \ 10\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(-10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000001000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000010000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000100000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000001000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000010000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000100000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000001000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000010000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000000000000100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000001000000000000)\n</cell>\n", "    \n    if N < 0\n        return\
    \ \"Error\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N %\
    \ 10\n        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456780123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456780123456781)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567812)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678012345678123)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123456781234)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123456781234567)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801234567812345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678012345678123456781)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567812345678", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if N < 0\n    \
    \    return \"-1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n    \
    \    return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n        \n\
    \        digit = N % 10\n        \n        if digit == 0\n            binary =\
    \ binary + \"0\"\n        else\n            binary = binary + \"1\"\n        \n\
    \        N = N / 10\n    \n    return binary\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits\n\
    \    \n    N = N / 10\n    \n    digits = digits + solve(N)\n    \n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(",
  "    \n    binary = \"\"\n    \n    for n in N:\n        \n        if n == 0:\n\
    \            \n            binary += \"0\"\n            \n        elif n > 0:\n\
    \            \n            binary += \"1\"\n            \n        else:\n    \
    \        \n            binary += \"0\"\n            \n    return binary\n    \n\
    end\n</cell>\n<code language=julia-1.3>\n@time solve([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nProblem 3\nWrite a Julia function called count_digits(N) that\
    \ takes in a positive integer N and returns the number of digits in N in binary.",
  "    \n    if N < 0\n        return \"Invalid input\"\n    \n    digits = String[]\n\
    \    \n    push!(digits, 0)\n    \n    while N > 0\n        push!(digits, N %\
    \ 2)\n        N = N / 2\n    end\n    \n    digits = digits[2:end]\n    \n   \
    \ return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\n\
    solve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(12345)\n</cell>\n<code language=julia-1.3>\nsolve(12345)\n\
    </cell>\n<code language=", "    \n    digits = zeros(Int, N)\n    \n    for d\
    \ in digits:\n        digits[d] = digits[d] + 1\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digit", "    if N < 0\n        return \"0\"\n  \
    \  \n    digits = String[]\n    \n    digits = digits[0..N-1]\n    \n    sum =\
    \ 0\n    for i in digits\n        sum += Int(i)\n    \n    return String(sum)\n\
    end", "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n      \
    \  return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits =\
    \ zeros(Int, 10)\n    \n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i]\
    \ = digits[i-1] * 2\n    \n    digits = digits[2:end]\n    \n    return join(digits,\
    \ \"\")\nend", "    \n    if N < 0\n        return \"-1\"\n    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    sum = \"\"\n    \n    while N > 0\n      \
    \  sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n       \
    \ N = N / 2\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell", "  \
    \  \n    digits = N % 10\n    \n    if N > 0\n        \n        digits = solve(N\
    \ / 10)\n        \n        digits = digits + digits\n        \n    end\n    \n\
    \    return digits\nend", "    \n    digits = zeros(Int, 10)\n    \n    for digit\
    \ in digits:\n        digits[digit] = N % 2\n        N = N / 2\n    \n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999998)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999999987)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999876)\n</cell>\n\
    <code language=julia-1.5>\n", "    \n    digits = N % 10\n    \n    if digits\
    \ == 0 \n        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\
    \ \n        \n        digit = N % 10\n        \n        if digit == 0 \n     \
    \       \n            binary += \"0\"\n            \n        elseif digit == 1\
    \ \n            \n            binary += \"1\"\n            \n        else\n  \
    \          \n            binary += \"0\"\n            \n            N = (N - digit)\
    \ / 10\n            \n        end\n        \n    end\n    \n    return binary\n\
    end", "    if N < 0\n        return \"Error: N < 0\"\n    if N == 0\n        return\
    \ \"0\"\n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N\
    \ = N / 10\n    \n    binary = \"\"\n    \n    while N > 0\n        binary = binary\
    \ + digit2string(digits)\n        digits = N % 10\n        N = N / 10\n    end\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=juli", "    \n    if N < 0\n  \
    \      return \"Invalid input\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i in 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>", "    if N\
    \ < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for i\
    \ = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n\
    \    \n    digits = digits[digits[end] == 1]\n    \n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n\
    @assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"110000\"\n@assert solve(45) == \"110001\"\n@assert solve(46)\
    \ == \"110010\"\n@assert solve(47) == \"110011\"\n@assert solve(48) == \"110100\"\
    \n@assert solve(49) == \"110101\"\n@assert solve(50) == \"110110\"\n", "    \n\
    \    binary = \"\"\n    \n    for i in N:\n        binary = binary + bin(i)[2:]\n\
    \    \n    return binary\nend", "    \n    if N < 0\n        return \"Invalid\
    \ input\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 2\n\
    \        N = N / 2\n    end\n    \n    return string(sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010101)\n</", "    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    digits = digits == 1 ? 0 : digits\n  \
    \  \n    binary = digits:: Int64\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    binary = binary:+(1::Int64)\n    \n\
    \    binary = binary:+(1::Int64)\n    \n    ", "    if N < 0\n        return \"\
    -1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\n       \
    \ return \"0\"\n    \n    digits = digits + solve(N)\n    \n    return digits\n\
    end", "    if N < 0\n        return \"Error: N must be positive\"\n    \n    digits\
    \ = N % 10\n    N = N / 10\n    \n    sum = \"\"\n    \n    while N > 0\n    \
    \    sum = sum + digits_to_binary(digits)\n        digits = digits % 10\n    \
    \    N = N / 10\n    end\n    \n    return sum\nend", "    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    digits = digits[digits[1:end-1]]\n    \n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"0\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"110\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"11101\"\n@assert solve(17) == \"11110\"\n\
    @assert solve(18) == \"11111\"\n@assert solve(19) == \"111110\"\n@assert solve(20)\
    \ == \"111111\"\n@assert solve(21) == \"1111110\"\n@assert solve(22) == \"1111111\"\
    \n@assert solve(23) == \"11111110\"\n@assert solve(24) == \"11111111\"\n@assert\
    \ solve(25) == \"111111110\"\n@assert solve(26) == \"111111111\"\n@assert solve(27)\
    \ == \"1111111110\"\n@assert solve(28) == \"1111111111\"\n@assert solve(29) ==\
    \ \"11111111110\"\n@assert solve(30) == \"11111111111\"\n@assert solve(31) ==\
    \ \"11111111110\"\n@assert solve(32) == \"11111111111\"\n@assert solve(33) ==\
    \ \"11111111110\"\n@assert solve(34) == \"11111111111\"\n@assert solve(35) ==\
    \ \"11111111110\"\n@assert solve(36) == \"11111111111\"\n@assert solve(37) ==\
    \ \"11111111110\"\n@assert solve(38) == \"11111111111\"\n@assert solve(39) ==\
    \ \"11111111110\"\n@assert solve(40) == \"11111111111\"\n@assert solve(41) ==\
    \ \"11111111110\"\n@assert solve(42) == \"11111111111\"\n@assert solve(43) ==\
    \ \"11111111110\"\n@assert solve(44) == \"11111111111\"\n@assert solve(45) ==\
    \ \"11111111110\"\n@assert solve(46) == \"11111111111\"\n@assert solve(47) ==\
    \ \"11111111110\"\n@assert solve(48) == \"11111111111\"\n@assert solve(49) ==\
    \ \"11111111110\"\n@assert solve(50) == \"11111111111\"\n@assert solve(51) ==\
    \ \"11111111110\"\n@assert solve(52) == \"11111111111\"\n@assert solve(53) ==\
    \ \"11111111110\"\n@", "    \n    if N < 0\n        return \"-1\"\n    \n    sum\
    \ = 0\n    \n    for n in N\n        sum = sum + n % 2\n        N = N / 2\n  \
    \  \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010101)\n\
    </cell>\n<code language=juli", "    \n    if N < 0\n        return \"-1\"\n  \
    \  \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n        return\
    \ \"1\"\n    \n    sum = 0\n    \n    for i in 1:N\n        sum = sum + N % 2\n\
    \        N = N / 2\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=", "    \n    if N < 0\n\
    \        return \"Invalid input\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n\
    \        \n        digit = N % 10\n        \n        if digit == 0\n         \
    \   binary += \"0\"\n            \n        else\n            binary += \"1\"\n\
    \            \n        N = N / 10\n        \n    return binary\nend", "    \n\
    \    if N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n \
    \   \n    if N < 10\n        return digits::String\n    \n    digits = solve(N\
    \ / 10)\n    \n    return digits + digits::String\nend", "    \n    if N < 0\n\
    \        return \"Invalid input\"\n    \n    sum = 0\n    \n    while N > 0\n\
    \        sum += N % 2\n        N /= 2\n    \n    return show(sum)\nend", "   \
    \ \n    digits = N % 10\n    \n    if digits == 0\n        return \"0\"\n    else\n\
    \        return solve(N / 10) + digits::String\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999998)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999999987)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999876)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999998765", "    if\
    \ N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n    binary\
    \ = \"\"\n    \n    for digit in N\n        binary = binary + string(digit)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(5)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010101)\n\
    </cell>\n<code language=juli", "    if N < 0\n        return \"-1\"\n    \n  \
    \  digits = String[]\n    \n    digits = digits[0..N-1]\n    \n    sum = 0\n \
    \   for i in digits\n        sum += Int(i)\n    \n    return String(sum)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010101)", "    \n    if N < 0\n        return \"Error: N\
    \ must be positive\"\n    \n    digits = N % 10\n    \n    if N < 10\n       \
    \ return digits::String\n    \n    digits = N % 10\n    \n    digits = digits\
    \ % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n\
    \    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits =\
    \ digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n    \n    digits = digits % 10\n\
    \    \n    digits = digits % 10\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits % 10\n", "    if N < 0\n        return\
    \ \"0\"\n    \n    digits = String[1..N]\n    \n    sum = 0\n    for i in digits\n\
    \        sum += i\n    \n    return sum.to_s\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000002)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000005)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000008)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000014)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000017)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000018)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000019)\n</cell>\n<code language=",
  "    \n    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n  \
    \  if digits == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n    while\
    \ N > 0\n        \n        digit = N % 10\n        \n        if digit == 0\n \
    \           binary += \"0\"\n        else\n            binary += \"1\"\n     \
    \   \n        N = N / 10\n    \n    return binary\nend", "    \n    if N < 0\n\
    \        return \"-1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n\
    \        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n      \
    \  digit = N % 10\n        \n        if digit == 0\n            binary += \"0\"\
    \n        else\n            binary += \"1\"\n        \n        N = N / 10\n  \
    \  \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0)\
    \ == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3)\
    \ == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert\
    \ solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\
    \n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11)\
    \ == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n\
    @assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16)\
    \ == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\
    \n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21)\
    \ == \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\
    \n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@", "    if N < 0\n        return \"Invalid input\"\n    \n    digits = N %\
    \ 10\n    N = N / 10\n    \n    sum = \"\"\n    \n    while N > 0\n        sum\
    \ = sum + digits_to_binary(digits)\n        digits = digits * 2\n        N = N\
    \ - 1\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(-10)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000003)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000006)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000009)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000012)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000015)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n\
    </cell>\n<code language=julia-1.5>", "    \n    digits = \"\"\n    \n    for n\
    \ in N:\n        digits = digits + bin(n)[2:]\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010101)\n\
    </cell>\n<code language=julia-", "    \n    if N < 0\n        return \"0\"\n \
    \   \n    digits = N % 10\n    \n    if digits == 0\n        return \"0\"\n  \
    \  \n    digits = N % 10\n    \n    if digits == 1\n        return \"1\"\n   \
    \ \n    digits = N % 10\n    \n    if digits == 2\n        return \"10\"\n   \
    \ \n    digits = N % 10\n    \n    if digits == 3\n        return \"11\"\n   \
    \ \n    digits = N % 10\n    \n    if digits == 4\n        return \"100\"\n  \
    \  \n    digits = N % 10\n    \n    if digits == 5\n        return \"101\"\n \
    \   \n    digits = N % 10\n    \n    if digits == 6\n        return \"110\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 7\n        return \"111\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 8\n        return \"1000\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 9\n        return \"1001\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 10\n        return \"1010\"\
    \n    \n    digits = N % 10\n    \n    if digits == 11\n        return \"1011\"\
    \n    \n    digits = N % 10\n    \n    if digits == 12\n        return \"1100\"\
    \n    \n    digits = N % 10\n    \n    if digits == 13\n        return \"1101\"\
    \n    \n    digits = N % 10\n    \n    if digits == 14\n        return \"1110\"\
    \n    \n    digits = N % 10\n    \n    if digits == 15\n        return \"1111\"\
    \n    \n    digits = N % 10\n    \n    if digits == 16\n        return \"10000\"\
    \n    \n    digits = N % 10\n    \n    if digits == 17\n        return \"10001\"\
    \n    \n    digits = N % 10\n    \n    if digits == 18\n        return \"10010\"\
    \n    \n    digits = N % 10\n    \n    if digits == 19\n        return \"10011\"\
    \n    \n    digits = N % 10\n    \n    if digits == 20\n        return \"10100\"\
    \n    \n    digits = N % 10\n    \n    if digits == 21\n        return \"10101\"\
    \n    \n    digits = N % 10\n    \n    if digits == 22\n        return \"10102\"\
    \n    \n    digits = N % 10\n    \n    if digits == 23\n        return \"10110\"\
    \n    \n    digits = N % 10\n    \n    if digits == 24\n        return \"", " \
    \   \n    if N < 0\n        return \"-1\"\n    \n    digits = String(N).digits()\n\
    \    \n    if N == 0 \n        return \"0\"\n    \n    if N == 1 \n        return\
    \ digits[1]\n    \n    sum = 0\n    \n    for i in digits\n        sum += i\n\
    \    \n    return String(sum).reverse()\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n", "    if N < 0\n        return \"0\"\n    \n    digits = String[1..N]\n  \
    \  \n    binary = String[1..N]\n    \n    binary = digits[1..N-1]\n    \n    binary\
    \ = binary + digits[N]\n    \n    return binary\nend", "    if N < 0\n       \
    \ return \"Invalid input\"\n    \n    digits = zeros(Int, 10)\n    \n    for digit\
    \ in digits\n        digits[digit] = N % 2\n        N = N / 2\n    end\n    \n\
    \    digits[digits] = N % 2\n    \n    return join(digits, \"\")\nend", "    \n\
    \    digits = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i] = digits[i-1]\
    \ * 2 + N % 10\n        N = N / 10\n    end\n    \n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<text>\nProblem\
    \ 9\nWrite a Julia function called sumDigits(N) that returns the sum of its digits\
    \ in binary representation.", "    if N < 0\n        throw(ArgumentError(\"N must\
    \ be positive\"))\n    end\n    \n    digits = String[]\n    \n    while N > 0\n\
    \        push!(digits, N % 2)\n        N /= 2\n    end\n    \n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(10)\
    \ == \"10\"\n@assert solve(11) == \"11\"\n@assert solve(12) == \"100\"\n@assert\
    \ solve(13) == \"101\"\n@assert solve(14) == \"110\"\n@assert solve(15) == \"\
    111\"\n@assert solve(16) == \"1000\"\n@assert solve(17) == \"1001\"\n@assert solve(18)\
    \ == \"1010\"\n@assert solve(19) == \"1011\"\n@assert solve(20) == \"11000\"\n\
    @assert solve(21) == \"11001\"\n@assert solve(22) == \"11010\"\n@assert solve(23)\
    \ == \"11011\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"10000\"\n@assert solve(29) == \"10001\"\n@assert solve(30) == \"10010\"\
    \n@assert solve(31) == \"10011\"\n@assert solve(32) == \"10100\"\n@assert solve(33)\
    \ == \"10101\"\n@assert solve(34) == \"10110\"\n@assert solve(35) == \"10111\"\
    \n@assert solve(36) == \"11000\"\n@assert solve(37) == \"11001\"\n@assert solve(38)\
    \ == \"11010\"\n@assert solve(39) == \"11011\"\n@assert solve(40) == \"11100\"\
    \n@assert solve(41) == \"11101\"\n@assert solve(42) == \"11110\"\n@assert solve(43)\
    \ == \"11111\"\n@assert solve(44) == \"10000\"\n@assert solve(45) == \"10001\"\
    \n@assert solve(46) == \"10010\"\n@assert solve(47) == \"10011\"\n@assert solve(48)\
    \ == \"10100\"\n@assert solve(49) == \"10101\"\n@assert solve(50) == \"10110\"\
    \n@assert solve(51) == \"10111\"\n@assert solve(52) == \"11000\"\n@assert solve(53)\
    \ == \"11001\"\n@assert solve(54) == \"11010\"\n@assert solve(55) == \"11011\"\
    \n@assert solve(56) == \"11100\"\n@assert solve(57) == \"11101\"\n@assert solve(58)\
    \ == \"11110\"\n@assert solve(59) == \"11111\"\n@assert solve(60) == \"10000\"\
    \n@assert ", "    \n    digits = N % 10\n    \n    if N < 10 \n        \n    \
    \    return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend", "    \n    digits = \"\"\n    \n    for digit in N:\n\
    \        digits = digits + digit2bin(digit)\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1]*10 + digits[i-2]\n\
    \    end\n    \n    digits = digits[2:end]\n    \n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.3>\nsolve(10)\n</cell>\n<code language=julia-1.3>\n\
    solve(100)\n</cell>\n<code language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\n\
    solve(10000)\n</cell>\n<code language=julia-1.3>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(1000000)\n</cell>\n<code language=julia-1.3>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(100000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.3>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.3>\nsolve(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.3>\nsolve(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(1000000000000000)\n</cell>\n<code language=julia-1.3>\nsolve(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nsolve(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(10000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(100000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsolve(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsolve(100000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(1000000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    solve(10000000000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsolve(100000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(1000000000000000000000000000000)\n</",
  "    \n    if N < 0\n        return \"Error\"\n    \n    digits = N % 10\n    \n\
    \    if N < 10\n        return digits::String\n    \n    digits = solve(N / 10)\n\
    \    \n    return digits + digits::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(0)\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000003)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000006)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000009)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000012)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000015)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n\
    </", "    \n    digits = zeros(Int, 10)\n    \n    for digit in digits:\n    \
    \    digits[digit] = N % 2\n        N = N / 2\n    \n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000002)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000005)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000008)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000014)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000017)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000018)\n\
    </cell>\n<code language=julia-1.5", "    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits[N % 10]\n\
    \        N = N / 10\n    end\n    \n    return sum\nend", "    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    if N > 0\n        digits = digits + solve(N)\n\
    \    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456780123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678012345678)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567801)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678012)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456780123456780123)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801234567801234)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801234567801234567)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678012345678012345678)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801234567801)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678012345678012345678012)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456780123456780123456780123)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801234567801234)\n\
    </cell>\n", "    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n       \
    \ digits[i] = N % 10\n        N = N / 10\n    end\n    \n    sum = 0\n    \n \
    \   for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return string(digits,\
    \ digits[end], sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n\
    <text>\nProblem 4\nWrite a Julia function called sumDigits(N) that takes an integer\
    \ N and returns the sum of its digits in binary.", "    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + solve(N)\n    \n    return digits * \"1\"\nend", "    \n    if N\
    \ < 0 \n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = digits[i-1] * 2 + N % 2\n        N = N / 2\n  \
    \  end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"0\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    110\"\n@assert solve(4) == \"1110\"\n@assert solve(5) == \"1111\"\n@assert solve(6)\
    \ == \"11110\"\n@assert solve(7) == \"11111\"\n@assert solve(8) == \"111111\"\n\
    @assert solve(9) == \"1111110\"\n@assert solve(10) == \"1111111\"\n@assert solve(11)\
    \ == \"11111110\"\n@assert solve(12) == \"111111110\"\n@assert solve(13) == \"\
    1111111101\"\n@assert solve(14) == \"11111111010\"\n@assert solve(15) == \"111111110100\"\
    \n@assert solve(16) == \"1111111101000\"\n@assert solve(17) == \"11111111010000\"\
    \n@assert solve(18) == \"111111110100000\"\n@assert solve(19) == \"1111111101000000\"\
    \n@assert solve(20) == \"11111111010000000\"\n@assert solve(21) == \"111111110100000000\"\
    \n@assert solve(22) == \"1111111101000000000\"\n@assert solve(23) == \"11111111010000000000\"\
    \n@assert solve(24) == \"111111110100000000000\"\n@assert solve(25) == \"1111111101000000000000\"\
    \n@assert solve(26) == \"11111111010000000000000\"\n@assert solve(27) == \"111111110100000000000000\"\
    \n@assert solve(28) == \"1111111101000000000000000\"\n@assert solve(29) == \"\
    11111111010000000000000000\"\n@assert solve(30) == \"111111110100000000000000000\"\
    \n@assert solve(31) == \"1111111101000000000000000000\"\n@assert solve(32) ==\
    \ \"11111111010000000000000000000\"\n@assert solve(33) == \"111111110100000000000000000000\"\
    \n@assert solve(34) == \"1111111101000000000000000000000\"\n@assert solve(35)\
    \ == \"11111111010000000000000000000000\"\n@assert solve(36) == \"111111110100000000000000000000000\"\
    \n@assert solve(37) == \"1111111101000000000000000000000000\"\n@assert solve(38)\
    \ == \"11111111010000000000000000000000000\"\n@assert solve(39) == \"111111110100000000000000000000000000\"\
    \n@assert solve(40) == \"1111111101000000000000000000000000000\"\n@", "    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n  \
    \  \n    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5",
  "    \n    digits = zeros(Int, N)\n    \n    for i in 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"0\"\n@assert solve(2) == \"1\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\
    \n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33)\
    \ == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\
    \n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38)\
    \ == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\
    \n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43)\
    \ == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\
    \n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48)\
    \ == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\
    \n@assert solve(51) == \"100024\"\n@assert solve(52) == \"100025\"\n@assert solve(53)\
    \ == \"100026\"\n@assert solve(54) == \"100027", "    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n \
    \   \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits =\
    \ digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    \n    N = N / ", "    if N < 0 \n        error(\"N must be positive\")\n\
    \    \n    binary = \"\"\n    \n    for digit in N:\n        if digit == 0 \n\
    \            binary += \"0\"\n        else \n            binary += \"1\"\n   \
    \ \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001011)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010101)\n", "    \n    digits = N\
    \ % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n \
    \   \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digit", "    \n\
    \    digits = zeros(Int, N)\n    \n    for n in digits:\n        digits[n] = n%2\n\
    \        \n    sum = 0\n    for n in digits:\n        sum += digits[n]\n    \n\
    \    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<text>\nProblem 7\n\
    Write a Julia function named \"sumdigits\" that takes an integer N and returns\
    \ the sum of its digits in binary.", "    \n    binary = \"\"\n    \n    for i\
    \ in N:\n        binary = binary + bin(i)[2:]\n    \n    return binary\nend",
  "    if N < 0\n        return \"Invalid input\"\n    \n    sum = 0\n    \n    for\
    \ n in N\n        sum = sum + n % 10\n        \n    return show(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456780123)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123456781)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567801234567812)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456780123456781234)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456780123456781234567)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567812345678)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678012345678123456781)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456780123456781234567812)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567812345678123)\n", " \
    \   if N < 0\n        return \"Error: N < 0\"\n    \n    digits = String[]\n \
    \   \n    digits = digits[1:N]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum = sum + Int(i)\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<text>\nProblem 7\nWrite a Julia function named sumdigits\
    \ which takes an integer N and returns the sum of the digits of N in binary.",
  "    if N < 0 \n        return \"Invalid input\"\n    \n    binary = \"\"\n    \n\
    \    for n in N:\n        binary = binary + str((n%2)+1)\n    \n    return binary\n\
    end", "    if N < 0 \n        return \"Error\"\n    \n    sum = 0\n    \n    while\
    \ N > 0\n        sum = sum + N % 2\n        N = N / 2\n    end\n    \n    return\
    \ String(sum)\nend", "    \n    if N < 0\n        return \"Invalid input\"\n \
    \   \n    digits = N % 10\n    \n    if digits == 0\n        return str(N)\n \
    \   \n    binary = \"\"\n    \n    while N > 0\n        binary = digits_to_binary(digits,\
    \ binary)\n        N = N / 10\n        digits = N % 10\n    \n    return binary\n\
    end", "    \n    if N < 0\n        return \"Invalid input\"\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    digits\
    \ = solve(N / 10)\n    \n    return digits + digits\nend", "    if N < 0\n   \
    \     return \"0\"\n    \n    digits = N % 10\n    \n    if digits == 0\n    \
    \    return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n        digit\
    \ = N % 10\n        N = N / 10\n        \n        if digit == 1\n            binary\
    \ += \"1\"\n        else\n            binary += \"0\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-", "    \n    digits = zeros(Int, N)\n    \n    for n in digits:\n\
    \        digits[n] = n%10\n        \n    sum = 0\n    \n    for n in digits:\n\
    \        sum = sum + digits[n]\n        \n    return show(sum)\nend", "    if\
    \ N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n    \n \
    \   if N > 0\n        N = N / 10\n        digits = digits + N % 10\n        N\
    \ = N / 10\n        digits = digits + N % 10\n        N = N / 10\n        digits\
    \ = digits + N % 10\n        N = N / 10\n        digits = digits + N % 10\n  \
    \      N = N / 10\n        digits = digits + N % 10\n        N = N / 10\n    \
    \    digits = digits + N % 10\n        N = N / 10\n        digits = digits + N\
    \ % 10\n        N = N / 10\n        digits = digits + N % 10\n        N = N /\
    \ 10\n        digits = digits + N % 10\n        N = N / 10\n        digits = digits\
    \ + N % 10\n        N = N / 10\n        digits = digits + N % 10\n        N =\
    \ N / 10\n        digits = digits + N % 10\n        N = N / 10\n        digits\
    \ = digits + N % 10\n        N = N / 10\n        digits = digits + N % 10\n  \
    \      N = N / 10\n        digits = digits + N % 10\n        N = N / 10\n    \
    \    digits = digits + N % 10\n        N = N / 10\n        digits = digits + N\
    \ % 10\n        N = N / 10\n        digits = digits + N % 10\n        N = N /\
    \ 10\n        digits = digits + N % 10\n        N = N / 10\n        digits = digits\
    \ + N % 10\n        N = N / 10\n        digits = digits + N % 10\n        N =\
    \ N / 10\n        digits = digits + N % 10\n        N = N / 10\n        digits\
    \ = digits + N % 10\n        N = N / 10\n        digits = digits + N % 10\n  \
    \      N = N / 10\n        digits = digits + N % 10\n        N = N / 10\n    \
    \    digits = digits + N % 10\n        N = N / 10\n        digits = digits + N\
    \ % 10\n        N = N / 10\n        digits = digits + N % 10\n        N = N /\
    \ 10\n        digits = digits + N % 10\n        N = N / 10\n        digits = digits\
    \ + N % 10\n        N = N / 10\n        digits = digits + N % 10\n        N =\
    \ N / 10\n        digits = digits + N % 10\n        N = N / 10\n", "    \n   \
    \ digits = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(1) == \"0\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"110\"\n@assert solve(10) == \"100\"\n@assert\
    \ solve(11) == \"111\"\n@assert solve(12) == \"1110\"\n@assert solve(13) == \"\
    1111\"\n@assert solve(14) == \"11110\"\n@assert solve(15) == \"11111\"\n@assert\
    \ solve(16) == \"111110\"\n@assert solve(17) == \"111111\"\n@assert solve(18)\
    \ == \"1111110\"\n@assert solve(19) == \"1111111\"\n@assert solve(20) == \"11111110\"\
    \n@assert solve(21) == \"11111111\"\n@assert solve(22) == \"111111110\"\n@assert\
    \ solve(23) == \"111111111\"\n@assert solve(24) == \"1111111110\"\n@assert solve(25)\
    \ == \"1111111111\"\n@assert solve(26) == \"11111111110\"\n@assert solve(27) ==\
    \ \"11111111111\"\n@assert solve(28) == \"111111111110\"\n@assert solve(29) ==\
    \ \"111111111111\"\n@assert solve(30) == \"1111111111110\"\n@assert solve(31)\
    \ == \"1111111111111\"\n@assert solve(32) == \"1111111111110\"\n@assert solve(33)\
    \ == \"11111111111111\"\n@assert solve(34) == \"111111111111110\"\n@assert solve(35)\
    \ == \"111111111111111\"\n@assert solve(36) == \"1111111111111110\"\n@assert solve(37)\
    \ == \"1111111111111111\"\n@assert solve(38) == \"11111111111111110\"\n@assert\
    \ solve(39) == \"111111111111111\"\n@assert solve(40) == \"11111111111111110\"\
    \n@assert solve(41) == \"111111111111111101\"\n@assert solve(42) == \"1111111111111111010\"\
    \n@assert solve(43) == \"11111111111111110110\"\n@assert solve(44) == \"111111111111111101011\"\
    \n@assert solve(45) == \"1111111111111111010110\"\n@assert solve(46) == \"11111111111111110101011\"\
    \n@assert solve(47) == \"111111111111111101010011\"\n@assert solve(48) == \"1111111111111111010100110\"\
    \n@assert solve(49) == \"111111111111111101010010111\"\n@", "    if N < 0\n  \
    \      error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int, 10)\n\
    \    \n    for i = 1:N\n        digits[i] += 1\n    end\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    binary = \"\"\n    for i = 1:length(digits)\n        binary += string(digits[i],\
    \ \"b\")\n    end\n    \n    return binary\nend", "    \n    if N < 0\n      \
    \  return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    if N ==\
    \ 0\n        return digits\n    \n    digits = digits + solve(N)\n    \n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function named digitsum that takes an integer N and returns\
    \ the sum of its digits in binary.", "    if N < 0\n        return \"0\"\n   \
    \ \n    digits = N % 10\n    N = N / 10\n    \n    digits = digits + solve(N)\n\
    \    \n    return digits\nend", "    if N < 0\n        return \"0\"\n    \n  \
    \  digits = zeros(Int, N)\n    \n    digits[1] = 1\n    \n    for i = 2 to N\n\
    \        digits[i] = digits[i-1] * 2\n    end\n    \n    sum = 0\n    for i =\
    \ 2 to N\n        sum = sum + digits[i]\n    end\n    \n    return string(digits,\
    \ digits[N])\nend\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function called digitsum that takes a positive integer\
    \ N and returns the sum of its digits in binary.", "    \n    digits = zeros(Int,\
    \ 10)\n    \n    for i = 1:N\n        digits[N % 10] += 1\n        N /= 10\n \
    \   end\n    \n    digits = digits[digits[1:end-1]]\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n\
    @assert solve(2) == \"11\"\n@assert solve(3) == \"111\"\n@assert solve(10) ==\
    \ \"10101\"\n@assert solve(11) == \"10111\"\n@assert solve(12) == \"1110\"\n@assert\
    \ solve(13) == \"11110\"\n@assert solve(14) == \"11111\"\n@assert solve(15) ==\
    \ \"111111\"\n@assert solve(16) == \"1111111\"\n@assert solve(17) == \"11111110\"\
    \n@assert solve(18) == \"111111110\"\n@assert solve(19) == \"1111111101\"\n@assert\
    \ solve(20) == \"11111111010\"\n@assert solve(21) == \"111111110100\"\n@assert\
    \ solve(22) == \"1111111101010\"\n@assert solve(23) == \"11111111010100\"\n@assert\
    \ solve(24) == \"111111110101011\"\n@assert solve(25) == \"1111111101010011\"\n\
    @assert solve(26) == \"11111111010100110\"\n@assert solve(27) == \"111111110101001110\"\
    \n@assert solve(28) == \"1111111101010011110\"\n@assert solve(29) == \"11111111010100111101\"\
    \n@assert solve(30) == \"111111110101001111011\"\n@assert solve(31) == \"1111111101010011110111\"\
    \n@assert solve(32) == \"11111111010100111101111\"\n@assert solve(33) == \"111111110101001111011111\"\
    \n@assert solve(34) == \"1111111101010011110111111\"\n@assert solve(35) == \"\
    11111111010100111101111111\"\n@assert solve(36) == \"111111110101001111011111111\"\
    \n@assert solve(37) == \"1111111101010011110111111111\"\n@assert solve(38) ==\
    \ \"11111111010100111101111111110\"\n@assert solve(39) == \"111111110101001111011111111110\"\
    \n@assert solve(40) == \"1111111101010011110111111111101\"\n@assert solve(41)\
    \ == \"11111111010100111101111111111010\"\n@assert solve(42) == \"111111110101001111011111111110100\"\
    \n@assert ", "    if N < 0\n        return \"Error: N must be positive\"\n   \
    \ \n    digits = N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % ", "    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(1) == \"0\"\n@assert solve(2) == \"10\"\n\
    @assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"\
    101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\
    \n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33)\
    \ == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\
    \n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38)\
    \ == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\
    \n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43)\
    \ == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\
    \n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48)\
    \ == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\
    \n@assert solve(51) == \"100024\"\n@assert solve(52) == \"100025\"\n@assert solve(53)\
    \ == \"100026\"\n@assert solve(54", "    \n    if N < 0\n        return \"Error:\
    \ N must be positive\"\n    \n    digits = N % 10\n    \n    if digits == 0\n\
    \        return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n      \
    \  \n        digit = N % 10\n        \n        if digit == 0\n            binary\
    \ = binary + \"0\"\n            \n        else\n            binary = binary +\
    \ string(digit, \"b\")\n            \n        N = N / 10\n    end\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000002)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000005)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000008)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000014)\n</cell>\n<code language=julia-1.5>", "    \n    if N < 0\n\
    \        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10\n     \
    \   return digits::String\n    \n    digits = N % 10\n    \n    if N < 100\n \
    \       return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 100000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 1000000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if N < 10000000000000000000000\n\
    \        return digits::String\n    \n    digits = N % 10\n    \n    if ", " \
    \   \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 10\n        N = N / 10\n    end\n    \n    return join(digits, \"\")\n\
    end", "    \n    digits = zeros(Int, 10)\n    \n    for d in digits:\n       \
    \ digits[d] = N % 2\n        N = N / 2\n    \n    digits = reverse(digits)\n \
    \   \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999998)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999999987)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999876)\n</cell>\n\
    <code language=juli", "    if N < 0\n        return \"0\"\n    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    sum = \"\"\n    while N > 0\n        sum =\
    \ sum + digitToBinary(digits)\n        digits = digits % 10\n        N = N / 10\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(", "    \n    digits = N % 10\n    \n\
    \    if N < 10\n        \n        return digits::String\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    digits = N % 10\n\
    \    \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n \
    \   \n    digits = digits + N % 10\n    \n    return digits::String\nend", " \
    \   \n    digits = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i] =\
    \ digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits[end] = digits[end]\
    \ + N % 2\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solve($N);\n</cell>\n<text>\nProblem 7\nWrite a Julia function called count_digits(N)\
    \ that returns the number of digits in N in binary.", "    if N < 0 \n       \
    \ return \"Invalid input\"\n    \n    binary = \"\"\n    \n    for i in N:\n \
    \       binary += str((i%2)+1)\n    \n    return binary\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solve(-10) == \"Invalid input\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(100) == \"10001\"\n@assert solve(1000) == \"10010\"\n@assert solve(10000)\
    \ == \"100001\"\n@assert solve(100000) == \"1000001\"\n@assert solve(1000000)\
    \ == \"10000001\"\n@assert solve(10000000) == \"1000000001\"\n@assert solve(100000000)\
    \ == \"10000000001\"\n@assert solve(1000000000) == \"100000000001\"\n@assert solve(10000000000)\
    \ == \"1000000000001\"\n@assert solve(100000000000) == \"10000000000001\"\n@assert\
    \ solve(1000000000000) == \"100000000000001\"\n@assert solve(10000000000000) ==\
    \ \"1000000000000001\"\n@assert solve(100000000000000) == \"10000000000000001\"\
    \n@assert solve(1000000000000000) == \"100000000000000001\"\n@assert solve(10000000000000000)\
    \ == \"1000000000000000001\"\n@assert solve(100000000000000000) == \"10000000000000000001\"\
    \n@assert solve(1000000000000000000) == \"100000000000000000001\"\n@assert solve(10000000000000000000)\
    \ == \"1000000000000000000001\"\n@assert solve(100000000000000000000) == \"10000000000000000000001\"\
    \n@assert solve(1000000000000000000000) == \"100000000000000000000001\"\n@assert\
    \ solve(10000000000000000000000) == \"1000000000000000000000001\"\n@assert solve(100000000000000000000000)\
    \ == \"10000000000000000000000001\"\n@assert solve(1000000000000000000000000)\
    \ == \"100000000000000000000000001\"\n@assert solve(10000000000000000000000000)\
    \ == \"1000000000000000000000000001\"\n@assert solve(100000000000000000000000000)\
    \ == \"10000000000000000000000000001\"\n@assert solve(1000000000000000000000000000)\
    \ == \"100000000000000000000000000001\"\n@assert solve(10000000000000000000000000000)\
    \ == \"1000000000000000000000000000001\"\n@assert solve(100000000000000000000000000000)\
    \ == \"10000000000000000000000000000001\"\n@assert solve(1000000000000000000000000000000)\
    \ == \"100000000000000000000000000000001\"\n@assert solve(10000000000000000000000000000000)\
    \ == \"1000000000000000000000000000000001\"\n@assert solve(100000000000000000000000000000000)\
    \ == \"10000000000000000000000000000000001\"\n@assert solve(1000000000000000000000000000000000)\
    \ == \"100000000000000000000000000000000001\"\n@assert solve(10000000000000000000000000000000000)\
    \ == \"1000000000000000000000000000000000001\"\n@assert solve(100000000000000000000000000000000000)\
    \ == \"10000000000000000000000000000000000001\"\n@assert solve(1000000000000000000000000000000000000)\
    \ == \"100000000000000000000000000000000000001\"\n@assert solve(10000000000000000000000000000000000000)\
    \ == \"1000000000000000000000000000000000000001\"\n@", "    if N < 0 \n      \
    \  return \"Invalid input\"\n    \n    sum = 0\n    \n    for n in N:\n      \
    \  sum += n\n    \n    return show(sum)\nend", "    \n    digits = N % 10\n  \
    \  N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digit", "    \n    if N < 0\n \
    \       return \"Invalid input\"\n    \n    digits = zeros(Int, N)\n    \n   \
    \ for i = 1:N\n        digits[i] = digits[i-1] * 2 + N % 10\n        N = N / 10\n\
    \    end\n    \n    digits = digits[digits[1:end-1]]\n    \n    return join(digits,\
    \ \"\")\nend", "    \n    if N < 0 \n        error(\"N must be positive\")\n \
    \   \n    binary = \"\"\n    \n    for i in 1:N\n        binary = binary + str((N\
    \ % 10) + 1)\n        N = N / 10\n    end\n    \n    return binary\nend", "  \
    \  if N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n   \
    \ \n    if digits == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n\
    \    while N > 0\n        digit = N % 10\n        \n        if digit == 0\n  \
    \          binary += \"0\"\n        else\n            binary += digit\n      \
    \  \n        N /= 10\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(-10)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=juli", "    \n    if N < 0\n        throw(ArgumentError(\"\
    N must be positive\"))\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(-2)\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011", "    if N < 0\n        return\
    \ \"-1\"\n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = N % 2\n        N = N / 2\n    end\n    \n    sum = 0\n    for i = 1:N\n  \
    \      sum = sum + digits[i]\n    end\n    \n    return string(digits, digits[end],\
    \ sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(5)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000003)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000006)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000009)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000012)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000015)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000017)\n</cell", "    \n   \
    \ if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N <\
    \ 10\n        return digits::String\n    \n    digits = solve(N / 10)\n    \n\
    \    return digits + digits::String\nend", "    \n    binary = \"\"\n    \n  \
    \  for n in N:\n        binary = binary + bin(n%2)\n        \n    return binary\n\
    end", "    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend", "    \n    digits = N % 10\n    \n    if N < 10 \n        return\
    \ digits::String\n    \n    digits = N % 10\n    \n    digits = digits * 2\n \
    \   \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits * 2\n    \n    digits = digits % 10\n\
    \    \n    digits = digits * 2\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits * 2\n    \n    digits = digits % 10\n    \n    digits = digits * 2\n\
    \    \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits * 2\n    \n    digits = digits % 10\n\
    \    \n    digits = digits * 2\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits * 2\n    \n    digits = digits % 10\n    \n    digits = digits * 2\n\
    \    \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits * 2\n    \n    digits = digits % 10\n\
    \    \n    digits = digits * 2\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits * 2\n    \n    digits = digits % 10\n    \n    digits = digits * 2\n\
    \    \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits * 2\n    \n    digits = digits % 10\n\
    \    \n    digits = digits * 2\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits * 2\n    \n    digits = digits % 10\n    \n    digits = digits * 2\n\
    \    \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits % 10\n    \n    digits = digits * 2\n    \n    digits = digits % 10\n\
    \    \n    digits = digits * 2\n    \n    digits = digits % 10\n    \n    digits\
    \ = digits * 2\n    \n    digits = digits % 10\n    \n    digits = digits * 2\n\
    \    \n    digits = digits % 10\n    \n    digits = digits * 2\n    \n    digits\
    \ = ", "    if N < 0\n        throw(DomainError(string(\"N must be positive\"\
    )))\n    end\n    \n    binary = \"\"\n    \n    for i in 1:N\n        binary\
    \ = string(binary,digits(i))\n    end\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\
    \n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) ==\
    \ \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\
    \n@assert solve(50) == \"100023\"\n@assert solve(51) == \"100024\"\n@assert solve(52)\
    \ == \"100025\"\n@", "    \n    digits = N % 10\n    N = N / 10\n    \n    if\
    \ N > 0\n        digits = digits + solve(N)\n    end\n    \n    return digits\n\
    end", "    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    N =\
    \ N / 10\n    \n    sum = \"\"\n    while N > 0\n        sum = sum * 10 + digits\n\
    \        N = N / 10\n        digits = N % 10\n        N = N / 10\n    end\n  \
    \  \n    return sum\nend", "    \n    if N < 0\n        return \"Error\"\n   \
    \ \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    return digits::String\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if N < 0\n        return \"Error\"\n    \n    sum = 0\n    \n \
    \   for i in N:\n        sum += i\n    \n    return show(sum)\nend", "    \n \
    \   digits = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010101)\n</cell>\n<code language=juli", "    \n    digits\
    \ = zeros(Int, N)\n    \n    for n in 1:N\n        digits[n] = digits[n-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    digits[end] = digits[end] - 1\n \
    \   \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solve(N)\n</cell>\n<text>\nProblem 7\nWrite a Julia function named count_digits(N)\
    \ that takes an integer N and returns the number of digits in N in binary.", " \
    \   \n    if N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"Invalid input\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"Invalid input\"\n    \n    digits = digits + N\
    \ % 10\n    N = N / 10\n    \n    if N < 0\n        return \"Invalid input\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N /\
    \ 10\n    \n    if N < 0\n        return \"Invalid input\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"Invalid\
    \ input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N\
    \ < 0\n        return \"Invalid input\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"Invalid input\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"Invalid input\"\n    \n    digits = digits + N\
    \ % 10\n    N = N / 10\n    \n    if N < 0\n        return \"Invalid input\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N /\
    \ 10\n    \n    if N < 0\n        return \"Invalid input\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"Invalid\
    \ input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N\
    \ < 0\n        return \"Invalid input\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"Invalid input\"\n    \n\
    \    digits = digits + N % ", "    \n    if N < 0\n        return \"Invalid input\"\
    \n    \n    digits = String[]\n    \n    for d in N\n        digits.push(format(d,\"\
    b\"))\n    \n    sum = 0\n    for d in digits\n        sum += parse(d)\n    \n\
    \    return format((sum % 10), \"b\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</", "    if N < 0\n\
    \        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n  \
    \      return \"1\"\n    \n    digits = \"\"\n    \n    while N > 0\n        digits\
    \ = digits + tostring(N % 2)\n        N = N / 2\n    end\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(5)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n<code language=julia-",
  "    \n    digits = zeros(Int, 10)\n    \n    for i in 1:10\n        digits[i] =\
    \ N % 2\n        N = N / 2\n    end\n    \n    digits[9] = 1\n    \n    digits\
    \ = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n    \n\
    \    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = ", "    \n    if N < 0\n        return \"Invalid input\"\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = N % 10\n    \n\
    \    if N < 10\n        return digits::String\n    \n    digits = solve(N / 10)\n\
    \    \n    return digits + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000", "    \n    digits = N % 10\n    \n\
    \    if digits == 0 \n        return \"0\"\n    \n    binary = \"\"\n    \n  \
    \  while N > 0 \n        \n        digit = N % 10\n        \n        if digit\
    \ == 0 \n            binary = binary + \"0\"\n            \n        else \n  \
    \          binary = binary + \"1\"\n            \n        N = N / 10\n       \
    \ \n    return binary\nend", "    if N < 0\n        return \"Invalid input\"\n\
    \    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    digits = digits + solve(N)\n    \n    return digits\nend",
  "    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    binary\
    \ = \"\"\n    \n    while N > 0\n        binary = digits::String + binary\n  \
    \      N = N / 10\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999", "    \n    if N\
    \ < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N > 0\n\
    \        digits = digits + solve(N / 10)\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899999999999998)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788999999999999987)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999999999999876)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899999999999998765)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999999987654)\n</cell>\n\
    <code language=julia-1.5>\nsolve(", "    \n    digits = zeros(Int64, N)\n    \n\
    \    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n\
    \    end\n    \n    digits = digits[2:end]\n    \n    digits = join(digits, \"\
    \")\n    \n    return digits\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if N < 0\n        return \"0\"\n    \n    digits = String(N).digits()\n\
    \    \n    sum = 0\n    for d in digits\n        sum += Int(d)\n    \n    return\
    \ String(sum)\nend\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n\
    <code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n\
    </cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-1.3>\nsolve(123)\n</cell>\n<code language=julia-1.3>\n\
    solve(123)\n</cell>\n<code language=julia-", "    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N\
    \ == 1\n        return \"1\"\n    \n    if N == 2\n        return \"10\"\n   \
    \ \n    if N == 3\n        return \"11\"\n    \n    if N == 4\n        return\
    \ \"100\"\n    \n    if N == 5\n        return \"101\"\n    \n    if N == 6\n\
    \        return \"110\"\n    \n    if N == 7\n        return \"111\"\n    \n \
    \   if N == 8\n        return \"1000\"\n    \n    if N == 9\n        return \"\
    1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n    if N == 11\n\
    \        return \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n\
    \    if N == 13\n        return \"1101\"\n    \n    if N == 14\n        return\
    \ \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n    if N == 16\n\
    \        return \"10000\"\n    \n    if N == 17\n        return \"10001\"\n  \
    \  \n    if N == 18\n        return \"10010\"\n    \n    if N == 19\n        return\
    \ \"10011\"\n    \n    if N == 20\n        return \"10100\"\n    \n    if N ==\
    \ 21\n        return \"10101\"\n    \n    if N == 22\n        return \"10110\"\
    \n    \n    if N == 23\n        return \"10111\"\n    \n    if N == 24\n     \
    \   return \"11000\"\n    \n    if N == 25\n        return \"11001\"\n    \n \
    \   if N == 26\n        return \"11010\"\n    \n    if N == 27\n        return\
    \ \"11011\"\n    \n    if N == 28\n        return \"11100\"\n    \n    if N ==\
    \ 29\n        return \"11101\"\n    \n    if N == 30\n        return \"11111\"\
    \n    \n    if N == 31\n        return \"100000\"\n    \n    if N == 32\n    \
    \    return \"100001\"\n    \n    if N == 33\n        return \"100010\"\n    \n\
    \    if N == 34\n        return \"100011\"\n    \n    if N == 35\n        return\
    \ \"100100\"\n    \n    if N == 36\n        return \"100101\"\n    \n    if N\
    \ == 37\n        return \"100110\"\n    \n    if N == 38\n        return \"100111\"\
    \n    \n    if N == 39\n        return \"101000\"\n    \n    if N == 40\n    \
    \    return \"101001\"\n    \n    if N == 41\n        return \"101010\"\n    \n\
    \    if N == 42\n        return \"101011\"\n    \n    if N == 43\n        return\
    \ \"101100\"\n    \n    if N == 44\n        return \"101101\"\n    \n    if ",
  "    \n    digits = zeros(Int64, N)\n    \n    for i = 1:N\n        digits[i] =\
    \ digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend", "    \n    if N < 0\n        return \"-1\"\n    \n    digits =\
    \ N % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    binary = \"\
    \"\n    \n    while N > 0\n        digit = N % 10\n        N = N / 10\n      \
    \  binary = digit + binary\n    \n    return binary\nend", "    \n    if N < 0\n\
    \        return \"Error\"\n    \n    binary = \"\"\n    \n    for i in N:\n  \
    \      binary += string(i%2)\n        \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n\
    @assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"\
    100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\
    \n@assert solve(50) == \"100023\"\n@assert solve(51) == \"100024\"\n@assert solve(52)\
    \ == \"100025\"\n@assert solve(53) == \"100026\"\n@assert solve(54", "    if N\
    \ < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    digits = digits:: Int64\n    \n    sum = 0\n    \n    for i\
    \ in digits:: Int64\n        sum = sum + i\n    \n    sum = str(sum)\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n\
    <code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\n\
    solve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.0>\nsolve(12345)\n</cell>\n<code language=julia-1.0>\nsolve(12345)\n\
    </cell>\n<code language=juli", "    if N < 0\n        throw(ArgumentError(\"N\
    \ must be positive\"))\n    \n    digits = zeros(Int, 10)\n    \n    for digit\
    \ in digits[0..N]\n        digits[digit] += 1\n    \n    binary = \"\"\n    \n\
    \    for digit in digits\n        binary += digit2binary(digit)\n    \n    return\
    \ binary\nend", "    if N < 0\n        return \"Invalid input\"\n    \n    digits\
    \ = String[]\n    \n    for d in N\n        push!(digits, d)\n    end\n    \n\
    \    digits = reverse(digits)\n    \n    sum = 0\n    \n    for d in digits\n\
    \        sum += d\n    end\n    \n    return string(digits, base = 2)\nend", " \
    \   \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to N\n\
    \        digits[i] = digits[i-1] * 2\n    end\n    \n    return join(digits, \"\
    \")\nend", "    \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    digits = solve(N / 10)\n    \n    return digits + digits\nend", " \
    \   \n    digits = digits(N)\n    \n    sum = 0\n    \n    for digit in digits\n\
    \        sum += digit\n    \n    return show(sum)\nend", "    \n    binary = \"\
    \"\n    \n    for n in N:\n        if n%2 == 0:\n            binary += \"0\"\n\
    \        else:\n            binary += \"1\"\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"0\"\n@assert solve(2) == \"1\"\
    \n@assert solve(3) == \"11\"\n@assert solve(10) == \"1010\"\n@assert solve(100)\
    \ == \"10001\"\n@assert solve(1000) == \"10010\"\n@assert solve(10000) == \"100001\"\
    \n@assert solve(100000) == \"1000010\"\n@assert solve(1000000) == \"10000001\"\
    \n@assert solve(10000000) == \"100000010\"\n@assert solve(100000000) == \"1000000001\"\
    \n@assert solve(1000000000) == \"10000000010\"\n@assert solve(10000000000) ==\
    \ \"100000000001\"\n@assert solve(100000000000) == \"1000000000010\"\n@assert\
    \ solve(1000000000000) == \"10000000000011\"\n@assert solve(10000000000000) ==\
    \ \"100000000000011\"\n@assert solve(100000000000000) == \"1000000000000011\"\n\
    @assert solve(1000000000000000) == \"10000000000000011\"\n@assert solve(10000000000000000)\
    \ == \"100000000000000011\"\n@assert solve(100000000000000000) == \"1000000000000000011\"\
    \n@assert solve(1000000000000000000) == \"10000000000000000001\"\n@assert solve(10000000000000000000)\
    \ == \"100000000000000000010\"\n@assert solve(100000000000000000000) == \"1000000000000000000010\"\
    \n@assert solve(1000000000000000000000) == \"10000000000000000000010\"\n@assert\
    \ solve(10000000000000000000000) == \"100000000000000000000010\"\n@assert solve(100000000000000000000000)\
    \ == \"1000000000000000000000010\"\n@assert solve(1000000000000000000000000) ==\
    \ \"10000000000000000000000010\"\n@assert solve(10000000000000000000000000) ==\
    \ \"100000000000000000000000010\"\n@assert solve(100000000000000000000000000)\
    \ == \"1000000000000000000000000001\"\n@assert solve(1000000000000000000000000000)\
    \ == \"10000000000000000000000000010\"\n@assert solve(10000000000000000000000000000)\
    \ == \"100000000000000000000000000010\"\n@assert solve(100000000000000000000000000000)\
    \ == \"1000000000000000000000000000010\"\n@assert solve(1000000000000000000000000000000)\
    \ == \"10000000000000000000000000000010\"\n@assert solve(10000000000000000000000000000000)\
    \ == \"100000000000000000000000000000010\"\n@assert solve(100000000000000000000000000000000)\
    \ == \"1000000000000000000000000000000010\"\n@assert solve(1000000000000000000000000000000000)\
    \ == \"10000000000000000000000000000000010\"\n@assert solve(1000000000000000000000000000000000)\
    \ == \"100000000000000000000000000000000011\"\n@assert solve(1000000000000000000000000000000000)\
    \ == \"100000000000000000000000000000000011\"\n@assert solve(1000000000000000000000000000000000)\
    \ == \"100000000000000000000000000000000011\"", "    if N < 0\n        return\
    \ \"0\"\n    \n    digits = String.split(tostring(N))\n    \n    sum = 0\n   \
    \ for d in digits\n        sum += digitdigits(d)\n    \n    return tostring(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>", "  \
    \  \n    if N < 0\n        return \"Invalid input\"\n    \n    digits = String[]\n\
    \    \n    while N > 0\n        digits.push(N % 10)\n        N = N / 10\n    end\n\
    \    \n    digits.reverse()\n    \n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567801234)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678012345678012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456780123456780123)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567801234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567801234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678012345678)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567801234567801)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678012345678012)\n\
    </cell>\n<code language=julia-1.5", "    if N < 0\n        return \"Error\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 0\n        return \"0\"\n \
    \   \n    binary = \"\"\n    \n    while N > 0\n        digit = N % 10\n     \
    \   N = N / 10\n        \n        if digit == 1\n            binary += \"1\"\n\
    \        else\n            binary += \"0\"\n    \n    return binary\nend", " \
    \   \n    if N < 0 \n        return \"Invalid input\"\n    \n    sum = 0\n   \
    \ \n    while N > 0 \n        \n        sum = sum + N % 10\n        N = N / 10\n\
    \        \n    return show(sum)\nend", "    \n    if N < 0 \n        error(\"\
    N is negative\")\n    \n    sum = 0\n    \n    while N > 0 \n        sum = sum\
    \ + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(-5)\n</cell>\n<code language=julia-1.5>\nsolve(5)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>", "    \n    digits = zeros(Int, N)\n  \
    \  \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"0\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    110\"\n@assert solve(10) == \"1010\"\n@assert solve(100) == \"101010\"\n@assert\
    \ solve(1000) == \"10101010\"\n@assert solve(10000) == \"1010101010\"\n@assert\
    \ solve(100000) == \"101010101010\"\n@assert solve(1000000) == \"10101010101010\"\
    \n@assert solve(10000000) == \"1010101010101010\"\n@assert solve(100000000) ==\
    \ \"101010101010101010\"\n@assert solve(1000000000) == \"10101010101010101010\"\
    \n@assert solve(10000000000) == \"1010101010101010101010\"\n@assert solve(100000000000)\
    \ == \"101010101010101010101010\"\n@assert solve(1000000000000) == \"10101010101010101010101010\"\
    \n@assert solve(10000000000000) == \"1010101010101010101010101010\"\n@assert solve(100000000000000)\
    \ == \"101010101010101010101010101010\"\n@assert solve(1000000000000000) == \"\
    10101010101010101010101010101010\"\n@assert solve(10000000000000000) == \"1010101010101010101010101010101010\"\
    \n@assert solve(100000000000000000) == \"101010101010101010101010101010101010\"\
    \n@assert solve(1000000000000000000) == \"10101010101010101010101010101010101010\"\
    \n@assert solve(10000000000000000000) == \"1010101010101010101010101010101010101010\"\
    \n@assert solve(100000000000000000000) == \"101010101010101010101010101010101010101010\"\
    \n@assert solve(1000000000000000000000) == \"10101010101010101010101010101010101010101010\"\
    \n@assert solve(10000000000000000000000) == \"1010101010101010101010101010101010101010101010\"\
    \n@assert solve(100000000000000000000000) == \"101010101010101010101010101010101010101010101010\"\
    \n@assert solve(1000000000000000000000000) == \"101010101010101010101010101010101010101010101010101010\"\
    \n@assert solve(10000000000000000000000000) == \"1010101010101010101010101010101010101010101010101010\"\
    \n@assert solve(100000000000000000000000000) == \"1010101010101010101010101010101010101010101010101010101010\"\
    \n@assert solve(1000000000000000000000000000) == \"101010101010101010101010101010101010101010101010",
  "    \n    digits = N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digit", "    \n    digits = N % 10\n    \n    if digits == 0\n        digits\
    \ = N / 10\n        \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits::\
    \ Int64\n    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n\
    \    \n    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n\
    \    digits = digits:: Int64\n    \n    digits = digits:: Int64\n    \n    digits\
    \ = ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n \
    \   \n    if digits == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n\
    \    while N > 0\n        binary = digits_to_binary(digits, binary)\n        N\
    \ = N / 10\n        \n    return binary\nend", "    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time solve(10000)\n</cell>\n<text>\nExercise 2\nWrite a Julia function that returns\
    \ the sum of its digits in binary for numbers up to $10^9$. Your function should\
    \ take $10^9$ as an argument and return the result as a string.", "    \n    if\
    \ N < 0\n        return \"Invalid input\"\n    \n    digits = zeros(Int, N)\n\
    \    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000002)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000005)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000008)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000014)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n</cell>\n<code language=julia-1.5>",
  "    if N < 0\n        return \"Error: N < 0\"\n    \n    digits = N % 10\n    \n\
    \    if N > 0\n        digits = digits + solve(N / 10)\n    \n    return digits\n\
    end", "    \n    digits = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000002)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000005)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000008)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000014)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000017)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000018)\n\
    </cell>\n", "    \n    binary = \"\"\n    \n    for n in N:\n        binary =\
    \ binary + str((n%2)+1)\n        \n    return binary\nend\n</cell>\n<code language=julia-1.3>\n\
    solve([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nProblem 4\nWrite a Julia function\
    \ that takes a positive integer N and returns the number of digits in binary representation\
    \ of N.", "    if N < 0 \n        return \"Invalid input\"\n    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    if N > 0 \n        digits = digits + solve(N)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n\
    </cell>\n<text>\nProblem 4\nWrite a Julia function called sumdigits which takes\
    \ in a positive integer N and returns the sum of its digits in binary. For example,\
    \ sumdigits(123) = 1 + 2 + 3 = 6.", "    if N < 0\n        return \"-1\"\n   \
    \ \n    digits = String[1..N]\n    \n    binary = \"\"\n    \n    for i in digits\n\
    \        binary += i\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010101)\n\
    </cell>\n<code language=juli", "    \n    if N < 0\n        return \"Invalid input\"\
    \n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 100\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 1000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 10000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 100000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 1000000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 10000000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 100000000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 1000000000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 10000000000\n        return\
    \ digits::String\n    \n    digits = digits % 10\n    \n    if N < 100000000000\n\
    \        return digits::String\n    \n    digits = digits % 10\n    \n    if N\
    \ < 1000000000000\n        return digits::String\n    \n    digits = digits %\
    \ 10\n    \n    if N < 10000000000000\n        return digits::String\n    \n \
    \   digits = digits % 10\n    \n    if N < 100000000000000\n        return digits::String\n\
    \    \n    digits = digits % 10\n    \n    if N < 1000000000000000\n        return\
    \ digits::String\n    \n    digits = digits % 10\n    \n    if N < 10000000000000000\n\
    \        return digits::String\n    \n    digits = digits % 10\n    \n    if N\
    \ < 100000000000000000\n        return digits::String\n    \n    digits = digits\
    \ % 10\n    \n    if N < 1000000000000000000\n        return digits::String\n\
    \    \n    return \"Invalid input\"\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5", "    \n    digits = N\
    \ % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n \
    \   \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digit", "    \n\
    \    digits = \"\"\n    \n    for i in N:\n        digits = digits + bin(i)[2:]\n\
    \    \n    return digits\nend", "    \n    if N < 0\n        return \"0\"\n  \
    \  \n    digits = N % 10\n    \n    if digits == 0\n        return \"0\"\n   \
    \ \n    binary = \"\"\n    \n    while N > 0\n        \n        digit = N % 10\n\
    \        \n        if digit == 0\n            binary = binary + \"0\"\n      \
    \      \n        else\n            binary = binary + \"1\"\n            \n   \
    \     N = N / 10\n        \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999999)\n</",
  "    if N < 0\n        return \"0\"\n    \n    digits = String[]\n    \n    digits\
    \ = digits[0..(N-1)]\n    \n    sum = 0\n    for i in digits\n        sum = sum\
    \ + Int(i)\n    \n    return String(sum)\nend", "    \n    if N < 0\n        return\
    \ \"Error\"\n    \n    digits = N % 10\n    \n    if digits == 0\n        return\
    \ tostring(N)\n    \n    digits = tostring(digits)\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits ", "    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    sum = \"\"\n    \n    while N > 0\n        \n        sum = sum + digits[N\
    \ % 10]\n        N = N / 10\n        \n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-", "    \n    digits = zeros(Int,\
    \ 10)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n     \
    \   N = N / 10\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000004)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000007)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000013)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000016)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000017)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000018)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000019)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000020)",
  "    if N < 0 \n        return \"Invalid input\"\n    \n    digits = N % 10\n  \
    \  \n    if digits == 0 \n        return \"0\"\n    \n    binary = \"\"\n    \n\
    \    while N > 0 \n        digit = N % 10\n        binary = digit::binary + digit\n\
    \        N = N / 10\n    \n    return binary\nend", "    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits =\
    \ digits + solve(N)\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(123456)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567)\n</cell>\n<code language=julia-1.5>\nsolve(12345678)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901)\n</cell>\n\
    <code language=julia-1.5>\nsolve(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve
  "    \n    if N < 0\n        return \"Invalid input\"\n    \n    sum = 0\n    \n\
    \    while N > 0\n        sum += N % 2\n        N /= 2\n    \n    return show(sum)\n\
    end", "    \n    digits = N % 10\n    \n    if digits == 0 \n        return \"\
    0\"\n    \n    binary = \"\"\n    \n    while N > 0 \n        binary = digits_to_binary(digits)\
    \ + binary\n        N = N / 10\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010100)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101010100)\n</cell>\n<code language=julia-1.5>\nsolve(100",
  "    if N < 0\n        return \"0\"\n    \n    digits = String[1..N]\n    \n   \
    \ binary = \"\"\n    for digit in digits\n        binary += digit\n        \n\
    \    return binary\nend", "    \n    if N < 0\n        return \"-1\"\n    \n \
    \   if N == 0 \n        return \"0\"\n    \n    if N == 1 \n        return \"\
    1\"\n    \n    digits = N % 10\n    \n    binary = \"\"\n    \n    while N > 0\n\
    \        \n        N = N / 10\n        \n        binary = binary + digits_to_binary(digits)\n\
    \        \n        digits = N % 10\n        \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(-2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000004)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000007)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000013)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n\
    </cell>", "    \n    digits = N % 10\n    \n    if N < 10\n        \n        return\
    \ digits::String\n    \n    digits = solve(N / 10)\n    \n    return digits +\
    \ digits\nend", "    \n    digits = N%10\n    N = N//10\n    \n    digits = digits%10\n\
    \    \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits\
    \ = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n  \
    \  \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits =\
    \ digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n    \n\
    \    digits = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n\
    \    \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits\
    \ = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n  \
    \  \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits =\
    \ digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n    \n\
    \    digits = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n\
    \    \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits\
    \ = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n  \
    \  \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits =\
    \ digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n    \n\
    \    digits = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n\
    \    \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits\
    \ = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n  \
    \  \n    digits = digits%10\n    \n    digits = digits%10\n    \n    digits =\
    \ digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n    \n\
    \    digits = digits%10\n    \n    digits = digits%10\n    \n    digits = digits%10\n\
    \    \n    digits = digits%10\n    \n    digits = digits%10\n    \n", "    \n\
    \    digits = N%2\n    N = N/2\n    \n    if N == 0 \n        return \"0\"\n \
    \   \n    if N == 1 \n        return \"1\"\n    \n    return solve(N-1) + digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000003)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000006)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000009)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000012)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000015)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000017)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000018)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000019)\n\
    </cell>", "    \n    digits = zeros(Int64, N)\n    \n    for i in 1:N\n      \
    \  digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return\
    \ join(digits, \"\")\nend", "    \n    binary = \"\"\n    \n    for n in N:\n\
    \        binary = binary + bin(n,2)\n    \n    return binary\nend", "    \n  \
    \  if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N <\
    \ 10\n        return digits::String\n    \n    digits = solve(N / 10)\n    \n\
    \    return digits + digits::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000001010100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001010101)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000010101010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000101010100)\n</cell>\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    sum\
    \ = \"\"\n    \n    while N > 0\n        sum = sum + digits[N % 10]\n        N\
    \ = N / 10\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999999)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567889999999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678899999999999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999999987)\n\
    </cell>\n<code language=juli", "    if N < 0\n        return \"Invalid input\"\
    \n    \n    digits = N % 10\n    N = N / 10\n    \n    sum = \"\"\n    while N\
    \ > 0\n        sum = digits*10 + sum\n        N = N / 10\n        digits = N %\
    \ 10\n        N = N / 10\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(1234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(1234567)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678)\n</cell>\n<code language=julia-1.5>\nsolve(123456789)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    solve(123456789012345678)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    solve(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456788999999)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567889999999)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999999)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567889999999999", "    \n    digits\
    \ = zeros(Int, 10)\n    \n    for digit in digits:\n        digits[digit] = N\
    \ % 2\n        N = N / 2\n    \n    digits = reverse(digits)\n    \n    return\
    \ join(digits, \"\")\nend", "    \n    binary = \"\"\n    \n    for n in N:\n\
    \        binary += string(n)\n    \n    return binary\nend", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    if N < 0\n        return\
    \ \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n\
    \        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901)\n</cell>\n<code language=julia-1.5>\nsolve(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567)\n</cell>\n<code language=julia-1.5>\nsolve(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345678901234567801234)\n</cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1234567890123456780123456780123)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801234567801234)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345678901234567801234567801234567)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(123456789012345678012345678012345678)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801234567801)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1234567890123456780123456780123456780123)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345678901234567801234567801234567801234)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345678901234567801234567801234567801234567)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123456789012345678012345678012345678012345678)\n\
    </cell>\n<code language=julia-", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    if N < 0 \n        return \"-1\"\n    \n    digits\
    \ = N % 10\n    \n    if digits == 0 \n        return \"0\"\n    \n    binary\
    \ = \"\"\n    \n    while N > 0 \n        \n        digit = N % 10\n        \n\
    \        if digit == 0 \n            binary += \"0\"\n            \n        else\
    \ \n            binary += \"1\"\n            \n        N = N / 10\n        \n\
    \    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n\
    <code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n\
    </cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code language=julia-1.5>\n\
    solve(12345)\n</cell>\n<code language=julia-1.5>\nsolve(12345)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(12345)\n</cell>", "    \n    digits = N % 10\n  \
    \  N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digit", "    \n    binary = \"\"\
    \n    \n    if N < 0 \n        error(\"N must be positive\")\n    \n    if N ==\
    \ 0 \n        binary = \"0\"\n    \n    else \n        \n        digits = floor(log2(N))\n\
    \        \n        binary = replicate(digits, 0)\n        \n        for i in 1:digits\n\
    \            binary[i] = \"1\"\n        end\n        \n        for i in digits:-1:1\n\
    \            binary[i] = \"0\"\n        end\n        \n        for i in 1:digits\n\
    \            binary = binary[1:i] + binary[i]\n        end\n        \n       \
    \ for i in digits:-1:1\n            binary = binary[1:i] + binary[i]\n       \
    \ end\n        \n        for i in digits:-1:1\n            binary = binary[1:i]\
    \ + binary[i]\n        end\n        \n        for i in digits:-1:1\n         \
    \   binary = binary[1:i] + binary[i]\n        end\n        \n        for i in\
    \ digits:-1:1\n            binary = binary[1:i] + binary[i]\n        end\n   \
    \     \n        for i in digits:-1:1\n            binary = binary[1:i] + binary[i]\n\
    \        end\n        \n        for i in digits:-1:1\n            binary = binary[1:i]\
    \ + binary[i]\n        end\n        \n        for i in digits:-1:1\n         \
    \   binary = binary[1:i] + binary[i]\n        end\n        \n        for i in\
    \ digits:-1:1\n            binary = binary[1:i] + binary[i]\n        end\n   \
    \     \n        for i in digits:-1:1\n            binary = binary[1:i] + binary[i]\n\
    \        end\n        \n        for i in digits:-1:1\n            binary = binary[1:i]\
    \ + binary[i]\n        end\n        \n        for i in digits:-1:1\n         \
    \   binary = binary[1:i] + binary[i]\n        end\n        \n        for i in\
    \ digits:-1:1\n            binary = binary[1:i] + binary[i]\n        end\n   \
    \     \n        for i in digits:-1:1\n            binary = binary[1:i] + binary[i]\n\
    \        end\n        \n        for i in digits:-1:1\n            binary = binary[1:i]\
    \ + binary[i]\n        end\n        \n        for i in digits:-1:1\n         \
    \   binary = binary[1:i] + binary[i]\n        end\n        \n        for i in\
    \ digits:-1:1\n            binary = binary[1:i] + binary[i]\n        end\n   \
    \     \n        for i in digits:-1:1\n            binary = binary[1:i] + binary[i]\n\
    \        end\n        \n        for i in digits:-1:1\n            binary = binary[1:i]\
    \ + binary[i]\n        end\n        \n        for i in digits:-1:1\n         \
    \   binary = binary[1:i] + binary[i]\n        end\n        \n        for i in\
    \ digits:-1:1\n            binary = binary[1:i] + binary[i]\n        end\n   \
    \     \n        for i in digit", "    if N < 0\n        return \"-1\"\n    \n\
    \    digits = zeros(Int, N+1)\n    digits[1] = 1\n    \n    for i = 2 to N\n \
    \       digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return string(digits)\n\
    end", "    if N < 0 \n        return \"Invalid input\"\n    \n    digits = N %\
    \ 10\n    N = N / 10\n    \n    if N < 0 \n        return \"Invalid input\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n   \
    \     return \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N\
    \ / 10\n    \n    if N < 0 \n        return \"Invalid input\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"Invalid\
    \ input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N\
    \ < 0 \n        return \"Invalid input\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"Invalid input\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"Invalid input\"\n    \n    digits = digits +\
    \ N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"Invalid input\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n  \
    \      return \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N\
    \ / 10\n    \n    if N < 0 \n        return \"Invalid input\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"Invalid\
    \ input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N\
    \ < 0 \n        return \"Invalid input\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"Invalid input\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"Invalid input\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"Invalid input\"\n    \n    digits = digits +\
    \ N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"Invalid input\"\
    \n    \n    digits = digits + N % 10\n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
