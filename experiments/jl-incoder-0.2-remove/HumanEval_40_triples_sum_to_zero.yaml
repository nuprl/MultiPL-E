name: HumanEval_40_triples_sum_to_zero
language: jl
prompt: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n \
  \   it returns True if there are three distinct elements in the list that\n    sum\
  \ to zero, and False otherwise.\n\n                        \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
  \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
  \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
  \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
  \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
  \ 3, 5, -100]) == false)\nend\n"
completions: ["    \n    sum = 0\n    for x in l\n        sum += x\n        if sum\
    \ == 0\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes a list\
    \ of integers as an input.\n    it returns True if there are three distinct elements\
    \ in the list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ [], 0)\nend", "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    \n\
    \    for x in l\n        if triples_sum_to_zero[x] == 1\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = @view l == [0,0,0]\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        if x != 0 &&\
    \ x != 1 && x != 2\n            triples_sum_to_zero = true\n        end\n    end\n\
    \    return triples_sum_to_zero\nend", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    \n    for i in 1:3\n        triples_sum_to_zero[i] = sum(l[(i-1)*3:i*3])\n\
    \    end\n    \n    if triples_sum_to_zero[1]==0 && triples_sum_to_zero[2]==0\
    \ && triples_sum_to_zero[3]==0\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero = triples_sum_to_zero(l)\n    if triples_sum_to_zero ==\
    \ true\n        return true\n    else\n        return false\n    end\nend", " \
    \   triples_sum_to_zero = false \n    for x in l\n        if x == 0 || x == -x\
    \ || x == -x-x\n            triples_sum_to_zero = true\n            break\n  \
    \      end\n    end\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = false \n    for x in l \n        if x != 0 && x != 1 && x != 2 \n        \
    \    triples_sum_to_zero = true \n            break \n        end \n    end \n\
    \    return triples_sum_to_zero \nend \n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell", "    triples = Vector{Int64}()\n\
    \    for i in l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    \n    for x in l\n        if triples_sum_to_zero[x] == 1\n        \
    \    return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    triples = zip(l, l[1:end-1], l[2:end])\n    triples_sum_to_zero\
    \ = all(map(x -> x==0, triples))\n    return triples_sum_to_zero\nend", "    \n\
    \    triples_sum_to_zero = false\n    \n    triples_sum_to_zero = triples_sum_to_zero\
    \ or l[1] == 0 && l[2] == 0\n    triples_sum_to_zero = triples_sum_to_zero or\
    \ l[3] == 0 && l[4] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[5]\
    \ == 0 && l[6] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[7] ==\
    \ 0 && l[8] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[9] == 0 &&\
    \ l[10] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[11] == 0 && l[12]\
    \ == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[13] == 0 && l[14] ==\
    \ 0\n    triples_sum_to_zero = triples_sum_to_zero or l[15] == 0 && l[16] == 0\n\
    \    triples_sum_to_zero = triples_sum_to_zero or l[17] == 0 && l[18] == 0\n \
    \   triples_sum_to_zero = triples_sum_to_zero or l[19] == 0 && l[20] == 0\n  \
    \  triples_sum_to_zero = triples_sum_to_zero or l[21] == 0 && l[22] == 0\n   \
    \ triples_sum_to_zero = triples_sum_to_zero or l[23] == 0 && l[24] == 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero or l[25] == 0 && l[26] == 0\n    triples_sum_to_zero =\
    \ triples_sum_to_zero or l[27] == 0 && l[28] == 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ or l[29] == 0 && l[30] == 0\n    triples_sum_to_zero = triples_sum_to_zero or\
    \ l[31] == 0 && l[32] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[33]\
    \ == 0 && l[34] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[35] ==\
    \ 0 && l[36] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[37] == 0\
    \ && l[38] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[39] == 0 &&\
    \ l[40] == 0\n    triples_sum_to_zero = triples_sum_to_zero or l[41] == 0 && l[42]\
    \ == 0\n    triples_sum_to_zero = triples_sum_to_zero ", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend",
  "    triples = Vector{Int64}()\n    for x in l\n        if x != 0\n            if\
    \ x != l[1]\n                if x != l[2]\n                    push!(triples,\
    \ x)\n                end\n            end\n        end\n    end\n    return length(triples)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([0,0,0])\
    \ == true\n@assert triples_sum_to_zero([0,0,1]) == false\n@assert triples_sum_to_zero([0,0,2])\
    \ == false\n@assert triples_sum_to_zero([0,0,3]) == false\n@assert triples_sum_to_zero([0,0,4])\
    \ == false\n@assert triples_sum_to_zero([0,0,5]) == false\n@assert triples_sum_to_zero([0,0,6])\
    \ == false\n@assert triples_sum_to_zero([0,0,7]) == false\n@assert triples_sum_to_zero([0,0,8])\
    \ == false\n@assert triples_sum_to_zero([0,0,9]) == false\n@assert triples_sum_to_zero([0,0,10])\
    \ == false\n@assert triples_sum_to_zero([0,0,11]) == false\n@assert triples_sum_to_zero([0,0,12])\
    \ == false\n@assert triples_sum_to_zero([0,0,13]) == false\n@assert triples_sum_to_zero([0,0,14])\
    \ == false\n@assert triples_sum_to_zero([0,0,15]) == false\n@assert triples_sum_to_zero([0,0,16])\
    \ == false\n@assert triples_sum_to_zero([0,0,17]) == false\n@assert triples_sum_to_zero([0,0,18])\
    \ == false\n@assert triples_sum_to_zero([0,0,19]) == false\n@assert triples_sum_to_zero([0,0,20])\
    \ == false\n@assert triples_sum_to_zero([0,0,21]) == false\n@assert triples_sum_to_zero([0,0,22])\
    \ == false\n@assert triples_sum_to_zero([0,0,23]) == false\n@assert triples_sum_to_zero([0,0,24])\
    \ == false\n@assert triples_sum_to_zero([0,0,25]) == false\n@assert triples_sum_to_zero([0,0,26])\
    \ == false\n@assert triples_sum_to_zero([0,0,27]) == false\n@assert triples_sum_to_zero([0,0,28])\
    \ == false\n@assert triples_sum_to_zero([0,0,29]) == false\n@assert triples_sum_to_zero([0,0,30])\
    \ == false\n@assert triples_sum_to_zero([0,0,31]) == false\n@assert triples_sum_to_zero([0,0,",
  "    triples_sum_to_zero = \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0\nend", "    triples = Vector{Int64}()\n    triples_sum_to_zero(triples,\
    \ l)\n    return length(triples) == 3\nend", "    \n    sum = 0\n    for x in\
    \ l\n        sum += x\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input and returns a list of integers such that each element in the list is\
    \ an integer that is the sum of the first three elements in the list. For example,\
    \ if the list is [1,2,3,4,5,6,7,8,9,10], the function should return [1,2,5,8,10].",
  "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    \n    for x in l\n       \
    \ if triples_sum_to_zero[1] == 0\n            triples_sum_to_zero[1] += x\n  \
    \      elseif triples_sum_to_zero[2] == 0\n            triples_sum_to_zero[2]\
    \ += x\n        elseif triples_sum_to_zero[0] == 0\n            triples_sum_to_zero[0]\
    \ += x\n        end\n    end\n    \n    if triples_sum_to_zero[1] == triples_sum_to_zero[2]\
    \ && triples_sum_to_zero[2] == triples_sum_to_zero[0]\n        return true\n \
    \   else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples = zip(l, l[1:end-1], l[2:end])\n\
    \    triples_sum_to_zero = all(x -> x[1] == 0 && x[2] == 0, triples)\n    return\
    \ triples_sum_to_zero\nend", "    triples_sum_to_zero = false \n    for x in l\n\
    \        for y in l\n            for z in l\n                if x+y+z == 0\n \
    \                   triples_sum_to_zero = true\n                    return triples_sum_to_zero\n\
    \    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero = false \n    for x in l\n \
    \       if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero = true\n\
    \            break\n        end\n    end\n    return triples_sum_to_zero\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    \n    sum = 0\n    for i in l\n       \
    \ sum += i\n    end\n    \n    sum == 0\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = triples_sum_to_zero_helper(l)\n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1,0,1]) == true\n@assert\
    \ triples_sum_to_zero([1,1,1]) == false\n@assert triples_sum_to_zero([1,0,2])\
    \ == false\n@assert triples_sum_to_zero([1,2,1]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,3,1]) == false\n@assert triples_sum_to_zero([1,0,4])\
    \ == false\n@assert triples_sum_to_zero([1,4,1]) == false\n@assert triples_sum_to_zero([1,0,5])\
    \ == false\n@assert triples_sum_to_zero([1,5,1]) == false\n@assert triples_sum_to_zero([1,0,6])\
    \ == false\n@assert triples_sum_to_zero([1,6,1]) == false\n@assert triples_sum_to_zero([1,0,7])\
    \ == false\n@assert triples_sum_to_zero([1,7,1]) == false\n@assert triples_sum_to_zero([1,0,8])\
    \ == false\n@assert triples_sum_to_zero([1,8,1]) == false\n@assert triples_sum_to_zero([1,0,9])\
    \ == false\n@assert triples_sum_to_zero([1,9,1]) == false\n@assert triples_sum_to_zero([1,0,10])\
    \ == false\n@assert triples_sum_to_zero([1,10,1]) == false\n@assert triples_sum_to_zero([1,0,11])\
    \ == false\n@assert triples_sum_to_zero([1,11,1]) == false\n@assert triples_sum_to_zero([1,0,12])\
    \ == false\n@assert triples_sum_to_zero([1,12,1]) == false\n@assert triples_sum_to_zero([1,0,13])\
    \ == false\n@assert triples_sum_to_zero([1,13,1]) == false\n@assert triples_sum_to_zero([1,0,14])\
    \ == false\n@assert triples_sum_to_zero([1,14,1]) == false\n@assert triples_sum_to_zero([1,0,15])\
    \ == false\n@assert triples_sum_to_zero([1,15,1]) == false\n@assert triples_sum_to_zero([1,0,16])\
    \ == false\n@assert triples_sum_to_zero([1,16,1]) == false\n@assert triples_sum_to_zero([1,0,17])\
    \ == false\n@assert triples_sum_to_zero", "    triples = Vector{Int64}()\n   \
    \ for x in l\n        if triples.contains(x)\n            triples.push(x)\n  \
    \      else\n            triples.push(x)\n            triples.push(x)\n      \
    \  end\n    end\n    return length(triples) == 3\nend\n</cell>\n<code language=julia-1.3>\n\
    @test triples_sum_to_zero([1,2,3]) == true\n@test triples_sum_to_zero([1,2,4])\
    \ == false\n@test triples_sum_to_zero([1,2,5]) == false\n@test triples_sum_to_zero([1,2,6])\
    \ == false\n@test triples_sum_to_zero([1,2,7]) == false\n@test triples_sum_to_zero([1,2,8])\
    \ == false\n@test triples_sum_to_zero([1,2,9]) == false\n@test triples_sum_to_zero([1,2,10])\
    \ == false\n@test triples_sum_to_zero([1,2,11]) == false\n@test triples_sum_to_zero([1,2,12])\
    \ == false\n@test triples_sum_to_zero([1,2,13]) == false\n@test triples_sum_to_zero([1,2,14])\
    \ == false\n@test triples_sum_to_zero([1,2,15]) == false\n@test triples_sum_to_zero([1,2,16])\
    \ == false\n@test triples_sum_to_zero([1,2,17]) == false\n@test triples_sum_to_zero([1,2,18])\
    \ == false\n@test triples_sum_to_zero([1,2,19]) == false\n@test triples_sum_to_zero([1,2,20])\
    \ == false\n@test triples_sum_to_zero([1,2,21]) == false\n@test triples_sum_to_zero([1,2,22])\
    \ == false\n@test triples_sum_to_zero([1,2,23]) == false\n@test triples_sum_to_zero([1,2,24])\
    \ == false\n@test triples_sum_to_zero([1,2,25]) == false\n@test triples_sum_to_zero([1,2,26])\
    \ == false\n@test triples_sum_to_zero([1,2,27]) == false\n@test triples_sum_to_zero([1,2,28])\
    \ == false\n@test triples_sum_to_zero([1,2,29]) == false\n@test triples_sum_to_zero([1,2,30])\
    \ == false\n@test triples_sum_to_zero([1,2,31]) == false\n@test triples_sum_to_zero([1,2,32])\
    \ == false\n@test triples_sum_to_zero([1,2,33]) == false\n@test triples_sum_to_zero([1,2,34])\
    \ == false\n@test triples_sum_to_zero([1,2,35]) == false", "    triples_sum_to_zero\
    \ = false \n    for x in l \n        for y in l \n            for z in l \n  \
    \              if x+y+z == 0 \n                    triples_sum_to_zero = true\
    \ \n                    break \n                end \n            end \n     \
    \   end \n    end \n    return triples_sum_to_zero \nend \n</cell>\n<code language=julia-1.0>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nProblem 7",
  "    \n    sum = 0\n    for i in l\n        sum += i\n    end\n    \n    if sum\
    \ == 0 \n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        for y in l\n            for z in l\n     \
    \           if x+y+z == 0\n                    triples_sum_to_zero = true\n  \
    \                  break\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    \n    sum = 0\n    for i in l\n        sum += i\n    end\n    \n  \
    \  if sum == 0 \n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = triples_sum_to_zero_helper(l)\n\
    \    return triples_sum_to_zero\nend", "    triples_sum_to_zero = l == [0,0,0]\n\
    \    return triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum > 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,2,3])\
    \ == true\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false\n@test triples_sum_to_zero([1,0,3])\
    \ == false\n@test triples_sum_to_zero([1,0,3]) == false", "    triples_sum_to_zero\
    \ = \n        sum([l[i]*l[i+2]*l[i+3] for i in 1:length(l)]) == 0 \n    return\
    \ triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.3>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a list of integers as an\
    \ input.\nIt returns True if there are three distinct elements in the list that\n\
    sum to zero, and False otherwise.", "    triples_sum_to_zero = l == [0,0,0]\n\
    \    return triples_sum_to_zero\nend", "    \n    sum = 0\n    for i in l\n  \
    \      sum += i\n    end\n    \n    triples_sum_to_zero = sum == 0\n    \n   \
    \ return triples_sum_to_zero\nend", "    \n    triples = Vector{Int64}()\n   \
    \ \n    for x in l\n        if x != 0\n            if x != 1\n               \
    \ if x != 2\n                    push!(triples, x)\n                end\n    \
    \        end\n        end\n    end\n    \n    if length(triples) == 3\n      \
    \  return true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([0,0,0]) == true\n@assert triples_sum_to_zero([0,0,1])\
    \ == true\n@assert triples_sum_to_zero([0,0,2]) == true\n@assert triples_sum_to_zero([0,1,0])\
    \ == false\n@assert triples_sum_to_zero([0,1,1]) == false\n@assert triples_sum_to_zero([0,1,2])\
    \ == false\n@assert triples_sum_to_zero([0,2,0]) == false\n@assert triples_sum_to_zero([0,2,1])\
    \ == false\n@assert triples_sum_to_zero([0,2,2]) == false\n@assert triples_sum_to_zero([1,0,0])\
    \ == false\n@assert triples_sum_to_zero([1,0,1]) == false\n@assert triples_sum_to_zero([1,0,2])\
    \ == false\n@assert triples_sum_to_zero([1,1,0]) == false\n@assert triples_sum_to_zero([1,1,1])\
    \ == false\n@assert triples_sum_to_zero([1,1,2]) == false\n@assert triples_sum_to_zero([1,2,0])\
    \ == false\n@assert triples_sum_to_zero([1,2,1]) == false\n@assert triples_sum_to_zero([1,2,2])\
    \ == false\n@assert triples_sum_to_zero([2,0,0]) == false\n@assert triples_sum_to_zero([2,0,1])\
    \ == false\n@assert triples_sum_to_zero([2,0,2]) == false\n@assert triples_sum_to_zero([2,1,0])\
    \ == false\n@assert triples_sum_to_zero([2,1,1]) == false\n@assert triples_sum_to_zero([2,1,2])\
    \ == false\n@assert triples_sum_to_zero([2,2,0]) == false\n@assert triples_sum_to_zero([2,2,1])\
    \ == false\n@assert triples_sum_to_zero([2,2,2]) == false\n@assert triples_sum_to_zero([2,3,0])\
    \ == false\n@assert triples_sum_to_zero([2,3,1]) == false\n@assert triples_sum_to_zero([2,3,2])\
    \ == false\n@assert triples_sum_to_zero([3,3,0]) == false\n@assert triples_sum_to_zero([3,3,1])\
    \ == false\n@assert triples_sum_to_", "    triples_sum_to_zero = false \n    for\
    \ x in l\n        if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero\
    \ = true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    \n    triples = Vector{Int64}()\n    \n    for i in 1:length(l)\n \
    \       triples.push((l[i], l[i - 1], l[i - 2]))\n    end\n    \n    triples_sum_to_zero(triples)\n\
    end", "    \n    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    \n\
    \    for i in 1:length(l)\n        if triples_sum_to_zero[sum((l[i-1:i+1]))]==1\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero([1,2,4,5])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,4,5,6,7])\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1]\
    \ = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero\
    \ = tuple(triples_sum_to_zero)\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes a list\
    \ of integers as an input.\n    it returns True if there are three distinct elements\
    \ in the list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        for y in l\n            for z in l\n     \
    \           if x+y+z == 0\n                    triples_sum_to_zero = true\n  \
    \                  break\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    \n    triples_sum_to_zero = false\n    \n    for x in l\n        for\
    \ y in l\n            for z in l\n                if x+y+z == 0\n            \
    \        triples_sum_to_zero = true\n                    break\n            end\n\
    \        end\n    end\n    \n    return triples_sum_to_zero\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([0,0,0])\
    \ == true\n@assert triples_sum_to_zero([0,0,1]) == false\n@assert triples_sum_to_zero([0,0,2])\
    \ == false\n@assert triples_sum_to_zero([0,1,0]) == false\n@assert triples_sum_to_zero([0,1,1])\
    \ == true\n@assert triples_sum_to_zero([0,1,2]) == false\n@assert triples_sum_to_zero([0,2,0])\
    \ == false\n@assert triples_sum_to_zero([0,2,1]) == false\n@assert triples_sum_to_zero([0,2,2])\
    \ == true\n@assert triples_sum_to_zero([1,0,0]) == false\n@assert triples_sum_to_zero([1,0,1])\
    \ == false\n@assert triples_sum_to_zero([1,0,2]) == false\n@assert triples_sum_to_zero([1,1,0])\
    \ == false\n@assert triples_sum_to_zero([1,1,1]) == false\n@assert triples_sum_to_zero([1,1,2])\
    \ == false\n@assert triples_sum_to_zero([1,2,0]) == false\n@assert triples_sum_to_zero([1,2,1])\
    \ == false\n@assert triples_sum_to_zero([1,2,2]) == false\n@assert triples_sum_to_zero([2,0,0])\
    \ == false\n@assert triples_sum_to_zero([2,0,1]) == false\n@assert triples_sum_to_zero([2,0,2])\
    \ == false\n@assert triples_sum_to_zero([2,1,0]) == false\n@assert triples_sum_to_zero([2,1,1])\
    \ == false\n@assert triples_sum_to_zero([2,1,2]) == false\n@assert triples_sum_to_zero([2,2,0])\
    \ == false\n@assert triples_sum_to_zero([2,2,1]) == false\n@assert triples_sum_to_zero([2,2,2])\
    \ == false\n</cell>\n<text>\nProblem 4\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.", "    \n    triples_sum_to_zero\
    \ = false \n    \n    for x in l \n        triples_sum_to_zero = false \n    \
    \    for y in l \n            if x + y == 0 \n                triples_sum_to_zero\
    \ = true \n                break \n            end \n        end \n    end \n\
    \    \n    return triples_sum_to_zero \nend ", "    triples_sum_to_zero = false\
    \ \n    for x in l\n        if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero\
    \ = true \n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    \n    sum = 0\n    for x in l\n        sum += x\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 \n\
    end", "    \n    sum = 0\n    for i in l\n        sum += i\n    end\n    \n  \
    \  triples_sum_to_zero = (sum == 0)\n    \n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero(l, [], 0)\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    for x in l\n        triples_sum_to_zero[(x-3)%3]+=1\n    end\n    return\
    \ triples_sum_to_zero[1]==3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,",
  "    triples_sum_to_zero = @view l |> filter(x->(x+x+x)==0, l) |> length==3\n  \
    \  return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(vec(1:10000))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero = triples_sum_to_zero\
    \ * l\n    return triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3]\
    \ == 0\nend", "    triples_sum_to_zero = triples_sum_to_zero(l, 0)\n    return\
    \ triples_sum_to_zero\nend", "    triples_sum_to_zero(l, [], 0)\nend", "    triples\
    \ = zip(l, l[1:end-1], l[2:end])\n    triples_sum_to_zero = all(map(triples_sum_to_zero,\
    \ triples))\nend", "    \n    triples_sum_to_zero = Set()\n    for x in l\n  \
    \      triples_sum_to_zero = triples_sum_to_zero | triples(x)\n    end\n    \n\
    \    triples_sum_to_zero == Set()\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,24",
  "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\nend", " \
    \   triples_sum_to_zero = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero[x]\
    \ = triples_sum_to_zero[x] + 1\n    end\n    \n    if triples_sum_to_zero[1] >\
    \ 0 && triples_sum_to_zero[2] > 0 && triples_sum_to_zero[3] > 0\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples = Vector{Int64}()\n    for x in\
    \ l\n        triples = triples + [x^2, x^3, x^4]\n    end\n    triples_sum_to_zero(triples)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers as an input\
    \ and returns the number of integers in the list that sum to zero.", "    triples\
    \ = Vector{Int64}()\n    for x in l\n        if x != 0\n            push!(triples,\
    \ x)\n        end\n    end\n    triples_sum_to_zero(triples)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([0,0,0]) == true\n@assert triples_sum_to_zero([0,0,1])\
    \ == false\n@assert triples_sum_to_zero([0,1,0]) == false\n@assert triples_sum_to_zero([1,1,0])\
    \ == true\n@assert triples_sum_to_zero([1,1,1]) == false\n</cell>\n<text>\n4.2\
    \ Write a function that returns True if there are two distinct elements in the\
    \ list that sum to zero, and False otherwise.", "    triples_sum_to_zero = @view\
    \ l |> filter(x->(x+x+x)==0, l) |> length==3\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        for y in l\n\
    \            for z in l\n                if x+y+z == 0\n                    triples_sum_to_zero\
    \ = true\n                    return triples_sum_to_zero\n    return triples_sum_to_zero\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    \n    for x in l\n        if triples_sum_to_zero[x] == 0\n         \
    \   triples_sum_to_zero[x] = 1\n        else\n            triples_sum_to_zero[x]\
    \ += 1\n        end\n    end\n    \n    return triples_sum_to_zero[1] == 0 &&\
    \ triples_sum_to_zero[2] == 0\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input.\nIt returns True if there\
    \ are three distinct elements in the list that\nsum to zero, and False otherwise.",
  "    triples_sum_to_zero = false \n    for x in l\n        for y in l\n        \
    \    for z in l\n                if x+y+z == 0 \n                    triples_sum_to_zero\
    \ = true\n                    return triples_sum_to_zero\n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n  \
    \          return true\n        end\n    end\n    return false\nend", "    triples_sum_to_zero\
    \ = false \n    for x in l \n        for y in l \n            for z in l \n  \
    \              if x+y+z == 0 \n                    triples_sum_to_zero = true\
    \ \n                    break \n                end \n            end \n     \
    \   end \n    end \n    return triples_sum_to_zero \nend ", "    triples = Vector{Int64}()\n\
    \    triples = [triples_sum_to_zero(triple) for triple in l]\n    return length(triples)\
    \ == 3\nend", "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1,2,3]) == true\n@assert triples_sum_to_zero([1,2,4]) ==\
    \ false\n@assert triples_sum_to_zero([1,2,4,5]) == false\n@assert triples_sum_to_zero([1,2,4,5,6])\
    \ == true\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns True if there are three distinct elements in the list that\
    \ sum to zero, and False otherwise.", "    triples = Vector{Int64}()\n    for\
    \ i in 1:length(l)\n        triples[i] = l[i] + l[i+1] + l[i+2]\n    end\n   \
    \ triples_sum_to_zero(triples)\nend", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3]\
    \ = 1\n    \n    for x in l\n        if triples_sum_to_zero[x] == 1\n        \
    \    triples_sum_to_zero[x] = 0\n        else\n            triples_sum_to_zero[x]\
    \ = 1\n        end\n    end\n    \n    return triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3]\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input, and returns the number of integers in the list that sum to zero.",
  "    triples_sum_to_zero = false \n    for x in l \n        for y in l \n      \
    \      for z in l \n                if x+y+z == 0 \n                    triples_sum_to_zero\
    \ = true \n                    break \n                end \n            end \n\
    \        end \n    end \n    return triples_sum_to_zero \nend \n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples = Vector{Int64}()\n    for i in\
    \ l\n        triples.push(i)\n    end\n    triples_sum_to_zero(triples)\nend\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero = Set()\n    for x in l\n        if triples_sum_to_zero(x)\
    \ == true\n            triples_sum_to_zero = triples_sum_to_zero \u222A Set([x])\n\
    \        end\n    end\n    length(triples_sum_to_zero) == 3\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples = Vector{Int64}()\n\
    \    triples_sum_to_zero(triples, l)\n    return length(triples) == 3\nend", " \
    \   triples_sum_to_zero = zeros(Int64, 3)\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 0\n            triples_sum_to_zero[x] = 1\n        else\n            triples_sum_to_zero[x]\
    \ += 1\n        end\n    end\n    return triples_sum_to_zero[1] == 0 && triples_sum_to_zero[2]\
    \ == 0\nend", "    triples_sum_to_zero = false \n    for x in l\n        if (x\
    \ == 0) || (x == 1) || (x == -1)\n            triples_sum_to_zero = true\n   \
    \         break\n        end\n    end\n    return triples_sum_to_zero\nend\n</cell>\n\
    <code language=julia-1.5>", "    triples = Vector{Int64}()\n    triples[2] = 0\n\
    \    for i in l\n        if triples[i - 1] != 0\n            triples[i - 1] +=\
    \ i\n            triples[i] += i\n        end\n    end\n    for i in triples[2:end]\n\
    \        if triples[i] != 0\n            return false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000);\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n</cell>\n\
    <code language=", "    triples_sum_to_zero = zeros(Int64, 3)\n    for x in l\n\
    \        triples_sum_to_zero[(x-3)^2, (x-3)+1] += 1\n    end\n    \n    return\
    \ triples_sum_to_zero[1,1] == 0 && triples_sum_to_zero[1,2] == 0 && triples_sum_to_zero[1,3]\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,",
  "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n   \
    \ triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    for i in l\n\
    \        if triples_sum_to_zero[i] == 1\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    triples\
    \ = Vector{Int64}()\n    for x in l\n        triples.push(x)\n    end\n    triples_sum_to_zero(triples)\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        for y in l\n\
    \            for z in l\n                if x+y+z == 0 \n                    triples_sum_to_zero\
    \ = true\n                    break\n            end\n        end\n    end\n \
    \   return triples_sum_to_zero\nend", "    triples_sum_to_zero = false \n    for\
    \ x in l\n        if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero\
    \ = true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    \n    for x in l\n        for y in l\n            for z in l\n     \
    \           if x+y+z == 0\n                    triples_sum_to_zero[x,y,z] = 1\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ triples_sum_to_zero[1,1,1]\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,",
  "    triples = zip(l, l[1:end-1], l[2:end])\n    triples_sum_to_zero = all(map(triples_sum_to_zero,\
    \ triples))\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = triples_sum_to_zero(l)\n    return triples_sum_to_zero\n\
    end", "    triples = Vector{Int64}()\n    for x in l\n        triples.push(x)\n\
    \    end\n    triples_sum_to_zero(triples)\nend", "    triples_sum_to_zero = false\
    \ \n    for x in l\n        if sum(x) == 0 \n            triples_sum_to_zero =\
    \ true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    triples = Vector{Int64}()\n    triples_sum_to_zero(triples, l)\n  \
    \  return length(triples) == 3\nend", "    sum = 0\n    for x in l\n        sum\
    \ += x\n        if sum == 0\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,2,3])\
    \ == true\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false\n@assert triples_sum_to_zero([1,0,3])\
    \ == false\n@assert triples_sum_to_zero([1,0,3]) == false", "    triples_sum_to_zero\
    \ = l == [0,0,0]\n    return triples_sum_to_zero\nend", "    \n    triples_sum_to_zero\
    \ = false \n    \n    for x in l \n        if x == 0 \n            triples_sum_to_zero\
    \ = true \n            break\n        else \n            triples_sum_to_zero =\
    \ false \n            break\n    end\n    \n    return triples_sum_to_zero\nend\n\
    </cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = false \n    for\
    \ x in l\n        if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero\
    \ = true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    \n    triples_sum_to_zero = false\n    \n    for i in 1:length(l)\n\
    \        for j in i+1:length(l)\n            for k in j+1:length(l)\n        \
    \        if l[i] + l[j] + l[k] == 0\n                    triples_sum_to_zero =\
    \ true\n                end\n            end\n        end\n    end\n    \n   \
    \ return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        if sum(x) == 0 \n            triples_sum_to_zero\
    \ = true \n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        for y in l\n\
    \            for z in l\n                if x+y+z==0\n                    triples_sum_to_zero\
    \ = true\n                    return triples_sum_to_zero\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        if x != 0\n \
    \           if triples_sum_to_zero\n                return false\n           \
    \ else\n                triples_sum_to_zero = true\n            end\n        end\n\
    \    end\n    return true\nend", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0\n            return true\n        end\n    end\n    return\
    \ false\nend", "    triples_sum_to_zero = false \n    for x in l\n        if x\
    \ != 0 && x != 1 && x != 2\n            triples_sum_to_zero = true\n         \
    \   break\n        end\n    end\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = triples_sum_to_zero(l, l, l)\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        for y in l\n            for z in l\n     \
    \           if x+y+z==0\n                    triples_sum_to_zero = true\n    \
    \                break\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    triples_sum_to_zero = false \n    for x in\
    \ l\n        for y in l\n            for z in l\n                if x+y+z == 0\
    \ \n                    triples_sum_to_zero = true\n                    break\n\
    \                end\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = false \n\
    \    for x in l\n        if x == 0 || x == -x || x == -x + 1\n            triples_sum_to_zero\
    \ = true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.3>", "    triples_sum_to_zero = \n      \
    \  sum(l) == 0 && \n        sum(l) == 1 && \n        sum(l) == 2 \nend", "   \
    \ triples = Vector{Int64}()\n    for x in l\n        triples.push(x)\n    end\n\
    \    triples_sum_to_zero(triples)\nend", "    triples_sum_to_zero = l .== 0 .*\
    \ l .== 0 .* l .== 0\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = l == [0,0,0]\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        if triples_sum_to_zero[x] == 0\n\
    \            triples_sum_to_zero[x] = 1\n        else\n            triples_sum_to_zero[x]\
    \ += 1\n        end\n    end\n    return triples_sum_to_zero[1] == 0 && triples_sum_to_zero[2]\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the number of elements in the list that sum to zero.", "    triples\
    \ = Vector{Int64}()\n    triples_sum_to_zero(triples, l)\n    return length(triples)\
    \ == 3\nend", "    triples_sum_to_zero(l, [], 0)\nend", "    \n    sum = 0\n \
    \   for i in l\n        sum += i\n    end\n    \n    if sum == 0 \n        return\
    \ true\n    else\n        return false\n    end\nend", "    \n    triples = Vector{Int64}()\n\
    \    \n    for x in l\n        triples.push(x)\n    end\n    \n    triples_sum_to_zero(triples)\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        if x == 0 ||\
    \ x == -3 || x == -5 || x == -7 || x == -9\n            triples_sum_to_zero =\
    \ true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = triples_sum_to_zero_helper(l)\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        if x != 0 &&\
    \ x != 1 && x != 2\n            triples_sum_to_zero = true\n            break\n\
    \        end\n    end\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        if x != 0 && x != 1 && x != 2\n          \
    \  triples_sum_to_zero = true\n            break\n        end\n    end\n    return\
    \ triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n        sum += i\n\
    \        if sum == 0\n            return true\n        end\n    end\n    return\
    \ false\nend", "    \n    sum = 0\n    for i in l\n        sum += i\n    end\n\
    \    \n    triples_sum_to_zero = sum == 0\n    \n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ triples_sum_to_zero(1:100000)\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(1:100000)\n</", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero = tuple(triples_sum_to_zero)\n\
    \    \n    for x in l\n        if triples_sum_to_zero[x] == 1\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = triples_sum_to_zero(l,\
    \ l[1], l[2])\n    return triples_sum_to_zero\nend", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ triples_sum_to_zero([1,2,3]) == true\n@assert triples_sum_to_zero([1,2,4]) ==\
    \ false\n@assert triples_sum_to_zero([1,2,4,5]) == true\n@assert triples_sum_to_zero([1,2,4,6,7])\
    \ == false\n</cell>\n<text>\n12. Write a function that returns true if the sum\
    \ of the squares of the numbers in a given list is equal to zero, and false otherwise.",
  "    triples = Vector{Int64}()\n    for i in l\n        triples.push(i)\n    end\n\
    \    triples_sum_to_zero(triples)\nend", "    sum = 0\n    for i in l\n      \
    \  sum += i\n        if sum == 0\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1,2,3]) == true\n@test triples_sum_to_zero([1,2,-3])\
    \ == false\n@test triples_sum_to_zero([1,2,-3,-4]) == true\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are two distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero = false \n    for x in l \n        for\
    \ y in l \n            for z in l \n                if x+y+z == 0 \n         \
    \           triples_sum_to_zero = true \n                    break \n        \
    \        end \n            end \n        end \n    end \n    return triples_sum_to_zero\
    \ \nend \n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called triples_sum_to_zero that\
    \ takes a list of integers as an input.\nIt returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\n\
    end\n</cell>\n<code language=julia-1.3>\n@time triples_sum_to_zero(vec(1:10000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    \n    sum = 0\n    for x in l\n\
    \        sum += x\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0 \n            return true\n        end\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero = @view l |> filter(x->(x+x+x) == 0, 3)\n    return length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:10000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ as an input and returns a vector of integers that sum to zero.", "    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        sum(l) == 1 && \n        sum(l) == 2 \n\
    end", "    \n    sum = 0\n    for x in l\n        sum += x\n        if sum ==\
    \ 0 \n            return true\n        end\n    end\n    return false\nend", " \
    \   triples = Vector{Int64}()\n    for x in l\n        triples.push(x)\n    end\n\
    \    triples_sum_to_zero(triples)\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    sum = 0\n    for i in l\n        sum += i\n       \
    \ if sum == 0 \n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = false \n\
    \    for x in l \n        if x != 0 \n            for y in l \n              \
    \  if y != 0 \n                    for z in l \n                        if z !=\
    \ 0 \n                            if x + y + z == 0 \n                       \
    \         return true\n                            else \n                   \
    \             return false\n                end \n            end \n        end\
    \ \n    end \n    return false \nend \n</cell>\n<code language=julia-1.4>\n@time\
    \ triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.",
  "    sum = 0\n    for x in l\n        sum += x\n        if sum > 0\n           \
    \ return true\n        end\n    end\n    return false\nend", "    sum = 0\n  \
    \  for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,",
  "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\nend", " \
    \   triples = Vector{Int64}()\n    triples[2] = 0\n    triples[1] = 0\n    triples[0]\
    \ = 0\n    for x in l\n        if triples[x - 1] == 0 && triples[x - 2] == 0 &&\
    \ triples[x - 3] == 0\n            return true\n        else\n            triples[x\
    \ - 1] += 1\n            triples[x - 2] += 1\n            triples[x - 3] += 1\n\
    \        end\n    end\n    return false\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    for x in l\n        triples_sum_to_zero[x] = triples_sum_to_zero[x]\
    \ + 1\n    end\n    if triples_sum_to_zero[1] > 0\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    triples_sum_to_zero = false \n    \n    for i in 1:length(l)\n      \
    \  if l[i] + l[i+1] + l[i+2] == 0\n            triples_sum_to_zero = true \n \
    \           break\n        end\n    end\n    \n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] =\
    \ 1\n    triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero\
    \ = tuple(triples_sum_to_zero)\n    \n    for i in l\n        if triples_sum_to_zero\
    \ == tuple(triples_sum_to_zero)\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero[(x-3)%3]+=1\n\
    \    end\n    return triples_sum_to_zero[1]==3\nend", "    triples = Vector{Int64}()\n\
    \    for x in l\n        triples.push(x)\n    end\n    triples_sum_to_zero(triples)\n\
    end", "    \n    sum = 0\n    for i in l\n        sum += i\n    end\n    \n  \
    \  triples_sum_to_zero = sum == 0 && sum == 1 && sum == 2\n    \n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,",
  "    triples = Vector{Int64}()\n    for x in l\n        if x != 0\n            if\
    \ triples.contains(x)\n                false\n            else\n             \
    \   triples.push(x)\n            end\n        end\n    end\n    triples.size ==\
    \ 3\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero = @view l |> filter(x->(x+x+x)==0, l) |> length==3\n  \
    \  return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ triples_sum_to_zero = false \n    for x in l\n        for y in l\n         \
    \   for z in l\n                if x+y+z == 0\n                    triples_sum_to_zero\
    \ = true\n                    break\n                end\n            end\n  \
    \      end\n    end\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        if x == 0 || x == -x || x == -x-x\n      \
    \      triples_sum_to_zero = true\n            break\n        end\n    end\n \
    \   return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    triples_sum_to_zero = zeros(Int64, 3)\n    \n    for x in l\n       \
    \ triples_sum_to_zero[(x-3)%3]+=1\n    end\n    \n    triples_sum_to_zero[triples_sum_to_zero==3]=true\n\
    \    \n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called triples_sum_to_zero that takes a list\
    \ of integers as an input.\nIt returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for i in 1:length(l)\n      \
    \  if triples_sum_to_zero[triples_sum_to_zero[i] + l[i]] == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(1:10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ \n    sum = 0\n    for x in l\n        sum += x\n        if sum == 0\n     \
    \       return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    triples_sum_to_zero = false \n    for x in l\n  \
    \      if x == 0 || x == -x || x == -x-x\n            triples_sum_to_zero = true\n\
    \            break\n        end\n    end\n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero[x]\
    \ = triples_sum_to_zero[x] + 1\n    end\n    triples_sum_to_zero[1] > 0 && triples_sum_to_zero[2]\
    \ > 0 && triples_sum_to_zero[3] > 0\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    \n    sum = 0\n    for i in l\n       \
    \ sum += i\n    end\n    \n    if sum == 0 \n        return true\n    else\n \
    \       return false\n    end\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n     \
    \       return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1,2,3]) == true\n@assert triples_sum_to_zero([1,2,4])\
    \ == false\n@assert triples_sum_to_zero([1,2,5]) == false\n@assert triples_sum_to_zero([1,2,6])\
    \ == false\n@assert triples_sum_to_zero([1,2,7]) == false\n@assert triples_sum_to_zero([1,2,8])\
    \ == false\n@assert triples_sum_to_zero([1,2,9]) == false\n@assert triples_sum_to_zero([1,2,10])\
    \ == false\n@assert triples_sum_to_zero([1,2,11]) == false\n@assert triples_sum_to_zero([1,2,12])\
    \ == false\n@assert triples_sum_to_zero([1,2,13]) == false\n@assert triples_sum_to_zero([1,2,14])\
    \ == false\n@assert triples_sum_to_zero([1,2,15]) == false\n@assert triples_sum_to_zero([1,2,16])\
    \ == false\n@assert triples_sum_to_zero([1,2,17]) == false\n@assert triples_sum_to_zero([1,2,18])\
    \ == false\n@assert triples_sum_to_zero([1,2,19]) == false\n@assert triples_sum_to_zero([1,2,20])\
    \ == false\n@assert triples_sum_to_zero([1,2,21]) == false\n@assert triples_sum_to_zero([1,2,22])\
    \ == false\n@assert triples_sum_to_zero([1,2,23]) == false\n@assert triples_sum_to_zero([1,2,24])\
    \ == false\n@assert triples_sum_to_zero([1,2,25]) == false\n@assert triples_sum_to_zero([1,2,26])\
    \ == false\n@assert triples_sum_to_zero([1,2,27]) == false\n@assert triples_sum_to_zero([1,2,28])\
    \ == false\n@assert triples_sum_to_zero([1,2,29]) == false\n@assert triples_sum_to_zero([1,2,30])\
    \ == false\n@assert triples_sum_to_zero([1,2,31]) == false\n@assert triples_sum_to_zero([1,2,32])\
    \ == false\n@assert triples_sum_to_zero([1,2,33]) == false\n@assert triples_sum_to_zero([1,2,34])\
    \ == false\n@assert triples_sum_to_zero([1,2,35]) == false\n@assert triples_sum_to_zero([1,2,36])\
    \ == false\n@assert triples_sum", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    for x in l\n        for y in l\n            for z in l\n                if\
    \ x+y+z == 0 \n                    triples_sum_to_zero[x,y,z] = 1\n          \
    \      end\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.4>", "    triples_sum_to_zero = l == [0,0,0]\n\
    \    return triples_sum_to_zero\nend", "    triples = Vector{Int64}()\n    for\
    \ x in l\n        triples = triples + [x]*x\n        if triples.sum() == 0\n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.3>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,",
  "    triples_sum_to_zero(l, [], 0)\nend", "    sum = 0\n    for i in l\n       \
    \ sum += i\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    \n    triples = Vector{Int64}()\n\
    \    \n    for x in l\n        triples.push(x)\n    end\n    \n    triples_sum_to_zero(triples)\n\
    end", "    triples_sum_to_zero = false \n    for x in l\n        for y in l\n\
    \            for z in l\n                if x+y+z == 0\n                    triples_sum_to_zero\
    \ = true\n                    break\n            end\n        end\n    end\n \
    \   return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\nend", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n   \
    \ triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = -1\n    \n    for x\
    \ in l\n        if triples_sum_to_zero[x] == 1\n            return true\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ triples_sum_to_zero = \n        sum(l) == 0 && (sum(l) == 0 || sum(l) == -sum(l))\n\
    \    return triples_sum_to_zero\nend", "    triples = zip(l, l[1:end-1], l[2:end])\n\
    \    triples_sum_to_zero = all(map(triples_sum_to_zero, triples))\n    return\
    \ triples_sum_to_zero\nend", "    triples_sum_to_zero = false \n    for x in l\n\
    \        if x == 0 || x == -x || x == -x-x\n            triples_sum_to_zero =\
    \ true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers as an input and returns\
    \ a list of all integers in the list that are divisible by 3.", "    triples_sum_to_zero\
    \ = @view l == 0 && (@view l == @view l .+ @view l .+ @view l .+ 0)\n    return\
    \ triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero\
    \ = false \n    for x in l\n        for y in l\n            for z in l\n     \
    \           if x+y+z==0\n                    triples_sum_to_zero = true\n    \
    \                break\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input.\nIt returns True if there are three distinct elements in the list\
    \ that\nsum to zero, and False otherwise.", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    for x in l\n        for y in l\n            for z in l\n           \
    \     if x+y+z==0\n                    triples_sum_to_zero[x,y,z] = 1\n      \
    \          end\n            end\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.4>\n@time triples_sum_to_zero([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero = false \n\
    \    for x in l \n        for y in l \n            for z in l \n             \
    \   if x+y+z==0 \n                    triples_sum_to_zero = true \n          \
    \          break \n                end \n            end \n        end \n    end\
    \ \n    return triples_sum_to_zero \nend \n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero = @view l[[1]] == 0 && @view l[[2]] == 0 && @view l[[3]]\
    \ == 0\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    for triple in l\n        triples_sum_to_zero[triple] += 1\n    end\n\
    \    return triples_sum_to_zero[1]==3 && triples_sum_to_zero[2]==3 && triples_sum_to_zero[3]==3\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1,2,3]) == true\n@assert triples_sum_to_zero([1,2,2,3])\
    \ == false\n</cell>\n<text>\nQuestion 2.2\nWrite a function that takes a list\
    \ of integers as an input, and returns True if there are two distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ [], 0)\nend", "    triples_sum_to_zero = Set()\n    for x in l\n        for\
    \ y in l\n            for z in l\n                if x+y+z == 0\n            \
    \        triples_sum_to_zero = triples_sum_to_zero + (x,y,z)\n               \
    \ end\n            end\n        end\n    end\n    return length(triples_sum_to_zero)\
    \ == 3\nend", "    triples_sum_to_zero = @view l |> filter(x->(x+x+x)==0, 1:3)\n\
    \    return length(triples_sum_to_zero)==3\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec(1:100000));\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero = false \n    for x in l\n        if x == 0 || x == -x\
    \ || x == x\n            triples_sum_to_zero = true\n            break\n     \
    \   end\n    end\n    return triples_sum_to_zero\nend", "    sum = 0\n    for\
    \ x in l\n        sum += x\n        if sum == 0 \n            return true\n  \
    \      end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return false\n        end\n    end\n    return true\nend", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero[x] = triples_sum_to_zero[x]\
    \ + 1\n    end\n    \n    if triples_sum_to_zero[1] == 2 && triples_sum_to_zero[2]\
    \ == 2 && triples_sum_to_zero[3] == 2\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    \n    triples = Vector{Int64}()\n    \n    for x in\
    \ l\n        triples.push(x)\n    end\n    \n    triples_sum_to_zero(triples)\n\
    end", "    triples_sum_to_zero = triples_sum_to_zero(l)\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero = false \n    for x in l \n        for y in l \n\
    \            for z in l \n                if x+y+z == 0 \n                   \
    \ triples_sum_to_zero = true \n                    break \n                end\
    \ \n            end \n        end \n    end \n    return triples_sum_to_zero \n\
    end \n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero = false \n\
    \    for x in l\n        if x != 0 && x != 1 && x != 2\n            triples_sum_to_zero\
    \ = true\n            break\n        end\n    end\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for x in l\n\
    \        sum += x\n        if sum == 0\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero = @view l |> filter(x->(x+x+x)==0,\
    \ l) |> length==3\n    return triples_sum_to_zero\nend", "    triples = Vector{Int64}()\n\
    \    for x in l\n        triples.push(x)\n    end\n    triples_sum_to_zero(triples)\n\
    end", "    \n    sum = 0\n    for x in l\n        sum += x\n        if sum ==\
    \ 0\n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    triples_sum_to_zero = l == [0,0,0]\n    return\
    \ triples_sum_to_zero\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
