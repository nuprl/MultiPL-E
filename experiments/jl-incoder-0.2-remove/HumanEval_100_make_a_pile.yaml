name: HumanEval_100_make_a_pile
language: jl
prompt: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    The first level has n stones.\n    The number of stones in the\
  \ next level is:\n        - the next odd number if n is odd.\n        - the next\
  \ even number if n is even.\n    Return the number of stones in each level in a\
  \ list, where element at index\n    i represents the number of stones in the level\
  \ (i+1).\n\n    Examples:\n        \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
  \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
  \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
  \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
completions: ["    if n == 0 \n        return Vector{Int64}()\n    else \n       \
    \ if n % 2 == 1 \n            pile = make_a_pile(n / 2)\n            push!(pile,\
    \ n / 2)\n            return pile\n        else \n            pile = make_a_pile(n\
    \ / 2)\n            push!(pile, n / 2)\n            push!(pile, n / 2)\n     \
    \       return pile\n        end\n    end\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  Vector{Int64}() \n    else \n        make_a_pile(n - 1)\n        push!(make_a_pile(n\
    \ / 2), n % 2)\n    end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_stones = make_a_pile(n / 2)\n        even_stones = make_a_pile(n\
    \ / 2)\n        odd_stones = odd_stones + even_stones\n        odd_stones[end]\
    \ = odd_stones[end] + 1\n        return odd_stones\nend", "    if n==0 \n    \
    \    return Vector{Int64}() \n    else \n        pile = make_a_pile(n-1)\n   \
    \     if mod(n,2)==1 \n            pile = pile:+n \n        else \n          \
    \  pile = pile:+n-1 \n        return pile \nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n == 0 \n\
    \        return Vector{Int64}()\n    else \n        odd_stones = if n % 2 == 0\
    \ \n                       n \n                       else \n                \
    \       n / 2\n        even_stones = if n % 2 == 1 \n                       n\
    \ \n                       else \n                       n / 2\n        pile =\
    \ make_a_pile(odd_stones) + make_a_pile(even_stones)\n        return pile\nend\n\
    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==0 \n        return Vector{Int64}()\n    else \n  \
    \      odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n        if\
    \ odd \n            push!(pile,n+1)\n        else \n            push!(pile,n-1)\n\
    \        end\n        return pile\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_pile = make_a_pile(n-1)\n        even_pile = make_a_pile(n-2)\n\
    \        odd_pile = odd_pile + odd_pile\n        even_pile = even_pile+even_pile\n\
    \        return odd_pile + even_pile\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n == 0 \n\
    \        return Vector{Int64}() \n    else \n        pile = make_a_pile(n div\
    \ 2) \n        push!(pile, n mod 2) \n        return pile \n    end\nend", " \
    \   if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n  \
    \      even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n \
    \       even=even[end-1]\n        odd=odd+even\n        return odd+odd\n    end\n\
    end\n\"\"\"\n    \n\"\"\"\n    Given a positive integer n, you have to make a\
    \ pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(1)\n    else \n        odd_pile\
    \ = make_a_pile(n / 2)\n        even_pile = make_a_pile(n / 2)\n        odd_pile\
    \ = odd_pile + odd_pile[end]\n        even_pile = even_pile + even_pile[end]\n\
    \        return odd_pile + even_pile\nend", "    if n==0 \n        return Vector{Int64}()\n\
    \    end\n    \n    pile = make_a_pile(n-1)\n    \n    if n%2 == 1\n        push!(pile,\
    \ n)\n    else\n        push!(pile, n .+ n//2)\n    end\n    \n    return pile\n\
    end", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\
    \ .+ [n % 2 == 0 ? 1 : -1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(5) == [5, 1]\n@assert make_a_pile(6) == [6, 1, 1]\n@assert\
    \ make_a_pile(7) == [7, 1, 1, 1]\n@assert make_a_pile(8) == [8, 1, 1, 2, 1]\n\
    @assert make_a_pile(9) == [9, 1, 1, 2, 2, 1]\n@assert make_a_pile(10) == [10,\
    \ 1, 1, 2, 2, 2, 1]\n@assert make_a_pile(11) == [11, 1, 1, 2, 2, 2, 2, 1]\n@assert\
    \ make_a_pile(12) == [12, 1, 1, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(13) ==\
    \ [13, 1, 1, 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(14) == [14, 1, 1, 2, 2,\
    \ 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(15) == [15, 1, 1, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 1]\n@assert make_a_pile(16) == [16, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n\
    @assert make_a_pile(17) == [17, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert\
    \ make_a_pile(18) == [18, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert\
    \ make_a_pile(19) == [19, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n\
    @assert make_a_pile(20) == [20, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 1]\n@assert make_a_pile(21) == [21, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(22) == [22, 1, 1, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(23) == [23,\
    \ 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert\
    \ make_a_pile(24) == [24, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(25) == [25, 1, 1, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(26)\
    \ == [26, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 1]\n@assert make_a_pile(27) == [27, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]\n@assert make_a_pile(28) ==\
    \ [28, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 1]\n@assert make_a_pile(29) == [29, 1, 1, 2, 2, 2, 2, ", "    if\
    \ n % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) +\
    \ make_a_pile(n/2 + 1)\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0\n  \
    \      []\n    else\n        make_a_pile(n-1)+[(n%2==0)?(n-1):(n+1)]\n    end\n\
    end", "    if n == 0 \n        return Vector{Int64}()\n    else \n        pile\
    \ = make_a_pile(n div 2)\n        if n % 2 == 0 \n            push!(pile, n div\
    \ 2)\n        else \n            push!(pile, n div 2 + 1)\n        end\n     \
    \   return pile\n    end\nend", "    if n==0\n        return Vector{Int64}()\n\
    \    end\n    if n==1\n        return Vector{Int64}(1)\n    end\n    if n%2==0\n\
    \        return make_a_pile(n/2)\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + make_a_pile(n/2+1)\n    end\nend", "   \
    \ if n % 2 == 0 \n        odds = n / 2\n        evens = n - odds\n        return\
    \ Vector{Int64}(undef, odds, evens)\n    else\n        odds = n / 2\n        evens\
    \ = n - odds\n        return Vector{Int64}(undef, evens, odds)\n    end\nend\n\
    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else if n%2==0 \n        return make_a_pile(n/2)\n\
    \    else \n        return make_a_pile(n-1)+make_a_pile(n-2)\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else \n        odd_nums = make_a_pile(n-1)\n\
    \        even_nums = make_a_pile(n-2)\n        odd_nums = odd_nums + even_nums\n\
    \        return odd_nums\n    end\nend", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,2)\n\
    \    elseif n==3 \n        Vector{Int64}(1,3,2)\n    elseif n==4 \n        Vector{Int64}(1,4,3,2)\n\
    \    elseif n==5 \n        Vector{Int64}(1,5,4,3,2)\n    elseif n==6 \n      \
    \  Vector{Int64}(1,6,5,4,3,2)\n    elseif n==7 \n        Vector{Int64}(1,7,6,5,4,3,2)\n\
    \    elseif n==8 \n        Vector{Int64}(1,8,7,6,5,4,3,2)\n    elseif n==9 \n\
    \        Vector{Int64}(1,9,8,7,6,5,4,3,2)\n    elseif n==10 \n        Vector{Int64}(1,10,9,8,7,6,5,4,3,2)\n\
    \    elseif n==11 \n        Vector{Int64}(1,11,10,9,8,7,6,5,4,3,2)\n    elseif\
    \ n==12 \n        Vector{Int64}(1,12,11,10,9,8,7,6,5,4,3,2)\n    elseif n==13\
    \ \n        Vector{Int64}(1,13,12,11,10,9,8,7,6,5,4,3,2)\n    elseif n==14 \n\
    \        Vector{Int64}(1,14,13,12,11,10,9,8,7,6,5,4,3,2)\n    elseif n==15 \n\
    \        Vector{Int64}(1,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n    elseif n==16\
    \ \n        Vector{Int64}(1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n    elseif\
    \ n==17 \n        Vector{Int64}(1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n \
    \   elseif n==18 \n        Vector{Int64}(1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n\
    \    elseif n==19 \n        Vector{Int64}(1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n\
    \    elseif n==20 \n        Vector{Int64}(1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)\n\
    \    elseif n==21 \n        Vector{Int64}(1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n+1)\n        elseif even \n        \
    \    push!(pile,n-1)\n        else \n            push!(pile,n+1)\n           \
    \ push!(pile,n-1)\n        end\n        return pile\n    end\nend\n\"\"\"\n  \
    \  Given a positive integer n, you have to make a pile of n levels of stones.\n\
    \    The first level has n stones.\n    The number of stones in the next level\
    \ is:\n        - the next odd number if n is odd.\n        - the next even number\
    \ if n is even.\n    Return the number of stones in each level in a list, where\
    \ element at index\n    i represents the number of stones in the level (i+1).",
  "    if n == 0 \n        return Vector{Int64}()\n    else \n        if n % 2 ==\
    \ 0 \n            pile = make_a_pile(n / 2)\n            push!(pile, n / 2)\n\
    \            return pile\n        else \n            pile = make_a_pile(n / 2)\n\
    \            push!(pile, n / 2)\n            push!(pile, n / 2)\n            return\
    \ pile\n        end\n    end\nend", "    if n==0 \n        return Vector{Int64}()\
    \ \n    else \n        pile = make_a_pile(n-1) \n        push!(pile,n) \n    \
    \    return pile \n    end\nend", "    if n==0 \n        return Vector{Int64}()\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        if odd==1 \n       \
    \     pile=make_a_pile(n/2)\n            push!(pile,1)\n            return pile\n\
    \        else \n            pile=make_a_pile(n/2)\n            push!(pile,1)\n\
    \            push!(pile,1)\n            return pile\n    end\nend\n\"\"\"\n  \
    \  \n\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n\
    \        push!(make_a_pile(n-1),n%2==0 ? n : n+1)\n    end\nend", "    if n ==\
    \ 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n        pile =\
    \ make_a_pile(n / 2)\n        push!(pile, n / 2)\n        return pile\n    else\
    \ \n        pile = make_a_pile(n / 2)\n        push!(pile, n / 2)\n        push!(pile,\
    \ n / 2)\n        return pile\nend\n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else \n        odd=n%2\n        if odd==0 \n            return make_a_pile(n/2)\n\
    \        else \n            return make_a_pile(n-odd) + [odd]\n    end\nend",
  "    if n==0 \n        return Vector{Int64}()\n    else \n        odd_pile = make_a_pile(n-1)\n\
    \        even_pile = make_a_pile(n-2)\n        odd_pile = odd_pile ++ [odd_pile[n-1]]\n\
    \        even_pile = even_pile ++ [even_pile[n-2]]\n        return odd_pile ++\
    \ even_pile\nend", "    if n==0 \n        return Vector{Int64}() \n    else \n\
    \        pile = make_a_pile(n-1) \n        push!(pile, n) \n        return pile\
    \ \n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n    else if\
    \ n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n      \
    \  return make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend", "    if n ==\
    \ 0 \n        return Vector{Int64}()\n    else \n        odd_pile = make_a_pile(n\
    \ / 2)\n        even_pile = make_a_pile(n / 2)\n        odd_pile = odd_pile +\
    \ [n mod 2]\n        even_pile = even_pile + [n mod 2]\n        return odd_pile\
    \ ++ even_pile\nend", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n   \
    \     return make_a_pile(n / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(5) == [5, 3]\n@assert make_a_pile(10) == [10, 6, 4, 2]\n@assert\
    \ make_a_pile(15) == [15, 12, 8, 6, 4, 2]\n@assert make_a_pile(20) == [20, 16,\
    \ 12, 8, 6, 4, 2]\n@assert make_a_pile(25) == [25, 20, 16, 12, 8, 6, 4, 2]\n@assert\
    \ make_a_pile(30) == [30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(35)\
    \ == [35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(40) == [40, 35,\
    \ 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(45) == [45, 40, 35, 30,\
    \ 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(50) == [50, 45, 40, 35, 30,\
    \ 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(55) == [55, 50, 45, 40, 35,\
    \ 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(60) == [60, 55, 50, 45,\
    \ 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(65) == [65, 60,\
    \ 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(70)\
    \ == [70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert\
    \ make_a_pile(75) == [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12,\
    \ 8, 6, 4, 2]\n@assert make_a_pile(80) == [80, 75, 70, 65, 60, 55, 50, 45, 40,\
    \ 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(85) == [85, 80, 75,\
    \ 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(90)\
    \ == [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6,\
    \ 4, 2]\n@assert make_a_pile(95) == [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45,\
    \ 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(100) == [100, 95,\
    \ 90, 85, 80, 75, 70, ", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1\
    \ : 2) \n    end\nend", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(n-1)\n        push!(make_a_pile(n-2),n%2==0 ? 1 : 2)\n   \
    \ end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive integer n, you have to\
    \ make a pile of n levels of stones.\n    The first level has n stones.\n    The\
    \ number of stones in the next level is:\n        - the next odd number if n is\
    \ odd.\n        - the next even number if n is even.\n    Return the number of\
    \ stones in each level in a list, where element at index\n    i represents the\
    \ number of stones in the level (i+1).", "    if n==1 \n        return [1]\n \
    \   else \n        odd = n%2\n        even = n/2\n        pile = make_a_pile(odd)\
    \ + make_a_pile(even)\n        return pile\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n    \
    \    if odd \n            pile=pile+make_a_pile(n/2)\n        end\n        if\
    \ even \n            pile=pile+make_a_pile(n/2)\n        end\n        return pile\n\
    \    end\nend", "    if n == 0 \n        return Vector{Int64}() \n    else \n\
    \        odd_pile = make_a_pile(n div 2) \n        even_pile = make_a_pile(n mod\
    \ 2) \n        odd_pile = odd_pile ++ even_pile\n        return odd_pile \nend",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n+1)\n        else \n            push!(pile,n-1)\n\
    \        end\n        return pile\n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else \n        odd=n%2\n        even=n%2==0\n        \n\
    \        if odd==1 \n            pile=make_a_pile(n-1)\n            push!(pile,1)\n\
    \            return pile\n        else \n            pile=make_a_pile(n-1)\n \
    \           push!(pile,1)\n            push!(pile,2)\n            return pile\n\
    \    end\nend\n\"\"\"\n    Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\n    The first level has n stones.\n    The number of\
    \ stones in the next level is:\n        - the next odd number if n is odd.\n \
    \       - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else \n        odd_pile = make_a_pile(n div 2)\n        even_pile = make_a_pile(n\
    \ div 2)\n        odd_pile = odd_pile + [n mod 2]\n        even_pile = even_pile\
    \ + [n mod 2]\n        return odd_pile ++ even_pile\nend", "    if n % 2 == 0\
    \ \n        odds = n / 2\n        evens = n - odds\n        return make_a_pile(odds)\
    \ + make_a_pile(evens)\n    else\n        odds = n / 2\n        evens = n - odds\n\
    \        return make_a_pile(odds) + make_a_pile(evens)\n    end\nend\n\"\"\"\n\
    \    Given a positive integer n, you have to make a pile of n levels of stones.\n\
    \    The first level has n stones.\n    The number of stones in the next level\
    \ is:\n        - the next odd number if n is odd.\n        - the next even number\
    \ if n is even.\n    Return the number of stones in each level in a list, where\
    \ element at index\n    i represents the number of stones in the level (i+1).",
  "    if n==1 \n        return [1]\n    else \n        odd_pile = make_a_pile(n div\
    \ 2)\n        even_pile = make_a_pile(n div 2)\n        odd_pile = odd_pile +\
    \ [odd_pile[end-1]]\n        even_pile = even_pile + [even_pile[end-1]]\n    \
    \    return odd_pile + even_pile\nend\n\"\"\"\n    Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        pile=make_a_pile(n/2)\n        if odd \n       \
    \     push!(pile,n+1)\n        elseif even \n            push!(pile,n+1)\n   \
    \         push!(pile,n+1)\n        else \n            push!(pile,n+1)\n      \
    \      push!(pile,n+1)\n            push!(pile,n+1)\n        end\n        return\
    \ pile\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(5)\
    \ == Vector{Int64}([5, 3, 1])\n@assert make_a_pile(10) == Vector{Int64}([10, 6,\
    \ 4, 2])\n@assert make_a_pile(15) == Vector{Int64}([15, 9, 5, 3, 1])\n@assert\
    \ make_a_pile(20) == Vector{Int64}([20, 14, 12, 8, 6, 4, 2])\n@assert make_a_pile(25)\
    \ == Vector{Int64}([25, 19, 13, 11, 7, 5, 3, 1])\n@assert make_a_pile(30) == Vector{Int64}([30,\
    \ 23, 17, 15, 13, 11, 7, 5, 3, 1])\n@assert make_a_pile(35) == Vector{Int64}([35,\
    \ 28, 22, 21, 16, 14, 12, 8, 6, 4, 2])\n@assert make_a_pile(40) == Vector{Int64}([40,\
    \ 35, 27, 23, 25, 19, 13, 11, 7, 5, 3, 1])\n@assert make_a_pile(45) == Vector{Int64}([45,\
    \ 42, 37, 31, 35, 28, 22, 21, 16, 14, 12, 8, 6, 4, 2])\n@assert make_a_pile(50)\
    \ == Vector{Int64}([50, 45, 39, 34, 42, 37, 31, 35, 28, 22, 21, 16, 14, 12, 8,\
    \ 6, 4, 2])\n@assert make_a_pile(55) == Vector{Int64}([55, 52, 44, 47, 43, 39,\
    \ 34, 42, 37, 31, 35, 28, 22, 21, 16, 14, 12, 8, 6, 4, 2])\n@assert make_a_pile(60)\
    \ == Vector{Int64}([60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\
    \ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\
    \ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\
    \ 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\
    \ 60, 60, 60, 60, ", "    if n==0 \n        return Vector{Int64}()\n    else if\
    \ n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        return odd\nend", " \
    \   if n % 2 == 1 \n        odds = n\n    else\n        odds = n-1\n    end\n\
    \    evens = n - odds\n    pile = zeros(Int, n+1)\n    pile[1] = odds\n    pile[2]\
    \ = evens\n    for i in 3:(n+1)\n        pile[i] = pile[i-1] + pile[i-2]\n   \
    \ end\n    return pile\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        odd_pile = make_a_pile(n div 2) \n        even_pile = make_a_pile(n\
    \ div 2) \n        odd_pile = odd_pile ++ [n mod 2] \n        even_pile = even_pile\
    \ ++ [n mod 2] \n        return odd_pile ++ even_pile\nend", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        pile=[pile,odd] ++ pile\n        pile=[pile,even] ++ pile\n        return\
    \ pile\nend", "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n\
    \ div 2)\n        push!(make_a_pile(n div 2), n mod 2)\n    end\nend", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        return\
    \ odd+even\n    end\nend\n\"\"\"\n    Given a positive integer n, you have to\
    \ make a pile of n levels of stones.\n    The first level has n stones.\n    The\
    \ number of stones in the next level is:\n        - the next odd number if n is\
    \ odd.\n        - the next even number if n is even.\n    Return the number of\
    \ stones in each level in a list, where element at index\n    i represents the\
    \ number of stones in the level (i+1).", "    if n % 2 == 0 \n        odds = n\
    \ / 2\n        evens = n - odds\n    else\n        odds = n / 2 + 1\n        evens\
    \ = n - odds\n    end\n    pile = Vector{Int64}(undef, odds + evens)\n    pile[1]\
    \ = n\n    for i in 2:odds + evens\n        pile[i] = pile[i-1] + pile[i-2]\n\
    \    end\n    return pile\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(100)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(1000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(100000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10000000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(100000000000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ make_a_pile(100000000000000000)\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else \n        odd = n % 2 != 0\n        even = n % 2 == 0\n        if odd\
    \ \n            pile = make_a_pile(n / 2)\n            push!(pile, n / 2)\n  \
    \          return pile\n        else \n            pile = make_a_pile(n / 2)\n\
    \            push!(pile, n / 2)\n            push!(pile, n / 2)\n            return\
    \ pile\n        end\n    end\nend\n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n % 2 == 0 \n        odds\
    \ = n / 2\n        evens = n - odds\n        return make_a_pile(odds) + make_a_pile(evens)\n\
    \    else\n        odds = n / 2\n        evens = n - odds\n        return make_a_pile(odds)\
    \ + make_a_pile(evens)\n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n % 2 == 0 \n        odds\
    \ = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef, odds\
    \ + evens)\n        pile[1::2] = 1\n        pile[2::2] = 1\n        return pile\n\
    \    else\n        evens = n / 2\n        odds = n - evens\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1::2] = 1\n        pile[2::2] = 1\n        return\
    \ pile\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n   \
    \     return make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend", "    if\
    \ n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n     \
    \   push!(make_a_pile(n-2),n%2==0 ? n : n+1)\n    end\nend", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        push!(pile,odd==0 ? n : n+1)\n        push!(pile,even==0 ? n : n+1)\n\
    \        return pile\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ make_a_pile(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer n and returns the number of ways to arrange the stones in a\
    \ pile of n levels. \nFor example, for n = 4, there are 4 ways to arrange the\
    \ stones in a pile of 4 levels:", "    if n % 2 == 0 \n        odds = n / 2\n\
    \        evens = n - odds\n        return [odds, evens]\n    else\n        odds\
    \ = n / 2\n        evens = n - odds\n        return [odds, evens]\n    end\nend",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1), n%2==0 ? n : n+1)\n    end\nend", "    if n==0\n\
    \        []\n    else\n        make_a_pile(n-1)+[n mod 2 ? 1 : 2]\n    end\nend",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2\n        pile=make_a_pile(n/2)\n\
    \        push!(pile,odd)\n        push!(pile,even)\n        return pile\n    end\n\
    end", "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0\
    \ \n        return make_a_pile(n / 2) + make_a_pile((n / 2) + 1)\n    else \n\
    \        return make_a_pile(n / 2) + make_a_pile((n / 2) + 1) + make_a_pile((n\
    \ / 2) + 2)\nend", "    if n==0 \n        return Vector{Int64}()\n    else \n\
    \        odd=n%2 \n        even=n%2==0\n        if odd==1 \n            pile=make_a_pile(n-1)\n\
    \            push!(pile,1)\n            return pile\n        else \n         \
    \   pile=make_a_pile(n-1)\n            push!(pile,1)\n            push!(pile,0)\n\
    \            return pile\n        end\n    end\nend\n\"\"\"\n    \n\"\"\"\n  \
    \  make_a_pile(n::Int64)", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0\
    \ ? 1 : 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of ways\
    \ to arrange n items of different types (for example, 3 items of type 1, 3 items\
    \ of type 2, and 3 items of type 3) in a pile of n piles.", "    if n==0\n   \
    \     return Vector{Int64}()\n    end\n    pile = make_a_pile(n-1)\n    if mod(n,2)==0\n\
    \        push!(pile,n+1)\n    else\n        push!(pile,n-1)\n    end\n    return\
    \ pile\nend", "    if n==0 \n        return Vector{Int64}()\n    else \n     \
    \   pile = make_a_pile(n-1)\n        if mod(n,2)==1 \n            push!(pile,n+1)\n\
    \        else \n            push!(pile,n-1)\n        end\n        return pile\n\
    \    end\nend\n\"\"\"\n    Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\n    The first level has n stones.\n    The number of\
    \ stones in the next level is:\n        - the next odd number if n is odd.\n \
    \       - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_pile\
    \ = make_a_pile(floor(n/2))\n        even_pile = make_a_pile(n - odd_pile)\n \
    \       return odd_pile ++ even_pile\nend", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) ++ [n % 2 == 0 ? n : n + 2]\n    end\nend",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n     \
    \   return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2] + make_a_pile(n / 2)\nend\n\"\"\"\n    \n\"\"\"\n    Given a\
    \ positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in a list, where element\
    \ at index\n    i represents the number of stones in the level (i+1).", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        push!(pile,odd)\n        push!(pile,even)\n        return pile\n    end\n\
    end", "    if n==0 \n        return Vector{Int64}()\n    else \n        odd =\
    \ n%2 \n        even = n/2 \n        pile = make_a_pile(even) + make_a_pile(odd)\
    \ \n        return pile \nend\n\"\"\"\n    Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\n    The first level has n stones.\n \
    \   The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        if odd==1 \n            pile=make_a_pile(n/2)\n\
    \            push!(pile,1)\n            return pile\n        else \n         \
    \   pile=make_a_pile(n/2)\n            push!(pile,1)\n            push!(pile,1)\n\
    \            return pile\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(1) == [1]\n@assert make_a_pile(2) == [1, 1]\n@assert make_a_pile(3)\
    \ == [1, 1]\n@assert make_a_pile(4) == [1, 1]\n@assert make_a_pile(5) == [1, 1]\n\
    @assert make_a_pile(6) == [1, 1]\n@assert make_a_pile(7) == [1, 1]\n@assert make_a_pile(8)\
    \ == [1, 1]\n@assert make_a_pile(9) == [1, 1]\n@assert make_a_pile(10) == [1,\
    \ 1]\n@assert make_a_pile(11) == [1, 1]\n@assert make_a_pile(12) == [1, 1]\n@assert\
    \ make_a_pile(13) == [1, 1]\n@assert make_a_pile(14) == [1, 1]\n@assert make_a_pile(15)\
    \ == [1, 1]\n@assert make_a_pile(16) == [1, 1]\n@assert make_a_pile(17) == [1,\
    \ 1]\n@assert make_a_pile(18) == [1, 1]\n@assert make_a_pile(19) == [1, 1]\n@assert\
    \ make_a_pile(20) == [1, 1]\n@assert make_a_pile(21) == [1, 1]\n@assert make_a_pile(22)\
    \ == [1, 1]\n@assert make_a_pile(23) == [1, 1]\n@assert make_a_pile(24) == [1,\
    \ 1]\n@assert make_a_pile(25) == [1, 1]\n@assert make_a_pile(26) == [1, 1]\n@assert\
    \ make_a_pile(27) == [1, 1]\n@assert make_a_pile(28) == [1, 1]\n@assert make_a_pile(29)\
    \ == [1, 1]\n@assert make_a_pile(30) == [1, 1]\n@assert make_a_pile(31) == [1,\
    \ 1]\n@assert make_a_pile(32) == [1, 1]\n@assert make_a_pile(33) == [1, 1]\n@assert\
    \ make_a_pile(34) == [1, 1]\n@assert make_a_pile(35) == [1, 1]\n@assert make_a_pi",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    return odd+even\nend\n\"\"\"\n    Given a positive integer n, you have to\
    \ make a pile of n levels of stones.\n    The first level has n stones.\n    The\
    \ number of stones in the next level is:\n        - the next odd number if n is\
    \ odd.\n        - the next even number if n is even.\n    Return the number of\
    \ stones in each level in a list, where element at index\n    i represents the\
    \ number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else \n        odd = n%2 \n        even = n/2\n        pile = make_a_pile(even)\
    \ + make_a_pile(odd)\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n == 0 \n\
    \        return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end", "    if n == 0 \n        return Vector{Int64}()\n    else \n        odd_or_even\
    \ = if n % 2 == 0 then \"even\" else \"odd\"\n        pile = make_a_pile(n / 2)\n\
    \        push!(pile, odd_or_even)\n        push!(pile, make_a_pile(n / 2))\n \
    \       return pile\nend\n\"\"\"\n    Given a positive integer n, you have to\
    \ make a pile of n levels of stones.\n    The first level has n stones.\n    The\
    \ number of stones in the next level is:\n        - the next odd number if n is\
    \ odd.\n        - the next even number if n is even.\n    Return the number of\
    \ stones in each level in a list, where element at index\n    i represents the\
    \ number of stones in the level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else \n        odd_pile = make_a_pile(n / 2)\n        even_pile = make_a_pile(n\
    \ / 2)\n        odd_pile = odd_pile + [n mod 2]\n        even_pile = even_pile\
    \ + [n mod 2]\n        return odd_pile ++ even_pile\nend", "    if n==0 \n   \
    \     Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2)):push!(make_a_pile(n-floor(n/2)),n%2==0?1:0)\
    \ \n    end\nend\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ stones in a pile of n stones.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend\n\"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_count::Int64\
    \ = make_a_pile(n-1)\n        even_count::Int64 = make_a_pile(n-2)\n        return\
    \ Vector{Int64}(odd_count, even_count)\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n % 2 ==\
    \ 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2\
    \ + 1)\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else\n        odd=n%2\n\
    \        even=n%2\n        pile=make_a_pile(odd)\n        push!(pile,even)\n \
    \       return pile\n    end\nend", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2\n        pile=make_a_pile(n/2)\n        push!(pile,odd)\n  \
    \      push!(pile,even)\n        return pile\n    end\nend", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n+1)\n        elseif even \n        \
    \    push!(pile,n+1)\n            push!(pile,n+1)\n        else \n           \
    \ push!(pile,n+1)\n            push!(pile,n+1)\n            push!(pile,n+1)\n\
    \        end\n        return pile\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0 \n \
    \       return Vector{Int64}()\n    else \n        odd=n%2\n        even=n%2==0\n\
    \        if odd==1 \n            pile=make_a_pile(n-1)\n            push!(pile,1)\n\
    \            return pile\n        else \n            pile=make_a_pile(n-1)\n \
    \           push!(pile,1)\n            if even==1 \n                push!(pile,1)\n\
    \            end\n            return pile\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [1,1,1]\n@assert make_a_pile(5) == [1,1,1,1]\n@assert\
    \ make_a_pile(10) == [1,1,1,1,1]\n@assert make_a_pile(11) == [1,1,1,1,1,1]\n@assert\
    \ make_a_pile(12) == [1,1,1,1,1,1,1]\n@assert make_a_pile(13) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(14) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(15) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(16) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(17) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(18) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(19) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(20) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(21) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(22) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(23) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(24) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(25) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(26) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(27) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(28) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(29) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(30) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(31) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(32) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(33) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(34) == [1,1,1,1,1,1,1,1]\n@assert make_a_pile(35) == [1,1,1,1,1,1,1,1]\n\
    @assert make_a_pile(36) == [1,1,1,1,1,1,1,", "    if n==0\n        return [1]\n\
    \    \n    if n%2==0\n        odds=make_a_pile(n/2)\n        evens=make_a_pile(n/2)\n\
    \        odds=[odds[i]+evens[i+1]+odds[i+2] for i in range(0,n-1,2)]\n       \
    \ return odds\n    else\n        evens=make_a_pile(n/2)\n        odds=make_a_pile(n/2)\n\
    \        evens=[evens[i]+odds[i+1]+evens[i+2] for i in range(0,n-1,2)]\n     \
    \   return evens\nend\n\"\"\"\n    \n\"\"\"\n    make_a_pile(n)", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else if n%2==0 \n        odd=make_a_pile(n/2)\n        even=make_a_pile(n/2)\n\
    \        return odd+even\n    else \n        even=make_a_pile(n/2)\n        odd=make_a_pile(n/2)\n\
    \        return odd+even\nend", "    if n==1 \n        return [1]\n    else \n\
    \        odd=make_a_pile(n/2)\n        even=make_a_pile(n-odd)\n        return\
    \ odd+even\nend\n\"\"\"\n    Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\n    The first level has n stones.\n    The number of\
    \ stones in the next level is:\n        - the next odd number if n is odd.\n \
    \       - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else \n        pile = make_a_pile(n-1)\n        if mod(n,2)==0 \n       \
    \     pile = pile:+n\n        else \n            pile = pile:+n+1\n        end\n\
    \        return pile\n    end\nend\n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else \n        odd_pile = make_a_pile(n div 2)\n        even_pile = make_a_pile(n\
    \ div 2)\n        odd_pile = odd_pile ++ even_pile\n        return odd_pile\n\
    \    end\nend", "    if n == 0 \n        return Vector{Int64}() \n    else \n\
    \        odd_or_even = if n % 2 == 0 \n            \"even\" \n            \"odd\"\
    \ \n        else \n            \"even\" \n            \"odd\" \n        pile =\
    \ make_a_pile(n / 2) \n        push!(pile, odd_or_even) \n        return pile\
    \ \nend ", "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2\
    \ == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n        return\
    \ make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend", "    if n == 0 \n \
    \       return Vector{Int64}()\n    else \n        if n % 2 == 0 \n          \
    \  odd = make_a_pile(n / 2)\n            even = make_a_pile(n / 2)\n         \
    \   even = even + odd\n            return even\n        else \n            even\
    \ = make_a_pile(n / 2)\n            odd = make_a_pile(n / 2)\n            odd\
    \ = odd + even\n            return odd\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0\n  \
    \      [1]\n    else\n        make_a_pile(n-1)+[n % 2 == 0 ? 2 : 1]\n    end\n\
    end\n\"\"\"\n    \n\"\"\"\n    Given a positive integer n, you have to make a\
    \ pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n % 2 == 1 \n        pile = Vector{Int64}(undef,\
    \ n, 0)\n    else\n        pile = Vector{Int64}(undef, n, 0)\n    end\n    pile[1]\
    \ = n\n    for i in 2:n\n        pile[i] = pile[i-1] + 2\n    end\n    return\
    \ pile\nend", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n\
    \        pile=make_a_pile(n/2)\n        push!(pile,odd==1 ? n+1 : n) \n      \
    \  push!(pile,even==1 ? n+2 : n) \n        return pile\nend\n\"\"\"\n    Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in a list, where element\
    \ at index\n    i represents the number of stones in the level (i+1).", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n        return\
    \ make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) +\
    \ [n / 2]\nend", "    if n == 0 \n        return Vector{Int64}()\n    else if\
    \ n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n      \
    \  return make_a_pile(n / 2) + [n / 2]\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_pile = make_a_pile(ceil(n/2))\n        even_pile = make_a_pile(floor(n/2))\n\
    \        odd_pile = odd_pile + odd_pile\n        even_pile = even_pile + even_pile\n\
    \        return odd_pile + even_pile\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    elseif n%2 == 0 \n        return make_a_pile(n/2)\n    else\n        return\
    \ make_a_pile(n/2) + make_a_pile(n-1)\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else \n        odd=n%2\n        if odd==0 \n  \
    \          even=n/2\n            pile=make_a_pile(even)+make_a_pile(odd)\n   \
    \     else \n            even=n-1\n            pile=make_a_pile(even)+make_a_pile(n-odd)\n\
    \        end\n        return pile\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n-1)\n\
    \        if odd \n            push!(pile,odd)\n        elseif even \n        \
    \    push!(pile,even)\n        else \n            push!(pile,odd+even)\n     \
    \   end\n        return pile\n    end\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n == 0 \n    \
    \    return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(1)\n\
    \    else \n        odds = make_a_pile(n / 2)\n        evens = make_a_pile(n /\
    \ 2)\n        evens = append(evens, odds)\n        return odds\n    end\nend",
  "    if n==0 \n        return Vector{Int64}()\n    else \n        odd=n%2\n    \
    \    even=n%2==0\n        if odd==1 \n            pile=make_a_pile(n-1)\n    \
    \        push!(pile,1)\n            return pile\n        else \n            pile=make_a_pile(n-1)\n\
    \            push!(pile,1)\n            push!(pile,0)\n            return pile\n\
    \    end\nend", "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n    \
    \    make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n    end\nend", " \
    \   if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n/2)\n  \
    \      even=make_a_pile(n-odd)\n        odd[end-1]+=odd[end]\n        even[end-1]+=even[end]\n\
    \        return odd+even\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        odd_or_even = if n % 2 == 0 \n                        :odd\
    \ \n                    else \n                        :even \n        pile =\
    \ make_a_pile(n / 2) \n        push!(pile, odd_or_even) \n        push!(pile,\
    \ make_a_pile(n / 2)) \n        return pile \nend ", "    if n == 0 \n       \
    \ return Vector{Int64}()\n    else \n        if n % 2 == 1 \n            pile\
    \ = make_a_pile(n / 2)\n            push!(pile, n / 2)\n            return pile\n\
    \        else \n            pile = make_a_pile(n / 2)\n            push!(pile,\
    \ n / 2)\n            push!(pile, n / 2)\n            return pile\n        end\n\
    \    end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if n % 2 == 0 \n      \
    \  odds = n\n        evens = n - odds\n        pile = [odds, evens]\n    else\n\
    \        odds = n - 1\n        evens = n\n        pile = [odds, evens]\n    end\n\
    \    return pile\nend", "    if n % 2 == 0 \n        odds = n / 2\n        evens\
    \ = n - odds\n        pile = Vector{Int64}(undef, odds + evens)\n        pile[1]\
    \ = odds\n        pile[2] = evens\n    else\n        odds = n / 2\n        evens\
    \ = n - odds\n        pile = Vector{Int64}(undef, odds + evens)\n        pile[1]\
    \ = odds\n        pile[2] = evens\n    end\n    return pile\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert make_a_pile(3) == [3, 3, 3]\n@assert make_a_pile(4)\
    \ == [4, 4, 4]\n@assert make_a_pile(5) == [5, 5, 5]\n@assert make_a_pile(6) ==\
    \ [6, 6, 6, 6]\n@assert make_a_pile(7) == [7, 7, 7, 7, 7]\n@assert make_a_pile(8)\
    \ == [8, 8, 8, 8, 8, 8]\n@assert make_a_pile(9) == [9, 9, 9, 9, 9, 9, 9]\n@assert\
    \ make_a_pile(10) == [10, 10, 10, 10, 10, 10, 10, 10]\n@assert make_a_pile(11)\
    \ == [11, 11, 11, 11, 11, 11, 11, 11, 11]\n@assert make_a_pile(12) == [12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12]\n@assert make_a_pile(13) == [13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13]\n@assert make_a_pile(14) == [14, 14, 14, 14, 14,\
    \ 14, 14, 14, 14, 14, 14, 14]\n@assert make_a_pile(15) == [15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15]\n@assert make_a_pile(16) == [16, 16, 16, 16, 16,\
    \ 16, 16, 16, 16, 16, 16, 16]\n@assert make_a_pile(17) == [17, 17, 17, 17, 17,\
    \ 17, 17, 17, 17, 17, 17, 17]\n@assert make_a_pile(18) == [18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18]\n@assert make_a_pile(19) == [19, 19, 19, 19,\
    \ 19, 19, 19, 19, 19, 19, 19, 19, 19]\n@assert make_a_pile(20) == [20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n@assert make_a_pile(21) == [21, 21,\
    \ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]\n@assert make_a_pile(22) ==\
    \ [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]\n@assert make_a_pi", " \
    \   if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n    \
    \    pile = make_a_pile(n / 2)\n        push!(pile, n / 2)\n        return pile\n\
    \    else \n        pile = make_a_pile(n / 2)\n        push!(pile, n / 2)\n  \
    \      push!(pile, n / 2)\n        return pile\n    end\nend", "    if n == 0\
    \ \n        return Vector{Int64}()\n    else \n        odd_pile = make_a_pile(n\
    \ / 2)\n        even_pile = make_a_pile(n / 2)\n        odd_pile = odd_pile +\
    \ [n mod 2]\n        even_pile = even_pile + [n mod 2]\n        return odd_pile\
    \ ++ even_pile\n    end\nend\n\"\"\"\n    Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\n    The first level has n stones.\n \
    \   The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==1 \n        return [1]\n\
    \    else \n        odd=make_a_pile(n/2)\n        even=make_a_pile(n-odd)\n  \
    \      odd[end]=odd[end-1]+even[end-1]\n        odd\n    end\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        return odd+odd\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n==0 \n \
    \       return Vector{Int64}()\n    else \n        odd=n%2\n        even=n%2==0\n\
    \        if odd \n            pile=make_a_pile(n/2)\n            push!(pile,n//2)\n\
    \            return pile\n        else \n            pile=make_a_pile(n/2)\n \
    \           push!(pile,n//2)\n            push!(pile,n//2)\n            return\
    \ pile\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ make_a_pile(5) == [5, 3, 1]\n@assert make_a_pile(10) == [10, 6, 4, 2]\n@assert\
    \ make_a_pile(15) == [15, 12, 8, 6, 4, 2]\n@assert make_a_pile(20) == [20, 16,\
    \ 12, 8, 6, 4, 2]\n@assert make_a_pile(25) == [25, 20, 16, 12, 8, 6, 4, 2]\n@assert\
    \ make_a_pile(30) == [30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(35)\
    \ == [35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(40) == [40, 35,\
    \ 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(45) == [45, 40, 35, 30,\
    \ 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(50) == [50, 45, 40, 35, 30,\
    \ 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(55) == [55, 50, 45, 40, 35,\
    \ 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(60) == [60, 55, 50, 45,\
    \ 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(65) == [65, 60,\
    \ 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(70)\
    \ == [70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert\
    \ make_a_pile(75) == [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12,\
    \ 8, 6, 4, 2]\n@assert make_a_pile(80) == [80, 75, 70, 65, 60, 55, 50, 45, 40,\
    \ 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(85) == [85, 80, 75,\
    \ 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, 6, 4, 2]\n@assert make_a_pile(90)\
    \ == [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 16, 12, 8, ",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n-1)\n        end\n        if even \n\
    \            push!(pile,n-1)\n        end\n        return pile\n    end\nend\n\
    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n    else if\
    \ n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n      \
    \  return make_a_pile(n / 2) + [n / 2]\nend", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n % 2 == 1 \n        return make_a_pile(n / 2)\
    \ + 1\n    else \n        return make_a_pile(n / 2) + 0\nend", "    if n==0 \n\
    \        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n/2)\n        even=make_a_pile(n-odd)\n  \
    \      odd[end-1]=odd[end-1]+even[end-1]\n        even[end-1]=even[end-1]+odd[end-1]\n\
    \        return odd+even\nend\n\"\"\"\n    Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\n    The first level has n stones.\n \
    \   The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd =\
    \ n%2\n        even = n/2\n        pile = make_a_pile(odd)\n        push!(pile,even)\n\
    \        return pile\n    end\nend\n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        pile=make_a_pile(n/2)\n        if odd \n       \
    \     pile=[pile,odd]\n        else \n            pile=[even,pile]\n        return\
    \ pile\nend", "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n\
    \ div 2)\n        push!(make_a_pile(n-(n%2)),n%2)\n    end\nend", "    if n==0\
    \ \n        return Vector{Int64}() \n    else \n        pile = make_a_pile(n-1)\n\
    \        if mod(n,2)==1 \n            pile = pile:+n\n        else \n        \
    \    pile = pile:+n+1\n        end\n        return pile\n    end\nend\n\"\"\"\n\
    \    \n\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n/2)\n\
    \        even=make_a_pile(n-odd)\n        odd[end]=(odd[end]+even[end])/2\n  \
    \      return odd\nend", "    if n % 2 == 0 \n        odds = n\n        evens\
    \ = n - odds\n    else\n        odds = n - 1\n        evens = n\n    end\n   \
    \ pile = zeros(Int, n + 1)\n    pile[1] = odds\n    pile[2] = evens\n    for i\
    \ = 3:n\n        pile[i] = pile[i - 1] + pile[i - 2]\n    end\n    return pile\n\
    end", "    if n==0 \n        return Vector{Int64}()\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        pile=make_a_pile(n/2)\n        if odd \n       \
    \     push!(pile,n+1)\n        else \n            push!(pile,n-1)\n        end\n\
    \        return pile\n    end\nend\n\"\"\"\n    Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\n    The first level has n stones.\n\
    \    The number of stones in the next level is:\n        - the next odd number\
    \ if n is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of stones in each level in a list, where element at index\n    i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\
    \ \n    else \n        odd_or_even = if n%2 == 0 then \"even\" else \"odd\" \n\
    \        pile = make_a_pile(n-1) \n        push!(pile, odd_or_even) \n       \
    \ return pile \n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?1:0)\n\
    \    end\nend", "    if n % 2 == 0 \n        odds = n / 2\n        evens = n -\
    \ odds\n        return [odds, evens]\n    else\n        odds = n / 2\n       \
    \ evens = n - odds\n        return [odds, evens]\n    end\nend", "    if n % 2\
    \ == 0 \n        odds = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1] = odds\n        pile[2] = evens\n        return\
    \ pile\n    else\n        odds = n / 2\n        evens = n - odds\n        pile\
    \ = Vector{Int64}(undef, odds + evens)\n        pile[1] = odds\n        pile[2]\
    \ = evens\n        return pile\n    end\nend", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else \n        odd_pile = make_a_pile(n / 2)\n        even_pile\
    \ = make_a_pile(n / 2)\n        odd_pile = odd_pile + [n mod 2]\n        even_pile\
    \ = even_pile + [n mod 2]\n        return odd_pile ++ even_pile\nend", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n-1)\n\
    \        if odd \n            push!(pile,odd+1)\n        elseif even \n      \
    \      push!(pile,even+1)\n        else \n            push!(pile,1)\n        end\n\
    \        return pile\n    end\nend\n\"\"\"\n    \n    \n\"\"\"\n    make_a_pile(n::Int64)::Vector{Int64}",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend", " \
    \   if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n    \
    \    return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2 + 1]\nend\n\"\"\"\n    Given a positive integer n, you have to\
    \ make a pile of n levels of stones.\n    The first level has n stones.\n    The\
    \ number of stones in the next level is:\n        - the next odd number if n is\
    \ odd.\n        - the next even number if n is even.\n    Return the number of\
    \ stones in each level in a list, where element at index\n    i represents the\
    \ number of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        pile=make_a_pile(n/2)\n        push!(pile,odd==0\
    \ ? n : n+1)\n        push!(pile,even==0 ? n : n+1)\n        return pile\n   \
    \ end\nend\n\"\"\"\n    Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n    The first level has n stones.\n    The number of stones\
    \ in the next level is:\n        - the next odd number if n is odd.\n        -\
    \ the next even number if n is even.\n    Return the number of stones in each\
    \ level in a list, where element at index\n    i represents the number of stones\
    \ in the level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n   \
    \     return make_a_pile(n / 2) + [n / 2 + 1]\nend", "    if n % 2 == 0 \n   \
    \     odds = n / 2\n        evens = n - odds\n        return make_a_pile(odds)\
    \ + make_a_pile(evens)\n    else\n        odds = n / 2\n        evens = n - odds\n\
    \        return make_a_pile(odds) + make_a_pile(evens)\n    end\nend\n\"\"\"\n\
    \    Given a positive integer n, you have to make a pile of n levels of stones.\n\
    \    The first level has n stones.\n    The number of stones in the next level\
    \ is:\n        - the next odd number if n is odd.\n        - the next even number\
    \ if n is even.\n    Return the number of stones in each level in a list, where\
    \ element at index\n    i represents the number of stones in the level (i+1).",
  "    if n % 2 == 0 \n        odds = n / 2\n        evens = n - odds\n        pile\
    \ = Vector{Int64}(undef, odds + evens)\n        pile[1] = odds\n        pile[2]\
    \ = evens\n        return pile\n    else\n        odds = n / 2\n        evens\
    \ = n - odds\n        pile = Vector{Int64}(undef, odds + evens)\n        pile[1]\
    \ = odds\n        pile[2] = evens\n        return pile\n    end\nend\n\"\"\"\n\
    \    Given a positive integer n, you have to make a pile of n levels of stones.\n\
    \    The first level has n stones.\n    The number of stones in the next level\
    \ is:\n        - the next odd number if n is odd.\n        - the next even number\
    \ if n is even.\n    Return the number of stones in each level in a list, where\
    \ element at index\n    i represents the number of stones in the level (i+1).",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n/2)\n        even=make_a_pile(n-odd)\n\
    \        odd[end]+=even[end]\n        even[end]+=odd[end]\n        return odd+even\n\
    end\n\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n == 0 \n        return Vector{Int64}()\n    else \n\
    \        odd_or_even = if n % 2 == 0 then \"even\" else \"odd\"\n        pile\
    \ = make_a_pile(n / 2)\n        push!(pile, odd_or_even)\n        push!(pile,\
    \ make_a_pile(n / 2))\n        return pile\nend", "    if n % 2 == 0 \n      \
    \  pile = make_a_pile(n / 2)\n        push!(pile, n / 2)\n        push!(pile,\
    \ n / 2)\n        return pile\n    else \n        pile = make_a_pile(n / 2)\n\
    \        push!(pile, n / 2)\n        push!(pile, n / 2)\n        push!(pile, n\
    \ / 2)\n        push!(pile, n / 2)\n        push!(pile, n / 2)\n        return\
    \ pile\nend", "    if n == 0 \n        return Vector{Int64}()\n    else if n ==\
    \ 1 \n        return Vector{Int64}(1)\n    else \n        odd_pile = make_a_pile(n\
    \ div 2)\n        even_pile = make_a_pile(n div 2)\n        odd_pile = odd_pile\
    \ + odd_pile\n        even_pile = even_pile + even_pile\n        return odd_pile\
    \ + even_pile\nend\n\"\"\"\n    Given a positive integer n, you have to make a\
    \ pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n % 2 == 0 \n        odds = n / 2\n\
    \        evens = n - odds\n        return [odds, evens]\n    else\n        odds\
    \ = n / 2\n        evens = n - odds\n        return [odds, evens]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(6)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(7)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(8)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(9)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(10)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(11)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(12)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(13)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(14)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(15)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(16)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(17)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(18)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(19)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(20)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(21)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(22)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(23)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(24)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(25)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(26)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(27)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(28)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(29)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(30)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(31)\n</cell>\n<code language=juli", " \
    \   if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else\n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n+1)\n        else\n            push!(pile,n-1)\n\
    \        end\n        return pile\n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n%2==0\n        \n        if odd \n        \
    \    pile=make_a_pile(n-1)\n            push!(pile,1)\n            return pile\n\
    \        else \n            pile=make_a_pile(n-1)\n            push!(pile,1)\n\
    \            push!(pile,2)\n            return pile\n        end\n    end\nend",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd_pile = make_a_pile(n div 2)\n     \
    \   even_pile = make_a_pile(n div 2)\n        odd_pile = odd_pile + odd_pile\n\
    \        even_pile = even_pile + even_pile\n        return odd_pile + even_pile\n\
    end", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend",
  "    if n==0\n        return Vector{Int64}()\n    end\n    \n    pile = make_a_pile(n-1)\n\
    \    \n    if mod(n,2)==1\n        push!(pile,n+1)\n    else\n        push!(pile,n-1)\n\
    \    end\n    \n    return pile\nend", "    if n % 2 == 0 \n        odds = n\n\
    \        evens = n - odds\n    else\n        odds = n - 1\n        evens = n\n\
    \    end\n    pile = zeros(Int64, evens + odds)\n    pile[evens:end] = odds\n\
    \    pile[1:evens] = evens\n    return pile\nend", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else \n        odd_pile = make_a_pile(n div 2)\n     \
    \   even_pile = make_a_pile(n div 2)\n        odd_pile = odd_pile + [n mod 2]\n\
    \        even_pile = even_pile + [n mod 2]\n        return odd_pile ++ even_pile\n\
    \    end\nend", "    if n==0\n        return Vector{Int64}()\n    \n    pile =\
    \ make_a_pile(n-1)\n    \n    if mod(n,2)==1\n        push!(pile,n+1)\n    else\n\
    \        push!(pile,n-1)\n    end\n    \n    return pile\nend", "    if n % 2\
    \ == 0 \n        odds = n\n        evens = n - odds\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1] = odds\n        pile[2] = evens\n    else\n \
    \       odds = n - 1\n        evens = n - 2\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1] = odds\n        pile[2] = evens\n    end\n  \
    \  return pile\nend", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ \n        odd_count = make_a_pile(n / 2)\n        even_count = make_a_pile(n\
    \ / 2)\n        odd_count = odd_count + even_count\n        if n % 2 == 1 \n \
    \           odd_count = odd_count + 1\n        end\n        return odd_count\n\
    \    end\nend", "    if n==0\n        return Vector{Int64}()\n    else if n==1\n\
    \        return Vector{Int64}(1)\n    else\n        odd_pile = make_a_pile(n-1)\n\
    \        even_pile = make_a_pile(n-2)\n        odd_pile = odd_pile + odd_pile\n\
    \        even_pile = even_pile+even_pile\n        return odd_pile + even_pile\n\
    \    end\nend", "    if n==0 \n        return Vector{Int64}() \n    else \n  \
    \      odd_pile = make_a_pile(n-1) \n        even_pile = make_a_pile(n) \n   \
    \     odd_pile = odd_pile ++ [odd_pile[end-1]+2] \n        even_pile = even_pile\
    \ ++ [even_pile[end-1]+2] \n        return odd_pile ++ even_pile\nend", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else \n        if n % 2 == 1 \n\
    \            pile = make_a_pile(n / 2)\n            push!(pile, n / 2)\n     \
    \       return pile\n        else \n            pile = make_a_pile(n / 2)\n  \
    \          push!(pile, n / 2)\n            push!(pile, n / 2)\n            return\
    \ pile\n        end\n    end\nend", "    if n % 2 == 0 \n        odds = n / 2\n\
    \        evens = n - odds\n        pile = Vector{Int64}(undef, odds + evens)\n\
    \        pile[1::2] = odds\n        pile[2::2] = evens\n        return pile\n\
    \    else\n        odds = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1::2] = odds\n        pile[2::2] = evens\n     \
    \   return pile\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        odd_or_even = if n % 2 == 0 then \"even\" else \"odd\"\
    \ \n        pile = make_a_pile(n / 2) \n        push!(pile, odd_or_even) \n  \
    \      push!(pile, make_a_pile(n / 2)) \n        return pile \nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else if n%2==0 \n        return make_a_pile(n/2)+make_a_pile(n/2+1) \n  \
    \  else \n        return make_a_pile(n/2) + make_a_pile(n/2+1) + make_a_pile(n/2+2)\n\
    end", "    if n == 0 \n        return Vector{Int64}()\n    else \n        if n\
    \ % 2 == 0 \n            pile = make_a_pile(n / 2)\n            push!(pile, n\
    \ / 2)\n            return pile\n        else \n            pile = make_a_pile(n\
    \ / 2)\n            push!(pile, n / 2)\n            push!(pile, n / 2)\n     \
    \       return pile\n        end\n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n    \
    \    if odd \n            push!(pile,n+1)\n        else \n            push!(pile,n+1)\n\
    \            push!(pile,n+1)\n        end\n        return pile\n    end\nend\n\
    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ div 2) + [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a positive integer n and\
    \ returns the number of levels of stones needed to make n piles.", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_pile = make_a_pile(n-1)\n        even_pile = make_a_pile(n-2)\n\
    \        odd_pile = odd_pile + odd_pile\n        even_pile = even_pile+even_pile\n\
    \        return odd_pile + even_pile\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        pile = make_a_pile(n div 2) \n        push!(pile, n mod\
    \ 2) \n        return pile \n    end\nend", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        \n        if odd \n            pile=make_a_pile(n/2)\n\
    \            push!(pile,n//2)\n            return pile\n        else \n      \
    \      pile=make_a_pile(n/2)\n            push!(pile,n//2)\n            push!(pile,n//2)\n\
    \            return pile\n        end\n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n    \
    \    if odd \n            push!(pile,odd+1)\n        else \n            push!(pile,even+1)\n\
    \        end\n        return pile\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in a list, where element\
    \ at index\n    i represents the number of stones in the level (i+1).", "    if\
    \ n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n div 2) + [n\
    \ mod 2]\n    end\nend", "    if n==0 \n        return Vector{Int64}()\n    else\
    \ if n==1 \n        return Vector{Int64}(1)\n    else if n%2==0\n        odds\
    \ = make_a_pile(n/2)\n        evens = make_a_pile(n-2)\n        return odds +\
    \ evens\n    else\n        evens = make_a_pile(n/2)\n        odds = make_a_pile(n-2)\n\
    \        return odds + evens\n    end\nend\n\"\"\"\n    \n    \n\"\"\"\n    Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in a list, where element\
    \ at index\n    i represents the number of stones in the level (i+1).", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else \n        pile = make_a_pile(n-1)\n\
    \        if mod(n,2)==0 \n            pile = pile:+n\n        else \n        \
    \    pile = pile:+n+1\n        end\n        return pile\n    end\nend", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else \n        if n%2 == 0 \n   \
    \         pile = make_a_pile(n/2)\n            push!(pile,n%2)\n            return\
    \ pile\n        else \n            pile = make_a_pile(n/2)\n            push!(pile,n%2)\n\
    \            push!(pile,n%2)\n            return pile\n        end\n    end\n\
    end", "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n     \
    \   return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n       \
    \ even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\n    end\nend",
  "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n   \
    \     even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\nend", " \
    \   if n==0 \n        return Vector{Int64}()\n    else \n        pile = make_a_pile(n-1)\n\
    \        if mod(n,2)==0 \n            pile = pile:+n\n        else \n        \
    \    pile = pile:+n+1\n        end\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(5) == Vector{Int64}([5])\n@assert\
    \ make_a_pile(4) == Vector{Int64}([4])\n@assert make_a_pile(3) == Vector{Int64}([3])\n\
    @assert make_a_pile(2) == Vector{Int64}([2])\n@assert make_a_pile(1) == Vector{Int64}([1])\n\
    @assert make_a_pile(0) == Vector{Int64}([0])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else \n        odd_pile = make_a_pile(n-1)\n\
    \        even_pile = make_a_pile(n-2)\n        odd_pile = odd_pile + odd_pile\n\
    \        even_pile = even_pile  + even_pile\n        return odd_pile + even_pile\n\
    end", "    if n == 0\n        return Vector{Int64}()\n    else if n % 2 == 1\n\
    \        return make_a_pile(n / 2) + [n / 2]\n    else\n        return make_a_pile(n\
    \ / 2) + [n / 2] + make_a_pile(n / 2)\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        pile = make_a_pile(n / 2)\n        push!(pile,\
    \ n / 2)\n        return pile\n    else \n        pile = make_a_pile(n / 2)\n\
    \        push!(pile, n / 2)\n        push!(pile, n / 2)\n        return pile\n\
    end\n\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n    The first level has n stones.\n    The number of stones in the\
    \ next level is:\n        - the next odd number if n is odd.\n        - the next\
    \ even number if n is even.\n    Return the number of stones in each level in\
    \ a list, where element at index\n    i represents the number of stones in the\
    \ level (i+1).", "    if n == 0 \n        Vector{Int64}() \n    else \n      \
    \  make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2)\
    \ \n    end\nend\n\"\"\"\n    \n\"\"\"\n    make_a_pile(n)", "    if n==0 \n \
    \       return Vector{Int64}()\n    else \n        odd=n%2\n        even=n%2==0\n\
    \        if odd==0 \n            pile=make_a_pile(n/2)\n            push!(pile,n+1)\n\
    \            return pile\n        else \n            pile=make_a_pile(n/2)\n \
    \           push!(pile,n+1)\n            push!(pile,n+1)\n            return pile\n\
    \        end\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend", " \
    \   if n == 0 \n        return Vector{Int64}()\n    else \n        pile = make_a_pile(n\
    \ div 2)\n        if n % 2 == 0 \n            push!(pile, n div 2)\n        else\n\
    \            push!(pile, n div 2 + 1)\n        end\n        return pile\n    end\n\
    end", "    if n==0 \n        return Vector{Int64}() \n    else \n        pile\
    \ = make_a_pile(n-1) \n        pile = pile:append(n%2) \n        return pile \n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n   \
    \     return Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n\
    \        stones=make_a_pile(n-1)\n        if odd \n            stones=[stones[1],stones[2]]\n\
    \        elseif even \n            stones=[stones[2],stones[1]]\n        else\
    \ \n            stones=[stones[1],stones[2]]\n    end\n    return stones\nend\n\
    \"\"\"\n    \n\"\"\"\n    make_a_pile(n::Int64)", "    if n == 0\n        return\
    \ Vector{Int64}()\n    \n    odd_pile = make_a_pile(n / 2)\n    even_pile = make_a_pile(n\
    \ / 2)\n    \n    if n % 2 == 1\n        even_pile = even_pile + [n / 2]\n   \
    \ end\n    \n    odd_pile = odd_pile + [n / 2]\n    \n    return odd_pile ++ even_pile\n\
    end", "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n     \
    \   return Vector{Int64}(1)\n    else \n        odd_pile = make_a_pile(n-1)\n\
    \        even_pile = make_a_pile(n-2)\n        odd_pile = odd_pile + odd_pile\n\
    \        even_pile = even_pile  + even_pile\n        return odd_pile + even_pile\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange n piles of stones.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + make_a_pile(n/2+1) \n    end\nend", "  \
    \  if n % 2 == 0 \n        odds = n / 2\n        evens = n - odds\n        return\
    \ [odds, evens]\n    else\n        odds = n / 2\n        evens = n - odds\n  \
    \      return [odds, evens]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(10)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(20)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(30)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(40)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(50)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(60)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(70)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(80)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(90)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(100)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(110)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(120)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(130)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(140)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(150)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(160)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(170)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(180)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(190)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(200)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(210)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(220)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(230)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(240)\n</cell>\n<code language=julia-1.5>\nmake_a_pile(250)\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(260)\n</cell>\n<code language=julia-1.5>\n\
    make_a_pi", "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2\
    \ == 0 \n        pile = make_a_pile(n / 2)\n        push!(pile, n / 2)\n     \
    \   return pile\n    else \n        pile = make_a_pile(n / 2)\n        push!(pile,\
    \ n / 2)\n        push!(pile, n / 2)\n        return pile\nend", "    if n ==\
    \ 0 \n        return Vector{Int64}()\n    else if n % 2 == 1 \n        return\
    \ make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) +\
    \ [n / 2] + make_a_pile(n / 2)\nend", "    if n==0 \n        return Vector{Int64}()\
    \ \n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n \
    \       odd=odd+even\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd+even\n        return odd\nend\n\"\"\"\n    Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n    The first level has n\
    \ stones.\n    The number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    Return\
    \ the number of stones in each level in a list, where element at index\n    i\
    \ represents the number of stones in the level (i+1).", "    if n % 2 == 0 \n\
    \        odds = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef,\
    \ odds + evens)\n        pile[1] = odds\n        pile[2] = evens\n        return\
    \ pile\n    else\n        odds = n / 2\n        evens = n - odds\n        pile\
    \ = Vector{Int64}(undef, odds + evens)\n        pile[1] = odds\n        pile[2]\
    \ = evens\n        return pile\n    end\nend", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n / 2)\
    \ + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2]\nend", " \
    \   if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n        \n\
    \        if odd==1 \n            pile=make_a_pile(n-1)\n            push!(pile,n)\n\
    \            return pile\n        else \n            pile=make_a_pile(n-1)\n \
    \           push!(pile,n)\n            push!(pile,even)\n            return pile\n\
    \        end\n    end\nend", "    if n==0 \n        return Vector{Int64}()\n \
    \   else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_pile\
    \ = make_a_pile(n-1)\n        even_pile = make_a_pile(n-2)\n        odd_pile =\
    \ odd_pile + odd_pile\n        even_pile = even_pile+even_pile\n        return\
    \ odd_pile + even_pile\nend", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n    end\nend", "    if n==0\n        return Vector{Int64}()\n\
    \    \n    odd_pile = make_a_pile(n-1)\n    even_pile = make_a_pile(n-2)\n   \
    \ \n    odd_pile = odd_pile ++ even_pile\n    \n    if mod(n,2)==0\n        odd_pile\
    \ = odd_pile ++ even_pile\n    end\n    \n    return odd_pile\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2==0\n        pile=make_a_pile(n/2)\n\
    \        if odd \n            push!(pile,n+1)\n        elseif even \n        \
    \    push!(pile,n+1)\n            push!(pile,n+1)\n        else \n           \
    \ push!(pile,n+1)\n            push!(pile,n+1)\n            push!(pile,n+1)\n\
    \        end\n        return pile\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\n    The first level\
    \ has n stones.\n    The number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of stones in each level in a list, where element at index\n\
    \    i represents the number of stones in the level (i+1).", "    if n == 0 \n\
    \        return Vector{Int64}()\n    else \n        odd_or_even = if n % 2 ==\
    \ 0 then \"even\" else \"odd\"\n        pile = make_a_pile(n / 2)\n        push!(pile,\
    \ odd_or_even)\n        push!(pile, make_a_pile(n / 2))\n        return pile\n\
    \    end\nend\n\"\"\"\n    Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\n    The first level has n stones.\n    The number of\
    \ stones in the next level is:\n        - the next odd number if n is odd.\n \
    \       - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else\n        odd=n%2\n\
    \        even=n%2==0\n        pile=make_a_pile(n/2)\n        if odd \n       \
    \     push!(pile,n+1)\n        elseif even \n            push!(pile,n+1)\n   \
    \         push!(pile,n+1)\n        else\n            push!(pile,n+1)\n       \
    \     push!(pile,n+1)\n            push!(pile,n+1)\n        end\n        return\
    \ pile\n    end\nend", "    if n==0 \n        return Vector{Int64}() \n    else\
    \ \n        pile = make_a_pile(n-1) \n        push!(pile, n) \n        return\
    \ pile \n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
