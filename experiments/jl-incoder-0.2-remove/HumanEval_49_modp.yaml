name: HumanEval_49_modp
language: jl
prompt: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                     \
  \   \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
  \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
  @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
  \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
completions: ["    if n == 0 \n        then return 0 \n        else return (modp(n\
    \ - 1, p) + p) % p\n    end\nend", "    if n < 0 \n        error(\"modp requires\
    \ non-negative integers\")\n    else if p < 0 \n        error(\"modp requires\
    \ non-negative integers\")\n    else if n < p \n        error(\"modp requires\
    \ non-negative integers\")\n    else \n        return n `mod` p\nend", "    if\
    \ n == 0 then return 0\n    if n == 1 then return p\n    else return modp(n /\
    \ 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n                        \"\"\"", "    if n\
    \ == 0 \n        then return 0 \n        else return p % n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return p\n    else \n        return modp(n / 2, p) * p\
    \ + modp(n / 2, p)\nend", "    if n == 0 then return 0\n    if n == 1 then return\
    \ p\n    if p < 2 then return 0\n    if p < n then return modp(n - 1, p) \n  \
    \  else return modp(n - 2, p) % p\nend", "    if n == 0 \n        then return\
    \ p\n    else \n        modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then return p\n    else \n        modp(n / 2, p)\
    \ * p + n % p\nend\n</cell>\n<code language=julia-1.5>", "    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if n ==\
    \ 0 \n        return p\n    end\n    if p == 0 \n        return n\n    end\n \
    \   if n == p \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n == p \n        return n\n    end\n    if n > p\
    \ \n        error(\"modp requires non-negative integers\")\n    end\n    if n\
    \ == p \n        return n\n    end\n    if n == p \n        return n\n    end\n\
    \    if n > p \n        error(\"modp requires non-negative integers\")\n    end\n\
    \    if n == p \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n > p \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if n == p \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n > p \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == p \n        return n\n    end\n\
    \    if n == p \n        return n\n    end\n    if n > p \n        error(\"modp\
    \ requires non-negative integers\")\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n > p \n        error(\"\
    modp requires non-negative integers\")\n    end\n    if n == p \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n > p \n     \
    \   error(\"modp requires non-negative integers\")\n    end\n    if n == p \n\
    \        return n\n    end\n    if n == p \n        return n\n    end\n    if\
    \ n > p \n        error(\"modp requires non-negative integers\")\n    end\n  \
    \  if n == p \n        return n\n    end\n    if n == p \n        return n\n \
    \   end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n > p \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if n == p \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n > p \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == p \n        return n\n    end\n",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        return modp(n / 2, p) + p * modp(n % 2, p)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return p\n    else \n        return modp(n / 2, p) * p\
    \ + n % p\nend\n</cell>\n<code language=julia-1.4>", "    if n == 0 \n       \
    \ then return 0\n    else if n == 1 \n        then return p\n    else \n     \
    \   return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n\
    \        then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end", "    if n == 0 then return 0\n    if n == 1 then return p\n    if p < 0\
    \ then return modp(n-1, p)\n    if p > p then return modp(n-1, p)\n    return\
    \ modp(n-1, p) + p\nend", "    if n == 0 \n        then return 0\n    else if\
    \ n <= p \n        then return 1\n    else \n        return modp(n / p, p) * p\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return p\n    else \n        return modp(n\
    \ / 2, p) + p * modp(n % 2, p)\nend", "    if n < 0 \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if p < 0 \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n % p == 0 \n    \
    \    return modp(n / p, p)\n    end\n    if n % p == 1 \n        return modp((n\
    \ - p) / p, p)\n    end\n    if n % p == -1 \n        return modp((n - p) / p,\
    \ p)\n    end\nend", "    if n == 0 \n        then return 0\n    else if n < 0\n\
    \        then return modp(abs(n), p)\n    else if n == 1\n        then return\
    \ p\n    else return modp(n / 2, p) * p + modp(n / 2, p)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\
    \"", "    if n == 0 \n        then return 0\n    else if n <= p \n        then\
    \ return 1\n    else return modp(n / p, p)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 then return 0\n    if n == 1 then return p\n    if n >= p\
    \ then return modp(n - p, p)\n    \n    modp(n - 1, p)\nend", "    if n == 0 then\
    \ 0 else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return 2^n modulo p (be aware of numerics).\n                        \"\"\"",
  "    if n < 0 \n        error(\"modp requires non-negative arguments\")\n    end\n\
    \    if p < 0 \n        error(\"modp requires non-negative arguments\")\n    end\n\
    \    if n == 0 \n        return p\n    end\n    if n == 1 \n        return p\n\
    \    end\n    if p % 2 == 0 \n        return modp(n / 2, p)\n    end\n    return\
    \ modp((n / 2) * 2, p)\nend", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return p\n    else \n        return modp(n / 2, p)\
    \ * p + modp(n / 2, p)\nend", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return p\n    else \n        modp(n / 2, p) * p + n\
    \ % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ 2^n modulo p (be aware of numerics).\n                        \"\"\"", "   \
    \ if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"", "    if n == 0 then return 0\n    if n == 1\
    \ then return p\n    if p < 2 then return 0\n    if p < 3 then return 1\n    if\
    \ p < 5 then return p\n    if p < 7 then return p\n    if p < 11 then return p\n\
    \    if p < 13 then return p\n    if p < 17 then return p\n    if p < 19 then\
    \ return p\n    if p < 23 then return p\n    if p < 29 then return p\n    if p\
    \ < 31 then return p\n    if p < 37 then return p\n    if p < 41 then return p\n\
    \    if p < 43 then return p\n    if p < 47 then return p\n    if p < 53 then\
    \ return p\n    if p < 59 then return p\n    if p < 61 then return p\n    if p\
    \ < 67 then return p\n    if p < 71 then return p\n    if p < 73 then return p\n\
    \    if p < 79 then return p\n    if p < 83 then return p\n    if p < 89 then\
    \ return p\n    if p < 97 then return p\n    if p < 103 then return p\n    if\
    \ p < 109 then return p\n    if p < 113 then return p\n    if p < 127 then return\
    \ p\n    if p < 131 then return p\n    if p < 137 then return p\n    if p < 143\
    \ then return p\n    if p < 149 then return p\n    if p < 157 then return p\n\
    \    if p < 163 then return p\n    if p < 169 then return p\n    if p < 175 then\
    \ return p\n    if p < 181 then return p\n    if p < 187 then return p\n    if\
    \ p < 193 then return p\n    if p < 199 then return p\n    if p < 205 then return\
    \ p\n    if p < 211 then return p\n    if p < 217 then return p\n    if p < 223\
    \ then return p\n    if p < 229 then return p\n    if p < 235 then return p\n\
    \    if p < 241 then return p\n    if p < 247 then return p\n    if p < 253 then\
    \ return p\n    if p < 259 then return p\n    if p < 265 then return p\n    if\
    \ p < 271 then return p\n    if p < 277 then return p\n    if p < 283 then return\
    \ p\n    if p < 289 then return p\n    if p < 295 then ", "    if n == 0 then\
    \ return 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p)\
    \ * p + n % 2 * p\nend", "    if n == 0 then return 0\n    else if n == 1 then\
    \ return p\n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        then return 0\n    else if n <= p \n        then return\
    \ 1\n    else \n        modp(n - 1, p) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 then return p\n    else if n == 1 then return 1\n    else\
    \ return modp(n / 2, p) * p + n % p\nend", "    if n == 0 \n        then return\
    \ p \n        else return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if n == 0 \n        then return p\n        else\
    \ return modp(n / 2, p) * p + n % p\n    end\nend", "    if n == 0 \n        then\
    \ return 0 \n        else return (modp(n / 2, p) + p * modp(n / 2, p)) % p \n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"", "    if n == 0 \n        then return 0\n    else\
    \ if n <= p \n        then return n\n    else return modp(n / p, p) * p\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n == 0 \n        then 0\n    else\
    \ if p == 0 \n        then 1\n    else modp(n / p, p) * p\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n   \
    \                     \"\"\"", "    if n == 0 then return 0\n    if n == 1 then\
    \ return p\n    return modp(n / 2, p) + p % n\nend", "    if n == 0 \n       \
    \ then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"", "    if n == 0 then return 0 \n    else if n\
    \ == 1 then return p \n    else return modp(n / 2, p) * p + n % p\nend", "   \
    \ if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        modp(n / 2, p) + p * modp(n / 2, p)\nend", "    if n <\
    \ 0 \n        error(\"modp requires non-negative integer `n`\")\n    end\n   \
    \ if p < 0 \n        error(\"modp requires non-negative integer `p`\")\n    end\n\
    \    if p > n \n        error(\"modp requires `p` <= `n`\")\n    end\n    return\
    \ 2^n % p\nend", "    if n == 0 then return 0\n    else if n == 1 then return\
    \ p\n    else return modp(n / 2, p) * p + n % p\nend", "    if n == 0 then 0 else\
    \ modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n                        \"\"\"",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\
    \"", "    if n == 0 \n        then return 0\n    else if n < 0 \n        then\
    \ return modp(-n, p)\n    else if n == 1 \n        then return p\n    else return\
    \ modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n      \
    \  then return 0\n    else if n == 1 \n        then return p\n    else \n    \
    \    modp(n / 2, p) * p + n % 2 * p\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 \n        then return 0\n    else if n <= p \n        then return\
    \ 1\n    else \n        modp(n / p, p) * p\nend", "    if n < 0 \n        error(\"\
    modp requires non-negative integers\")\n    end\n    if p < 0 \n        error(\"\
    modp requires non-negative integers\")\n    end\n    if p > n \n        error(\"\
    modp requires non-negative integers\")\n    end\n    return 2^n % p\nend", " \
    \   if n <= 0 \n        then throw(ArgumentError(\"modp requires n >= 0\"))\n\
    \    else if n >= p \n        then throw(ArgumentError(\"modp requires n <= p\"\
    ))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires n >\
    \ 0\"))\n    else if p == 0 \n        then throw(ArgumentError(\"modp requires\
    \ p > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == p \n        then throw(ArgumentError(\"modp requires\
    \ n != p\"))\n    else if n == p \n        then throw(ArgumentError(\"modp requires\
    \ n != p\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1", "    if n == 0 \n        then return 0\n    else if n == 1 \n     \
    \   then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 then 0 else modp(n / 2, p)\
    \ + p % n\nend\n</cell>\n<code language=julia-1.4>", "    if n <= 0 \n       \
    \ then throw(DomainError(string(\"modp called with negative argument\")))\n  \
    \  elseif p <= 0 \n        then throw(DomainError(string(\"modp called with negative\
    \ argument\")))\n    elseif p > n \n        then throw(DomainError(string(\"modp\
    \ called with argument greater than argument\")))\n    elseif p < 1 \n       \
    \ then throw(DomainError(string(\"modp called with argument less than argument\"\
    )))\n    elseif p > Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    elseif p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else\n        modp(n - 1, p)\nend", "    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 then return 0\n    if n == 1 then return p\n    if p < 2 then\
    \ return 0\n    if p < n then return modp(n - 1, p) + 1\n    if p < p then return\
    \ modp(n - 1, p)\nend", "    if n <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative argument\")))\n    else if p <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative argument\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p > Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument greater\
    \ than argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument ", "    if n == 0 \n        then return p\n        else\
    \ return modp(n / 2, p) + p % n\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 0 \n        error(\"modp requires n >= 0\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires p >= 0\")\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == p \n        return p\n    end\n    if n <\
    \ p \n        error(\"modp requires n >= p\")\n    end\n    if n == 0 \n     \
    \   return p\n    end\n    if n == p \n        return p\n    end\n    if n < p\
    \ \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n       \
    \ return p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n\
    \    end\n    if n == p \n        return p\n    end\n    if n < p \n        error(\"\
    modp requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n\
    \    if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n ==\
    \ p \n        return p\n    end\n    if n < p \n        error(\"modp requires\
    \ n >= p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p\
    \ \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n       \
    \ return p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n\
    \    end\n    if n == p \n        return p\n    end\n    if n < p \n        error(\"\
    modp requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n\
    \    if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n ==\
    \ p \n        return p\n    end\n    if n < p \n        error(\"modp requires\
    \ n >= p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p\
    \ \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n       \
    \ return p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n\
    \    end\n    if n == p \n        return p\n    end\n    if n < p \n        error(\"\
    modp requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n\
    \    if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n ==\
    \ p \n        return p\n    end\n    if n < p \n        error(\"modp requires\
    \ n >= p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p\
    \ \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n       \
    \ return p\n    end\n    if n < p \n        error(\"modp requires n ", "    if\
    \ n < 0 \n        error(\"modp requires positive integers\")\n    end\n    if\
    \ p < 0 \n        error(\"modp requires positive integers\")\n    end\n    if\
    \ n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n    end\n\
    \    if n == p \n        return n\n    end\n    if n % p == 0 \n        return\
    \ modp(n / p, p)\n    end\n    return modp(n, p - 1)\nend", "    if n == 0 \n\
    \        then 0\n        else modp(n / 2, p) + p % n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time modp(100_000_000, 10_000_000)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. \n\
    The function should accept a number as input and output a number.", "    if n\
    \ <= 0 \n        then throw(DomainError(string(\"modp called with negative argument:\
    \ \", n)))\n    else if n == 1 \n        then return p\n    else \n        return\
    \ modp(n / 2, p) * p + n % p\nend", "    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return p\n    else \n        return modp(n /\
    \ 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return p\n    else \n        modp(n / 2,\
    \ p) * p + n % 2 * modp(n / 2, p)\nend", "    if n == 0 \n        then return\
    \ p\n        else return modp(n / 2, p)\n    end\nend", "    if n == 0 then return\
    \ p\n    else if n == 1 then return 1\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"", "    if n == 0 then 0 else modp(n / 2, p) + p\
    \ * modp(n % 2, p)\nend", "    if n == 0 \n        then return p\n        else\
    \ return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 then return 0\n    if n == 1 then return p\n    if p < 2 then return\
    \ 0\n    if p < n then return modp(n - 1, p) + 1\n    if p < 2 * n then return\
    \ modp(n - 1, p)\n    return modp(n - 1, p)\nend", "    if n == 0 then 0 else\
    \ modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>", "    if n\
    \ == 0 then return 0\n    if n == 1 then return p\n    if p < 2 then return 0\n\
    \    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then return\
    \ 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p <\
    \ 2 then return 0\n    if p > n then return 0\n    if p < 2 then return 0\n  \
    \  if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then return\
    \ 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p <\
    \ 2 then return 0\n    if p > n then return 0\n    if p < 2 then return 0\n  \
    \  if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then return\
    \ 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p ", "    if n == 0 \n        then return 0\n    else if n\
    \ < 0 \n        then return modp(abs(n), p)\n    else if n == 1 \n        then\
    \ return p\n    else if p == 0 \n        then return 0\n    else if p < 0 \n \
    \       then return modp(abs(n), p)\n    else if p == 1 \n        then return\
    \ p\n    else if p > 1 \n        then return modp(n / 2, p)\n    else if p % 2\
    \ == 0 \n        then return modp(n / 2, p)\n    else \n        then return modp(n\
    \ / 2, p) + modp(n / 2, p - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n                        \"\"\"",
  "    if n == 0 \n        then return p\n        else return modp(n / 2, p) * p +\
    \ n % p\n    end\nend", "    if n == 0 then return 0\n    else if n == 1 then\
    \ return p\n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then\
    \ 0 else n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n                        \"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return p\n    else \n\
    \        modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then\
    \ return 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p)\
    \ * p + n % p\nend", "    if n == 0 \n        then 0\n        else modp(n >> 1,\
    \ p) + p\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"", "    if n < 0 \n        error(\"modp requires\
    \ positive arguments\")\n    end\n    if p < 0 \n        error(\"modp requires\
    \ positive arguments\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if p > n \n        error(\"modp\
    \ requires positive arguments\")\n    end\n    if p > 2^(n-1) \n        error(\"\
    modp requires positive arguments\")\n    end\n    return 2^(n-1) % p\nend", " \
    \   if n == 0 \n        then return 0 \n    else if p == 0 \n        then return\
    \ 1 \n    else if p < 0 \n        then return modp(-n, -p) \n    else if p > 0\
    \ \n        then return modp(n, p) \n    else \n        modp(n-1, p) + modp(n-1,\
    \ -p) \nend", "    if n == 0 then return 0\n    if n == 1 then return p\n    \n\
    \    if p < 2 then return 0\n    \n    if p % 2 == 1 then return modp(n / 2, p)\n\
    \    \n    return modp(n / 2, p) * p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then 0\n        else modp(n / 2, p) + p % n\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return p\n    else \n        modp(n\
    \ / 2, p) + p * modp(n % 2, p)\nend", "    if n == 0 then return 0\n    else if\
    \ n == 1 then return p\n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n\
    <code language=julia-1.1>", "    if n == 0 \n        then 0\n        else modp(n\
    \ / 2, p) + p % n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ 2^n modulo p (be aware of numerics).\n                        \"\"\"", "   \
    \ if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        return modp(n / 2, p) + p * modp(n % 2, p)\nend", "  \
    \  if n == 0 then return 0 \n    else if n == 1 then return p \n    else return\
    \ modp(n / 2, p) * p + n % 2 * p \nend\n</cell>\n<code language=julia-1.4>", " \
    \   if n == 0 \n        then return p\n        else return modp(n / 2, p) + p\
    \ % n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"", "    if n < 0 \n        error(\"modp requires\
    \ positive arguments\")\n    end\n    if p < 0 \n        error(\"modp requires\
    \ positive arguments\")\n    end\n    return 2^n % p\nend", "    if n == 0 \n\
    \        then return 0 \n        else return modp(n / 2, p) + p % n \n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return\
    \ p\n        else return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n   \
    \                     \"\"\"", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return p\n    else \n        return modp(n / 2, p)\
    \ + p * modp(n / 2, p)\nend", "    if n == 0 \n        then return p\n       \
    \ else return modp(n >> 1, p)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n <= 0 \n\
    \        then throw(DomainError(string(\"modp called with negative argument\"\
    )))\n    else if p <= 0 \n        then throw(DomainError(string(\"modp called\
    \ with negative argument\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(Domain", "    if n == 0 then return 0\n    else if n == 1 then\
    \ return p\n    else return modp(n / 2, p) + p % n\nend", "    if n <= 0\n   \
    \     error(\"modp requires n >= 0\")\n    end\n    if p <= 0\n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0\n        return 0\n    end\n \
    \   if p == 0\n        return 1\n    end\n    if p > n\n        error(\"modp requires\
    \ p <= n\")\n    end\n    if n <= 1\n        return n\n    end\n    if n == 1\n\
    \        return p\n    end\n    if p <= 2\n        return modp(n - 1, p * 2)\n\
    \    end\n    if p <= 4\n        return modp(n - 1, p * 4)\n    end\n    if p\
    \ <= 8\n        return modp(n - 1, p * 8)\n    end\n    if p <= 16\n        return\
    \ modp(n - 1, p * 16)\n    end\n    if p <= 32\n        return modp(n - 1, p *\
    \ 32)\n    end\n    if p <= 64\n        return modp(n - 1, p * 64)\n    end\n\
    \    if p <= 128\n        return modp(n - 1, p * 128)\n    end\n    if p <= 256\n\
    \        return modp(n - 1, p * 256)\n    end\n    if p <= 512\n        return\
    \ modp(n - 1, p * 512)\n    end\n    if p <= 1024\n        return modp(n - 1,\
    \ p * 1024)\n    end\n    if p <= 2048\n        return modp(n - 1, p * 2048)\n\
    \    end\n    if p <= 4096\n        return modp(n - 1, p * 4096)\n    end\n  \
    \  if p <= 8192\n        return modp(n - 1, p * 8192)\n    end\n    if p <= 16384\n\
    \        return modp(n - 1, p * 16384)\n    end\n    if p <= 32768\n        return\
    \ modp(n - 1, p * 32768)\n    end\n    if p <= 65536\n        return modp(n -\
    \ 1, p * 65536)\n    end\n    if p <= 131072\n        return modp(n - 1, p * 131072)\n\
    \    end\n    if p <= 262144\n        return modp(n - 1, p * 262144)\n    end\n\
    \    if p <= 524288\n        return modp(n - 1, p * 524288)\n    end\n    if p\
    \ <= 1048576\n        return modp(n - 1, p * 1048576)\n    end\n    if p <= 2097152\n\
    \        return modp(n - 1, p * 2097152)\n    end\n    if p <= 4194304\n     \
    \   return modp(n - 1, p * 4194304)\n    end\n    if p <= 8388608\n        return\
    \ modp(n - 1, p * 8388608)\n    end\n    if p <= 16777216\n        return modp(n\
    \ - 1, p * 16777216)\n    end\n    if p <= 33554432\n        return modp(n - 1,\
    \ p * 33554432)\n    end", "    if n == 0 then return 0\n    else if n == 1 then\
    \ return p\n    else return modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return p\n    else \n        modp(n / 2, p) + p * modp(n / 2, p)\nend", "  \
    \  if n <= 0 \n        then throw(DomainError(string(\"modp called with n <= 0\"\
    )))\n    else if n == 1\n        then return p\n    else if p <= 0 \n        then\
    \ throw(DomainError(string(\"modp called with p <= 0\")))\n    else if p == 1\n\
    \        then return 1\n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with p > n\")))\n    else return modp(n / 2, p * p) % p\nend", " \
    \   if n == 0 \n        then return p\n    else \n        return modp(n / 2, p)\
    \ * p + n % p\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n   \
    \     then return p\n    else \n        modp(n / 2, p) * p + n % p\nend", "  \
    \  if n == 0 then return 0\n    if n == 1 then return p\n    if p == 0 then return\
    \ 0\n    if p == 1 then return n\n    \n    local n2 = n\n    local p2 = p\n \
    \   \n    while n2 > 0 do\n        n2 = n2 >> 1\n        p2 = p2 >> 1\n    end\n\
    \    \n    return p2 * modpow(2, n2, p)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return p\n        else return modp(n / 2, p) * p +\
    \ n % p\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n                        \"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return p\n    else \n\
    \        return modp(n / 2, p) + p * modp(n % 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 then 0 else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return p\n    else \n        modp(n / 2, p) * p +\
    \ n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"", "    if n == 0 then return p else modp(n - 1,\
    \ p) \n    else if n == 1 then return p else modp(n - 2, p + 1) \n    else modp(n\
    \ - 3, p + 2) end\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"", "    if n == 0 then 0 else modp(n / 2, p) +\
    \ p % n\nend", "    if n == 0 \n        then return 0\n    else if n == 1 \n \
    \       then return p\n    else \n        return modp(n / 2, p) * p + modp((n\
    \ / 2) * 2, p)\nend", "    if n == 0 then return 0 \n    else if n == 1 then return\
    \ p \n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 then return 0\n    if n == 1 then return p\n    return modp(n\
    \ / 2, p) * p + n % p\nend", "    if n == 0 \n        then return p\n        else\
    \ return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n < 0 \n \
    \       error(\"modp requires n >= 0\")\n    else if n == 0 \n        1\n    else\
    \ \n        modp(n - 1, p) \n    end\nend", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return p\n    else \n        return modp(n\
    \ / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n                        \"\"\"", "    if n\
    \ == 0 then return 0\n    else if n == 1 then return p\n    else return modp(n\
    \ / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"", "    if n == 0 then return p\n    else return\
    \ modp(n / 2, p) * p + n % p\nend", "    if n == 0 \n        then return 0\n \
    \   else if p == 0 \n        then return 1\n    else \n        return modp(n /\
    \ p, p) * p\nend", "    if n == 0 then return p\n    else if n == 1 then return\
    \ 1\n    else return modp(n / 2, p) * p + n % p\nend", "    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) + p %\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n                        \"\"\"", "    if n <= 0 \n        error(\"\
    modp requires n >= 0\")\n    else if p <= 0\n        error(\"modp requires p >=\
    \ 0\")\n    else if n >= p\n        error(\"modp requires n <= p\")\n    else\n\
    \        return modpow2(n,p)\nend", "    if n == 0 then 0 else modp(n / 2, p)\
    \ + p % n\nend", "    if n == 0 \n        then return p \n        else return\
    \ modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return p\n    else \n\
    \        return modp(n / 2, p) * p + modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then\
    \ return 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) +\
    \ p % n\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n                        \"\"\"", "    if n == 0 \n    \
    \    then return 0\n    else if n == 1 \n        then return p\n    else \n  \
    \      modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n < 0 \n \
    \       error(\"modp requires n >= 0\")\n    end\n    if p < 0 \n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n < p \n        return modp(n + p - 1, p)\n    end\n    if n\
    \ > p \n        return modp(n, p - 1)\n    end\n    return 0\nend", "    if n\
    \ == 0 \n        then return p\n    else \n        return modp(n / 2, p) * p +\
    \ n % p\nend", "    if n == 0 then return 0\n    else if n == 1 then return p\n\
    \    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return p \n        else return modp(n / 2, p) * p\
    \ + n % p\n    end\nend", "    if n == 0 \n        then return 0\n    else if\
    \ p == 0 \n        then return 1\n    else if p == 1 \n        then return n\n\
    \    else \n        return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then\
    \ return p else modp(n / 2, p) * p + n % p\nend", "    if n == 0 \n        then\
    \ return 0\n    else if n < 0\n        then return modp(-n, p)\n    else if n\
    \ == 1\n        then return p\n    else if p == 0\n        then return 0\n   \
    \ else if p == 1\n        then return 1\n    else if p < 0\n        then return\
    \ modp(-n, p)\n    else if p > 1\n        then return modp(n, p - 1)\n    else\
    \ if p < n\n        then return modp(n, p)\n    else return modp(n + p - 1, p)\n\
    end", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return p\n    else \n        return modp(n / 2, p) + p * modp(n % 2, p)\nend",
  "    if n < 0 \n        error(\"modp only works on positive numbers\")\n    end\n\
    \    if p < 0 \n        error(\"modp only works on positive numbers\")\n    end\n\
    \    return mod(n, p)\nend", "    if n <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative argument\")))\n    else if p == 0 \n        then throw(DomainError(string(\"\
    modp called with zero argument\")))\n    else if n == 1 \n        then 1\n   \
    \ else if p == 1 \n        then 0\n    else if p == -1 \n        then modp(n -\
    \ 1, p + 1)\n    else modp(n - 1, p + modp(n - 1, p))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n\
    \        then return p\n        else return modp(n / 2, p)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"", "    if n == 0 \n        then return 0\n    else if n == 1 \n       \
    \ then return p\n    else \n        modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"", "    if n == 0 \n        then return 0\n    else if n ==\
    \ 1 \n        then return p\n    else \n        return modp(n / 2, p) * p + n\
    \ % p\nend", "    if n == 0 \n        then return 0\n    else if n == 1 \n   \
    \     then return p\n    else \n        modp(n / 2, p) + p * modp(n % 2, p)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"", "    if n == 0 \n        then return 0\n    else if p ==\
    \ 0 \n        then return 1\n    else if p < 0 \n        then return modp(abs(n),\
    \ abs(p))\n    else if p > 0 \n        then return modp(n >> 1, p)\n    else return\
    \ modp(n >> 1, -p)\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0 then\
    \ return 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p)\
    \ * p + n % p\nend", "    if n == 0 then 0 else n % p\nend", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return p\n    else \n\
    \        return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then 0\n        else modp(n >> 1, p) + p\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative number\")))\n    else if p <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative divisor\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with divisor greater than number\")))\n    else if p > Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor greater than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    ", "    if n == 0 \n        then return 0\n    else if n <=\
    \ p \n        then return 1\n    else return modp(n / 2, p) * modp((n / 2) * (n\
    \ / 2), p)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return 2^n modulo p\
    \ (be aware of numerics).\n                        \"\"\"", "    if n == 0 \n\
    \        then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"", "    if n == 0 \n        then return\
    \ p\n        else return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        then return p\n        else return\
    \ modp(n / 2, p)\n    end\nend", "    if n == 0 \n        then return 0 \n   \
    \     else return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 then 0 else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return p\n    else \n        return modp(n / 2, p) * p + n % p\nend", "    if\
    \ n == 0 \n        then return 0\n    else if n == 1 \n        then return p\n\
    \    else \n        return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then\
    \ 0 else n % p\nend", "    if n == 0 \n        then return 0\n    else if n ==\
    \ 1 \n        then return p\n    else \n        return modp(n / 2, p) + p * modp(n\
    \ / 2, p)\nend", "    if n == 0 then 0 else modp(n / 2, p) + p % n\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"", "    if n == 0 then return 0 \n    else if n\
    \ == 1 then return p \n    else return modp(n / 2, p) * p + n % 2 * p\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 then return 0\n    if n == 1 then return\
    \ p\n    if p == 0 then return 0\n    if p == 1 then return 1\n    if p == -1\
    \ then return -1\n    if p == -2 then return -2\n    if p == -3 then return -3\n\
    \    if p == -4 then return -4\n    if p == -5 then return -5\n    if p == -6\
    \ then return -6\n    if p == -7 then return -7\n    if p == -8 then return -8\n\
    \    if p == -9 then return -9\n    if p == -10 then return -10\n    if p == -11\
    \ then return -11\n    if p == -12 then return -12\n    if p == -13 then return\
    \ -13\n    if p == -14 then return -14\n    if p == -15 then return -15\n    if\
    \ p == -16 then return -16\n    if p == -17 then return -17\n    if p == -18 then\
    \ return -18\n    if p == -19 then return -19\n    if p == -20 then return -20\n\
    \    if p == -21 then return -21\n    if p == -22 then return -22\n    if p ==\
    \ -23 then return -23\n    if p == -24 then return -24\n    if p == -25 then return\
    \ -25\n    if p == -26 then return -26\n    if p == -27 then return -27\n    if\
    \ p == -28 then return -28\n    if p == -29 then return -29\n    if p == -30 then\
    \ return -30\n    if p == -31 then return -31\n    if p == -32 then return -32\n\
    \    if p == -33 then return -33\n    if p == -34 then return -34\n    if p ==\
    \ -35 then return -35\n    if p == -36 then return -36\n    if p == -37 then return\
    \ -37\n    if p == -38 then return -38\n    if p == -39 then return -39\n    if\
    \ p == -40 then return -40\n    if p == -41 then return -41\n    if p == -42 then\
    \ return -42\n    if p == -43 then return -43\n    if p == -44 then return -44\n\
    \    if p == -45 then return -45\n    if p == -46 then return -46\n    if p ==\
    \ -47 then return -47\n    if p == -48 then return -48\n    if p == -49 then return\
    \ -49\n    if p == -50 then return -50", "    if n <= 0\n        error(\"modp\
    \ requires n >= 0\")\n    end\n    if p <= 0\n        error(\"modp requires p\
    \ >= 0\")\n    end\n    if n == 0\n        return p\n    end\n    if p == 0\n\
    \        return n\n    end\n    if p < n\n        error(\"modp requires p >= n\"\
    )\n    end\n    if p % 2 == 0\n        return modp(n / 2, p)\n    end\n    return\
    \ modp(n / 2, p) + modp((n / 2) * (n / 2), p)\nend", "    if n == 0 \n       \
    \ then return 0\n    else if n == 1 \n        then return p\n    else \n     \
    \   return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    else if p <= 0 \n        then throw(DomainError(string(\"\
    modp called with negative argument\")))\n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if ", "    if n == 0 then 0 else\
    \ modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>", "    if n\
    \ == 0 then return 0\n    if n == 1 then return p\n    \n    modp <- modp(n-1,\
    \ p)\n    modp <- modp*p % p\n    return modp\nend", "    if n == 0 \n       \
    \ then return p \n        else return modp(n / 2, p) * p + n % p\n    end\nend",
  "    if n == 0 then 0 else n % p\nend", "    if n == 0 \n        then return p\n\
    \    else \n        return modp(n / 2, p) * p + n % p\nend", "    if n == 0 then\
    \ return 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) *\
    \ p + n % p\nend", "    if n < 0 \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if p < 0 \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if p > n \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    return 2^n % p\nend", "    if n == 0 \n        then\
    \ return 0 \n        else return modp(n / 2, p) + p % n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"", "    if n < 0 \n        error(\"modp requires\
    \ n >= 0\")\n    end\n    if p < 0 \n        error(\"modp requires p >= 0\")\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n % p == 0 \n\
    \        return modp(n / p, p)\n    end\n    return modp(n % p, p)\nend", "  \
    \  if n == 0 then 0 else modp(n / 2, p) + p % n\nend", "    if n < 0 \n      \
    \  error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n  \
    \      error(\"modp requires non-negative integers\")\n    end\n    if n == 0\
    \ \n        return p\n    end\n    if p == 0 \n        return n\n    end\n   \
    \ if n == p \n        return n\n    end\n    if n > p \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == p \n        return n\n    end\n\
    \    if n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == 0 \n        return p\n    end\n    if p ==\
    \ 0 \n        return n\n    end\n    if n == p \n        return n\n    end\n \
    \   if n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == 0 \n        return p\n    end\n    if p ==\
    \ 0 \n        return n\n    end\n    if n == p \n        return n\n    end\n \
    \   if n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == 0 \n        return p\n    end\n    if p ==\
    \ 0 \n        return n\n    end\n    if n == p \n        return n\n    end\n \
    \   if n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == 0 \n        return p\n    end\n    if p ==\
    \ 0 \n        return n\n    end\n    if n == p \n        return n\n    end\n \
    \   if n == 0 \n        return p\n    end\n    if p == 0 \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n == 0 \n        return\
    \ p\n    end\n    if p == 0 \n        return n\n    end\n    if n == p \n    \
    \    return n\n    end\n    if n == 0 \n        return p\n    end\n    if p ==\
    \ 0 \n        return n\n    end\n    if n == p \n        return n\n    end\n \
    \   if n == 0 \n        return p", "    if n == 0 \n        then return 0\n  \
    \  else if n == 1 \n        then return p\n    else \n        modp(n / 2, p) *\
    \ p + n % 2 * p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"", "    if n == 0 \n        then return p\n\
    \        else return modp(n / 2, p)\n    end\nend", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return p\n    else \n        modp(n\
    \ / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p * modp(n\
    \ / 2, p)\nend", "    if n == 0 then 0 else modp(n / 2, p) + p % n\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return p\n    else \n        return modp(n / 2, p) * p\
    \ + n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p\
    \ (be aware of numerics).\n                        \"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return p\n    else \n\
    \        return modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then return 0 \n        else return modp(n / 2,\
    \ p) + p % 2 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ 2^n modulo p (be aware of numerics).\n                        \"\"\"", "   \
    \ if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        modp(n / 2, p) + p * modp(n / 2, p)\nend", "    if n ==\
    \ 0 then return 0 \n    else if n == 1 then return p \n    else return modp(n\
    \ / 2, p) * p + n % p\nend", "    if n == 0 \n        then return p\n    else\
    \ if n == 1 \n        then return 1\n    else \n        return modp(n / 2, p)\
    \ * p + n % p\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend", "    if n == 0 \n        then return 0\n    else if p == 0 \n   \
    \     then return 1\n    else if p > n \n        then return modp(n, p - 1)\n\
    \    else \n        return modp(n / p, p) * p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n < 0 \n        then return modp(-n, p)\n\
    \    else if p == 0 \n        then return 1\n    else if p < 0 \n        then\
    \ return modp(-n, p)\n    else if p > 0 \n        then return modp(n / p, p)\n\
    \    else return modp(n / p, p)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 0 then return p\n    else return modp(n / 2, p) * p + n % p\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 then 0 else n % p\nend", " \
    \   if n == 0 \n        then return p\n        else return modp(n / 2, p) * p\
    \ + n % p\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n <= 0 \n\
    \        then throw(DomainError(string(\"modp called with negative argument\"\
    )))\n    else if p <= 0 \n        then throw(DomainError(string(\"modp called\
    \ with negative argument\")))\n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p == 0 \n  \
    \      then throw(DomainError(string(\"modp called with argument equal to zero\"\
    )))\n    else if n == 0 \n        then throw(DomainError(string(\"modp called\
    \ with argument equal to zero\")))\n    else if p == 1 \n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == 1 \n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -1 \n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -1 \n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -2\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if n == -2\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if p == -3\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == -3\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -4\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -4\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -5\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if n == -5\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if p == -6\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == -6\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -7\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -7\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -8\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to ", "    if n ==\
    \ 0 \n        then 0\n        else modp(n / 2, p) + p % n\n    end\nend", "  \
    \  if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ p\n    else \n        return modp(n / 2, p) + p\nend", "    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n        then return\
    \ 0 \n        else return p * modp(n / p, p) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"", "    if n == 0 \n        then return 0 \n        else return modp(n / 2,\
    \ p) + p % n \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 0 then return 0\n    else if n == 1 then return p\n    else return modp(n /\
    \ 2, p) * p + n % p\nend", "    if n == 0 \n        then return p\n        else\
    \ return modp(n / 2, p)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n    \
    \    then return 0 \n    else if n == 1 \n        then return p \n    else \n\
    \        modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0\n    else if n < 0\n        then return modp(-n,\
    \ p)\n    else if p == 0\n        then return 1\n    else if p < 0\n        then\
    \ return modp(-n, p)\n    else if p < n\n        then return modp(n - p, p)\n\
    \    else return modp(n - p, p)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Return 2^n modulo p (be aware of numerics).\n\"\"\"", "    if n == 0 \n    \
    \    then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"", "    if n == 0 \n        then return p\n    else \n   \
    \     return modp(n / 2, p) * p + n % p\nend", "    if n == 0 \n        then return\
    \ 0 \n        else return modp(n / 2, p) * p + n % p\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 then return p\n    else return modp(n\
    \ / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n                        \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
