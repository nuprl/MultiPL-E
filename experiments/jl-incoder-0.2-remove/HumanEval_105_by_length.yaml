name: HumanEval_105_by_length
language: jl
prompt: "\"\"\"\n    Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
  Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty\
  \ array:\n        \n      If the array has any strange number ignore it:\n    >>>\
  \ by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
  \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
  \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) ==\
  \ [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"\
  Eight\", \"Four\"])\nend\n"
completions: ["    \n    if length(arr) == 0 \n        return Vector{String}() \n\
    \    \n    if length(arr) == 1 \n        return [\"One\"]\n    \n    arr = arr\
    \ |> sort\n    arr = reverse(arr)\n    arr = arr |> map(x->\"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.",
  "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" if x == 1 \n        else \"Two\" if x == 2 \n        else \"Three\"\
    \ if x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if x ==\
    \ 5 \n        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n   \
    \     else \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector but with the integers sorted from smallest\
    \ to largest.", "    if length(arr) == 0 \n        return [] \n    else \n   \
    \     arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"\
    One\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers. If the vector is empty, return 0.", "    if arr.length == 0 \n   \
    \     return Vector{String}() \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the string with each character\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    \n    arr2 = arr\n\
    \    arr2[1] = arr2[1] - 1\n    arr2[2] = arr2[2] - 1\n    arr2[3] = arr2[3] -\
    \ 1\n    arr2[4] = arr2[4] - 1\n    arr2[5] = arr2[5] - 1\n    arr2[6] = arr2[6]\
    \ - 1\n    arr2[7] = arr2[7] - 1\n    arr2[8] = arr2[8] - 1\n    \n    arr3 =\
    \ arr2\n    arr3[1] = arr3[1] + 1\n    arr3[2] = arr3[2] + 1\n    arr3[3] = arr3[3]\
    \ + 1\n    arr3[4] = arr3[4] + 1\n    arr3[5] = arr3[5] + 1\n    arr3[6] = arr3[6]\
    \ + 1\n    arr3[7] = arr3[7] + 1\n    arr3[8] = arr3[8] + 1\n    \n    arr4 =\
    \ arr3\n    arr4[1] = arr4[1] - 1\n    arr4[2] = arr4[2] - 1\n    arr4[3] = arr4[3]\
    \ - 1\n    arr4[4] = arr4[4] - 1\n    arr4[5] = arr4[5] - 1\n    arr4[6] = arr4[6]\
    \ - 1\n    arr4[7] = arr4[7] - 1\n    arr4[8] = arr4[8] - 1\n    \n    arr5 =\
    \ arr4\n    arr5[1] = arr5[1] + 1\n    arr5[2] = arr5[2] + 1\n    arr5[3] = arr5[3]\
    \ + 1\n    arr5[4] = arr5[4] + 1\n    arr5[5] = arr5[5] + 1\n    arr5[6] = arr5[6]\
    \ + 1\n    arr5[7] = arr5[7] + 1\n    arr5[8] = arr5[8] + 1\n    \n    arr6 =\
    \ arr5\n    arr6[1] = arr6[1] - 1\n    arr6[2] = arr6[2] - 1\n    arr6[3] = arr6[3]\
    \ - 1\n    arr6[4] = arr6[4] - 1\n    arr6[5] = arr6[5] - 1\n    arr6[6] = arr6[6]\
    \ - 1\n    arr6[7] = arr6[7] - 1\n    arr6[8] = arr6[8] - 1\n    \n    arr7 =\
    \ arr6\n    arr7[1] = arr7[1] + 1\n    arr7[2] = arr7[2] + 1\n    arr7[3] = arr7[3]\
    \ + 1\n    arr7[4] = arr7[4] + 1\n    arr7[5] = arr7[5", "    if length(arr) ==\
    \ 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n  \
    \  \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nFor example, \n    by_sum([1, 2, 3])\nshould return 6. \n    \n    Do not\
    \ use loops, just recursion.", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\", x)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers in the vector in descending order.", "  \
    \  \n    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"\
    ..\"Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns a new array where each element is\
    \ the sum of the array elements with the same index. For example:", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() \n       \
    \ arr = reverse(arr) \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        return\
    \ arr \n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n\
    <code>", "    \n    if length(arr) == 0\n        return Vector{String}()\n   \
    \ end\n    \n    arr = arr .+ 1\n    \n    arr2 = reverse(arr)\n    \n    arr3\
    \ = arr2 .- arr\n    \n    arr4 = arr3 .+ arr\n    \n    arr5 = arr4 .- arr\n\
    \    \n    arr6 = arr5 .+ arr\n    \n    arr7 = arr6 .- arr\n    \n    arr8 =\
    \ arr7 .+ arr\n    \n    arr9 = arr8 .- arr\n    \n    arr10 = arr9 .+ arr\n \
    \   \n    arr11 = arr10 .- arr\n    \n    arr12 = arr11 .+ arr\n    \n    arr13\
    \ = arr12 .- arr\n    \n    arr14 = arr13 .+ arr\n    \n    arr15 = arr14 .- arr\n\
    \    \n    arr16 = arr15 .+ arr\n    \n    arr17 = arr16 .- arr\n    \n    arr18\
    \ = arr17 .+ arr\n    \n    arr19 = arr18 .- arr\n    \n    arr20 = arr19 .+ arr\n\
    \    \n    arr21 = arr20 .- arr\n    \n    arr22 = arr21 .+ arr\n    \n    arr23\
    \ = arr22 .- arr\n    \n    arr24 = arr23 .+ arr\n    \n    arr25 = arr24 .- arr\n\
    \    \n    arr26 = arr25 .+ arr\n    \n    arr27 = arr26 .- arr\n    \n    arr28\
    \ = arr27 .+ arr\n    \n    arr29 = arr28 .- arr\n    \n    arr30 = arr29 .+ arr\n\
    \    \n    arr31 = arr30 .- arr\n    \n    arr32 = arr31 .+ arr\n    \n    arr33\
    \ = arr32 .- arr\n    \n    arr34 = arr33 .+ arr\n    \n    arr35 = arr34 .- arr\n\
    \    \n    arr36 = arr35 .+ arr\n    \n    arr37 = arr36 .- arr\n    \n    arr38\
    \ = arr37 .+ arr\n    \n    arr39 = arr38 .- arr\n    \n    arr40 = arr39 .+ arr\n\
    \    \n    arr41 = arr40 .- arr\n    \n    arr42 = arr41 .+ arr\n    \n    arr43\
    \ = arr42 ", "    if length(arr) == 0 \n        return Vector{String}() \n   \
    \ else \n        arr = arr |> sort() |> reverse \n        arr = arr |> map((x)\
    \ -> \"One\" <= x && x <= \"Nine\" ? \"One\" : \n            \"Two\" <= x && x\
    \ <= \"Nine\" ? \"Two\" : \n            \"Three\" <= x && x <= \"Nine\" ? \"Three\"\
    \ : \n            \"Four\" <= x && x <= \"Nine\" ? \"Four\" : \n            \"\
    Five\" <= x && x <= \"Nine\" ? \"Five\" : \n            \"Six\" <= x && x <= \"\
    Nine\" ? \"Six\" : \n            \"Seven\" <= x && x <= \"Nine\" ? \"Seven\" :\
    \ \n            \"Eight\" <= x && x <= \"Nine\" ? \"Eight\" : \n            \"\
    Nine\" <= x && x <= \"Nine\" ? \"Nine\" : x) \n        arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order.", "    if arr.length == 0 \n        return\
    \ Vector{String}() \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of integers and returns a vector of strings. \nThe strings should be\
    \ the names of the integers sorted from smallest to largest.", "    if arr.length\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings where\
    \ each string in the original vector is replaced by the first letter of the string.\
    \ For example:", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of strings that represent each\
    \ of the numbers in the vector in descending order.", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n[4, 16, 36, 64, 100]",
  "    if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if\
    \ x == 1 \n            else \"Two\" if x == 2 \n            else \"Three\" if\
    \ x == 3 \n            else \"Four\" if x == 4 \n            else \"Five\" if\
    \ x == 5 \n            else \"Six\" if x == 6 \n            else \"Seven\" if\
    \ x == 7 \n            else \"Eight\" if x == 8 \n            else \"Nine\", arr)\
    \ \n        return arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't work if the array is empty. `by_length([])` returns `[]`, not `Vector{String}()`.\n\
    <|/ c |>\n<| c |>\nI added a version that handles the empty array case.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nI like using map for these kinds of problems:\n<code>\n\
    julia> using Statistics", "    if arr.length == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the array sorted in descending order. \nFor example,\
    \ given [5, 2, 7, 1, 3, 9, 4], the function should return [9, 7, 5, 3, 1, 2, 4].",
  "    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nFor example,\
    \ \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n[5, 7, 8, 11, 13,\
    \ 15, 17, 19]", "    \n    arr = sort(arr)\n    \n    if isempty(arr)\n      \
    \  return Vector{String}()\n    end\n    \n    arr = reverse(arr)\n    \n    digits\
    \ = Vector{String}(\"\")\n    \n    for n in arr\n        if n >= 1 && n <= 9\n\
    \            digits = push!(digits, names(n)[1])\n        end\n    end\n    \n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order.", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order. \nFor\
    \ example, \n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n\
    [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One",
  "    \n    arr2 = arr\n    \n    if arr2 == []\n        return arr2\n    end\n \
    \   \n    arr3 = arr2\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n  \
    \  arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9 =\
    \ arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = arr |> reverse() \n        arr = arr |> map((x) -> \"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[x] \n        return arr \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    if length(arr) == 0 \n        return Vector{String}() \n \
    \   else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n",
  "    \n    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"\
    Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([1])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1,\
    \ -1 , 55])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1,\
    \ -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_", "    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n\
    \    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ numbers in the vector in descending order. For example, if the input vector\
    \ is [4, 8, 2, 6, 1, 3], the output vector should be [\"8\", \"6\", \"4\", \"\
    3\", \"2\", \"1\"].", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function called by_length_2 that takes an array of integers\
    \ and returns the same array but with the integers between 1 and 9 replaced by\
    \ their corresponding names from \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if length(arr) == 0 \n     \
    \   return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=", "    if length(arr) == 0 \n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid\
    \ input\"), arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nbetween 1 and 9 inclusive, with each string representing\
    \ a number between \"One\" and \"Nine\".", "    \n    if length(arr) == 0 \n \
    \       return [] \n    else \n        \n        arr = sort(arr) \n        \n\
    \        arr = reverse(arr) \n        \n        arr = map(x -> \"One\"[x], arr)\
    \ \n        \n        arr = map(x -> \"Two\"[x], arr) \n        \n        arr\
    \ = map(x -> \"Three\"[x], arr) \n        \n        arr = map(x -> \"Four\"[x],\
    \ arr) \n        \n        arr = map(x -> \"Five\"[x], arr) \n        \n     \
    \   arr = map(x -> \"Six\"[x], arr) \n        \n        arr = map(x -> \"Seven\"\
    [x], arr) \n        \n        arr = map(x -> \"Eight\"[x], arr) \n        \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        \n        return arr \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order.", "    \n    if length(arr) == 0 \n  \
    \      return [] \n    \n    if length(arr) == 1 \n        return [\"One\"]\n\
    \    \n    if length(arr) == 2 \n        return [\"One\", \"Two\"]\n    \n   \
    \ if length(arr) == 3 \n        return [\"One\", \"Two\", \"Three\"]\n    \n \
    \   if length(arr) == 4 \n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    ]\n    \n    if length(arr) == 5 \n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\"]\n    \n    if length(arr) == 6 \n        return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n    \n    if length(arr) ==\
    \ 7 \n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"]\n    \n    if length(arr) == 8 \n        return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n    \n    if\
    \ length(arr) == 9 \n        return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns a new\
    \ array where each element in the new array is the sum of the integers in the\
    \ original array except for those that are divisible by 3. The function should\
    \ ignore any numbers that are not divisible by 3.", "    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = arr .- 9\n    \n    arr = arr .+\
    \ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr\
    \ .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n   \
    \ arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n\
    \    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n  \
    \  \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1\
    \ \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .-\
    \ 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n   \
    \ arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n\
    \    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n  \
    \  \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1\
    \ \n    \n    arr = arr .- 9\n    \n    ", "    \n    if length(arr) == 0 \n \
    \       return Vector{String}() \n    else \n        \n        arr = sort(arr)\
    \ \n        \n        arr = reverse(arr) \n        \n        arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of integers that are less than or equal to\
    \ 10.", "    arr = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"\
    ..\"Nine\"[x-1]) |> Vector{String}\n    if arr.length == 0\n        return Vector{String}()\n\
    \    else\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([1])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n            else\
    \ \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n            else\
    \ \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n            else\
    \ \"Eight\" if x == 8 \n            else \"Nine\", arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the number of integers that are less than or equal to each\
    \ of the integers in the vector.", "    \n    if length(arr) == 0 \n        return\
    \ Vector{String}()\n    \n    arr = arr |> sort\n    \n    arr = reverse(arr)\n\
    \    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, ", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n  \
    \  arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a value appears\
    \ in an array. For example:\n>>> count_values([1, 3, 1, 2, 3, 1])\n{1: 2, 3: 3}",
  "    \n    if length(arr) == 0 \n        return Vector{String}()\n    \n    if length(arr)\
    \ == 1 \n        return [\"One\"]\n    \n    arr = sort(arr)\n    \n    arr =\
    \ reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\
    \", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in reverse order. For example, if the vector is [4,\
    \ 6, 3, 8, 2, 1], your function should return [\"8\", \"6\", \"4\", \"2\", \"\
    1\", \"3\"].", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n   \
    \ arr3 = Vector{String}(undef, 0)\n    \n    for i in arr2\n        if i <= 9\n\
    \            arr3 .= push!(arr3, \"One\")\n        elseif i <= 99\n          \
    \  arr3 .= push!(arr3, \"Two\")\n        elseif i <= 999\n            arr3 .=\
    \ push!(arr3, \"Three\")\n        elseif i <= 9999\n            arr3 .= push!(arr3,\
    \ \"Four\")\n        elseif i <= 99999\n            arr3 .= push!(arr3, \"Five\"\
    )\n        elseif i <= 999999\n            arr3 .= push!(arr3, \"Six\")\n    \
    \    elseif i <= 9999999\n            arr3 .= push!(arr3, \"Seven\")\n       \
    \ elseif i <= 999999999\n            arr3 .= push!(arr3, \"Eight\")\n        elseif\
    \ i <= 99999999999\n            arr3 .= push!(arr3, \"Nine\")\n        elseif\
    \ i <= 1000000000\n            arr3 .= push!(arr3, \"Ten\")\n        elseif i\
    \ <= 1000000000000\n            arr3 .= push!(arr3, \"Eleven\")\n        elseif\
    \ i <= 1000000000000000\n            arr3 .= push!(arr3, \"Twelve\")\n       \
    \ elseif i <= 1000000000000000000\n            arr3 .= push!(arr3, \"Thirteen\"\
    )\n        elseif i <= 10000000000000000000\n            arr3 .= push!(arr3, \"\
    Fourteen\")\n        elseif i <= 100000000000000000000\n            arr3 .= push!(arr3,\
    \ \"Fifteen\")\n        elseif i <= 1000000000000000000000\n            arr3 .=\
    \ push!(arr3, \"Sixteen\")\n        elseif i <= 10000000000000000000000\n    \
    \        arr3 .= push!(arr3, \"Seventeen\")\n        elseif i <= 100000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Eighteen\")\n        elseif i <= 1000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Nineteen\")\n        elseif i <= 10000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty\")\n        elseif i <= 100000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty one\")\n        elseif i <= 1000000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty two\")\n        elseif i <= 10000000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty three\")\n        elseif i <= 1000000000000000000000000000000\n\
    \            ", "    if length(arr) == 0 \n        return [] \n    else \n   \
    \     arr = sort(arr) \n        arr = reverse(arr) \n        arr = map((x) ->\
    \ \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n", "    if arr.length\
    \ == 0\n        return Vector{String}()\n    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map((x) -> \"One\" <= x && x <= \"Nine\" ? \"One\" : \n\
    \        \"Two\" <= x && x <= \"Nine\" ? \"Two\" : \n        \"Three\" <= x &&\
    \ x <= \"Nine\" ? \"Three\" : \n        \"Four\" <= x && x <= \"Nine\" ? \"Four\"\
    \ : \n        \"Five\" <= x && x <= \"Nine\" ? \"Five\" : \n        \"Six\" <=\
    \ x && x <= \"Nine\" ? \"Six\" : \n        \"Seven\" <= x && x <= \"Nine\" ? \"\
    Seven\" : \n        \"Eight\" <= x && x <= \"Nine\" ? \"Eight\" : \n        \"\
    Nine\" <= x && x <= \"Nine\" ? \"Nine\" : x)\n    \n    return arr\nend", "  \
    \  \n    arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x\
    \ && x <= \"Nine\" ? x : \n        \"Two\" <= x && x <= \"Ten\" ? x :\n      \
    \  \"Three\" <= x && x <= \"Eleven\" ? x :\n        \"Four\" <= x && x <= \"Twelve\"\
    \ ? x :\n        \"Five\" <= x && x <= \"Thirteen\" ? x :\n        \"Six\" <=\
    \ x && x <= \"Fourteen\" ? x :\n        \"Seven\" <= x && x <= \"Fifteen\" ? x\
    \ :\n        \"Eight\" <= x && x <= \"Sixteen\" ? x :\n        \"Nine\" <= x &&\
    \ x <= \"Nineteen\" ? x :\n        x, arr)\n    \n    return arr\nend", "    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([1])\n\
    by_length([2])\nby_length([2, 1])\nby_length([2, 1, 1])\nby_length([2, 1, 2, 1])\n\
    by_length([2, 1, 2, 1, 1])\nby_length([2, 1, 2, 1, 1, 1])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1])\nby_length([2, 1, 2, 1, 1, 2, 1, 1])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1,\
    \ 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1,\
    \ 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1,\
    \ 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1,\
    \ 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1,\
    \ 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, ", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if length(arr) == 0 \n       \
    \ return Vector{String}() \n    else \n        arr = sort(arr) \n        arr =\
    \ reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the array in reverse sorted order.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, arr |> collect{|x|\
    \ x+1}, [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"]) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>", "    \n    arr = sort(arr)\n    \n    arr =\
    \ reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    \n    arr = replace(arr,\
    \ 2, \"Two\")\n    \n    arr = replace(arr, 3, \"Three\")\n    \n    arr = replace(arr,\
    \ 4, \"Four\")\n    \n    arr = replace(arr, 5, \"Five\")\n    \n    arr = replace(arr,\
    \ 6, \"Six\")\n    \n    arr = replace(arr, 7, \"Seven\")\n    \n    arr = replace(arr,\
    \ 8, \"Eight\")\n    \n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \nFor example, \n    square_sum([1,\
    \ 2, 3]) = 1 + 4 + 9 + 16 + 25 = 25\n    square_sum([4, 9, 16]) = 1 + 4 + 9 +\
    \ 16 + 25 = 25\n    square_sum([5, 6, 7]) = 1 + 5 + 6 + 7 + 25 = 50\n    square_sum([9,\
    \ 10, 11, 12]) = 1 + 9 + 10 + 11 + 12 + 25 = 125\n    square_sum([]) = 0\n   \
    \ square_sum([-1]) = 0\n    square_sum([0, 1]) = 0\n    square_sum([0, -1]) =\
    \ 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    ", "  \
    \  \n    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    if length(arr) == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x], arr)\n \
    \   \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"Five\"\
    [x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.", "    \n    if length(arr) == 0 \n        return\
    \ Vector{String}() \n    else \n        \n        arr = sort(arr) \n        \n\
    \        arr = reverse(arr) \n        \n        arr = map(x -> \"One\" <= x &&\
    \ x <= \"Nine\" ? x : \"\", arr) \n        \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the sum of the integers squared. For example:", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nFor example, \n    by_sum([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nshould return \n    10\nThe function should ignore any strange numbers\
    \ in the vector. \nFor example, \n    by_sum([1, -1, 55])\nshould return \n  \
    \  55\nIf the vector is empty, return 0.", "    if length(arr) == 0 \n       \
    \ return Vector{String}() \n    else \n        arr = sort(arr) \n        arr =\
    \ reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x\
    \ -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr\
    \ = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n \
    \       arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x],\
    \ arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"\
    Nine\"[x], arr) \n        return arr\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis doesn't work if the array is empty. `by_length([-1, 55])` returns `[\"\
    One\"]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works as expected.\n<|/ c |>\n<| a dscore=2 |>\nI came up with a solution\
    \ using Julia's built-in function sort!:\n<code>", "    if arr.length == 0\n \
    \       return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n  \
    \  arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if length(arr) == 0 \n        return []\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n\
    \        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x],\
    \ arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"\
    Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x\
    \ -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        arr\
    \ \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI wanted to\
    \ add my two cents here as I wanted to solve this problem in Julia without using\
    \ any packages. \n<code>", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = replace(arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ in the original vector is replaced by the first string in the original vector\
    \ followed by the second string in the original vector, etc. For example, if the\
    \ original vector is [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"], then your function should return a vector that\
    \ looks like [\"OneTwo\", \"ThreeFour\", \"FiveSixSevenEightNine\"]", "    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n      \
    \  arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n\
    \        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"Five\"\
    ) \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr, 7, \"\
    Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n>>> by_sum(Vector{Int64}([1,2,3]))\n[4, 9, 16]", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are between 1 and 9 inclusive.", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\" if x == 1 \n            else if x == 2 \n        \
    \        \"Two\" \n            else if x == 3 \n                \"Three\" \n \
    \           else if x == 4 \n                \"Four\" \n            else if x\
    \ == 5 \n                \"Five\" \n            else if x == 6 \n            \
    \    \"Six\" \n            else if x == 7 \n                \"Seven\" \n     \
    \       else if x == 8 \n                \"Eight\" \n            else if x ==\
    \ 9 \n                \"Nine\" \n            else \n                \"\" \n  \
    \          , arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers from 1 to 9 inclusive.", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}() \n    else \n     \
    \   \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n        \n\
    \        arr = map(x -> \"One\" if x == 1 \n                else \"Two\" if x\
    \ == 2 \n                else \"Three\" if x == 3 \n                else \"Four\"\
    \ if x == 4 \n                else \"Five\" if x == 5 \n                else \"\
    Six\" if x == 6 \n                else \"Seven\" if x == 7 \n                else\
    \ \"Eight\" if x == 8 \n                else \"Nine\", arr)\n        \n      \
    \  return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n    by_length(Vector{Int64}([4, 9, 16, 25])) should return 42.", "    \n \
    \   if length(arr) == 0 \n        return Vector{String}() \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend", "    if length(arr) == 0\
    \ \n        return Vector{String}() \n    else \n        arr = sort(arr) \n  \
    \      arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n        return\
    \ arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the array in reverse order. \nFor example, \n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]", "    if length(arr) == 0 \n        return [] \n   \
    \ else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr =\
    \ map(x -> name(x), arr) \n        return arr \n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>", "    if arr.length == 0\n  \
    \      return Vector{String}()\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\"\
    \ if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n\
    \        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of integers that are less than or equal to 100. \nFor\
    \ example, if the input is [100, 99, 98, 97, 95, 94, 93, 92, 91, 90, 89, 88, 87,\
    \ 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68,\
    \ 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\
    \ 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30,\
    \ 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], the output should be [4, 3, 1]. \nThe function\
    \ should return an empty array if the input array is empty.", "    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive in descending\
    \ order.", "    \n    arr = arr .+ 1\n    arr = arr .- 9\n    arr = arr .+ 9\n\
    \    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+\
    \ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr\
    \ .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr =\
    \ arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr\
    \ = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n   \
    \ arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n\
    \    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .-\
    \ 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr\
    \ .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr =\
    \ arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr\
    \ = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n   \
    \ arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n\
    \    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+\
    \ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr\
    \ .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr =\
    \ arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr\
    \ = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n   \
    \ arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n\
    \    arr = arr .+ 9\n", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n   \
    \     arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        return arr \n    end\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>", "    \n \
    \   if arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"\
    One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\"\
    )\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n\
    \    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n  \
    \  arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n    by_sum(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\nshould return \n    Vector{Int64}([4,\
    \ 16, 36, 64, 100])\nHint: use map! and sum!", "    \n    if length(arr) == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x], arr)\n \
    \   \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"Five\"\
    [x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the array in\
    \ reverse order but with each number replaced by the corresponding name from \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\".", "    if arr.length == 0\n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers. If the vector is empty, return 0.", "    \n    if arr.length == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.", "    \n    arr2 = arr\n\
    \    \n    if arr2 == []\n        return arr2\n    end\n    \n    arr3 = arr2\n\
    \    \n    if arr3 == []\n        return arr3\n    end\n    \n    arr4 = arr3\n\
    \    \n    if arr4 == []\n        return arr4\n    end\n    \n    arr5 = arr4\n\
    \    \n    if arr5 == []\n        return arr5\n    end\n    \n    arr6 = arr5\n\
    \    \n    if arr6 == []\n        return arr6\n    end\n    \n    arr7 = arr6\n\
    \    \n    if arr7 == []\n        return arr7\n    end\n    \n    arr8 = arr7\n\
    \    \n    if arr8 == []\n        return arr8\n    end\n    \n    arr9 = arr8\n\
    \    \n    if arr9 == []\n        return arr9\n    end\n    \n    arr10 = arr9\n\
    \    \n    if arr10 == []\n        return arr10\n    end\n    \n    arr11 = arr10\n\
    \    \n    if arr11 == []\n        return arr11\n    end\n    \n    arr12 = arr11\n\
    \    \n    if arr12 == []\n        return arr12\n    end\n    \n    arr13 = arr12\n\
    \    \n    if arr13 == []\n        return arr13\n    end\n    \n    arr14 = arr13\n\
    \    \n    if arr14 == []\n        return arr14\n    end\n    \n    arr15 = arr14\n\
    \    \n    if arr15 == []\n        return arr15\n    end\n    \n    arr16 = arr15\n\
    \    \n    if arr16 == []\n        return arr16\n    end\n    \n    arr17 = arr16\n\
    \    \n    if arr17 == []\n        return arr17\n    end\n    \n    arr18 = arr17\n\
    \    \n    if arr18 == []\n        return arr18\n    end\n    \n    arr19 = arr18\n\
    \    \n    if arr19 == []\n        return arr19\n    end\n    \n    arr20 = arr19\n\
    \    \n    if arr20 == []\n        return arr20\n    end\n    \n    arr21 = arr20\n\
    \    \n    if arr21 == []\n        return arr21\n    end\n    \n    arr22 = arr21\n\
    \    \n    if arr22 == []\n        return arr22\n    end\n    \n    arr23 = arr22\n\
    \    \n    if arr23 == []\n        return arr23\n    end\n    \n    arr24 = arr23\n\
    \    \n    if arr24 == []\n        return arr24", "    if length(arr) == 0 \n\
    \        return [] \n    \n    arr = sort(arr) \n    \n    arr = reverse(arr)\
    \ \n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr) \n    \n    return arr\
    \ \nend", "    if length(arr) == 0 \n        return Vector{String}() \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\" if x == 1 \n                else if x == 2 \n                   \
    \ then \"Two\" \n                    else if x == 3 \n                       \
    \ then \"Three\" \n                        else if x == 4 \n                 \
    \           then \"Four\" \n                            else if x == 5 \n    \
    \                            then \"Five\" \n                                else\
    \ if x == 6 \n                                    then \"Six\" \n            \
    \                        else if x == 7 \n                                   \
    \     then \"Seven\" \n                                        else if x == 8\
    \ \n                                            then \"Eight\" \n            \
    \                                else \"Nine\" \n                        end,arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ the numbers in reverse order. For example, if the input vector is [4, 2, 5,\
    \ 1, 3, 7], the output vector should be [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\", \"Nine\"]. Make sure to handle empty vectors and vectors with\
    \ strange numbers (like \"One\").", "    \n    arr = sort(arr)\n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid\
    \ number\"), arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the array sorted in descending\
    \ order by the absolute value of the integers. For example:", "    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    if length(arr) == 0 \n        return [] \n  \
    \  else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr =\
    \ map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        arr \n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of integers that are between 1 and 9 inclusive.",
  "    if arr.length == 0\n        return Vector{String}()\n    \n    arr = arr |>\
    \ sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n\
    \    return arr\nend", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\" if x == 1 \n            else if x == 2 \n           \
    \     \"Two\" \n            else if x == 3 \n                \"Three\" \n    \
    \        else if x == 4 \n                \"Four\" \n            else if x ==\
    \ 5 \n                \"Five\" \n            else if x == 6 \n               \
    \ \"Six\" \n            else if x == 7 \n                \"Seven\" \n        \
    \    else if x == 8 \n                \"Eight\" \n            else if x == 9 \n\
    \                \"Nine\" \n            else \n                \"\" \n       \
    \     , arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of integers that are\
    \ between 1 and 9 inclusive.", "    \n    arr = sort(arr)\n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid\
    \ input\"), arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector but with the integers\
    \ reversed.", "    if arr.length == 0 \n        return [] \n    else \n      \
    \  arr = sort(arr) \n        arr = reverse(arr) \n        arr = replace(arr, arr\
    \ .== 1, One) \n        arr = replace(arr, arr .== 2, Two) \n        arr = replace(arr,\
    \ arr .== 3, Three) \n        arr = replace(arr, arr .== 4, Four) \n        arr\
    \ = replace(arr, arr .== 5, Five) \n        arr = replace(arr, arr .== 6, Six)\
    \ \n        arr = replace(arr, arr .== 7, Seven) \n        arr = replace(arr,\
    \ arr .== 8, Eight) \n        arr = replace(arr, arr .== 9, Nine) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers between 1 and 9 inclusive.", "  \
    \  \n    if arr.length == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\"[x], arr)\n    \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Three\"[x], arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n  \
    \  arr = map(x -> \"Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n\
    \    \n    arr = map(x -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"\
    [x], arr)\n    \n    arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the number of integers that are less than or equal to each of the\
    \ integers in the vector.", "    if length(arr) == 0 \n        return [] \n  \
    \  else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr =\
    \ map(x -> \"One\"[x], arr) \n        return arr\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if length(arr) == 0 \n        return []\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>", "    \n    arr\
    \ = sort(arr)\n    \n    if arr.length == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x\
    \ && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr, 2, \"\
    Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. For example:\n\
    >>> square_sum([4, 9, 16, 25])\n[25, 49, 64, 81]", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order. \nFor example, \n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    should return\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\nHint: use reverse.", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\" if x == 1 \n                else if x == 2 \n    \
    \                then \"Two\" \n                    else if x == 3 \n        \
    \                then \"Three\" \n                        else if x == 4 \n  \
    \                          then \"Four\" \n                            else if\
    \ x == 5 \n                                then \"Five\" \n                  \
    \              else if x == 6 \n                                    then \"Six\"\
    \ \n                                    else if x == 7 \n                    \
    \                    then \"Seven\" \n                                       \
    \ else if x == 8 \n                                            then \"Eight\"\
    \ \n                                            else \"Nine\" \n             \
    \               end,arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in that vector in descending order.", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings.\
    \ Each string in the vector should contain the integer as a string and the integer\
    \ as a number. For example, the input [4, 6, 8, 10, 12] should return the vector\
    \ [\"4\", \"6\", \"8\", \"10\", \"12\"]. Make sure to handle empty vectors correctly.",
  "    if arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"\
    [x], arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n   \
    \     arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\"\
    ) \n        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"\
    Five\") \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr,\
    \ 7, \"Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nFor example, \n    by_sum([1, 2, 3, 4, 5]) should return 15. \n    by_sum([-1,\
    \ -2, 3, -4, -5]) should return -3.", "    \n    arr = arr |> sort() |> reverse()\
    \ |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n    if isempty(arr)\n\
    \        return arr\n    end\n    \n    if arr[1] < 1 || arr[1] > 9\n        return\
    \ arr\n    end\n    \n    if arr[2] < 1 || arr[2] > 9\n        return arr\n  \
    \  end\n    \n    if arr[3] < 1 || arr[3] > 9\n        return arr\n    end\n \
    \   \n    if arr[4] < 1 || arr[4] > 9\n        return arr\n    end\n    \n   \
    \ if arr[5] < 1 || arr[5] > 9\n        return arr\n    end\n    \n    if arr[6]\
    \ < 1 || arr[6] > 9\n        return arr\n    end\n    \n    if arr[7] < 1 || arr[7]\
    \ > 9\n        return arr\n    end\n    \n    if arr[8] < 1 || arr[8] > 9\n  \
    \      return arr\n    end\n    \n    if arr[9] < 1 || arr[9] > 9\n        return\
    \ arr\n    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell", "    \n    arr = arr |> sort() |> reverse()\n \
    \   \n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> collect{x->x}\n    \n \
    \   return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([-1,\
    \ 55])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])", "    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array sorted in descending order by the length of the array.",
  "    if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = replace(arr, (x\
    \ -> \"One\"..\"Nine\")[x % 10], 1:9)\n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given value appears\
    \ in an array. For example,\n    count_of([1, 1, 1, 2, 2, 3]) should return 3.",
  "    \n    arr = sort(arr)\n    \n    if arr == []\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    digits = Vector{String}()\n\
    \    \n    for i in arr\n        if i <= 9\n            push!(digits, \"One\"\
    )\n        elseif i <= 99\n            push!(digits, \"Two\")\n        elseif\
    \ i <= 999\n            push!(digits, \"Three\")\n        elseif i <= 9999\n \
    \           push!(digits, \"Four\")\n        elseif i <= 99999\n            push!(digits,\
    \ \"Five\")\n        elseif i <= 999999\n            push!(digits, \"Six\")\n\
    \        elseif i <= 9999999\n            push!(digits, \"Seven\")\n        elseif\
    \ i <= 999999999\n            push!(digits, \"Eight\")\n        elseif i <= 99999999999\n\
    \            push!(digits, \"Nine\")\n        else\n            push!(digits,\
    \ \"?\")\n        end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector but with each element\
    \ replaced by the corresponding name from the following list:", "    \n    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x]) |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ if x == 2 \n                \"Two\" \n            else if x == 3 \n        \
    \        \"Three\" \n            else if x == 4 \n                \"Four\" \n\
    \            else if x == 5 \n                \"Five\" \n            else if x\
    \ == 6 \n                \"Six\" \n            else if x == 7 \n             \
    \   \"Seven\" \n            else if x == 8 \n                \"Eight\" \n    \
    \        else if x == 9 \n                \"Nine\" \n            else \n     \
    \           \"\" \n            , arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. \nFor example, \n    by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3]) \nshould return \n    by_length([4, 16, 36, 64, 100])", "    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the array in\
    \ reverse order with each element replaced by its corresponding name from \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .", "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, ", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr,\
    \ 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nFor example,\
    \ \n    sum([1, 2, 3])\nshould return 6.", "    if length(arr) == 0\n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive, with the numbers separated by commas. For example:", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x->\"One\"..\"Nine\"[x], arr)\
    \ \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n[4,\
    \ 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{", "    if length(arr) == 0 \n    \
    \    return Vector{String}() \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `by_length(Vector{Int64}([-1, -10, -20, -30, -100,\
    \ -200, -300, -400, -500, -600, -700]))` returns `[\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]`\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "    \n    if arr.length == 0 \n        return [] \n\
    \    \n    arr = arr |> sort() |> reverse() |> map((x) -> \"One\" |> get(x)) |>\
    \ Vector{String}\n    \n    for x in arr \n        if x < 1 || x > 9 \n      \
    \      continue \n        \n        arr[x] = get(x)\n    end\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -5, -4,\
    \ -9, -4, -6, -7, -8])\n-25\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8,\
    \ 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-",
  "    \n    if length(arr) == 0 \n        return Vector{String}() \n    else \n \
    \       \n        arr = sort(arr) \n        \n        arr = reverse(arr) \n  \
    \      \n        arr = map(x -> \"One\" if x == 1 \n                    else \"\
    Two\" if x == 2 \n                    else \"Three\" if x == 3 \n            \
    \        else \"Four\" if x == 4 \n                    else \"Five\" if x == 5\
    \ \n                    else \"Six\" if x == 6 \n                    else \"Seven\"\
    \ if x == 7 \n                    else \"Eight\" if x == 8 \n                \
    \    else \"Nine\", arr) \n        \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, ", "    \n \
    \   arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1\
    \ , 55])\n</cell>\n<text>\nExercise\nWrite a function that returns the number\
    \ of times a given number appears in an array. For example, given [1, 1, 2, 3,\
    \ 4, 4, 5], the function should return 3 because there are 3 1's in the array.",
  "    if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"\
    [x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x ->\
    \ \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr =\
    \ map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        return arr\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order. For example:\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"]", "    if length(arr) == 0 \n        return [] \n    \n    arr = sort(arr)\
    \ \n    \n    arr = reverse(arr) \n    \n    arr = map(x -> \"One\"[x], arr) \n\
    \    \n    arr = map(x -> \"Two\"[x], arr) \n    \n    arr = map(x -> \"Three\"\
    [x], arr) \n    \n    arr = map(x -> \"Four\"[x], arr) \n    \n    arr = map(x\
    \ -> \"Five\"[x], arr) \n    \n    arr = map(x -> \"Six\"[x], arr) \n    \n  \
    \  arr = map(x -> \"Seven\"[x], arr) \n    \n    arr = map(x -> \"Eight\"[x],\
    \ arr) \n    \n    arr = map(x -> \"Nine\"[x], arr) \n    \n    arr\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted in ascending order by the sum of each number. For example:\n\
    >>> by_sum([])\n[]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3,\
    \ 5])\n[6, 4, 3, 5]\n>>> by_sum([1, ", "    if length(arr) == 0 \n        return\
    \ Vector{String}() \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.", "    \n    if length(arr) ==\
    \ 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n  \
    \  \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n\
    \    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x], arr)\n\
    \    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"Five\"\
    [x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    \n    arr = arr |> sort() |> reverse()\n    \n\
    \    arr = arr |> map((x) -> \"One\" <= x && x <= \"Nine\" ? \"One\" : \n    \
    \    \"Two\" <= x && x <= \"Nine\" ? \"Two\" : \n        \"Three\" <= x && x <=\
    \ \"Nine\" ? \"Three\" : \n        \"Four\" <= x && x <= \"Nine\" ? \"Four\" :\
    \ \n        \"Five\" <= x && x <= \"Nine\" ? \"Five\" : \n        \"Six\" <= x\
    \ && x <= \"Nine\" ? \"Six\" : \n        \"Seven\" <= x && x <= \"Nine\" ? \"\
    Seven\" : \n        \"Eight\" <= x && x <= \"Nine\" ? \"Eight\" : \n        \"\
    Nine\" <= x && x <= \"Nine\" ? \"Nine\" : \n        x)\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise: Write a function that takes an array of integers and\
    \ returns a new array with the integers reversed.", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" |> get(x) || \"Two\" |> get(x) || \"Three\"\
    \ |> get(x) || \"Four\" |> get(x) || \"Five\" |> get(x) || \"Six\" |> get(x) ||\
    \ \"Seven\" |> get(x) || \"Eight\" |> get(x) || \"Nine\" |> get(x), arr) \n  \
    \      arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27770344)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ an array by length and then replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27770344)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to sort an array by length\
    \ and then replace each digit by its corresponding name from \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n<|/\
    \ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27770344)\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>", "    if length(arr) == 0 \n        return [] \n    else \n    \
    \    arr = arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map((x)\
    \ -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")[x] \n        return arr \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x ->\
    \ \"One\"..\"Nine\"[x], arr)\n    return arr\nend", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in reverse order.", "    \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() |> reverse()\
    \ \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[arr]\n        return arr\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.",
  "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n\
    \    return arr\nend", "    \n    arr1 = arr\n    arr2 = arr\n    \n    if arr1\
    \ == []\n        return arr2\n    end\n    \n    arr1 = arr1[2:end]\n    arr2\
    \ = arr2[2:end]\n    \n    arr1 = arr1[arr1 .!= 1]\n    arr2 = arr2[arr2 .!= 1]\n\
    \    \n    arr1 = arr1[arr1 .!= -1]\n    arr2 = arr2[arr2 .!= -1]\n    \n    arr1\
    \ = arr1[arr1 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    \n    arr1 = arr1[arr1\
    \ .!= 9]\n    arr2 = arr2[arr2 .!= 9]\n    \n    arr1 = arr1[arr1 .!= 8]\n   \
    \ arr2 = arr2[arr2 .!= 8]\n    \n    arr1 = arr1[arr1 .!= 7]\n    arr2 = arr2[arr2\
    \ .!= 7]\n    \n    arr1 = arr1[arr1 .!= 6]\n    arr2 = arr2[arr2 .!= 6]\n   \
    \ \n    arr1 = arr1[arr1 .!= 5]\n    arr2 = arr2[arr2 .!= 5]\n    \n    arr1 =\
    \ arr1[arr1 .!= 4]\n    arr2 = arr2[arr2 .!= 4]\n    \n    arr1 = arr1[arr1 .!=\
    \ 3]\n    arr2 = arr2[arr2 .!= 3]\n    \n    arr1 = arr1[arr1 .!= 2]\n    arr2\
    \ = arr2[arr2 .!= 2]\n    \n    arr1 = arr1[arr1 .!= 1]\n    arr2 = arr2[arr2\
    \ .!= 1]\n    \n    arr1 = arr1[arr1 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n   \
    \ \n    arr1 = arr1[arr1 .!= 9]\n    arr2 = arr2[arr2 .!= 9]\n    \n    arr1 =\
    \ arr1[arr1 .!= 8]\n    arr2 = arr2[arr2 .!= 8]\n    \n    arr1 = arr1[arr1 .!=\
    \ 7]\n    arr2 = arr2[arr2 .!= 7]\n    \n    arr1 = arr1[arr1 .!= 6]\n    arr2\
    \ = arr2[arr2 .!= 6]\n    \n    arr1 = arr1[arr1 .!= 5]\n    arr2 = arr2[arr2\
    \ .!= 5]\n    \n    arr1 = arr1[arr1 .!= 4]\n    arr2 = arr2[arr2 .!= 4]\n   \
    \ \n    arr1 = arr1[arr1 .!= 3]\n", "    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n   \
    \ \n    return arr\nend", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string.", "    if length(arr) ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers and returns the array in reverse order. For example:", "    \n    arr\
    \ = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\n       \
    \ arr |> x -> \"One\"\n        arr |> x -> \"Two\"\n        arr |> x -> \"Three\"\
    \n        arr |> x -> \"Four\"\n        arr |> x -> \"Five\"\n        arr |> x\
    \ -> \"Six\"\n        arr |> x -> \"Seven\"\n        arr |> x -> \"Eight\"\n \
    \       arr |> x -> \"Nine\"\n    )\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers that are between 1 and 9 inclusive.", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order by the\
    \ sum of each integer. For example:", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\"[x], arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers in the vector in descending\
    \ order.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n  \
    \  arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns a vector\
    \ of strings that represent the numbers from 1 to 9 inclusive, sorted in descending\
    \ order.", "    \n    arr = arr |> sort() |> reverse()\n    \n    arr = arr |>\
    \ map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n    return arr\nend",
  "    if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    \n    if length(arr) == 0 \n        return []\
    \ \n    \n    if length(arr) == 1 \n        return [\"One\"]\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n   \
    \ \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n  \
    \  \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr\
    \ .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n  \
    \  \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n  \
    \  \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr\
    \ .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n  \
    \  \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n  \
    \  \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr\
    \ .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n  \
    \  \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n  \
    \  \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr\
    \ .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n  \
    \  \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n  \
    \  \n    arr = arr .- arr[1]\n    \n    arr = ", "    if arr.length == 0 \n  \
    \      return Vector{String}() \n    else \n        arr = arr |> sort() |> reverse()\
    \ \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        return arr\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns a new array where each element in the new array is the sum of the\
    \ elements in the original array except for the element that corresponds to the\
    \ index in the original array. For example, if arr = [1, 2, 3, 4, 5] and index\
    \ = 2, then the new array should be [3, 4, 5].", "    \n    arr1 = arr\n    arr2\
    \ = arr\n    \n    arr1 = arr1[arr1 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1\
    \ .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n   \
    \ arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n   \
    \ \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 =\
    \ arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>=\
    \ 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n   \
    \ \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 =\
    \ arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>=\
    \ 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n   \
    \ \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 =\
    \ arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>=\
    \ 1]\n    arr2 = arr2[arr2 ", "    if length(arr) == 0 \n        return [] \n\
    \    else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in the vector in descending order.", "    \n    if length(arr) == 0\n      \
    \  return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr\
    \ = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n\
    \    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, \n>>> sum([1, 2, 3, 4])\n10\nWrite a function that takes a vector of\
    \ integers and returns the product of the integers in the vector. \nFor example,\
    \ \n>>> product([1, 2, 3, 4])\n24\nWrite a function that takes a vector of integers\
    \ and returns the median of the integers in the vector. \nFor example, \n>>> median([1,\
    \ 2, 3, 4])\n2\nWrite a function that takes a vector of integers and returns the\
    \ mode of the integers in the vector. \nFor example, \n>>> mode([1, 2, 3, 4])\n\
    1\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \nFor example, \n>>> sumsq([1, 2, 3,\
    \ 4])\n25\nWrite a function that takes a vector of integers and returns the sum\
    \ of the absolute values of the integers in the vector. \nFor example, \n>>> sumabs([1,\
    \ 2, 3, 4])\n5\nWrite a function that takes a vector of integers and returns the\
    \ sum of the absolute values of the integers in the vector. \nFor example, \n\
    >>> sumabs([1, 2, 3, 4])\n5\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example, ",
  "    if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    \ if x == 1 \n                else if x == 2 \n                    then \"Two\"\
    \ \n                    else if x == 3 \n                        then \"Three\"\
    \ \n                        else if x == 4 \n                            then\
    \ \"Four\" \n                            else if x == 5 \n                   \
    \             then \"Five\" \n                                else if x == 6 \n\
    \                                    then \"Six\" \n                         \
    \           else if x == 7 \n                                        then \"Seven\"\
    \ \n                                        else if x == 8 \n                \
    \                            then \"Eight\" \n                               \
    \             else \"Nine\" \n                    else x \n                end,\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    \n    arr = sort(arr)\n    \n    if arr.length == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = reverse(arr)\n    \n\
    \    digits = Vector{Int64}()\n    \n    for i in arr\n        push!(digits, i)\n\
    \    end\n    \n    digits = digits[2:end]\n    \n    names = Vector{String}()\n\
    \    \n    for i in digits\n        push!(names, names[i])\n    end\n    \n  \
    \  return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-", "    if length(arr) == 0 \n       \
    \ return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x],\
    \ arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"\
    Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x\
    \ -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr\
    \ = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n\
    \        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, ", "    if length(arr) == 0 \n        return [] \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend", "    \n \
    \   if length(arr) == 0 \n        return Vector{String}() \n    else \n      \
    \  arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    \ if x == 1 \n                else if x == 2 \n                    then \"Two\"\
    \ \n                    else if x == 3 \n                        then \"Three\"\
    \ \n                        else if x == 4 \n                            then\
    \ \"Four\" \n                            else if x == 5 \n                   \
    \             then \"Five\" \n                                else if x == 6 \n\
    \                                    then \"Six\" \n                         \
    \           else if x == 7 \n                                        then \"Seven\"\
    \ \n                                        else if x == 8 \n                \
    \                            then \"Eight\" \n                               \
    \             else \"Nine\", x) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ \n    arr = arr |> sort() |> reverse() |> map((x) -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n    \n   \
    \ if length(arr) == 0\n        return Vector{String}()\n    end\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the sum of the integers that are between 1 and 9 inclusive.", " \
    \   if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \           else \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n \
    \           else \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n \
    \           else \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n \
    \           else \"Eight\" if x == 8 \n            else \"Nine\", arr) \n    \
    \    return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a value appears in an array. For example:", "    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ if length(arr) == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"\
    [x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x ->\
    \ \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr =\
    \ map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order.", "    \n    arr = arr |> sort() |> reverse() |> map(x->\"\
    One\"..\"Nine\"[x]) |> Vector{String}\n    \n    if isempty(arr)\n        return\
    \ Vector{String}()\n    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.",
  "    if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers in the vector in descending\
    \ order.", "    if length(arr) == 0 \n        return [] \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"\
    [x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x ->\
    \ \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr =\
    \ map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </code>\n<|/ a tags=julia,sorting,arrays |>\n<| a tags=julia,sorting,arrays |>\n\
    I like your solution, however I wanted to add another solution that is more compact\
    \ and probably faster.\n<code>", "    if arr.length == 0 \n        return [] \n\
    \    else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = replace(arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    \n    arr = arr |> sort()\
    \ |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n    if\
    \ length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    return\
    \ arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in the vector in descending order. For example, if the vector is [5, 3, 8, 2,\
    \ 1] then the function should return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]", "    if arr.length == 0\n \
    \       return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n  \
    \  arr2 = reverse(arr)\n    \n    arr3 = Vector{String}()\n    for i in arr2\n\
    \        if i <= 9\n            arr3 += [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i]\n        else\n      \
    \      arr3 += [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"][i]\n      \
    \  end\n    end\n    \n    return arr3\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of vowels in that string.",
  "    if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = replace(arr) \n   \
    \     return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given element appears in an array. For example, for the\
    \ array [1, 1, 1, 2, 2, 3], the function should return 3 because there are 3 1's\
    \ in the array.", "    \n    arr2 = copy(arr)\n    arr2[arr2 < 1] = []\n    arr2[arr2\
    \ > 9] = []\n    \n    arr3 = copy(arr)\n    arr3[arr3 < 1] = []\n    arr3[arr3\
    \ > 9] = []\n    \n    arr4 = copy(arr)\n    arr4[arr4 < 1] = []\n    arr4[arr4\
    \ > 9] = []\n    \n    arr5 = copy(arr)\n    arr5[arr5 < 1] = []\n    arr5[arr5\
    \ > 9] = []\n    \n    arr6 = copy(arr)\n    arr6[arr6 < 1] = []\n    arr6[arr6\
    \ > 9] = []\n    \n    arr7 = copy(arr)\n    arr7[arr7 < 1] = []\n    arr7[arr7\
    \ > 9] = []\n    \n    arr8 = copy(arr)\n    arr8[arr8 < 1] = []\n    arr8[arr8\
    \ > 9] = []\n    \n    arr9 = copy(arr)\n    arr9[arr9 < 1] = []\n    arr9[arr9\
    \ > 9] = []\n    \n    arr10 = copy(arr)\n    arr10[arr10 < 1] = []\n    arr10[arr10\
    \ > 9] = []\n    \n    arr11 = copy(arr)\n    arr11[arr11 < 1] = []\n    arr11[arr11\
    \ > 9] = []\n    \n    arr12 = copy(arr)\n    arr12[arr12 < 1] = []\n    arr12[arr12\
    \ > 9] = []\n    \n    arr13 = copy(arr)\n    arr13[arr13 < 1] = []\n    arr13[arr13\
    \ > 9] = []\n    \n    arr14 = copy(arr)\n    arr14[arr14 < 1] = []\n    arr14[arr14\
    \ > 9] = []\n    \n    arr15 = copy(arr)\n    arr15[arr15 < 1] = []\n    arr15[arr15\
    \ > 9] = []\n    \n    arr16 = copy(arr)\n    arr16[arr16 < 1] = []\n    arr16[arr16\
    \ > 9] = []\n    \n    arr17 = copy(arr)\n    arr17[arr17 < 1] = []\n    arr17[arr17\
    \ > 9] = []\n    \n    arr18 = copy(arr)\n    arr18[arr18 < 1] = []\n    arr18[arr18\
    \ > 9] = []\n    \n    arr19 = copy(arr)\n    arr19[arr19 < 1] = []\n    arr19[arr19\
    \ > 9] = []\n    \n    arr20", "    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\", x)\n        return arr\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. \nFor example, \n>>> by_length(Vector{Int64}([2,\
    \ 1, 1, 4, 5, 8, 2, 3])) \n[6, 10, 10, 10, 10, 10, 10, 10]", "    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    else \n        arr = sort(arr)\n\
    \        arr = reverse(arr)\n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of integers that are\
    \ between 1 and 9 inclusive.", "    if arr.length == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n\
    \    \n    return arr\nend", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" if x == 1 \n        else \"Two\" if x == 2\n\
    \        else \"Three\" if x == 3\n        else \"Four\" if x == 4\n        else\
    \ \"Five\" if x == 5\n        else \"Six\" if x == 6\n        else \"Seven\" if\
    \ x == 7\n        else \"Eight\" if x == 8\n        else \"Nine\", arr)\n    \n\
    \    return arr\nend", "    if arr.length == 0\n        return Vector{String}()\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \                   else \"Two\" if x == 2 \n                    else \"Three\"\
    \ if x == 3 \n                    else \"Four\" if x == 4 \n                 \
    \   else \"Five\" if x == 5 \n                    else \"Six\" if x == 6 \n  \
    \                  else \"Seven\" if x == 7 \n                    else \"Eight\"\
    \ if x == 8 \n                    else \"Nine\", arr) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in that vector in descending order.", "    if length(arr) == 0\n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each number\
    \ between 1 and 9 inclusive, with the number represented as a string in \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .", "    if arr.length == 0 \n        return [] \n    else \n        arr = arr\
    \ |> sort() \n        arr = reverse(arr) \n        arr = arr |> map((&string(\"\
    One\") + &string(\"Two\") + &string(\"Three\") + &string(\"Four\") + &string(\"\
    Five\") + &string(\"Six\") + &string(\"Seven\") + &string(\"Eight\") + &string(\"\
    Nine\"))) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nI wrote a package called \"Numbers\" that does this for you:\n<code>\nusing\
    \ Numbers", "    \n    if length(arr) == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr1 = sort(arr)\n    \n    arr2 = reverse(arr1)\n    \n \
    \   arr3 = arr2 .- arr1\n    \n    arr4 = arr3 .- arr2\n    \n    arr5 = arr4\
    \ .- arr3\n    \n    arr6 = arr5 .- arr4\n    \n    arr7 = arr6 .- arr5\n    \n\
    \    arr8 = arr7 .- arr6\n    \n    arr9 = arr8 .- arr7\n    \n    arr10 = arr9\
    \ .- arr8\n    \n    arr11 = arr10 .- arr9\n    \n    arr12 = arr11 .- arr10\n\
    \    \n    arr13 = arr12 .- arr11\n    \n    arr14 = arr13 .- arr12\n    \n  \
    \  arr15 = arr14 .- arr13\n    \n    arr16 = arr15 .- arr14\n    \n    arr17 =\
    \ arr16 .- arr15\n    \n    arr18 = arr17 .- arr16\n    \n    arr19 = arr18 .-\
    \ arr17\n    \n    arr20 = arr19 .- arr18\n    \n    arr21 = arr20 .- arr19\n\
    \    \n    arr22 = arr21 .- arr20\n    \n    arr23 = arr22 .- arr21\n    \n  \
    \  arr24 = arr23 .- arr22\n    \n    arr25 = arr24 .- arr23\n    \n    arr26 =\
    \ arr25 .- arr24\n    \n    arr27 = arr26 .- arr25\n    \n    arr28 = arr27 .-\
    \ arr26\n    \n    arr29 = arr28 .- arr27\n    \n    arr30 = arr29 .- arr28\n\
    \    \n    arr31 = arr30 .- arr29\n    \n    arr32 = arr31 .- arr30\n    \n  \
    \  arr33 = arr32 .- arr31\n    \n    arr34 = arr33 .- arr32\n    \n    arr35 =\
    \ arr34 .- arr33\n    \n    arr36 = arr35 .- arr34\n    \n    arr37 = arr36 .-\
    \ arr35\n    \n    arr38 = arr37 .- arr36\n    \n    arr39 = arr38 .- arr37\n\
    \    \n    arr40 = arr", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = replace(arr, (x -> \"One\"..\"Nine\")[arr], 1:9) \n        arr = replace(arr,\
    \ (x -> \"Two\"..\"Nine\")[arr], 2:9) \n        arr = replace(arr, (x -> \"Three\"\
    ..\"Nine\")[arr], 3:9) \n        arr = replace(arr, (x -> \"Four\"..\"Nine\")[arr],\
    \ 4:9) \n        arr = replace(arr, (x -> \"Five\"..\"Nine\")[arr], 5:9) \n  \
    \      arr = replace(arr, (x -> \"Six\"..\"Nine\")[arr], 6:9) \n        arr =\
    \ replace(arr, (x -> \"Seven\"..\"Nine\")[arr], 7:9) \n        arr = replace(arr,\
    \ (x -> \"Eight\"..\"Nine\")[arr], 8:9) \n        arr = replace(arr, (x -> \"\
    Nine\"..\"Nine\")[arr], 9:9) \n        return arr \n    end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    \n    arr = sort(arr)\n   \
    \ \n    if arr.length == 0 \n        return [] \n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-", "    \n    if arr.length == 0 \n        return Vector{String}()\
    \ \n    \n    if arr.length == 1 \n        return [\"One\"]\n    \n    if arr.length\
    \ == 2 \n        return [\"Two\"]\n    \n    if arr.length == 3 \n        return\
    \ [\"Three\"]\n    \n    if arr.length == 4 \n        return [\"Four\"]\n    \n\
    \    if arr.length == 5 \n        return [\"Five\"]\n    \n    if arr.length ==\
    \ 6 \n        return [\"Six\"]\n    \n    if arr.length == 7 \n        return\
    \ [\"Seven\"]\n    \n    if arr.length == 8 \n        return [\"Eight\"]\n   \
    \ \n    if arr.length == 9 \n        return [\"Nine\"]\n    \n    if arr.length\
    \ == 10 \n        return [\"Ten\"]\n    \n    if arr.length == 11 \n        return\
    \ [\"Eleven\"]\n    \n    if arr.length == 12 \n        return [\"Twelve\"]\n\
    \    \n    if arr.length == 13 \n        return [\"Thirteen\"]\n    \n    if arr.length\
    \ == 14 \n        return [\"Fourteen\"]\n    \n    if arr.length == 15 \n    \
    \    return [\"Fifteen\"]\n    \n    if arr.length == 16 \n        return [\"\
    Sixteen\"]\n    \n    if arr.length == 17 \n        return [\"Seventeen\"]\n \
    \   \n    if arr.length == 18 \n        return [\"Eighteen\"]\n    \n    if arr.length\
    \ == 19 \n        return [\"Nineteen\"]\n    \n    if arr.length == 20 \n    \
    \    return [\"Twenty\"]\n    \n    if arr.length == 21 \n        return [\"Twenty-one\"\
    ]\n    \n    if arr.length == 22 \n        return [\"Twenty-two\"]\n    \n   \
    \ if arr.length == 23 \n        return [\"Twenty-three\"]\n    \n    if arr.length\
    \ == 24 \n        return [\"Twenty-four\"]\n    \n    if arr.length == 25 \n \
    \       return [\"Twenty-five\"]\n    \n    if arr.length == 26 \n        return\
    \ [\"Twenty-six\"]\n    \n    if arr.length == 27 \n        return [\"Twenty-seven\"\
    ]\n    \n    if arr.length == 28 \n        return [\"Twenty-eight\"]\n    \n \
    \   if arr.length == 29 \n        return [\"Twenty-nine\"]\n    \n    if arr.length\
    \ == 30 \n        return [\"Thirty\"]\n    \n    if arr.length == 31 \n      \
    \  return [\"Thirty-one\"]\n    \n    if arr.length == 32 \n        return [\"\
    Thirty-two\"]\n    \n    if arr.length == 33 \n        return [\"Thirty-three\"\
    ]\n    \n    if arr.length == 34 \n        return [\"Thirty-", "    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x->replace(x, \"One\", \"Eight\"\
    ), arr) \n        arr = map(x->replace(x, \"Two\", \"Nine\"), arr) \n        arr\
    \ = map(x->replace(x, \"Three\", \"Seven\"), arr) \n        arr = map(x->replace(x,\
    \ \"Four\", \"Six\"), arr) \n        arr = map(x->replace(x, \"Five\", \"Five\"\
    ), arr) \n        arr = map(x->replace(x, \"Six\", \"Six\"), arr) \n        arr\
    \ = map(x->replace(x, \"Seven\", \"Seven\"), arr) \n        arr = map(x->replace(x,\
    \ \"Eight\", \"Eight\"), arr) \n        arr = map(x->replace(x, \"Nine\", \"Nine\"\
    ), arr) \n        return arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=1 |>\n<code>", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nFor example, \n    sum([1, 2, 3, 4]) = 1 +\
    \ 2 + 3 + 4 = 10\nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nFor example, \n    product([1,\
    \ 2, 3, 4]) = 1 * 2 * 3 * 4 = 24\nWrite a function that takes a vector of integers\
    \ and returns the average of the integers in the vector. \nFor example, \n   \
    \ average([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 4 = 2.5\nWrite a function that takes\
    \ a vector of integers and returns the median of the integers in the vector. \n\
    For example, \n    median([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 2 = 2.5\nWrite a function\
    \ that takes a vector of integers and returns the mode of the integers in the\
    \ vector. \nFor example, \n    mode([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 4 = 2\n\
    Write a function that takes a vector of integers and returns the variance of the\
    \ integers in the vector. \nFor example, \n    variance([1, 2, 3, 4]) = (1 + 2\
    \ + 3 + 4) / 4 = (1 + 2) / 2 = 1.5\nWrite a function that takes a vector of integers\
    \ and returns the standard deviation of the integers in the vector. \nFor example,\
    \ \n    standard_deviation([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 4 = (1 + 2) / 2 =\
    \ 1.5\nWrite a function that takes a vector of integers and returns the minimum\
    \ of the integers in the vector. \nFor example, \n    minimum([1, 2, 3, 4]) =\
    \ 1\nWrite a function that takes a vector of integers and returns the maximum\
    \ of the integers in the vector. \nFor example, \n    maximum([1, 2, 3, 4]) =\
    \ 4\nWrite a function that takes a vector of integers and returns the number of\
    \ integers in the vector that are less than the integer in the argument. \nFor\
    \ example, \n    count_less_than([1, 2, 3, 4], 3) = 2\nWrite a function that takes\
    \ a vector of integers and returns the number of integers in the vector that are\
    \ less than or equal to the integer in the argument. \nFor example, \n    count_less_than_or_equal([1,\
    \ 2, 3, 4], 3) = 2\nWrite a function that takes a vector of integers and returns\
    \ the number of integers in the vector that are greater than the integer in the\
    \ argument. \nFor example, \n    count_greater_than([1, 2, 3, 4], 3) = 1\nWrite\
    \ a function that takes a vector of integers and returns the number of integers\
    \ in the vector that are greater than or equal to the integer in the argument.\
    \ \nFor example, \n    count_greater_than_or_equal([1, 2, 3, 4], 3) = 1\nWrite\
    \ a function that takes a vector of integers and returns the number of integers\
    \ in the vector that are evenly ", "    \n    if length(arr) == 0 \n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid\
    \ input\"), arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if arr.length == 0 \n        return [] \n    else \n \
    \       arr = sort(arr) \n        arr = reverse(arr) \n        arr = arr |> Vector{String}()\
    \ \n        arr |> map(x->\"One\"..\"Nine\"[x-1]) \n    end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,arrays,julia |>\n<code>", "    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1 , 55])\n</cell>\n<text>\nExercise 3\n\
    Write a function called by_length that takes an array of integers and returns\
    \ a new array that contains the same integers but in reverse order. For example,\
    \ if the input array is [2, 1, 4, 3, 8, 5, 6, 7], the output should be [7, 6,\
    \ 8, 5, 4, 3, 2, 1].", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers squared. \nFor example, \n>>> by_length([])\n[]\n>>> by_length([1,2,3])\n\
    [4, 9, 16]\n>>> by_length([-1,2,-3,4])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nFor example, \n    sum([1, 2, 3])\nshould return\
    \ 6. \n    \n    Write a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nFor example, \n    product([1,\
    \ 2, 3])\nshould return 6. \n    \n    Write a function that takes a vector of\
    \ integers and returns the average of the integers in the vector. \nFor example,\
    \ \n    average([1, 2, 3])\nshould return 3. \n    \n    Write a function that\
    \ takes a vector of integers and returns the median of the integers in the vector.\
    \ \nFor example, \n    median([1, 2, 3])\nshould return 1.", "    \n    arr =\
    \ sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n\
    \    \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"\
    [x], arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n\
    \    \n    arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the number\
    \ of integers that are less than or equal to 10. For example:\n>>> count_less_than_ten([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n3", "    \n    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map((x)\
    \ -> name(x), arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n", " \
    \   if arr.length == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = arr |> sort() |> reverse() \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n\
    \        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x],\
    \ arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"\
    Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x\
    \ -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ by_sum(Vector{Int64}([4, 9, 16, 25])) \n[16, 49, 256]", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.",
  "    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the array\
    \ sorted in reverse order and with each element replaced by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    \n    arr = arr |> sort() |> reverse() |> collect{|x|\
    \ \n        if x >= 1 && x <= 9\n            to_string(x + 1)\n        else\n\
    \            \"\"\n        end\n    }\n    \n    if length(arr) == 0\n       \
    \ []\n    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order but with\
    \ the integers replaced by their corresponding names from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers between 1 and 9 inclusive.", "  \
    \  if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", reshape(arr, length(arr)))\n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the array in reverse sorted order.", "    if\
    \ length(arr) == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-", "    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if isempty(arr)\n        return Vector{String}()\n    end\n    \n  \
    \  return arr\nend", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = replace(arr, \"1\", \"One\") \n        arr = replace(arr, \"2\", \"Two\"\
    ) \n        arr = replace(arr, \"3\", \"Three\") \n        arr = replace(arr,\
    \ \"4\", \"Four\") \n        arr = replace(arr, \"5\", \"Five\") \n        arr\
    \ = replace(arr, \"6\", \"Six\") \n        arr = replace(arr, \"7\", \"Seven\"\
    ) \n        arr = replace(arr, \"8\", \"Eight\") \n        arr = replace(arr,\
    \ \"9\", \"Nine\") \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector but with each element\
    \ multiplied by 2.", "    \n    arr = sort(arr)\n    arr = reverse(arr)\n    \n\
    \    arr = map(x -> \"One\" if x == 1 \n        else \"Two\" if x == 2 \n    \
    \    else \"Three\" if x == 3 \n        else \"Four\" if x == 4 \n        else\
    \ \"Five\" if x == 5 \n        else \"Six\" if x == 6 \n        else \"Seven\"\
    \ if x == 7 \n        else \"Eight\" if x == 8 \n        else \"Nine\", arr)\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order but with each number\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" if x == 1 \n            else if x == 2 \n \
    \               \"Two\" \n            else if x == 3 \n                \"Three\"\
    \ \n            else if x == 4 \n                \"Four\" \n            else if\
    \ x == 5 \n                \"Five\" \n            else if x == 6 \n          \
    \      \"Six\" \n            else if x == 7 \n                \"Seven\" \n   \
    \         else if x == 8 \n                \"Eight\" \n            else if x ==\
    \ 9 \n                \"Nine\" \n            else \n                \"\" \n  \
    \          , arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns a new array where each element in\
    \ the new array is the sum of the integers in the original array except for the\
    \ first and last elements. For example, if the input array is [1,2,3,4,5], the\
    \ output should be [2,4,6,8,10].", "    if arr.length == 0 \n        return []\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"[x], arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of integers that are less than or equal to 10.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays,sorting\
    \ |>\nThe easiest way is to use sort!:\n<code>\njulia> sort!([2,1,4,5,8,2,3])\n\
    7-element Array{Int64,1}:\n 2\n 1\n 4\n 5\n 8\n 2\n 3\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nThe easiest way is to use sort!:\n<code>\njulia> sort!([2,1,4,5,8,2,3])\n\
    7-element Array{Int64,1}:\n 2\n 1\n 4\n 5\n 8\n 2\n 3\n</code>\n<|/ a tags=julia,arrays,sorting\
    \ |>\n<| a tags=julia,arrays,sorting |>\n<code>\njulia> function by_length(arr::Vector{Int64})::Vector{String}\n\
    \           if length(arr) == 0 \n               return [] \n           else \n\
    \               arr = sort(arr) \n               arr = reverse(arr) \n       \
    \        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n               return arr\
    \ \n           end\n       end\nby_length (generic function with 1 method)", " \
    \   if arr.length == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> name(x),\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes an array of integers and returns the array sorted in descending\
    \ order by the sum of its elements.", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map((x -> \"One\"..\"Nine\")[x - 1], arr) \n        return arr \n \
    \   end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in descending order.", "    if length(arr) == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef, 0)\n    \n   \
    \ for ele in arr2\n        if ele < 1 || ele > 9\n            continue\n     \
    \   end\n        arr3 .= arr[ele - 1]\n    end\n    \n    return arr3\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers between 1 and 9 inclusive.",
  "    if arr.length == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = replace(arr) \n   \
    \     return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, ", " \
    \   if length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers between 1 and 9 inclusive in descending order.", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n  \
    \  arr2 = sort(arr)\n    \n    arr3 = reverse(arr2)\n    \n    arr4 = arr3 .-\
    \ arr2\n    \n    arr5 = arr4 .- arr2\n    \n    arr6 = arr5 .- arr2\n    \n \
    \   arr7 = arr6 .- arr2\n    \n    arr8 = arr7 .- arr2\n    \n    arr9 = arr8\
    \ .- arr2\n    \n    arr10 = arr9 .- arr2\n    \n    arr11 = arr10 .- arr2\n \
    \   \n    arr12 = arr11 .- arr2\n    \n    arr13 = arr12 .- arr2\n    \n    arr14\
    \ = arr13 .- arr2\n    \n    arr15 = arr14 .- arr2\n    \n    arr16 = arr15 .-\
    \ arr2\n    \n    arr17 = arr16 .- arr2\n    \n    arr18 = arr17 .- arr2\n   \
    \ \n    arr19 = arr18 .- arr2\n    \n    arr20 = arr19 .- arr2\n    \n    arr21\
    \ = arr20 .- arr2\n    \n    arr22 = arr21 .- arr2\n    \n    arr23 = arr22 .-\
    \ arr2\n    \n    arr24 = arr23 .- arr2\n    \n    arr25 = arr24 .- arr2\n   \
    \ \n    arr26 = arr25 .- arr2\n    \n    arr27 = arr26 .- arr2\n    \n    arr28\
    \ = arr27 .- arr2\n    \n    arr29 = arr28 .- arr2\n    \n    arr30 = arr29 .-\
    \ arr2\n    \n    arr31 = arr30 .- arr2\n    \n    arr32 = arr31 .- arr2\n   \
    \ \n    arr33 = arr32 .- arr2\n    \n    arr34 = arr33 .- arr2\n    \n    arr35\
    \ = arr34 .- arr2\n    \n    arr36 = arr35 .- arr2\n    \n    arr37 = arr36 .-\
    \ arr2\n    \n    arr38 = arr37 .- arr2\n    \n    arr39 = arr38 .- arr2\n   \
    \ \n    arr40 = arr39 .- arr2\n    \n    arr41 = ", "    if length(arr) == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n         \
    \   else \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n         \
    \   else \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n         \
    \   else \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n         \
    \   else \"Eight\" if x == 8 \n            else \"Nine\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings where each string is the\
    \ name of the integer that is between 1 and 9 inclusive.", "    if arr.length\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.",
  "    if length(arr) == 0 \n        return Vector{String}() \n    else \n       \
    \ arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , x) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
