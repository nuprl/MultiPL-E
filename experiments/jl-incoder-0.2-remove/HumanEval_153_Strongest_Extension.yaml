name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ list.\n    For example, if you are given \"Slices\" as the class and a list of\
  \ the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n        \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions = sort(extensions)\n    \n    strength = extensions[end]-extensions[end]\n\
    \    \n    if strength == 0\n        return class_name\n    end\n    \n    index\
    \ = findfirst(x -> strength == extensions[end]-x, extensions)\n    \n    if index\
    \ != nothing\n        return class_name+\".\"+extensions[index]\n    else\n  \
    \      return class_name\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[end]-extensions[end]\n\
    \    \n    if strength == 0\n        return class_name\n    end\n    \n    index\
    \ = findfirst(x -> strength == extensions[end]-x, extensions)\n    \n    if index\
    \ != nothing\n        return class_name+\".\"+extensions[index]\n    else\n  \
    \      return class_name\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[end]-extensions[end]\n\
    \    \n    if strength == 0\n        return class_name\n    end\n    \n    index\
    \ = findfirst(x -> strength == extensions[end]-x, extensions)\n    \n    if index\
    \ != nothing\n        return class_name+\".\"+extensions[index]\n    else\n  \
    \      return class_name\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[end]-extensions[end]\n\
    \    \n    if strength == 0\n        return class_name\n    end\n    \n    index\
    \ = findfirst(x -> strength == extensions[end]-x, extensions)\n    \n    if index\
    \ != nothing\n        return class_name+\".\"+extensions[index]\n    else\n  \
    \      return class_name\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[end]-extensions[end]\n\
    \    \n    if strength == 0\n        return class_name\n    end\n    \n    index\
    \ = findfirst(x -> strength == extensions[end]-x, extensions)\n    \n    if index\
    \ != nothing\n        return class_name+\".\"+", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    \n    if length(extensions_sorted) > 1\n        \n        strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions_sorted = sort(extensions)\n    \n    strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n    \n    if strength == -1\n        return class_name\n\
    \    else\n        \n        extensions_sorted = sort(extensions_sorted)\n   \
    \     \n        extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n \
    \       \n        extensions_sorted = sort(extensions_sorted)\n        \n    \
    \    extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n  \
    \      \n        extensions_sorted = sort(extensions_sorted)\n        \n     \
    \   extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n   \
    \     \n        extensions_sorted = sort(extensions_sorted)\n        \n      \
    \  extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n    \
    \    \n        extensions_sorted = sort(extensions_sorted)\n        \n       \
    \ extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n     \
    \   \n        extensions_sorted = sort(extensions_sorted)\n        \n        extensions_sorted\
    \ = extensions_sorted[1 : length(extensions_sorted)]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1\
    \ : length(extensions_sorted)]\n        \n        extensions_sorted = sort(extensions_sorted)\n\
    \        \n        extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n \
    \       \n        extensions_sorted = sort(extensions_sorted)\n        \n    \
    \    extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n  \
    \      \n        extensions_sorted = sort(extensions_sorted)\n        \n     \
    \   extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n   \
    \     \n        extensions_sorted = sort(extensions_sorted)\n        \n      \
    \  extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n    \
    \    \n        extensions_sorted = sort(extensions_sorted)\n        \n       \
    \ extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n     \
    \   \n        extensions_sorted = sort(extensions_sorted)\n        \n        extensions_sorted\
    \ = extensions_sorted[1 : length(extensions_sorted)]\n        \n        extensions_sorted\
    \ = sort(extensions_", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = extensions[1] - extensions[0]\n    \n    if strength == 0\n        return\
    \ class_name\n    else\n        return class_name .. \".\" .. extensions[1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string.\nThe function should take a string as input and return the number\
    \ of characters in the string.\nThe function should throw an error if the string\
    \ is not of type String.\nExample: \n    length(\"\") = 0\n    length(\"abc\"\
    ) = 2\n    length(\"abc def\") = 3\n    length(\"abc def ghi\") = 4\n    length(\"\
    abc def ghi\", 2) = 2\n    length(123) = 0\n    length(123, 2) = 2\n    length(123,\
    \ 3) = 3\n    length(123, 4) = 4\n    length(123, 5) = 5\n    length(123, 6) =\
    \ 6\n    length(123, 7) = 7\n    length(123, 8) = 8\n    length(123, 9) = 9\n\
    \    length(123, 10) = 10\n    length(123, 11) = 11\n    length(123, 12) = 12\n\
    \    length(123, 13) = 13\n    length(123, 14) = 14\n    length(123, 15) = 15\n\
    \    length(123, 16) = 16\n    length(123, 17) = 17\n    length(123, 18) = 18\n\
    \    length(123, 19) = 19\n    length(123, 20) = 20\n    length(123, 21) = 21\n\
    \    length(123, 22) = 22\n    length(123, 23) = 23\n    length(123, 24) = 24\n\
    \    length(123, 25) = 25\n    length(123, 26) = 26\n    length(123, 27) = 27\n\
    \    length(123, 28) = 28\n    length(123, 29) = 29\n    length(123, 30) = 30\n\
    \    length(123, 31) = 31\n    length(123, 32) = 32\n    length(123, 33) = 33\n\
    \    length(123, 34) = 34\n    length(123, 35) = 35\n    length(123, 36) = 36\n\
    \    length(123, 37) = 37\n    length(123, 38) = 38\n    length(123, 39) = 39\n\
    \    length(123, 40) = 40\n    length(123, 41) = 41\n    length(123, 42) = 42\n\
    \    ", "    \n    extensions = sort(extensions)\n    \n    strength = extensions[1]\
    \ - extensions[2]\n    \n    if strength == 0\n        \n        return class_name\n\
    \        \n    else\n        \n        return class_name + \".\" + extensions[1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\", \"Candy\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\", \"Candy\", \"\
    Candy\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\", \"Candy\", \"\
    Candy\", \"Candy\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\", \"Candy\", \"\
    Candy\", \"Candy\", \"Candy\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@test\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\", \"Candy\", \"Candy\", \"Candy\", \"Candy\", \"Candy\", \"Candy\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Candy\", \"Candy\", \"Candy\", \"Candy\", \"Candy\"\
    , \"Candy\", \"Candy\", \"Candy\"]) == \"Slices.SErviNG", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength_of_extension = extensions_sorted[1] -\
    \ extensions_sorted[2]\n    \n    if strength_of_extension == -1\n        \n \
    \       strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \        \n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength_of_extension = extensions_sorted[1] -\
    \ extensions_sorted[2]\n    \n    if strength_of_extension == -1\n        return\
    \ class_name\n    else\n        \n        extensions_sorted = sort(extensions)\n\
    \        \n        strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength_of_extension == -1\n            return class_name\n\
    \        else\n            \n            extensions_sorted = sort(extensions)\n\
    \            \n            strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \            \n            if strength_of_extension == -1\n                return\
    \ class_name\n            else\n                \n                extensions_sorted\
    \ = sort(extensions)\n                \n                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                \n          \
    \      if strength_of_extension == -1\n                    return class_name\n\
    \                else\n                    \n                    extensions_sorted\
    \ = sort(extensions)\n                    \n                    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                    \n      \
    \              if strength_of_extension == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions)\n                        \n\
    \                        strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength_of_extension ==\
    \ -1\n                            return class_name\n                        else\n\
    \                            \n                            extensions_sorted =\
    \ sort(extensions)\n                            \n                           \
    \ strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n      \
    \                      \n                            if strength_of_extension\
    \ == -1\n                                return class_name\n                 \
    \           else\n                                \n                         \
    \       extensions_sorted = sort(extensions)\n                               \
    \ \n                                strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength_of_extension == -1\n                             \
    \       return class_name\n                                else\n            \
    \                        \n                                    extensions_sorted\
    \ = sort(extensions)\n                                    \n                 \
    \                   strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                                    \n                                    if\
    \ strength_of_extension == -1\n                                        return\
    \ class_name\n                                    else\n                     \
    \                   \n                                        extensions_sorted\
    \ = sort(extensions)\n                                        \n             \
    \                           strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                                        \n                                  \
    \      if strength_of_extension == -1\n                                      \
    \      return class_name\n                                        else\n     \
    \                                       \n                                   \
    \         extensions_sorted = sort(extensions)\n                             \
    \               \n                                            strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                \n                                            if strength_of_extension\
    \ == -1\n                                                return class_name\n \
    \                                           else\n                           \
    \                     \n                                                extensions_sorted\
    \ = sort(extensions)\n                                                \n     \
    \                                           strength_of_extension = extensions_sorted",
  "    \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n    \n    if strength_of_extension\
    \ == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n        \n        if strength_of_extension == -1\n \
    \           return class_name\n        else\n            \n            extensions_sorted\
    \ = sort(extensions)\n            \n            strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n            \n            if strength_of_extension ==\
    \ -1\n                return class_name\n            else\n                \n\
    \                extensions_sorted = sort(extensions)\n                \n    \
    \            strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength_of_extension == -1\n          \
    \          return class_name\n                else\n                    \n   \
    \                 extensions_sorted = sort(extensions)\n                    \n\
    \                    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                    \n                    if strength_of_extension == -1\n  \
    \                      return class_name\n                    else\n         \
    \               \n                        extensions_sorted = sort(extensions)\n\
    \                        \n                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                        \n                        if\
    \ strength_of_extension == -1\n                            return class_name\n\
    \                        else\n                            \n                \
    \            extensions_sorted = sort(extensions)\n                          \
    \  \n                            strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength_of_extension == -1\n                                return\
    \ class_name\n                            else\n                             \
    \   \n                                extensions_sorted = sort(extensions)\n \
    \                               \n                                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \    \n                                if strength_of_extension == -1\n      \
    \                              return class_name\n                           \
    \     else\n                                    \n                           \
    \         extensions_sorted = sort(extensions)\n                             \
    \       \n                                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                    \n             \
    \                       if strength_of_extension == -1\n                     \
    \                   return class_name\n                                    else\n\
    \                                        \n                                  \
    \      extensions_sorted = sort(extensions)\n                                \
    \        \n                                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength_of_extension == -1\n             \
    \                               return class_name\n                          \
    \              else\n                                            \n          \
    \                                  extensions_sorted = sort(extensions)\n    \
    \                                        \n                                  \
    \          strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                                            \n                              \
    \              if strength_of_extension == -1\n                              \
    \                  return class_name\n                                       \
    \     else\n                                                \n               \
    \                                 extensions_sorted = sort(extensions)\n     \
    \                                           \n                               \
    \                 strength_of_extension = extensions_sorted", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        \n\
    \        extensions_sorted = sort(extensions)\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n        \n        if strength == -1\n            return\
    \ class_name\n        else\n            \n            extensions_sorted = sort(extensions)\n\
    \            \n            strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \            \n            if strength == -1\n                return class_name\n\
    \            else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength == -1\n                    return\
    \ class_name\n                else\n                    \n                   \
    \ extensions_sorted = sort(extensions)\n                    \n               \
    \     strength = extensions_sorted[1] - extensions_sorted[2]\n               \
    \     \n                    if strength == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions)\n                        \n\
    \                        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength == -1\n       \
    \                     return class_name\n                        else\n      \
    \                      \n                            extensions_sorted = sort(extensions)\n\
    \                            \n                            strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength == -1\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        extensions_sorted = sort(extensions)\n              \
    \                  \n                                strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength == -1\n                                    return\
    \ class_name\n                                else\n                         \
    \           \n                                    extensions_sorted = sort(extensions)\n\
    \                                    \n                                    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \        \n                                    if strength == -1\n           \
    \                             return class_name\n                            \
    \        else\n                                        \n                    \
    \                    extensions_sorted = sort(extensions)\n                  \
    \                      \n                                        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength == -1\n                          \
    \                  return class_name\n                                       \
    \ else\n                                            \n                       \
    \                     extensions_sorted = sort(extensions)\n                 \
    \                           \n                                            strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                \n                                            if strength ==\
    \ -1\n                                                return class_name\n    \
    \                                        else\n                              \
    \                  \n                                                extensions_sorted\
    \ = sort(extensions)\n                                                \n     \
    \                                           strength = extensions_sorted[1] -\
    \ extensions_sorted[2]\n                                                \n   \
    \                                             if strength == -1\n            \
    \                                        return class_name\n                 \
    \                               else\n                                       \
    \             \n                                                    extensions_sorted\
    \ = sort(extensions)\n                                                    \n \
    \                                                   strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                                   \
    \ \n                                                    if strength == -1\n  \
    \                                                      return class_name\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 extensions_sorted = sort(", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    extensions_sorted = sort(extensions)\n    \n    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n    \n    if strength == -1\n\
    \        return class_name\n    else\n        return class_name .. \".\" .. extensions_sorted[1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    extensions\
    \ = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"\
    Slices\", extensions)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes as input a name of a class (a string) and a list of extensions (a list\
    \ of strings) and returns the name of the class with the strongest extension.\n\
    For example, if you are given \"Slices\" as the class and a list of the\nextensions:\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes'\
    \ since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nHint:\
    \ Use Strongest_Extension defined above.", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\"]) == \"Slices.StuFfed\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@test Strongest_Extension(\"Slices\",\
    \ [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"]) ==\
    \ \"Slices.Ham\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"\
    Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for extension in extensions_sorted\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        else\n\
    \            strength = sm\n        end\n        \n    end\n    \n    return class_name\
    \ * \".\" .* extensions_sorted[findfirst(x -> x == strength, extensions_sorted)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n  \
    \  extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"\
    Slices\", extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n  \
    \  extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"\
    Slices\", extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed", "    \n  \
    \  extensions = sort(extensions)\n    \n    strength = extensions[1] - extensions[0]\n\
    \    \n    if strength == 0 \n        return class_name\n    \n    else \n   \
    \     return class_name .* \".\" .* extensions[1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes as input a name\
    \ of a class (a string) and a list of extensions (a list of strings), and returns\
    \ the name of the class with the strongest extension.\nExample: \n    \n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    should return \"\
    Slices.SErviNGSliCes\"\nHint: Use Strongest_Extension to solve Exercise 1.", " \
    \   \n    extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for\
    \ ext in extensions\n        \n        cap = length(ext)\n        sm = length(class_name)\
    \ - cap\n        \n        if cap - sm > strength\n            strength = cap\
    \ - sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase letters in a given string.",
  "    \n    extension_strength = Dict{String, Int}()\n    \n    for extension in\
    \ extensions \n        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->x[1])\n    \n    sorted_extensions = sorted_extensions[end]\n    \n  \
    \  return class_name * \".\" .* sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and a list of strings as arguments and returns a string that is the\
    \ concatenation of the strings in the list separated by spaces.", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = -1\n    \n    for extension in extensions\n\
    \        \n        cap = length(extension)\n        sm = length(extension) - cap\n\
    \        \n        if strength == -1 || strength > cap - sm\n            strength\
    \ = cap - sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with the first letter of each word capitalized.\
    \ \nExample: \n    \"Hello World\" => \"Hello World\"\n    \"Hello World\" =>\
    \ \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"Hello World\"\
    \ => \"Hello World\"\n    \"Hello World\" => \"Hello World\"\n    \"", "    \n\
    \    extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for extension\
    \ in extensions \n        \n        extension_class = split(extension, '_')[1]\n\
    \        \n        if extension_class == class_name \n            \n         \
    \   strength = length(extension) - length(split(extension, '_')[2])\n        \
    \    \n            break\n        end\n    end\n    \n    if strength == -1\n\
    \        \n        error(\"No extension with this name found\")\n    end\n   \
    \ \n    return class_name * \"_\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = @time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<code language=juli",
  "    \n    extension_strength = zeros(length(extensions))\n    \n    for i = 1:length(extensions)\n\
    \        extension_strength[i] = length(extensions[i]) - length(replace(extensions[i],\
    \ uppercase(extensions[i]), \"\"))\n    end\n    \n    idx = findfirst(extension_strength\
    \ == maximum(extension_strength))\n    \n    if idx == -1\n        error(\"No\
    \ extension has the maximum strength.\")\n    end\n    \n    return class_name\
    \ * \".\" .* extensions[idx]\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions\
    \ = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"\
    Slices\", extensions)\n    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions\
    \ = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"\
    Slices\", extensions)\n    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed", "    \n    extensions = sort(extensions)\n    \n   \
    \ strength = extensions[1] - extensions[0]\n    \n    if strength == 0\n     \
    \   return class_name\n    end\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Cream\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\"])\
    \ == \"Slices.Cream\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\", \"Cream\"]) == \"Slices.Cream\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Cream\", \"Cream\", \"Cream\", \"Cream\"]) == \"Slices.Cream\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\", \"\
    Cream\", \"Cream\", \"Cream\"]) == \"Slices.Cream\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\", \"\
    Cream\", \"Cream\", \"Cream\", \"Cream\"]) == \"Slices.Cream\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\", \"\
    Cream\", \"Cream\", \"Cream\", \"Cream\", \"Cream\"]) == \"Slices.Cream\"\n@test\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Cream\", \"Cream\", \"Cream\", \"Cream\", \"Cream\", \"Cream\", \"Cream\"\
    , \"Cream\"]) == \"Slices.Cream\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Cream\", \"Cream\", \"Cream\", \"Cream\", \"", " \
    \   \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n    \n    \n    if strength_of_extension\
    \ == -1\n        return class_name\n    else\n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        ", "    \n    extensions = sort(extensions)\n    \n    strength = -1\
    \ \n    \n    for extension in extensions \n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm\n            break\n        end\n    end\n    \n    if strength ==\
    \ -1 \n        error(\"No extension has the strongest strength.\")\n    end\n\
    \    \n    return class_name * \".\" .* extensions[findfirst(x -> x == extensions[strength],\
    \ extensions)]\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\",\
    \ \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\",\
    \ \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Chee", "    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions[end][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a dictionary\
    \ as arguments and returns the string with the first letter of each word capitalized.\
    \ \nExample: \n    capitalize(\"Hello World\", {\"Hello\", \"World\"}) should\
    \ return \"Hello World\".\n    capitalize(\"Hello World\", {\"Hello\", \"World\"\
    , \"!\"}) should return \"Hello World!\".\n    capitalize(\"Hello World\", {\"\
    Hello\", \"World\", \"!\", \"!\"}) should return \"Hello World!\".\n    capitalize(\"\
    Hello World\", {\"Hello\", \"World\", \"!\", \"!\", \"!\"}) should return \"Hello\
    \ World!\".\n    capitalize(\"Hello World\", {\"Hello\", \"World\", \"!\", \"\
    !\", \"!\", \"!\"}) should return \"Hello World!\".\n    capitalize(\"Hello World\"\
    , {\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\"}) should return \"\
    Hello World!\".\n    capitalize(\"Hello World\", {\"Hello\", \"World\", \"!\"\
    , \"!\", \"!\", \"!\", \"!\", \"!\"}) should return \"Hello World!\".\n    capitalize(\"\
    Hello World\", {\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"\
    , \"!\"}) should return \"Hello World!\".\n    capitalize(\"Hello World\", {\"\
    Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"}) should\
    \ return \"Hello World!\".\n    capitalize(\"Hello World\", {\"Hello\", \"World\"\
    , \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"}) should\
    \ return \"Hello World!\".\n    capitalize(\"Hello World\", {\"Hello\", \"World\"\
    , \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"\
    }) should return \"Hello World!\".\n    capitalize(\"Hello World\", {\"Hello\"\
    , \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"\
    !\", \"!\", \"!\"}) should return \"Hello World!\".\n    capitalize(\"Hello World\"\
    , {\"Hello\", \"", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = extensions[1] - extensions[0]\n    \n    if strength == 0\n        return\
    \ class_name\n    else\n        return class_name .. \".\" .. extensions[strength]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the first letter of each\
    \ word capitalized.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extensions\
    \ = 0.0\n    \n    for extension in extensions_sorted\n        \n        extension_class\
    \ = extension_class(class_name, extension)\n        \n        strength_of_extensions\
    \ += extension_class.strength\n    end\n    \n    strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \    \n    if strength_of_extensions == 0.0\n        \n        return class_name\n\
    \    else\n        \n        extensions_sorted = sort(extensions)\n        \n\
    \        strength_of_extensions = 0.0\n        \n        for extension in extensions_sorted\n\
    \            \n            extension_class = extension_class(class_name, extension)\n\
    \            \n            strength_of_extensions += extension_class.strength\n\
    \        end\n        \n        strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \        \n        if strength_of_extensions == 0.0\n            \n          \
    \  return class_name\n        else\n            \n            extensions_sorted\
    \ = sort(extensions)\n            \n            strength_of_extensions = 0.0\n\
    \            \n            for extension in extensions_sorted\n              \
    \  \n                extension_class = extension_class(class_name, extension)\n\
    \                \n                strength_of_extensions += extension_class.strength\n\
    \            end\n            \n            strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \            \n            if strength_of_extensions == 0.0\n                \n\
    \                return class_name\n            else\n                \n     \
    \           extensions_sorted = sort(extensions)\n                \n         \
    \       strength_of_extensions = 0.0\n                \n                for extension\
    \ in extensions_sorted\n                    \n                    extension_class\
    \ = extension_class(class_name, extension)\n                    \n           \
    \         strength_of_extensions += extension_class.strength\n               \
    \ end\n                \n                strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \                \n                if strength_of_extensions == 0.0\n        \
    \            \n                    return class_name\n                else\n \
    \                   \n                    extensions_sorted = sort(extensions)\n\
    \                    \n                    strength_of_extensions = 0.0\n    \
    \                \n                    for extension in extensions_sorted\n  \
    \                      \n                        extension_class = extension_class(class_name,\
    \ extension)\n                        \n                        strength_of_extensions\
    \ += extension_class.strength\n                    end\n                    \n\
    \                    strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \                    \n                    if strength_of_extensions == 0.0\n\
    \                        \n                        return class_name\n       \
    \             else\n                        \n                        extensions_sorted\
    \ = sort(extensions)\n                        \n                        strength_of_extensions\
    \ = 0.0\n                        \n                        for extension in extensions_sorted\n\
    \                            \n                            extension_class = ",
  "    \n    extension_strength = zeros(length(extensions))\n    for i=1:length(extensions)\n\
    \        extension_strength[i] = length(extensions[i])-length(replace(extensions[i],uppercase(extensions[i]),\"\
    \"))\n    end\n    \n    extension_strength = sort(extension_strength)\n    \n\
    \    extension_strength = extension_strength[end]\n    \n    if length(extension_strength)>1\n\
    \        extension_strength = extension_strength[1]\n    end\n    \n    return\
    \ class_name+\".\"+extension_strength\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names\
    \ = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"\
    StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n  \
    \  \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names\
    \ = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"\
    StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n  \
    \  \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names\
    \ = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"\
    StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n  \
    \  \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names\
    \ = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"\
    StuFfed\"]\n    \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n  \
    \  \n    class_names = [\"Slices\", \"Cheese\", \"StuFfed\"]\n    \n    class_names\
    \ = [\"Slices\", \"Cheese\", \"StuFfed\"]", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class\
    \ name and a vector of extensions and returns the name of the class with the strongest\
    \ extension.", "    \n    extension_strength = zeros(length(extensions))\n   \
    \ \n    for i = 1:length(extensions)\n        extension_strength[i] = length(extensions[i])-length(replace(extensions[i],uppercase(extensions[i]),\"\
    \"))\n    end\n    \n    extension_strength = sort(extension_strength)\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = Int64[]\n    \n    for ext in extensions\n        \n   \
    \     cap = length(ext)\n        sm = length(ext) - cap\n        \n        push!(strength,\
    \ (cap - sm) / cap)\n    end\n    \n    idx = findfirst(x -> x == max(strength),\
    \ strength)\n    \n    if idx == length(strength)\n        \n        return class_name\n\
    \        \n    else\n        \n        return class_name * \".\" .* extensions[idx]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    str\
    \ = Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input\
    \ a vector of strings and returns a vector of strings. \nThe function should remove\
    \ all duplicate strings from the input vector. \nThe function should return an\
    \ empty vector if the input vector is empty.\nExample: \n    \n    removeDuplicates([\"\
    a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"])\n    \nshould return \n    [\"\
    a\", \"b\", \"c\", \"a\"]\n    \n</text>\n<code language=julia-1.5>", "    \n\
    \    extensions_sorted = sort(extensions)\n    \n    strength = -1\n    \n   \
    \ for extension in extensions_sorted\n        \n        extension_upper = extension_lower\
    \ = extension\n        \n        for c in extension\n            \n          \
    \  if isupper(c)\n                \n                extension_upper += c\n   \
    \             \n            elseif islower(c)\n                \n            \
    \    extension_lower += c\n                \n            end\n            \n \
    \       end\n        \n        strength = extension_upper - extension_lower\n\
    \        \n        if strength > 0\n            break\n        end\n    end\n\
    \    \n    return class_name * \".\" * extensions_sorted[findfirst(x -> x == extensions_sorted[findfirst(x\
    \ -> x == extension), 1], extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n  \
    \  extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"\
    Slices\", extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", ", "   \
    \ \n    extensions = sort(extensions)\n    \n    strength = extensions.length\n\
    \    \n    for ext in extensions\n        if ext == class_name\n            strength\
    \ = -1\n            break\n    end\n    \n    if strength == -1\n        return\
    \ class_name\n    end\n    \n    strength = round(strength/length(extensions))\n\
    \    \n    return class_name * string(strength, extensions[end])\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\"]) == \"Slices.Cheese\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\"]) == \"Slices.Candy\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Candy\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Candy\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Camel\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Camel\", \"Pizza\"])\
    \ == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Camel\", \"Pizza\", \"Ham\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Camel\", \"Pizza\", \"Ham\", \"Tomatoes\"]) == \"Slices.SErviNGSliCes\"\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Camel\", \"Pizza\", \"Ham\", \"Tomatoes\", \"Mushrooms\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Camel\", \"Pizza\", \"Ham\", \"Tomatoes\", \"Mushrooms\", \"Bread\"]) == \"\
    Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Camel\", \"Pizza\", \"Ham\", \"Tomatoes\", \"Mushrooms\"\
    , \"Bread\", \"Butter\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Camel\", \"Pizza\", \"\
    Ham\", \"Tomato", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = extensions[1] - extensions[0]\n    \n    if strength == 0\n        \n    \
    \    return class_name\n        \n    elseif strength == 1\n        \n       \
    \ return class_name .. \".\" .. extensions[1]\n        \n    else\n        \n\
    \        return class_name .. \".\" .. extensions[1] .. \".\" .. extensions[2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"Stu", "  \
    \  \n    extensions = sort(extensions)\n    \n    strength = -1\n    \n    for\
    \ ext in extensions\n        \n        if isupper(ext[length(ext)-1])\n      \
    \      \n            strength = strength + length(ext) - length(ext[length(ext)-1])\n\
    \            \n        elseif islower(ext[length(ext)-1])\n            \n    \
    \        strength = strength + length(ext) - length(ext[length(ext)-1])\n    \
    \        \n        end\n        \n    end\n    \n    if strength == -1\n     \
    \   \n        error(\"No extensions found\")\n        \n    elseif strength ==\
    \ 0\n        \n        error(\"No extensions found\")\n        \n    elseif strength\
    \ == 1\n        \n        return class_name\n        \n    else\n        \n  \
    \      return class_name * \".\" . extensions[end]\n        \n    end\n    \n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    str = Stron", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength_sum = 0\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength_sum += (length(extension_upper)\
    \ - length(extension_lower))\n    end\n    \n    strength_sum / length(extensions_sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"]) == \"\
    Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) ==\
    \ \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"\
    Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        \n        strength = extensions_sorted[1]\n\
    \        \n    end\n    \n    return class_name * \".\" .* extensions_sorted[1]\
    \ \nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    ])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\",\
    \ [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\",\
    \ \"StuFfed\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"SErviNGSliCes\"])\n</cell>\n<code language=julia-1.5>\n@time\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"])\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliC", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    extension_strength = zeros(length(extensions))\n    for extension in\
    \ extensions\n        extension_strength[findall(extension == class_name)[1]]\
    \ = \n            length(findall(extension == class_name)[1])/length(extension)\n\
    \    end\n    \n    Strongest_Extension = extensions[argmax(extension_strength)]\n\
    \    \n    return Strongest_Extension\nend\n</cell>\n<code language=julia-1.0>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix\
    \ between all the strings in the list. \nExample: \n    \n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\"]) returns \"a\"\n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\", \"ab\"]) returns \"abc\"\n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\", \"ab\", \"a\"]) returns \"abc\"\n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\", \"ab\", \"a\", \"bc\"]) returns \"abc\"\n   \
    \ longest_common_prefix(\"abc\", [\"abc\", \"ab\", \"ac\", \"ab\", \"a\", \"bc\"\
    , \"c\"]) returns \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"ab\"\
    , \"ac\", \"ab\", \"a\", \"bc\", \"c\", \"d\"]) returns \"abc\"\n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\", \"ab\", \"a\", \"bc\", \"c\", \"d\", \"e\"])\
    \ returns \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"ab\", \"ac\"\
    , \"ab\", \"a\", \"bc\", \"c\", \"d\", \"e\", \"f\"]) returns \"abc\"\n    longest_common_prefix(\"\
    abc\", [\"abc\", \"ab\", \"ac\", \"ab\", \"a\", \"bc\", \"c\", \"d\", \"e\", \"\
    f\", \"g\"]) returns \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"\
    ab\", \"ac\", \"ab\", \"a\", \"bc\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    ]) returns \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"ab\", \"ac\"\
    , \"ab\", \"a\", \"bc\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) returns\
    \ \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"ab\", \"ac\", \"ab\"\
    , \"a\", \"bc\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) returns\
    \ \"abc\"\n    longest_common_prefix(\"abc\", [\"abc\", \"ab\", \"ac\", \"ab",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n\
    </cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
  "    \n    extension_strength = Dict{String,Int}()\n    for extension in extensions\n\
    \        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        extension_upper_cap = length(extension_upper)\
    \ - length(extension_upper)%2\n        extension_lower_cap = length(extension_lower)\
    \ - length(extension_lower)%2\n        \n        strength = strength + (extension_upper_cap\
    \ - extension_lower_cap)\n    end\n    \n    if strength == -1\n        error(\"\
    No extensions found\")\n    end\n    \n    extensions_sorted = extensions_sorted[strength]\n\
    \    \n    extensions_sorted = [class_name] + extensions_sorted\n    \n    return\
    \ join(extensions_sorted, \".\")\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in it.", " \
    \   \n    extension_strength = Dict()\n    for extension in extensions \n    \
    \    extension_strength[extension] = length(extension) - length(extension.lowercase)\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->-x)\n\
    \    \n    sorted_extensions = sorted_extensions[end]\n    \n    \n    return\
    \ class_name * \".\" * sorted_extensions\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Pizza\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\"]) ==\
    \ \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"Burger\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Pizza\", \"Ham\", \"Burger\", \"Chicken\"]) == \"Slices.StuFfed\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Pizza\", \"Ham\", \"Burger\", \"Chicken\", \"Fish\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Pizza\", \"Ham\", \"Burger\", \"Chicken\", \"Fish\", \"Pizza\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Pizza\", \"Ham\", \"Burger\", \"Chicken\", \"Fish\", \"Pizza\", \"Ham\"])\
    \ == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"Burger\", \"Chicken\", \"Fish\"\
    , \"Pizza\", \"Ham\", \"Burger\"]) == \"", "    \n    extension_strength = Dict{String,Int}()\n\
    \    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extension_strengths = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strengths[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strengths.values))\n    \n    sorted_extensions[1]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of words in a string that\
    \ begin with a capital letter. \nExample: \n    \n    count_caps(\"Hello World\"\
    )\n    \n    should return 4.\n    \n    You can assume that the string does not\
    \ contain any spaces.\n    \n    You can assume that the string does not contain\
    \ any punctuation.\n    \n    You can assume that the string does not contain\
    \ any digits.\n    \n    You can assume that the string does not contain any special\
    \ characters.\n    \n    You can assume that the string does not contain any uppercase\
    \ letters.\n    \n    You can assume that the string does not contain any lowercase\
    \ letters.\n    \n    You can assume that the string does not contain any digits.\n\
    \    \n    You can assume that the string does not contain any special characters.\n\
    \    \n    You can assume that the string does not contain any uppercase letters.\n\
    \    \n    You can assume that the string does not contain any lowercase letters.\n\
    \    \n    You can assume that the string does not contain any digits.\n    \n\
    \    You can assume that the string does not contain any special characters.\n\
    \    \n    You can assume that the string does not contain any uppercase letters.\n\
    \    \n    You can assume that the string does not contain any lowercase letters.\n\
    \    \n    You can assume that the string does not contain any digits.\n    \n\
    \    You can assume that the string does not contain any special characters.\n\
    \    \n    You can assume that the string does not contain any uppercase letters.\n\
    \    \n    You can assume that the string does not contain any lowercase letters.\n\
    \    \n    You can assume that the string does not contain any digits.\n    \n\
    \    You can assume that the string does not contain any special characters.\n\
    \    \n    You can assume that the string does not contain any uppercase letters.\n\
    \    \n    You can assume that the string does not contain any lowercase letters.\n\
    \    \n    You can assume that the string does not contain any digits.\n    \n\
    \    You can assume that the string does not contain any special characters.\n\
    \    \n    You can assume that the string does not contain any uppercase letters.\n\
    \    \n    You can assume that the string does not contain any lowercase letters.\n\
    \    \n    You can assume ", "    \n    extension_strength = zeros(Int, length(extensions))\n\
    \    \n    for i = 1:length(extensions)\n        extension_strength[i] = length(split(extensions[i],\
    \ \"\"))\n    end\n    \n    extension_strength = sort(extension_strength)\n \
    \   \n    Strongest_Extension = extensions[extension_strength[1]]\n    \n    for\
    \ i = 2:length(extension_strength)\n        if extension_strength[i] > extension_strength[i-1]\n\
    \            Strongest_Extension = extensions[extension_strength[i]]\n       \
    \     break\n        end\n    end\n    \n    return Strongest_Extension\nend\n\
    </cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(class_name = \"Slices\"\
    , extensions = extensions)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes as input a class name and a vector of extensions and returns the\
    \ name of the strongest extension.\nExample: \n    \n    Strongest_Extension(class_name\
    \ = \"Slices\", extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n \
    \   \n    should return \"SErviNGSliCes\".\n    \n    You can assume that there\
    \ are no duplicates in the extensions vector.\n    \n    You can assume that there\
    \ are no uppercase letters in the class name.\n    \n    You can assume that there\
    \ are no lowercase letters in the class name.\n    \n    You can assume that there\
    \ are no numbers in the class name.\n    \n    You can assume that there are no\
    \ symbols in the class name.\n    \n    You can assume that there are no spaces\
    \ in the class name.\n    \n    You can assume that there are no special characters\
    \ in the class name.\n    \n    You can assume that there are no spaces in the\
    \ extensions vector.\n    \n    You can assume that there are no special characters\
    \ in the extensions vector.\n    \n    You can assume that there are no spaces\
    \ in the extensions vector.\n    \n    You can assume that there are no special\
    \ characters in the extensions vector.\n    \n    You can assume that there are\
    \ no spaces in the extensions vector.\n    \n    You can assume that there are\
    \ no special characters in the extensions vector.\n    \n    You can assume that\
    \ there are no spaces in the extensions vector.\n    \n    You can assume that\
    \ there are no special characters in the extensions vector.\n    \n    You can\
    \ assume that there are no spaces in the extensions vector.\n    \n    You can\
    \ assume that there are no special characters in the extensions vector.\n    \n\
    \    You can assume that there are no spaces in the extensions vector.\n    \n\
    \    You can assume that there are no special characters in the extensions vector.\n\
    \    \n    You can assume that there are no ", "    \n    extension_strength =\
    \ Dict{String, Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ begin\n    \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and a list of strings as arguments and returns the string with the\
    \ longest common prefix. \nFor example, if the input string is \"abracadabra\"\
    \ and the list of strings is [\"abra\", \"abracabra\", \"abracadabra\"] then your\
    \ function should return \"abra\".\nIf the input string and list of strings are\
    \ empty then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same length then your function should return\
    \ an empty string.\nIf the input string and list of strings do not have the same\
    \ length then your function should return an empty string.\nIf the input string\
    \ and list of strings do not have the same ", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    extension_strength = Dict()\n    for extension in extensions\n\
    \        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength_of_extensions = 0.0\n    \n    for extension\
    \ in extensions_sorted\n        \n        extension_class = extension_class(class_name,\
    \ extension)\n        \n        if extension_class != class_name\n           \
    \ \n            strength_of_extensions += extension_class.strength\n         \
    \   \n        end\n    end\n    \n    \n    if strength_of_extensions == 0.0\n\
    \        \n        return class_name\n        \n    else\n        \n        strength_of_extensions\
    \ /= length(extensions_sorted)\n        \n        return class_name + \".\" +\
    \ extensions_sorted[findfirst(x -> x.strength == strength_of_extensions, extensions_sorted)]\n\
    \        \n    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"Stu",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extension_strength\
    \ = Dict()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength), by=x->x[1])\n    \n    return class_name\
    \ * \".\" .* sorted_extensions[1][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings and returns the longest common substring in each of the strings in\
    \ the list. \nFor example, if the input string is \"abcde\" and a list of strings\
    \ is [\"abc\", \"bcd\", \"cde\", \"def\"] then your function should return [\"\
    abc\", \"bcd\"]. \nIf the input string is \"abc\" and a list of strings is [\"\
    abc\", \"bcd\", \"cde\", \"def\"] then your function should return [\"abc\"].\
    \ \nIf the input string is \"abc\" and a list of strings is [\"abc\", \"bcd\"\
    , \"cde\"] then your function should return [].", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[0]\n    \n    if strength ==\
    \ 0\n        return class_name\n    else\n        return class_name .. \".\" ..\
    \ extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a vector of\
    \ strings and returns a vector of the same length with all strings converted to\
    \ lowercase. \nThe function should ignore all empty strings and all strings that\
    \ are not strings. \nThe function should ignore all strings that are not lowercase\
    \ letters.\nThe function should ignore all strings that are not uppercase letters.\n\
    The function should ignore all strings that are not alphanumeric characters. \n\
    The function should ignore all strings that are not punctuation characters. \n\
    The function should ignore all strings that are not whitespace. \nThe function\
    \ should ignore all strings that are not numbers.\nThe function should ignore\
    \ all strings that are not hexadecimal characters. \nThe function should ignore\
    \ all strings that are not binary characters. \nThe function should ignore all\
    \ strings that are not hexadecimal or binary characters. \nThe function should\
    \ ignore all strings that are not integers. \nThe function should ignore all strings\
    \ that are not floats. \nThe function should ignore all strings that are not booleans.\
    \ \nThe function should ignore all strings that are not dates. \nThe function\
    \ should ignore all strings that are not datetimes. \nThe function should ignore\
    \ all strings that are not times. \nThe function should ignore all strings that\
    \ are not datetimes or times. \nThe function should ignore all strings that are\
    \ not arrays. \nThe function should ignore all strings that are not dictionaries.\
    \ \nThe function should ignore all strings that are not sets. \nThe function should\
    \ ignore all strings that are not tuples. \nThe function should ignore all strings\
    \ that are not lists. \nThe function should ignore all strings that are not sets\
    \ or dictionaries. \nThe function should ignore all strings that are not tuples\
    \ or lists. \nThe function should ignore all strings that are not sets or tuples\
    \ or lists. \nThe function should ignore all strings that are not dictionaries\
    \ or sets or lists. \nThe function should ignore all strings that are not tuples\
    \ or sets or lists. \nThe function should ignore all strings that are not sets\
    \ or tuples or lists or dictionaries. \nThe function should ignore all strings\
    \ that are not tuples or sets or lists or dictionaries. \nThe function should\
    \ ignore all strings that are not sets or tuples or lists or dictionaries. \n",
  "    \n    extension_strength = zeros(length(extensions))\n    \n    for extension\
    \ in extensions\n        extension_strength[findall(extension == class_name)[1]]\
    \ = -1\n    end\n    \n    extension_strength = sort(extension_strength, by =\
    \ x -> length(x))\n    \n    Strongest_Extension = extension_strength[1]\n   \
    \ \n    return Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\"]) == \"\
    Slices.Ham\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\"]) == \"Slices.Ham\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"\
    Slices.Ham\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.Ham\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) ==\
    \ \"Slices.Ham\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNG", "    \n\
    \    extensions = sort(extensions)\n    \n    strength = Int64[]\n    \n    for\
    \ extension in extensions\n        \n        cap = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n        sm = length(replace(extension, lowercase(extension),\
    \ \"\"))\n        \n        push!(strength, cap - sm)\n    end\n    \n    strength\
    \ = minimum(strength)\n    \n    index = findfirst(x -> x == strength, strength)\n\
    \    \n    if index == length(strength)\n        \n        return class_name\n\
    \        \n    elseif index == -1\n        \n        return class_name * \".\"\
    \ \n        \n    else\n        \n        return class_name * \".\" \n       \
    \ \n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns the string with the longest common prefix. \nFor example, if the string\
    \ is 'abcde' and a list of strings is ['ab', 'abc', 'abd', 'abe', 'ac', 'acd',\
    \ 'ade', 'adf', 'ae'], \nthe function should return 'ab'.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    for i = 1:length(extensions)\n        extension_strength[i]\
    \ = length(extension_strength[i]) \n    end\n    \n    extension_strength = sort(extension_strength,\
    \ by = x -> length(x))\n    \n    extension_strength = extension_strength[end]\n\
    \    \n    extension_strength = extension_strength - length(class_name)\n    \n\
    \    extension_strength = extension_strength / length(class_name)\n    \n    extension_strength\
    \ = round(extension_strength, digits = 2)\n    \n    extension_strength = String(extension_strength)\n\
    \    \n    extension_strength = replace(extension_strength, \" \", \"\")\n   \
    \ \n    extension_strength = replace(extension_strength, \".\", \"\")\n    \n\
    \    extension_strength = replace(extension_strength, \"-\", \"\")\n    \n   \
    \ extension_strength = replace(extension_strength, \"_\", \"\")\n    \n    extension_strength\
    \ = replace(extension_strength, \"'\", \"\")\n    \n    extension_strength = replace(extension_strength,\
    \ \"(\", \"\")\n    \n    extension_strength = replace(extension_strength, \"\
    )\", \"\")\n    \n    extension_strength = replace(extension_strength, \"[\",\
    \ \"\")\n    \n    extension_strength = replace(extension_strength, \"]\", \"\"\
    )\n    \n    extension_strength = replace(extension_strength, \"{\", \"\")\n \
    \   \n    extension_strength = replace(extension_strength, \"}\", \"\")\n    \n\
    \    extension_strength = replace(extension_strength, \"!\", \"\")\n    \n   \
    \ extension_strength = replace(extension_strength, \"?\", \"\")\n    \n    extension_strength\
    \ = replace(extension_strength, \"%\", \"\")\n    \n    extension_strength = replace(extension_strength,\
    \ \"$\", \"\")\n    \n    extension_strength = replace(extension_strength, \"\
    #\", \"\")\n    \n    extension_strength = replace(extension_strength, \"*\",\
    \ \"\")\n    \n    extension_strength = replace(extension_strength, \"^\", \"\"\
    )\n    \n    extension_strength = replace(extension_strength, \"&\", \"\")\n \
    \   \n    extension_strength = replace(extension_strength, \"*\", \"\")\n    \n\
    \    extension_strength = replace(extension_strength, \"+\", \"\")\n    \n   \
    \ extension_strength = replace(extension_strength, \"-\", \"\")\n    \n    extension_strength\
    \ = replace(extension_strength, \".\", \"\")\n    \n    extension_strength = replace(extension_strength,\
    \ \"/\", \"\")\n    \n    extension_strength = replace(extension_strength, \"\
    ;\", \"\")\n    \n    extension_strength = replace(extension_", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for e in extensions\
    \ \n        \n        cap = length(e) - length(gsub(e,\"\",class_name))\n    \
    \    sm = length(gsub(e,\"\",class_name)) - length(gsub(e,\"\",class_name,1))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = cap - sm\n        end\n    end\n    \n    if strength > 0\n        return\
    \ class_name * \".\" * extensions[findfirst(x -> x == class_name, extensions)]\n\
    \    else\n        return class_name\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of times a substring appears in a string.\nFor example,\
    \ if the string was \"The quick brown fox jumped over the lazy dog\" and the substring\
    \ was \"fox\" then your function should return 3.\nIf the substring appears more\
    \ than once, your function should return 0.\nIf the substring does not appear\
    \ in the string, your function should return -1.\nExample: \n    \n</text>\n<code\
    \ language=julia-1.5>", "    \n    extensions_sorted = sort(extensions)\n    \n\
    \    strength = -1\n    \n    for extension in extensions_sorted\n        \n \
    \       extension_upper = uppercase(extension)\n        extension_lower = lowercase(extension)\n\
    \        \n        if extension_upper == extension_lower\n            strength\
    \ += 1\n        else\n            strength = extension_upper - extension_lower\n\
    \        end\n    end\n    \n    \n    if strength > 0\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        extensions_sorted = extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[end], extensions_sorted)]\n        \n        return\
    \ class_name * \".\" .* extensions_sorted\n    else\n        return class_name\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\"])\
    \ == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    , \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"", "    \n    extensions_sorted = sort(extensions)\n    \n\
    \    strength = -1 \n    \n    for extension in extensions_sorted\n        \n\
    \        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        else\n\
    \            strength = sm\n        end\n        \n        if strength > 0\n \
    \           break\n        end\n    end\n    \n    return class_name * \".\" .\
    \ extensions_sorted[findfirst(x -> x == extensions_sorted[findfirst(x -> x ==\
    \ extensions_sorted), strength])]\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a given string.", "    \n    extension_strength = Dict()\n    for extension\
    \ in extensions\n        extension_strength[extension] = length(extension) - length(extension.lowercase)\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->x)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = sorted_extensions[end]\n    \n    return class_name * \".\" .* sorted_extensions\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and a list of strings as arguments and returns the string with the first\
    \ letter of each word capitalized. \nExample: \n    capitalize(\"Hello World\"\
    , [\"Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"\
    Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\"\
    , \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"\
    World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"\
    ]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"])\
    \ = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"]) =\
    \ \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"\
    Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello\
    \ World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\
    \n    capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n\
    \    capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n \
    \   capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n  \
    \  capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n   \
    \ capitalize(\"Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"\
    Hello World\", [\"Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello\
    \ World\", [\"Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\"\
    , [\"Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"\
    Hello\", \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\"\
    , \"World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"\
    World\"]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello\", \"World\"\
    ]) = \"Hello World\"\n    capitalize(\"Hello World\", [\"Hello", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        extension_strength = length(extension)\
    \ - length(extension_upper) - length(extension_lower)\n        \n        if strength\
    \ < extension_strength\n            strength = extension_strength\n        end\n\
    \    end\n    \n    return class_name * \".\" * extensions_sorted[end]\nend\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string.\nExample: \n    \n    count_upper(\"ABC\") returns 3\n    count_upper(\"\
    abC\") returns 2\n    count_upper(\"aBc\") returns 1\n    count_upper(\"aBcD\"\
    ) returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns\
    \ 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n\
    \    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n  \
    \  count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"\
    aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\"\
    ) returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns\
    \ 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n\
    \    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n  \
    \  count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"\
    aBcD\") returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\"\
    ) returns 0\n    count_upper(\"aBcD\") returns 0\n    count_upper(\"aBcD\") returns\
    \ 0\n    count_upper(\"aBcD\") ", "    \n    extensions = sort(extensions)\n \
    \   \n    strength = extensions[1] - extensions[0]\n    \n    if strength == 0\n\
    \        return class_name\n    \n    i = 2\n    while i < length(extensions)\n\
    \        if extensions[i] - extensions[i-1] > strength\n            strength =\
    \ extensions[i] - extensions[i-1]\n        else\n            i = i + 1\n     \
    \   end\n    end\n    \n    return class_name * \".\" .* extensions[1]\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"\
    Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Sli", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        if strength == -1\n            strength\
    \ = extension_upper - extension_lower\n        elseif strength > extension_upper\
    \ - extension_lower\n            strength = extension_upper - extension_lower\n\
    \        end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and a list of strings and returns a string\
    \ in the format\n    ClassName.StrongestExtensionName. For example, if you have\
    \ \"Slices\" as the class and \n    a list of extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should \n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension (its strength is -1).\n    Example:\n        \"\"\
    \"", "    \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n    \n    if strength_of_extension\
    \ == 0 \n        return class_name\n    else\n        return class_name .. \"\
    .\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nFor example, if the string is: \"The quick brown fox jumps over\
    \ the lazy dog\" and the substring is: \"fox\" then your function should return\
    \ 3.\nIf the substring is not in the string, your function should return 0.\n\
    Example: \n    \n</text>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n \
    \   \n    strength = -1 \n    \n    for extension in extensions\n        \n  \
    \      extension_class = extension[1:length(extension)]\n        \n        if\
    \ extension_class == class_name\n            \n            strength = length(extension)\
    \ - length(extension_class)\n            \n            break\n        end\n  \
    \  end\n    \n    if strength == -1\n        \n        error(\"No extension found\
    \ for class $class_name\")\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string where all vowels are replaced by an underscore.",
  "    \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n    \n    if strength_of_extension\
    \ == -1\n        return class_name\n    else\n        \n        index_of_first_extension\
    \ = findfirst(x -> x == extensions_sorted[1], extensions)\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[index_of_first_extension]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\"]) == \"Slices.SErviNGSliCes.Ham\"\n@test Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Eggs\"]) == \"Slices.SErviNGSliCes.Ham.Eggs\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Eggs\", \"Tomatoes\"]) == \"Slices.SErviNGSliCes.Ham.Eggs.Tomatoes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Eggs\", \"Tomatoes\", \"Potatoes\"]) == \"Slices.SErviNGSliCes.Ham.Eggs.Tomatoes.Potatoes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Eggs\", \"Tomatoes\", \"Potatoes\", \"Carrots\"]) == \"Slices.SErviNGSliCes.Ham.Eggs.Tomatoes.Potatoes.Carrots\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Eggs\", \"Tomatoes\", \"Potatoes\", \"Carrots\", \"Apples\"]) ==\
    \ \"Slices.SErviNGSliCes.Ham.Eggs.Tomatoes.Potatoes.Carrots.Apples\"\n@test Strongest_",
  "    \n    extensions_sorted = sort(extensions)\n    \n    strength = -1\n    \n\
    \    for extension in extensions_sorted\n        \n        if isupper(extension)\n\
    \            \n            strength = strength + length(extension) - length(extension.upper())\n\
    \            \n        elseif islower(extension)\n            \n            strength\
    \ = strength + length(extension) - length(extension.lower())\n            \n \
    \       end\n        \n    end\n    \n    if strength == -1\n        \n      \
    \  error(\"No extensions found\")\n        \n    end\n    \n    return class_name\
    \ * \".\" .* extensions_sorted[findfirst(x -> x == extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted)][1], extensions_sorted)]\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    Strongest_Extension(\"Slices\",\
    \ [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a list of strings as arguments\
    \ and returns the string with the longest common prefix. \nThe function should\
    \ return the longest common prefix of the strings in the list \n(without repeating\
    \ characters). \nFor example, if the list is [\"abc\", \"bcd\", \"cde\", \"def\"\
    ] then it should return \"abc\".\nIf the list is [\"abc\", \"bcd\", \"cde\", \"\
    def\", \"efg\"] then it should return \"abc\".\nIf the list is [\"abc\", \"bcd\"\
    , \"cde\", \"def\", \"efg\", \"fgh\"] then it should return \"abc\".\nIf the list\
    \ is [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\"] then it should\
    \ return \"abc\".\nIf the list is [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"\
    , \"fgh\", \"ghi\", \"hij\"] then it should return \"abc\".\nIf the list is [\"\
    abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\"\
    ] then it should return \"abc\".\nIf the list is [\"abc\", \"bcd\", \"cde\", \"\
    def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\"] then it should return\
    \ \"abc\".\nIf the list is [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\"\
    , \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\"] then it should return \"abc\".\n\
    If the list is [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\"\
    , \"", "    \n    extensions_sorted = sort(extensions)\n    \n    strength = -1\n\
    \    \n    for extension in extensions_sorted\n        \n        if isupper(extension[1])\n\
    \            \n            strength = strength + length(extension) - length(extension[1])\n\
    \            \n        elseif islower(extension[1])\n            \n          \
    \  strength = strength + length(extension) - length(extension[1])\n          \
    \  \n        else\n            \n            error(\"The extension's name should\
    \ only contain uppercase and lowercase letters.\")\n            \n        end\n\
    \        \n    end\n    \n    if strength > 0\n        \n        return class_name\
    \ * \".\" .* extensions_sorted[findfirst(x -> isupper(x[1]), extensions_sorted)]\n\
    \        \n    else\n        \n        error(\"There are no extensions with the\
    \ same strength.\")\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"\
    Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a dictionary and returns the string with the first letter\
    \ of each word capitalized. \nFor example, if the input string is \"Hello World\"\
    \ and a dictionary is {\"Hello\": 1, \"World\": 2} then the output should be \"\
    Hello World\".", "    \n    extensions_sorted = sort(extensions)\n    \n    strength\
    \ = -1 \n    \n    for extension in extensions_sorted \n        \n        if isupper(extension)\
    \ \n            \n            strength = strength + length(extension) - length(extension.upper())\n\
    \            \n        else \n            \n            strength = strength +\
    \ length(extension) - length(extension.lower())\n            \n        end\n \
    \       \n    end\n    \n    if strength == -1 \n        \n        error(\"No\
    \ extensions found\")\n        \n    end\n    \n    return class_name * \".\"\
    \ .* extensions_sorted[findfirst(x -> x == extensions_sorted[findfirst(x -> x\
    \ == extensions_sorted)], extensions_sorted)]\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"\
    Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the characters in lower case.\n\
    Example: \n    \n    lower(\"Hello\") should return \"hello\"\n    lower(\"hello\"\
    ) should return \"hello\"\n    lower(\"HellO\") should return \"hello\"\n    lower(\"\
    HellO!\") should return \"hello\"\n    lower(\"HellO!?\") should return \"hello\"\
    \n    lower(\"HellO!?!\") should return \"hello\"\n    lower(\"HellO!?!?!\") should\
    \ return \"hello\"\n    lower(\"HellO!?!?!?!\") should return \"hello\"\n    lower(\"\
    HellO!?!?!?!?!?!\") should return \"hello\"\n    lower(\"HellO!?!?!?!?!?!?!?!\"\
    ) should return \"hello\"\n    lower(\"HellO!?!?!?!?!?!?!?!?!?!\") should return\
    \ \"hello\"\n    lower(\"HellO!?!?!?!?!?!?!?!?!?!?!?!\") should return \"hello\"\
    \n    lower(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!\") should return \"hello\"\n  \
    \  lower(\"HellO!?!?!?!?", "    \n    extension_strength = Dict{String, Int}()\n\
    \    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions[end][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings and returns a string with the \nlongest common substring in each\
    \ of the strings in the list. \nFor example, if the input string is \"ABCDEFG\"\
    \ and a list of strings is [\"ABC\", \"DEF\", \"GHI\"]\nthen the output should\
    \ be \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is [\"\
    ABC\", \"DEF\", \"GHI\", \"JKL\"]\nthen the output should be \"ABC\".\nIf the\
    \ input string is \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\"\
    , \"JKL\", \"MNO\"]\nthen the output should be \"ABC\".\nIf the input string is\
    \ \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"\
    MNO\", \"PQR\"]\nthen the output should be \"ABC\".\nIf the input string is \"\
    ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\"\
    , \"PQR\", \"STU\"]\nthen the output should be \"ABC\".\nIf the input string is\
    \ \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"\
    MNO\", \"PQR\", \"STU\", \"VWX\"]\nthen the output should be \"ABC\".\nIf the\
    \ input string is \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\"\
    , \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\"]\nthen the output should\
    \ be \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is [\"\
    ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\",\
    \ \"BCD\"]\nthen the output should be \"ABC\".\nIf the input string is \"ABCDEFG\"\
    \ and a list of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\"\
    , \"STU\", \"VWX\", \"YZ\", \"BCD\", \"EFG\"]\nthen the output should be \"ABC\"\
    .\nIf the input string is \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\"\
    , \"GHI", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions_sorted = sort(extensions)\n    \n    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[0]\n    \n    \n    if strength_of_extension == 0 \n   \
    \     return class_name\n    else\n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", " \
    \   \n    extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for\
    \ extension in extensions \n        \n        cap = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n        sm = length(replace(extension, lowercase(extension),\
    \ \"\"))\n        \n        if cap > sm \n            strength = cap - sm\n  \
    \          break\n        end\n    end\n    \n    return class_name * \".\" .*\
    \ extensions[findfirst(x -> x == strength, extensions)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class\
    \ name and a vector of extensions and returns the name of the class with the strongest\
    \ extension.\nExample: \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"])\nshould return \"Slices.SErviNGSliCes\".", "    \n\
    \    extensions_sorted = sort(extensions)\n    \n    strength = -1\n    \n   \
    \ for extension in extensions_sorted\n        \n        extension_upper = uppercase(extension)\n\
    \        extension_lower = lowercase(extension)\n        \n        extension_upper_cap\
    \ = length(extension_upper)\n        extension_lower_cap = length(extension_lower)\n\
    \        \n        strength = strength + (extension_upper_cap - extension_lower_cap)\n\
    \    end\n    \n    \n    if strength > 0\n        return class_name .* \".\"\
    \ .* extensions_sorted[end]\n    else\n        return class_name\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a vector\
    \ of strings and returns a vector of strings where each string in the input vector\
    \ is replaced by the string that comes first in the alphabet of the string. \n\
    For example, if the input vector is [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ] then you should return the vector [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]. \nIf the input vector is [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"FedFood\"\
    ] then you should return the vector [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"FedFood\"]. \nIf the input vector is [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"FedFood\", \"Food\"] then you should return the vector [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"FedFood\", \"Food\"]. \nIf the input vector is [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"FedFood\", \"Food\", \"Food\"] then\
    \ you should return the vector [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"\
    FedFood\", \"Food\", \"Food\"]. \nIf the input vector is [\"SErviNGSliCes\", \"\
    Cheese\", \"StuFfed\", \"FedFood\", \"Food\", \"Food\", \"Food\"] then you should\
    \ return the vector [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"FedFood\",\
    \ \"Food\", \"", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = extensions[1] - extensions[0]\n    \n    if strength == 0\n        return\
    \ class_name\n    end\n    \n    index = findfirst(x -> strength > 0, extensions)\n\
    \    \n    if index == nothing\n        return class_name\n    end\n    \n   \
    \ return class_name .* \".\" .* extensions[index]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions\
    \ = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"\
    Slices\", extensions)\n    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions\
    \ = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"\
    Slices\", extensions)\n    \nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == 0\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]", "    \n    extensions = sort(extensions)\n    \n    strength = -1\n    \n\
    \    for extension in extensions\n        \n        cap = length(extension) -\
    \ length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm\n            strength\
    \ = cap - sm\n        elseif sm > cap\n            strength = sm - cap\n     \
    \   else\n            strength = 0\n        end\n        \n        if strength\
    \ > 0\n            break\n        end\n    end\n    \n    if strength == 0\n \
    \       error(\"No extensions match the given class\")\n    end\n    \n    return\
    \ class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Pizza\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\"]) ==\
    \ \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Pizza\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"\
    Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"\
    Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Pizza\", \"Ham\", \"\
    Ham\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension",
  "    \n    extension_strength = Dict{String,Int}()\n    for extension in extensions\n\
    \        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->x[1])\n    \n    return class_name * \".\" .* sorted_extensions[1][1]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"]) == \"\
    Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) ==\
    \ \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"\
    Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    , \"Slices\", \"Sli", "    \n    extension_strength = Dict{String, Int}()\n  \
    \  \n    for extension in extensions\n        extension_strength[extension] =\
    \ length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_class = split(extension, '_')[1]\n        \n    \
    \    strength_of_extensions += length(extension_class)\n        \n    end\n  \
    \  \n    strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \    \n    \n    if strength_of_extensions > 0\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        ", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = -1\n    \n    for extension in extensions\n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm\n            strength\
    \ = cap - sm\n        elseif sm > cap\n            strength = sm - cap\n     \
    \   else\n            strength = cap - sm\n        end\n    end\n    \n    return\
    \ class_name * \".\" * extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all lowercase letters replaced by uppercase letters.", "   \
    \ \n    extensions = sort(extensions)\n    \n    strength = extensions[1] - extensions[0]\n\
    \    \n    if strength == 0\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) ==\
    \ \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"\
    Slices\", \"Slices\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    , \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) ==\
    \ \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        \n\
    \        extensions_sorted = sort(extensions)\n        \n        index_of_first_extension\
    \ = find(extensions_sorted == extensions_sorted[1], 1)\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[index_of_first_extension]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n        \n        if strength > 0\n            break\n   \
    \     end\n    end\n    \n    \n    return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[findfirst(x -> x == extension), 1], extensions_sorted)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Burger\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Burger\", \"Pizza\"])\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Burger\", \"Pizza\", \"Chicken\"])\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Burger\", \"Pizza\", \"Chicken\",\
    \ \"Fish\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Burger\", \"Pizza\",\
    \ \"Chicken\", \"Fish\", \"Chicken\"])\n</cell>\n<code language=julia-1.5>\n@time\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Burger\", \"Pizza\", \"Chicken\", \"Fish\", \"Chicken\", \"Fish\"])\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuF", "    \n    extension_strength = Dict{String, Int}()\n \
    \   for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(lowercase(extension))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = class_name \n    for extension in sorted_extensions\n\
    \        if extension_strength[Strongest_Extension] < extension_strength[extension]\n\
    \            Strongest_Extension = extension\n        end\n    end\n    \n   \
    \ return Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Stron", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = extensions[1] - extensions[2]\n   \
    \ \n    if strength == 0 \n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns a string with the first letter of each string\
    \ in the list concatenated with the first letter of the string in the list. \n\
    For example, if the list is [\"Hello\", \"World\"] and the string is \"HelloWorld\"\
    \ then you should return \"HellWrd\".", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        \n        extensions_sorted = sort(extensions)\n        \n        strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n        \n        if strength_of_extension\
    \ == -1\n            return class_name\n        else\n            \n         \
    \   extensions_sorted = sort(extensions)\n            \n            strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n            \n            if\
    \ strength_of_extension == -1\n                return class_name\n           \
    \ else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                \n                if strength_of_extension\
    \ == -1\n                    return class_name\n                else\n       \
    \             \n                    extensions_sorted = sort(extensions)\n   \
    \                 \n                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                    \n                    if strength_of_extension\
    \ == -1\n                        return class_name\n                    else\n\
    \                        \n                        extensions_sorted = sort(extensions)\n\
    \                        \n                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                        \n                        if\
    \ strength_of_extension == -1\n                            return class_name\n\
    \                        else\n                            \n                \
    \            extensions_sorted = sort(extensions)\n                          \
    \  \n                            strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength_of_extension == -1\n                                return\
    \ class_name\n                            else\n                             \
    \   \n                                extensions_sorted = sort(extensions)\n \
    \                               \n                                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \    \n                                if strength_of_extension == -1\n      \
    \                              return class_name\n                           \
    \     else\n                                    \n                           \
    \         extensions_sorted = sort(extensions)\n                             \
    \       \n                                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                    \n             \
    \                       if strength_of_extension == -1\n                     \
    \                   return class_name\n                                    else\n\
    \                                        \n                                  \
    \      extensions_sorted = sort(extensions)\n                                \
    \        \n                                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength_of_extension == -1\n             \
    \                               return class_name\n                          \
    \              else\n                                            \n          \
    \                                  extensions_sorted = sort(extensions)\n    \
    \                                        \n                                  \
    \          strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                                            \n                              \
    \              if strength_of_extension == -1\n                              \
    \                  return class_name\n                                       \
    \     else\n                                                \n               \
    \                                 extensions_sorted = sort(extensions)\n     \
    \                                           \n                               \
    \                 strength_of_extension = extensions_sorted", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for ext in extensions\
    \ \n        \n        cap = length(ext) - length(replace(ext, upper(ext), \"\"\
    ))\n        sm = length(replace(ext, lowercase (ext), \"\"))\n        \n     \
    \   if cap > sm\n            strength = cap - sm\n        else\n            strength\
    \ = sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions[findfirst(x\
    \ -> strength == -1, extensions)]\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    str = Strongest_Extension(\"Slices\", extensions)\n    \nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ where all vowels are replaced by an underscore. \nExample: \n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n    \"Hello World\" -> \"Hello_World\"\n    \"Hello World\"\
    \ -> \"Hello_World\"\n", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = -1 # default strength\n    \n    for ext in extensions \n        \n      \
    \  cap = length(ext) - length(replace(ext, upper(ext), \"\"))\n        sm = length(replace(ext,\
    \ lower(ext), \"\"))\n        \n        strength = strength + (cap - sm)\n   \
    \ end\n    \n    \n    if strength == -1\n        error(\"No extensions found\"\
    )\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n \
    \   \n    strength = -1\n    \n    for extension in extensions\n        \n   \
    \     cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        else\n\
    \            strength = sm\n        end\n        \n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliC",
  "    \n    extension_strength = Dict{String, Int}()\n    for extension in extensions\n\
    \        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
  "    \n    extensions_sorted = sort(extensions)\n    \n    strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n    \n    if strength == -1\n        \n        strength\
    \ = extensions_sorted[1] - extensions_sorted[0]\n        \n    end\n    \n   \
    \ \n    if strength == 0\n        \n        strength = extensions_sorted[1] -\
    \ extensions_sorted[2]\n        \n    end\n    \n    if strength == 1\n      \
    \  \n        strength = extensions_sorted[1] - extensions_sorted[0]\n        \n\
    \    end\n    \n    if strength == 2\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 3\n    \
    \    \n        strength = extensions_sorted[1] - extensions_sorted[0]\n      \
    \  \n    end\n    \n    if strength == 4\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 5\n    \
    \    \n        strength = extensions_sorted[1] - extensions_sorted[0]\n      \
    \  \n    end\n    \n    if strength == 6\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 7\n    \
    \    \n        strength = extensions_sorted[1] - extensions_sorted[0]\n      \
    \  \n    end\n    \n    if strength == 8\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 9\n    \
    \    \n        strength = extensions_sorted[1] - extensions_sorted[0]\n      \
    \  \n    end\n    \n    if strength == 10\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 11\n   \
    \     \n        strength = extensions_sorted[1] - extensions_sorted[0]\n     \
    \   \n    end\n    \n    if strength == 12\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 13\n   \
    \     \n        strength = extensions_sorted[1] - extensions_sorted[0]\n     \
    \   \n    end\n    \n    if strength == 14\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 15\n   \
    \     \n        strength = extensions_sorted[1] - extensions_sorted[0]\n     \
    \   \n    end\n    \n    if strength == 16\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    if strength == 17\n   \
    \     \n        strength = extensions_sorted[1] - extensions_sorted[0]\n     \
    \   \n    end\n    \n    if strength == 18\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    extension_strength = Dict{String, Int}()\n    \n    for extension in\
    \ extensions\n        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(values(extension_strength)))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"FedFood\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"FedFood\", \"FedFood\"\
    ]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"FedFood\", \"FedFood\", \"FedFood\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\"]) == \"Slices.StuFfed\"\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\"\
    ]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"FedFood\", \"FedFood\", \"FedFood\", \"FedFood\"\
    , \"FedFood\", \"FedFood\", \"FedFood\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliC", "    \n    extensions = sort(extensions)\n    \n  \
    \  strength = extensions[1] - extensions[2]\n    \n    if strength == 0\n    \
    \    \n        return class_name\n        \n    elseif strength == 1\n       \
    \ \n        return class_name + extensions[2]\n        \n    elseif strength ==\
    \ 2\n        \n        return class_name + extensions[1]\n        \n    elseif\
    \ strength == 3\n        \n        return class_name + extensions[0]\n       \
    \ \n    elseif strength == 4\n        \n        return class_name + extensions[1]\
    \ + extensions[2]\n        \n    elseif strength == 5\n        \n        return\
    \ class_name + extensions[0] + extensions[1]\n        \n    elseif strength ==\
    \ 6\n        \n        return class_name + extensions[0] + extensions[1] + extensions[2]\n\
    \        \n    elseif strength == 7\n        \n        return class_name + extensions[0]\
    \ + extensions[1] + extensions[2] + extensions[3]\n        \n    elseif strength\
    \ == 8\n        \n        return class_name + extensions[0] + extensions[1] +\
    \ extensions[2] + extensions[3] + extensions[4]\n        \n    elseif strength\
    \ == 9\n        \n        return class_name + extensions[0] + extensions[1] +\
    \ extensions[2] + extensions[3] + extensions[4] + extensions[5]\n        \n  \
    \  elseif strength == 10\n        \n        return class_name + extensions[0]\
    \ + extensions[1] + extensions[2] + extensions[3] + extensions[4] + extensions[5]\
    \ + extensions[6]\n        \n    elseif strength == 11\n        \n        return\
    \ class_name + extensions[0] + extensions[1] + extensions[2] + extensions[3] +\
    \ extensions[4] + extensions[5] + extensions[6] + extensions[7]\n        \n  \
    \  elseif strength == 12\n        \n        return class_name + extensions[0]\
    \ + extensions[1] + extensions[2] + extensions[3] + extensions[4] + extensions[5]\
    \ + extensions[6] + extensions[7] + extensions[8]\n        \n    elseif strength\
    \ == 13\n        \n        return class_name + extensions[0] + extensions[1] +\
    \ extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6]\
    \ + extensions[7] + extensions[8] + extensions[9]\n        \n    elseif strength\
    \ == 14\n        \n        return class_name + extensions[0] + extensions[1] +\
    \ extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6]\
    \ + extensions[7] + extensions[8] + extensions[9] + extensions[10]\n        \n\
    \    elseif strength == 15\n        \n        return class_name + extensions[0]\
    \ + extensions[1] + extensions[2] + extensions[3] + extensions[4] + extensions[5]\
    \ + extensions[6] + extensions[7] + extensions[8] + extensions[9] + extensions[10]\
    \ + extensions[11]\n        \n    elseif strength == 16\n        \n        return\
    \ class_name + extensions[0]", "    \n    extension_strength = Dict{String,Int}()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"]) == \"Slices.SErviNGSliCes\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\",\
    \ \"StuFfed\", \"SErviNGSliCes\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\n@assert\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\",\
    \ \"StuFfed\", \"SErviNGSliCes\", \"", "    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"\
    Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErvi", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for ext in extensions\n        \n        if\
    \ isupper(ext[length(ext)-1])\n            \n            strength = strength +\
    \ length(ext) - length(ext[length(ext)-1])\n            \n        elseif islower(ext[length(ext)-1])\n\
    \            \n            strength = strength + length(ext) - length(ext[length(ext)-1])\n\
    \            \n        else\n            \n            strength = strength + length(ext)\
    \ - length(ext[length(ext)-1])\n            \n        end\n        \n    end\n\
    \    \n    if strength > 0\n        \n        return class_name * \".\" .* extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(x -> x == extensions[findfirst(x\
    \ -> x == extensions[findfirst(x -> x == extensions[findfirst(", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n    end\n    \n    if strength > 0\n        \n        str\
    \ = class_name \n        \n        for extension in extensions_sorted\n      \
    \      \n            cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n            sm = length(replace(extension, lowercase(extension), \"\"\
    ))\n            \n            if cap > sm\n                str = str[end-1:end]\n\
    \            elseif sm > cap\n                str = str[end-1:end]\n         \
    \   else\n                str = str[end-1:end]\n            end\n        end\n\
    \        \n        return str\n    else\n        return class_name\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"\
    Slices\", extensions)\n    \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a list of extensions and returns the string with the\
    \ extensions replaced by the extensions strength -1. \nExample: \n    \n    str\
    \ = \"Slices\"\n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n\
    \    \n    str = ReplaceExtensions(str, extensions)\n    \n    str = Slices\n\
    \    \n</text>\n<code language=julia-1.5>", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for ext in extensions \n        \n       \
    \ cap = length(ext)\n        sm = length(class_name)\n        \n        if cap\
    \ - sm > strength\n            strength = cap - sm\n        end\n    end\n   \
    \ \n    return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\",\
    \ [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\"])\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Burger\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Burger\", \"\
    Burger\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Burger\", \"Burger\"\
    , \"Burger\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Burger\", \"\
    Burger\", \"Burger\", \"Burger\"])\n</cell>\n<code language=julia-1.5>\n@time\
    \ Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Burger\", \"Burger\", \"Burger\", \"Burger\", \"Burger\"])\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Fed\", \"Burger\", \"Burger\", \"Burger\", \"Burger\"\
    , \"Burger\", \"Burger\"])\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for ext in extensions \n        \n      \
    \  cap = length(ext) - length(replace(ext, upper(ext), \"\"))\n        sm = length(replace(ext,\
    \ lower(ext), \"\"))\n        \n        if cap > sm \n            strength = cap\
    \ - sm\n            break\n        end\n    end\n    \n    if strength == -1\n\
    \        error(\"No extension has the strongest strength\")\n    end\n    \n \
    \   return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class\
    \ name and a vector of extensions. \nThe function should return the name of the\
    \ class with the strongest extension.\nThe function should raise an error if the\
    \ class name or the vector of extensions is empty.\nExample: \n    Strongest_Extension(\"\
    Slices\", [])\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\n    Strongest_Extension(\"Slices\", [])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n    Stron", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[0]\n        \n    end\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n \
    \   \n    strength = extensions.length\n    \n    for extension in extensions\n\
    \        if isupper(extension)\n            strength = strength - 1\n        elseif\
    \ islower(extension)\n            strength = strength + 1\n        end\n    end\n\
    \    \n    return class_name * \".\" .* extensions[strength]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called \"Strongest_Extension\" that returns the strongest\
    \ extension \nof a given class name and the list of extensions. \nThe function\
    \ should take as input a class name and a vector of extensions. \nThe function\
    \ should return the strongest extension of the class name and the \nlist of extensions.\
    \ \nThe function should return an error if the class name or the vector of extensions\
    \ \nis empty. \nThe function should return an error if the class name contains\
    \ any uppercase letters \nand no lowercase letters. \nThe function should return\
    \ an error if the class name contains any lowercase letters \nand no uppercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any lowercase letters \nand any uppercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any uppercase letters \nand any lowercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any uppercase letters \nand any lowercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any uppercase letters \nand any lowercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any uppercase letters \nand any lowercase\
    \ letters. \nThe function should return an error if the class name contains any\
    \ uppercase letters \nand any lowercase letters. \nThe function should return\
    \ an error if the class name contains any uppercase letters \nand any lowercase\
    \ letters. \nThe function ", "    \n    extension_strength = zeros(length(extensions))\n\
    \    \n    for i = 1:length(extensions)\n        extension_strength[i] = length(extension_strength)\
    \ - length(findall(extension_strength, extensions[i])) \n    end\n    \n    extension_strength\
    \ = sort(extension_strength)\n    \n    Strongest_Extension = extensions[extension_strength[1]]\n\
    \    \n    for i = 2:length(extension_strength)\n        if extension_strength[i]\
    \ > extension_strength[i-1]\n            Strongest_Extension = extensions[extension_strength[i]]\n\
    \            break\n        end\n    end\n    \n    return Strongest_Extension\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(class_name\
    \ = \"Slices\", extensions = extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes as input a vector of strings and a vector of integers,\
    \ and returns a vector of strings. \nThe function should return the same vector\
    \ as input, but with each string replaced by the corresponding integer in the\
    \ input vector. \nFor example, if the input vector is [\"a\", \"b\", \"c\"] and\
    \ the integer vector is [1, 3, 2], the function should return [\"1\", \"3\", \"\
    2\"].\nThe function should work for any number of strings and integers. \nThe\
    \ function should work for vectors of strings and vectors of integers. \nThe function\
    \ should work for vectors of strings and vectors of vectors of strings. \nThe\
    \ function should work for vectors of strings and vectors of vectors of integers.\
    \ \nThe function should work for vectors of strings and vectors of vectors of\
    \ vectors of strings. \nThe function should work for vectors of strings and vectors\
    \ of vectors of vectors of integers. \nThe function should work for vectors of\
    \ strings and vectors of vectors of vectors of vectors of strings. \nThe function\
    \ should work for vectors of strings and vectors of vectors of vectors of vectors\
    \ of integers. \nThe function should work for vectors of strings and vectors of\
    \ vectors of vectors of vectors of vectors of strings. \nThe function should work\
    \ for vectors of strings and vectors of vectors of vectors of vectors of vectors\
    \ of integers. \nThe function should work for vectors of strings and vectors of\
    \ vectors of vectors of vectors of vectors of vectors of strings. \nThe function\
    \ should work for vectors of strings and vectors of vectors of vectors of vectors\
    \ of vectors of vectors of integers. \nThe function should work for vectors of\
    \ strings and vectors of vectors of vectors of vectors of vectors of vectors of\
    \ vectors of strings. \nThe function should work for vectors of strings and vectors\
    \ of vectors of vectors of vectors of vector", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    extensions_sorted = sort(extensions)\n    \n    strength_of_extensions\
    \ = 0.0\n    \n    for extension in extensions_sorted\n        \n        extension_uppercase_letters\
    \ = length(extension) - length(extension.upper)\n        extension_lowercase_letters\
    \ = length(extension) - length(extension.lower)\n        \n        strength_of_extensions\
    \ += extension_uppercase_letters - extension_lowercase_letters\n        \n   \
    \ end\n    \n    strength_of_extensions = strength_of_extensions/length(extensions_sorted)\n\
    \    \n    if strength_of_extensions == 0.0\n        return class_name\n    end\n\
    \    \n    strength_of_extensions = -strength_of_extensions\n    \n    if strength_of_extensions\
    \ > 0\n        return class_name * \".\" .* extensions_sorted[findfirst(x -> x\
    \ == extensions_sorted[findfirst(x -> x == strength_of_extensions)], extensions_sorted)]\n\
    \    else\n        return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == strength_of_extensions, extensions_sorted)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input\
    \ a vector of strings and returns a vector of the same length with all strings\
    \ replaced by their lengths.\nExample: \n    \n    strings = [\"a\", \"b\", \"\
    c\"]\n    \n    lengths(strings)\n    \nshould return [3, 3]", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for ext in extensions\
    \ \n        \n        cap = length(ext) - length(replace(ext, upper(ext), \"\"\
    ))\n        sm = length(replace(ext, lowerCase(ext), \"\"))\n        \n      \
    \  if cap > sm \n            strength = cap - sm\n            break\n        end\n\
    \    end\n    \n    if strength == -1 \n        error(\"No extension has the highest\
    \ strength\")\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes as\
    \ input a vector of strings and returns a vector of strings. \nThe function should\
    \ remove all duplicate strings from the input vector. \nThe function should return\
    \ an empty vector if there are no duplicate strings.\nThe function should return\
    \ an error if there are duplicate strings in the input vector.\nExample: \n  \
    \  \n    removeDuplicates([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])\n    returns\
    \ [\"a\", \"b\", \"c\"]\n    \n    removeDuplicates([\"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\"])\n    returns []\n    \n    removeDuplicates([\"a\", \"b\", \"\
    c\", \"a\", \"b\", \"c\"])\n    returns error(\"No duplicate strings\")\n    \n\
    </text>\n<code language=julia-1.5>", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    \n    if strength_of_extension == -1\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n", "    \n    extensions = sort(extensions)\n \
    \   \n    strength = extensions[end]-extensions[end]\n    \n    if strength ==\
    \ 0\n        return class_name\n    end\n    \n    index = findfirst(x -> strength\
    \ == extensions[end]-x, extensions)\n    \n    if index == nothing\n        return\
    \ class_name\n    end\n    \n    return class_name+\".\"+extensions[index]\nend\n\
    </cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\", extensions)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of uppercase letters in it.", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[0]\n    \n    if strength ==\
    \ 0\n        return class_name\n    end\n    \n    i = 2\n    while i <= length(extensions)\n\
    \        if extensions[i] - extensions[i-1] == strength\n            return class_name\
    \ .. \".\" .. extensions[i]\n        end\n        i = i + 1\n    end\n    \n \
    \   return class_name\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings and returns a\
    \ string that is the concatenation of all the strings in the list separated by\
    \ spaces.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions_sorted = sort(extensions)\n    \n    strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n    \n    if strength == -1\n        \n        strength\
    \ = extensions_sorted[1] - extensions_sorted[0]\n        \n    end\n    \n   \
    \ \n    if strength == 0\n        \n        return class_name\n        \n    end\n\
    \    \n    \n    if strength == 1\n        \n        return class_name .. \".\"\
    \ .. extensions_sorted[1]\n        \n    end\n    \n    \n    if strength == 2\n\
    \        \n        return class_name .. \".\" .. extensions_sorted[2]\n      \
    \  \n    end\n    \n    \n    if strength == 3\n        \n        return class_name\
    \ .. \".\" .. extensions_sorted[3]\n        \n    end\n    \n    \n    if strength\
    \ == 4\n        \n        return class_name .. \".\" .. extensions_sorted[4]\n\
    \        \n    end\n    \n    \n    if strength == 5\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[5]\n        \n    end\n    \n    \n\
    \    if strength == 6\n        \n        return class_name .. \".\" .. extensions_sorted[6]\n\
    \        \n    end\n    \n    \n    if strength == 7\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[7]\n        \n    end\n    \n    \n\
    \    if strength == 8\n        \n        return class_name .. \".\" .. extensions_sorted[8]\n\
    \        \n    end\n    \n    \n    if strength == 9\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[9]\n        \n    end\n    \n    \n\
    \    if strength == 10\n        \n        return class_name .. \".\" .. extensions_sorted[10]\n\
    \        \n    end\n    \n    \n    if strength == 11\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[11]\n        \n    end\n    \n    \n\
    \    if strength == 12\n        \n        return class_name .. \".\" .. extensions_sorted[12]\n\
    \        \n    end\n    \n    \n    if strength == 13\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[13]\n        \n    end\n    \n    \n\
    \    if strength == 14\n        \n        return class_name .. \".\" .. extensions_sorted[14]\n\
    \        \n    end\n    \n    \n    if strength == 15\n        \n        return\
    \ class_name .. \".\" .. extensions_sorted[15]\n        \n    end\n    \n    \n\
    \    if strength == 16\n        \n        return class_name .. \".\" .. extensions_sorted[16]\n\
    \        \n    end\n    \n    \n    if strength == 17\n", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = extensions[1] - extensions[2]\n   \
    \ \n    if strength == 0 \n        return class_name\n    else \n        return\
    \ class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns the string\
    \ with the longest common prefix. \nIf there is no common prefix, return an empty\
    \ string.\nFor example, if the input string is \"abcde\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"] then \nthe function should return \"ab\".\nIf the\
    \ input string is \"abcde\" and a list of strings is [\"ab\", \"cd\", \"e\", \"\
    f\"] then \nthe function should return an empty string.\nIf the input string is\
    \ \"abcde\" and a list of strings is [\"ab\", \"cd\", \"e\", \"fg\"] then \nthe\
    \ function should return \"ab\".\nIf the input string is \"abcde\" and a list\
    \ of strings is [\"ab\", \"cd\", \"ef\"] then \nthe function should return \"\
    ab\".\nIf the input string is \"abcde\" and a list of strings is [\"ab\", \"cd\"\
    , \"efg\"] then \nthe function should return \"ab\".\nIf the input string is \"\
    abcde\" and a list of strings is [\"ab\", \"cd\", \"efgh\"] then \nthe function\
    \ should return \"ab\".\nIf the input string is \"abcde\" and a list of strings\
    \ is [\"ab\", \"cd\", \"efghi\"] then \nthe function should return \"ab\".\nIf\
    \ the input string is \"abcde\" and a list of strings is [\"ab\", \"cd\", \"efghij\"\
    ] then \nthe function should return \"ab\".\nIf the input string is \"abcde\"\
    \ and a list of strings is [\"ab\", \"cd\", \"efghijk\"] then \nthe function should\
    \ return \"ab\".\nIf the input string is \"abcde\" and a list of strings is [\"\
    ab\", \"cd\", \"efghijkl\"] then \nthe function should return \"ab\".\nIf the\
    \ input string is \"abcde\" and a list of strings is [\"ab\", \"cd\", \"efghijklm\"\
    ] then \nthe function should return \"ab\".\nIf the input string is \"abcde\"\
    \ and a list of strings is [\"ab\", \"cd\", \"efghijklmn\"] then \nthe function\
    \ should return \"ab\".\nIf the input string is \"abcde\" and a list of strings\
    \ is [\"ab\", \"cd\", \"efghijklmno\"] then \nthe function should return \"ab\"\
    .", "    \n    extensions = sort(extensions)\n    \n    strength = extensions[1]\
    \ - extensions[2]\n    \n    if strength == 0\n        return class_name\n   \
    \ else\n        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns a string that\
    \ is the concatenation of all the strings in the list separated by spaces.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extension_strength\
    \ = Dict()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->x[1])\n\
    \    \n    Strongest_Extension = sorted_extensions[1][1]\n    \n    return Strongest_Extension\n\
    end\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list of\
    \ strings and returns a string that is the concatenation of all the strings in\
    \ the list separated by a single space. \nExample: \n    \n    my_string = \"\
    Hello World\"\n    my_list = [\"Hello\", \"World\"]\n    \n    function my_function(my_string::String,\
    \ my_list::Vector{String})\n    \n    end\n    \n    my_function(my_string, my_list)\
    \ should return \"Hello World\"\n    \n</text>\n<code language=julia-1.5>", " \
    \   \n    extensions_sorted = sort(extensions)\n    \n    strength = -1 \n   \
    \ \n    for extension in extensions_sorted\n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap - sm > strength\n   \
    \         strength = cap - sm\n        end\n    end\n    \n    return class_name\
    \ * \".\" * extensions_sorted[findfirst(x -> x == extensions_sorted[strength],\
    \ extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string where all vowels\
    \ are replaced by an underscore.", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        \n        strength = length(extensions_sorted)\n   \
    \     \n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    extensions_sorted = sort(extensions)\n    \n    strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n    \n    if strength == -1\n        return class_name\n\
    \    else\n        return class_name .. \".\" .. extensions_sorted[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\n@test Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.StuFfed\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    extension_strength =\
    \ Dict()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions = reverse(sorted_extensions)\n    \n \
    \   sorted_extensions = sorted_extensions[end]\n    \n    return class_name *\
    \ \".\" .* sorted_extensions\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n \
    \   Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns a string with the concatenation of the strings in the list separated\
    \ by a space. \nFor example, if the input string is \"Hello World\" and a list\
    \ of strings is [\"Hi\", \"Bye\", \"Hello\", \"World\"] then you should return\
    \ the string \"Hi Bye Hello World\".\nHint: Use a for loop.", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[0]\n    \n    if strength ==\
    \ 0\n        return class_name\n    end\n    \n    index = findfirst(x -> strength\
    \ == x[1] - x[0], enumerate(extensions))\n    \n    if index == nothing\n    \
    \    return class_name\n    end\n    \n    return class_name..extensions[index[1]]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n    extensions = [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n    \n    Strongest_Extension(\"Slices\"\
    , extensions)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string where all characters are capitalized. \nExample:\
    \ \n    \n    capitalize(\"hello\") should return \"Hello\"\n    capitalize(\"\
    helloWorld\") should return \"HelloWorld\"\n    capitalize(\"helloWorld!\") should\
    \ return \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\
    \n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"\
    helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\")\
    \ should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return\
    \ \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\
    \n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"\
    helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\")\
    \ should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return\
    \ \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\
    \n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"\
    helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\")\
    \ should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return\
    \ \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\
    \n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"\
    helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\")\
    \ should return \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return\
    \ \"HelloWorld!\"\n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\
    \n    capitalize(\"helloWorld!\") should return \"HelloWorld!\"\n    capitalize(\"\
    helloWorld!\") should return \"Hello", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    extension_strength = Dict{String,Int}()\n   \
    \ for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(replace(extension,uppercase(extension),\"\"))\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions[end]\n\
    end\n</cell>\n<code language=julia-1.0>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns a string where all vowels are\
    \ replaced by an underscore. \nExample: \n\"Hello World\" -> \"Hello_World\"\n\
    \"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello\
    \ World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\"\
    \ -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"\
    Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\
    \n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello\
    \ World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\"\
    \ -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"\
    Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\
    \n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello\
    \ World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\"\
    \ -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"\
    Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\
    \n\"Hello World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello\
    \ World\" -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World\"\
    \ -> \"Hello_World\"\n\"Hello World\" -> \"Hello_World\"\n\"Hello World", "  \
    \  \n    extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for\
    \ extension in extensions \n        \n        cap = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n        sm = length(replace(extension, lowercase(extension),\
    \ \"\"))\n        \n        if cap > sm \n            strength = cap - sm\n  \
    \          break\n        end\n    end\n    \n    if strength == -1 \n       \
    \ error(\"No extension with strength found\")\n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = sort(collect(extensions))\n    \n    strength = -1 \n\
    \    \n    for extension in extensions \n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm\n            break\n        end\n    end\n    \n    if strength ==\
    \ -1 \n        error(\"No extension with strength found\")\n    end\n    \n  \
    \  return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = sort(collect(extensions))\n    \n    strength\
    \ = -1 \n    \n    for extension in extensions \n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm\n            break\n        end\n    end\n    \n    if strength ==\
    \ -1 \n        error(\"No extension with strength found\")\n    end\n    \n  \
    \  return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = sort(collect(extensions))\n    \n    strength\
    \ = -1 \n    \n    for extension in extensions \n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm\n            break\n        end\n    end\n    \n    if strength ==\
    \ -1 \n        error(\"No extension with strength found\")\n    end\n    \n  \
    \  return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = sort(collect(extensions))", "    \n    extension_strength\
    \ = zeros(length(extensions))\n    \n    for i = 1:length(extensions)\n      \
    \  extension_strength[i] = length(findall(extensions[i], class_name))\n    end\n\
    \    \n    extension_strength = sort(extension_strength)\n    \n    if length(extension_strength)\
    \ == length(extensions)\n        return class_name\n    else\n        return class_name\
    \ * extension_strength[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns the string\
    \ with the longest common prefix. \nFor example, if the input string is \"ABCDEF\"\
    \ and a list of strings is [\"AB\", \"CDE\", \"F\"], \nthe output should be \"\
    ABC\".", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = -1 \n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = extension_upper(extension)\n        extension_lower\
    \ = extension_lower(extension)\n        \n        if extension_upper == extension_lower\n\
    \            strength = strength \n        else\n            strength = strength\
    \ + (extension_upper - extension_lower)\n        end\n    end\n    \n    return\
    \ class_name * \".\" * extensions_sorted[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called \"Strongest_Extension_With_Weight\" that does the same thing as Strongest_Extension\
    \ except that it also returns the strongest extension with its weight. \nThe weight\
    \ of an extension is given by the number of uppercase letters in the extension's\
    \ name minus the number of lowercase letters in the extension's name.\nFor example,\
    \ if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes', with weight\
    \ -1 since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\n\
    Example:\n        \"\"\"", "    \n    extension_strength = Dict{String, Int}()\n\
    \    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength), by=x->x[1])\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    extensions = sort(extensions)\n    \n    strength = extensions[1] -\
    \ extensions[2]\n    \n    if strength == 0\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[2]\n    \n    if strength ==\
    \ 0\n        return class_name\n    else\n        return class_name .. \".\" ..\
    \ extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[1] -\
    \ extensions[2]\n    \n    if strength == 0\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[2]\n    \n    if strength ==\
    \ 0\n        return class_name\n    else\n        return class_name .. \".\" ..\
    \ extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[1] -\
    \ extensions[2]\n    \n    if strength == 0\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[2]\n    \n    if strength ==\
    \ 0\n        return class_name\n    else\n        return class_name .. \".\" ..\
    \ extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[1] -\
    \ extensions[2]\n    \n    if strength == 0\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[2]\n    \n    if strength ==\
    \ 0\n        return class_name\n    else\n        return class_name .. \".\" ..\
    \ extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    \n    extensions = sort(extensions)\n    \n    strength = extensions[1] -\
    \ extensions[2]\n    \n    if strength == 0\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions[1]", "    \n    extension_strength\
    \ = zeros(length(extensions))\n    \n    for i=1:length(extensions)\n        extension_strength[i]\
    \ = length(extensions[i]) - length(replace(extensions[i], uppercase(extensions[i]),\
    \ \"\"))\n    end\n    \n    extension_strength = sort(extension_strength)\n \
    \   \n    extension_strength = extension_strength[end]\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_strength = extension_strength - 1\n    \n    if extension_strength\
    \ == 0\n        return class_name\n    end\n    \n    extension_strength = extension_strength\
    \ - 1\n    \n    if extension_strength == 0\n        return class_name\n    end\n\
    \    \n    extension_", "    \n    extensions_sorted = sort(extensions)\n    \n\
    \    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        \n        strength_of_extension = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n        \n        if strength_of_extension > strength_of_extensions\n\
    \            \n            strength_of_extensions = strength_of_extension\n  \
    \          \n        end\n    end\n    \n    \n    return class_name * \".\" *\
    \ extensions_sorted[findfirst(x -> strength_of_extensions == length(x), extensions_sorted)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns a string where all characters\
    \ are capitalized.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extension_strength = Dict{String,Int}()\n\
    \    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(values(extension_strength)))\n\
    \    \n    sorted_extensions[end][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"Slices\", extensions)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes as input a vector of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the input vector except the string that comes first in the input vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    ] then your function should return [\"a\", \"b\", \"c\", \"f\"]. \nExample: \n\
    \        \"\"\"", "    \n    extensions = sort(extensions)\n    \n    strength\
    \ = extensions.length\n    \n    if strength == 1\n        return class_name\n\
    \    end\n    \n    strength = strength - 1\n    \n    i = findfirst(x -> x.upper()\
    \ == extensions[strength], class_name) - 1 \n    \n    if i == -1\n        return\
    \ class_name\n    end\n    \n    return class_name[i] + Strongest_Extension(extensions[(i+1):end],\
    \ extensions)\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    \n  \
    \  extensions = sort(collect(extensions))\n    \n    strength = extensions.length\n\
    \    \n    if strength == 1\n        return class_name\n    end\n    \n    strength\
    \ = strength - 1\n    \n    i = findfirst(x -> x.upper() == extensions[strength],\
    \ class_name) - 1 \n    \n    if i == -1\n        return class_name\n    end\n\
    \    \n    return class_name[i] + Strongest_Extension(extensions[(i+1):end], extensions)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of uppercase letters in it.", "    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(lowercase(extension))\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n",
  "    \n    extension_strength = Dict()\n    for extension in extensions\n      \
    \  extension_strength[extension] = length(extension) - length(extension.lowercase)\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for ext\
    \ in extensions \n        \n        cap = length(ext) - length(replace(ext, upper(ext),\
    \ \"\"))\n        sm = length(replace(ext, lower(ext), \"\"))\n        \n    \
    \    if cap > sm \n            strength = cap - sm \n            break\n     \
    \   end\n    end\n    \n    if strength == -1 \n        error(\"No extension with\
    \ strongest strength found\") \n    end\n    \n    str = class_name \n    \n \
    \   for ext in extensions \n        \n        cap = length(ext) - length(replace(ext,\
    \ upper(ext), \"\"))\n        sm = length(replace(ext, lower(ext), \"\"))\n  \
    \      \n        if cap > sm \n            str = str + \".\" + ext \n        \
    \    break\n        end\n    end\n    \n    return str\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    str = Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"])\n    \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string.\nFor example,\
    \ if the string is: \"The quick brown fox jumps over the lazy dog\" and the substring\
    \ is: \"fox\" then your function should return 3.\nHint: Use a for loop to iterate\
    \ over the string.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    extension_strength = Dict{String, Int}()\n    for extension in extensions\n\
    \        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n\
    \    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a list of strings and returns the string with the longest common prefix among\
    \ the list of strings. \nFor example, if the list of strings is [\"abc\", \"def\"\
    , \"ghi\", \"jkl\"] then the function should return \"abc\".\nIf the list of strings\
    \ is [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"] then the function should return\
    \ \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"\
    mno\", \"pqr\"] then the function should return \"abc\".\nIf the list of strings\
    \ is [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"] then the\
    \ function should return \"abc\".\nIf the list of strings is [\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vw\"] then the function should\
    \ return \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"pqr\", \"stu\", \"vw\", \"xyz\"] then the function should return\
    \ \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"\
    mno\", \"pqr\", \"stu\", \"vw\", \"xyz\", \"abc\"] then the function should return\
    \ \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"\
    mno\", \"pqr\", \"stu\", \"vw\", \"xyz\", \"abc\", \"def\"] then the function\
    \ should return \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"\
    , \"jkl\", \"mno\", \"pqr\", \"stu\", \"vw\", \"xyz\", \"abc\", \"def\", \"ghi\"\
    ] then the function should return \"abc\".\nIf the list of strings is [\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vw\", \"xyz\", \"abc\"\
    , \"def\", \"ghi\", \"jkl\"] then the function should return \"abc\".\nIf the\
    \ list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = -1\n    \n    for extension in extensions\n\
    \        \n        extension_class = extension_class(class_name, extension)\n\
    \        \n        if extension_class.strength > strength\n            strength\
    \ = extension_class.strength\n        end\n    end\n    \n    return class_name\n\
    end", "    \n    extensions = sort(extensions)\n    \n    strength = extensions[1]\
    \ - extensions[2]\n    \n    if strength == 0\n        return class_name\n   \
    \ else\n        return class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"]) ==\
    \ \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n    \n\
    \    strength = -1\n    \n    for extension in extensions_sorted\n        \n \
    \       extension_upper = uppercase(extension)\n        extension_lower = lowercase(extension)\n\
    \        \n        if extension_upper == extension_lower\n            strength\
    \ += 1\n        elseif strength > 0\n            break\n        else\n       \
    \     strength = 0\n        end\n    end\n    \n    if strength == 0\n       \
    \ error(\"No extensions match the given class name\")\n    end\n    \n    extensions_sorted\
    \ = extensions_sorted[strength]\n    \n    return class_name * \".\" .* join(extensions_sorted,\
    \ \".\")\nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns the string with the longest common prefix. \nThe function should return\
    \ the string \"Slices\" if the given string is the prefix of any of the strings\
    \ in the list.\nIf the given string does not have a common prefix, you should\
    \ return an empty string.\nExample: \n    \n    prefix(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) should return \"Slices\"\n    prefix(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\"]) should return \"\"\n    prefix(\"Slices\", [\"StuFfed\"\
    ]) should return \"\"\n    prefix(\"Slices\", [\"SErviNGSliCes\"]) should return\
    \ \"Slices\"\n    prefix(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Slices\"]) should return \"Slices\"\n    prefix(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"]) should return \"Slices\"\n\
    \    prefix(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\"\
    , \"Slices\", \"Slices\"]) should return \"Slices\"\n    prefix(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\",\
    \ \"Slices\"]) should return \"Slices\"\n    prefix(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"\
    Sli", "    \n    extension_strength = Dict{String,Int}()\n    for extension in\
    \ extensions\n        extension_strength[extension] = length(extension) - length(replace(extension,uppercase(extension),\"\
    \"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    extension_strength =\
    \ Dict{String,Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    extensions = sort(extensions)\n    \n   \
    \ strength = extensions[1] - extensions[0]\n    \n    if strength == 0\n     \
    \   return class_name\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    extension_strengths = Dict{String, Int}()\n    for extension in extensions\
    \ \n        extension_strengths[extension] = count_letters(extension) - count_letters(extension)\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strengths.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 # default strength\n    \n    for extension in extensions\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"]) ==\
    \ \"Slices.Fed\"\n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"Fed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) == \"Slices.Fed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\", \"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions\
    \ = sort(extensions)\n    \n    strength = extensions[1] - extensions[0]\n   \
    \ \n    if strength == 0 \n        error(\"No extensions found\")\n    end\n \
    \   \n    \n    if strength > 0\n        \n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n", "    \n  \
    \  extensions = sort(extensions)\n    \n    strength = -1 \n    \n    for extension\
    \ in extensions \n        \n        extension_class = split(extension, \"\")[1]\n\
    \        \n        if extension_class == class_name\n            \n          \
    \  strength = length(extension) - length(split(extension, \"\")[2])\n        \
    \    \n            break\n        end\n    end\n    \n    if strength == -1\n\
    \        \n        error(\"No extension with that name\")\n    end\n    \n   \
    \ extension_class = split(extensions[strength], \"\")[1]\n    \n    return extension_class\
    \ + \".\" + extensions[strength]\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ begin\n    \n    extensions = sort(extensions)\n    \n    strength = -1 \n \
    \   \n    for extension in extensions \n        \n        extension_class = split(extension,\
    \ \"\")[1]\n        \n        if extension_class == class_name\n            \n\
    \            strength = length(extension) - length(split(extension, \"\")[2])\n\
    \            \n            break\n        end\n    end\n    \n    if strength\
    \ == -1\n        \n        error(\"No extension with that name\")\n    end\n \
    \   \n    extension_class = split(extensions[strength], \"\")[1]\n    \n    return\
    \ extension_class + \".\" + extensions[strength]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = sort(extensions)\n    \n    strength = -1\
    \ \n    \n    for extension in extensions \n        \n        extension_class\
    \ = split(extension, \"\")[1]\n        \n        if extension_class == class_name\n\
    \            \n            strength = length(extension) - length(split(extension,\
    \ \"\")[2])\n            \n            break\n        end\n    end\n    \n   \
    \ if strength == -1\n        \n        error(\"No extension with that name\")\n\
    \    end\n    \n    extension_class = split(extensions[strength], \"\")[1]\n \
    \   \n    return extension_class + \".\" + extensions[strength]\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        extension_class = split(extension, \"\")[1]\n        \n        if extension_class\
    \ == class_name\n            \n            strength = length(extension) - length(split(extension,\
    \ \"\")[2])\n            \n            break\n        end\n    end\n    \n   \
    \ if strength == -1\n        \n        error(\"No extension with that name\")\n\
    \    end\n    \n    extension_class = split(extensions[strength], \"\")[1]\n \
    \   \n    return extension_class + \".\" + extensions[strength]\nend\n</cell>\n\
    <code language=juli", "    \n    extensions_sorted = sort(extensions)\n    \n\
    \    strength = -1\n    \n    for extension in extensions_sorted\n        \n \
    \       if isupper(extension[1])\n            \n            strength = strength\
    \ + length(extension) - length(extension[1])\n            \n        elseif islower(extension[1])\n\
    \            \n            strength = strength + length(extension) - length(extension[1])\n\
    \            \n        else\n            \n            strength = strength + length(extension)\
    \ - length(extension[1])\n            \n        end\n        \n    end\n    \n\
    \    if strength > 0\n        \n        return class_name * \".\" .* extensions_sorted[end]\n\
    \        \n    else\n        \n        return class_name\n        \n    end\n\
    \    \nend\n</cell>\n<code language=julia-1.4>\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\
    \n@assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\",\
    \ \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\", [\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\",\
    \ \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Ham\", \"Ham\", \"Ham\", \"Ham\"\
    , \"Ham\", \"Ham\", \"Ham\"]) == \"Slices.StuFfed\"\n@assert Stron", "    \n \
    \   extension_strength = Dict{String, Int}()\n    \n    for extension in extensions\
    \ \n        extension_strength[extension] = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of extensions and returns\
    \ the string with the extensions replaced by the extensions with the strongest\
    \ strength.\nExample: \n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) should return \"Slices.SErviNGSliCes\".\n    StrongestExtension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Fed\"]) should return\
    \ \"Slices.SErviNGSliCes.Fed\".\n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Fed\", \"Fed\"]) should return \"Slices.SErviNGSliCes.Fed.Fed\"\
    .\n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\"]) should return \"Slices.SErviNGSliCes.Fed.Fed.Fed\"\
    .\n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) should return \"Slices.SErviNGSliCes.Fed.Fed.Fed.Fed\"\
    .\n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"Fed\"]) should return \"Slices.SErviNGSliCes.Fed.Fed.Fed.Fed.Fed\"\
    .\n    StrongestExtension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"Fed\", \"Fed\", \"Fed\", \"Fed\", \"", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    for extension in extensions_sorted\n        strength_sum\
    \ += length(extension) - length(replace(extension, uppercase(extension), \"\"\
    ))\n    end\n    \n    strength_sum == 0 ? return \"NoExtension\" : class_name[endswith(class_name,\
    \ extensions_sorted[end])]\n    \n    strength_sum < 0 ? return \"NoExtension\"\
    \ : class_name[endswith(class_name, extensions_sorted[end])]\n    \n    strength_sum\
    \ > 0 ? return class_name[endswith(class_name, extensions_sorted[end])] : class_name\n\
    end\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n@time begin\n    Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time ", "    \n    extensions = sort(extensions)\n    \n    strength = -1\n \
    \   \n    for extension in extensions\n        \n        cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n        sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n        \n        if cap > sm\n            strength\
    \ = cap - sm\n        else\n            strength = sm\n        end\n    end\n\
    \    \n    if strength > 0\n        \n        str = class_name \n        \n  \
    \      for extension in extensions\n            \n            cap = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n            sm = length(replace(extension,\
    \ lowercase(extension), \"\"))\n            \n            if cap > sm\n      \
    \          str = str + \".\" + extension\n            else\n                str\
    \ = str + \".\" + extension\n            end\n        end\n        \n        return\
    \ str\n        \n    else\n        return class_name\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time begin\n    \n    extensions = [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]\n    \n    str = Strongest_Extension(\"Slices\", extensions)\n\
    \    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a list of strings as arguments and returns a string that is the concatenation\
    \ of all the strings in the list separated by spaces.", "    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength == -1\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where all characters are capitalized.",
  "    \n    extensions = sort(extensions)\n    \n    strength = extensions[1] - extensions[0]\n\
    \    \n    if strength == 0\n        return class_name\n    else\n        return\
    \ class_name .. \".\" .. extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Example: \n    \n    count_upper(\"ABC\") should return 3\n    count_upper(\"\
    aBc\") should return 2\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"aBcD\") should return 0\n    count_upper(\"\
    aBcD\") should return 0\n    count_upper(\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    extension_strength = Dict{String,Int}()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(replace(extension, uppercase(extension), \"\"))\n    end\n    \n  \
    \  sorted_extensions = sort(collect(extension_strength.values))\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = Dict{String, Int}()\n    \n    for extension\
    \ in extensions_sorted\n        \n        extension_letters = split(extension,\
    \ '_')\n        \n        extension_letters_count = length(extension_letters)\n\
    \        \n        extension_letters_cap = sum(map(x -> x == uppercase(x), extension_letters))\n\
    \        \n        extension_letters_sm = sum(map(x -> x == lowercase(x), extension_letters))\n\
    \        \n        strength_of_extensions[extension] = extension_letters_cap -\
    \ extension_letters_sm\n        \n    end\n    \n    strength_of_extensions_sorted\
    \ = sort(strength_of_extensions, by = x -> -x)\n    \n    strength_of_extensions_sorted\
    \ = first(strength_of_extensions_sorted)\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for ext in extensions \n        \n      \
    \  cap = length(ext) - length(replace(ext, upper(ext), \"\"))\n        sm = length(replace(ext,\
    \ lowerCase(ext), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm \n            break\n        end\n    end\n    \n    \n    if strength\
    \ == -1 \n        error(\"No extension has the strongest strength.\")\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    extension_strength = Dict{String,Int}()\n    \n    for extension in\
    \ extensions \n        extension_strength[extension] = length(extension) - length(extension.lowercase)\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    return class_name * \".\" .* sorted_extensions[1]\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns a string with the first letter of each string in the list concatenated\
    \ with the rest of the strings in the list.\nFor example, if the input string\
    \ is \"abc\" and a list of strings is [\"def\", \"ghi\", \"jkl\"] then you should\
    \ return \"adefghijkl\".", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
