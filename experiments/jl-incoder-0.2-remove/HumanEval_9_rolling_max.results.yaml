language: jl
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_result\
    \ = append(rolling_max_result, maximum(rolling_max_result, number))\n    end\n\
    \    \n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(numbers)\n</cell>\n<text>\nExercise 3: Rolling minimum\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ly90ymz.jl:14\nin expression starting at\
    \ /tmp/tmp1ly90ymz.jl:14\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(n))\n    end\n    \n    return rolling_max_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcksf0_xy.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpcksf0_xy.jl:21\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n   Evaluated: [4, 3, 2, 1] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcksf0_xy.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcksf0_xy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcksf0_xy.jl:22\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 2, 3, 100, 3] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcksf0_xy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcksf0_xy.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzew2e8y5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpzew2e8y5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzew2e8y5.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzew2e8y5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[5:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[9:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[13:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[17:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[21:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[25:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n\
    \    rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplxgs23cg.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplxgs23cg.jl:1\n\
    in expression starting at /tmp/tmplxgs23cg.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n\
    </cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvshky4m.jl:14\nin expression starting at\
    \ /tmp/tmpsvshky4m.jl:14\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums.append(maximum(n))\n    end\n  \
    \  \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfabmsx5o.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpfabmsx5o.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpfabmsx5o.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfabmsx5o.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfabmsx5o.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfabmsx5o.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpfabmsx5o.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfabmsx5o.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfabmsx5o.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfabmsx5o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpfabmsx5o.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfabmsx5o.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfabmsx5o.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_result\
    \ = rolling_max_result .+ number\n    end\n    \n    return rolling_max_result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpym_8qn8m.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpym_8qn8m.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym_8qn8m.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym_8qn8m.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpym_8qn8m.jl:21\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym_8qn8m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym_8qn8m.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpym_8qn8m.jl:22\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: Int64[] == [3, 3, 3, 100, 100]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym_8qn8m.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym_8qn8m.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp31h7niaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp31h7niaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnus4fn7m.jl:16\nin expression starting at\
    \ /tmp/tmpnus4fn7m.jl:16\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for number in numbers\n        maximums.push(maximum(numbers))\n  \
    \  end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sqai0vq.jl:14\nin expression starting at\
    \ /tmp/tmp9sqai0vq.jl:14\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3.3\nWrite a function that generates the cumulative\
    \ sum of a given vector of integers. \nThe cumulative sum should start from 0.\n\
    The function should return a new vector of integers containing the cumulative\
    \ sum of the given vector.\nThe function should work for vectors of any length.\n\
    The function should work for vectors of any type of elements.\nThe function should\
    \ work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtgb6g2g.jl:11\nin expression starting at\
    \ /tmp/tmpjtgb6g2g.jl:11\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_list[i] = max(numbers[i-1], numbers[i])\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a vector with all\
    \ the prime numbers up to a given number. \nThe function should take as input\
    \ a number $n$ and return $n$ if $n$ is a prime number, otherwise it should return\
    \ an empty vector.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0chkffsg.jl:12\nin expression starting at\
    \ /tmp/tmp0chkffsg.jl:12\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiwmbh_vu.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpiwmbh_vu.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpiwmbh_vu.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpiwmbh_vu.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpiwmbh_vu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiwmbh_vu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpiwmbh_vu.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpiwmbh_vu.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpiwmbh_vu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiwmbh_vu.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1]) \n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[5:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[9:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[13:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[17:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[21:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[25:end])\n\
    \    rolling_max_list = rolling_max_list \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp75fog4ka.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp75fog4ka.jl:1\n\
    in expression starting at /tmp/tmp75fog4ka.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6pb23tsl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6pb23tsl.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6pb23tsl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6pb23tsl.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6pb23tsl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6pb23tsl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6pb23tsl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6pb23tsl.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6pb23tsl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6pb23tsl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzew2e8y5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpzew2e8y5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzew2e8y5.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzew2e8y5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpncl0uxl3.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpncl0uxl3.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpncl0uxl3.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncl0uxl3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpncl0uxl3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpncl0uxl3.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncl0uxl3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpncl0uxl3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpncl0uxl3.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnc"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyvynjvy7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyvynjvy7.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyvynjvy7.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyvynjvy7.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyvynjvy7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyvynjvy7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyvynjvy7.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyvynjvy7.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyvynjvy7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyvynjvy7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(numbers[i:i+1]))\n    end\n    \n    return\
    \ rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm7j3vm39.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpm7j3vm39.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpm7j3vm39.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm7j3vm39.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm7j3vm39.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpm7j3vm39.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpm7j3vm39.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm7j3vm39.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm7j3vm39.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpm7j3vm39.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number > maximum\n            maximum\
    \ = number\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0angou5g.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0angou5g.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0angou5g.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0angou5g.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0angou5g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0angou5g.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0angou5g.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0angou5g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0angou5g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0angou5g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = []\n    \n    for n in numbers\n        rolling_max_array.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwtcz0dfa.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwtcz0dfa.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwtcz0dfa.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwtcz0dfa.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwtcz0dfa.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwtcz0dfa.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwtcz0dfa.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d1qi7bt.jl:16\nin expression starting at\
    \ /tmp/tmp_d1qi7bt.jl:16\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers)+1)\n    rolling_max_array[1] = numbers[1]\n    \n  \
    \  for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ a vector with rolling mean of given vector until given moment in the sequence.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96nu_5na.jl:15\nin expression starting at\
    \ /tmp/tmp96nu_5na.jl:15\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = rolling_max\
    \ .+ [rolling_max[n]]\n    end\n    \n    return rolling_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjdt06yqs.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpjdt06yqs.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjdt06yqs.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjdt06yqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjdt06yqs.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpjdt06yqs.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjdt06yqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjdt06yqs.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjdt06yqs.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjd"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers)) \n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1], numbers[i])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8bi0me2p.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp8bi0me2p.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8bi0me2p.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8bi0me2p.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8bi0me2p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8bi0me2p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp8bi0me2p.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8bi0me2p.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8bi0me2p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8bi0me2p.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8bi0me2p.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8bi0me2p.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp31h7niaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp31h7niaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for n in numbers\n        rolling_max_elements.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_elements\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3215tn7h.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp3215tn7h.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3215tn7h.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3215tn7h.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp3215tn7h.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3215tn7h.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3215tn7h.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates the rolling minimum\
    \ element found until a given moment in the sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3242xmmr.jl:14\nin expression starting at\
    \ /tmp/tmp3242xmmr.jl:14\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    maximums.push(numbers[1])\n    for n in numbers[2:end]\n        if maximums[end-1]\
    \ < n\n            maximums.push(n)\n        end\n    end\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\n@time maximums =\
    \ rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n@time maximums\
    \ = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpzk487l.jl:15\nin expression starting at\
    \ /tmp/tmpnpzk487l.jl:15\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for i = 1:length(numbers)\n        rolling_max_elements.push(numbers[i])\n\
    \    end\n    \n    for i = 1:length(numbers)\n        rolling_max_elements.push(max(rolling_max_elements[i-1],\
    \ numbers[i]))\n    end\n    \n    return rolling_max_elements\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdiki8rq_.jl:18\nin expression starting at\
    \ /tmp/tmpdiki8rq_.jl:18\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums[n] = maximums[n] ? maximums[n] :\
    \ n\n    end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8kprnz7p.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp8kprnz7p.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8kprnz7p.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8kprnz7p.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8kprnz7p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8kprnz7p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp8kprnz7p.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8kprnz7p.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8kprnz7p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8kprnz7p.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8kprnz7p.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8kprnz7p.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8k"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number > maximum\n            maximum\
    \ = number\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nroll\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk48yqgw4.jl:15\nin expression starting at\
    \ /tmp/tmpk48yqgw4.jl:15\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6pb23tsl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6pb23tsl.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6pb23tsl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6pb23tsl.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6pb23tsl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6pb23tsl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6pb23tsl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6pb23tsl.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6pb23tsl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6pb23tsl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7ylwa3b.jl:14\nin expression starting at\
    \ /tmp/tmpm7ylwa3b.jl:14\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates a vector of rolling mean element found\
    \ until given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jmlfh00.jl:14\nin expression starting at\
    \ /tmp/tmp7jmlfh00.jl:14\n"
  stdout: ''
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time maximum = rolling_max(numbers)\n</cell>\n<code language=julia-1.5>\nmaximum\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates a vector of rolling\
    \ minimum element found until given moment in the sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsxnuzw9.jl:15\nin expression starting at\
    \ /tmp/tmppsxnuzw9.jl:15\n"
  stdout: ''
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibhz2bvy.jl:14\nin expression starting at\
    \ /tmp/tmpibhz2bvy.jl:14\n"
  stdout: ''
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r__ovdf.jl:14\nin expression starting at\
    \ /tmp/tmp7r__ovdf.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums = maximum(maximums, rolling_max(numbers[2:end-1]))\n\
    \    end\n    \n    maximums\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates all the possible\
    \ combinations of two given vectors $x$ and $y$ of size $n$. For example, for\
    \ $x = [1, 2, 3]$ and $y = [4, 5, 6]$, the function should return $[(1, 4), (2,\
    \ 5), (3, 6)]$.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ec7ju4m.jl:14\nin expression starting at\
    \ /tmp/tmp0ec7ju4m.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        rolling_max_list = rolling_max_list\
    \ + [rolling_max(n)]\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnkajktpg.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpnkajktpg.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpnkajktpg.jl:4\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpnkajktpg.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnkajktpg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnkajktpg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnkajktpg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching rolling_max(::Int64)\n\
    \  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64}) at /tmp/tmpnkajktpg.jl:4\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpnkajktpg.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnkajktpg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnkajktpg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnkajktpg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpnkajktpg.jl:4\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpnkajktpg.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnkajktpg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp31h7niaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp31h7niaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    return rolling_max_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfmzyj1gw.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpfmzyj1gw.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0:0]\n  Stacktrace:\n  \
    \ [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpfmzyj1gw.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpfmzyj1gw.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfmzyj1gw.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpfmzyj1gw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpfmzyj1gw.jl:6\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpfmzyj1gw.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfmzyj1gw.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpfmzyj1gw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \ "
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        rolling_max_list = rolling_max_list\
    \ + [rolling_max(rolling_max_list)]\n    end\n    \n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4izzvfo9.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp4izzvfo9.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Vector{Int64}})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp4izzvfo9.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4izzvfo9.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4izzvfo9.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp4izzvfo9.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Vector{Int64}})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp4izzvfo9.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4izzvfo9.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4izzvfo9.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp4izzvfo9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shap"
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for i = 1:length(numbers)\n        \n        rolling_max_elements.append(numbers[i])\n\
    \        \n        if i == length(numbers)\n            \n            rolling_max_elements.append(numbers[i])\n\
    \            \n        end\n        \n    end\n    \n    return rolling_max_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe9xj12ws.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpe9xj12ws.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpe9xj12ws.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe9xj12ws.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe9xj12ws.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe9xj12ws.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpe9xj12ws.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe9xj12ws.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe9xj12ws.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe9xj12ws.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpe9xj12ws.jl:10\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe9xj12ws.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe9xj12ws.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ =  Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfv4txj9.jl:14\nin expression starting at\
    \ /tmp/tmpbfv4txj9.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = rolling_max\
    \ .+ [rolling_max[n]]\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqpklbmr.jl:14\nin expression starting at\
    \ /tmp/tmpoqpklbmr.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for number in numbers\n        rolling_max_elements.append(maximum(rolling_max_elements[end],\
    \ number))\n    end\n    \n    return rolling_max_elements\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates a vector of rolling minimum element found until\
    \ given moment in the sequence.\nHint: use rolling_min function from above.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwofup15w.jl:14\nin expression starting at\
    \ /tmp/tmpwofup15w.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n        rolling_max_list\
    \ = rolling_max_list + [maximum(numbers[i:i+length(numbers)-1])]\n    end\n  \
    \  \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates all the possible\
    \ combinations of two given vectors.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqut4fikq.jl:14\nin expression starting at\
    \ /tmp/tmpqut4fikq.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > maximum\n           \
    \ maximum = numbers[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\
    \ 10)\n</cell>\n<code language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\
    \ 100)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfopahig2.jl:14\nin expression starting at\
    \ /tmp/tmpfopahig2.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = []\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpatv0ubds.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpatv0ubds.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./essentials.jl:479 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpatv0ubds.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpatv0ubds.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpatv0ubds.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpatv0ubds.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./essentials.jl:479\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpatv0ubds.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpatv0ubds.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpatv0ubds.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpatv0ubds.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./essentials.jl:479 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpatv0ubds.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpatv0ubds.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     "
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp31h7niaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp31h7niaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ =  Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = append(rolling_max_list, maximum(rolling_max_list, number))\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphai2no98.jl:14\nin expression starting at\
    \ /tmp/tmphai2no98.jl:14\n"
  stdout: ''
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = append!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n  \
    \  \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp52jto1_p.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp52jto1_p.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp52jto1_p.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp52jto1_p.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp52jto1_p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp52jto1_p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp52jto1_p.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp52jto1_p.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyvynjvy7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyvynjvy7.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyvynjvy7.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyvynjvy7.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyvynjvy7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyvynjvy7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyvynjvy7.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyvynjvy7.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyvynjvy7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyvynjvy7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws6cv5sw.jl:14\nin expression starting at\
    \ /tmp/tmpws6cv5sw.jl:14\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiwmbh_vu.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpiwmbh_vu.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpiwmbh_vu.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpiwmbh_vu.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpiwmbh_vu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiwmbh_vu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpiwmbh_vu.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpiwmbh_vu.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpiwmbh_vu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiwmbh_vu.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = zeros(length(numbers))\n\
    \    rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max[i]\
    \ = maximum(rolling_max[i-1:end], numbers[i:end])\n    end\n    return rolling_max\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThanks for your answer. I am\
    \ not familiar with Julia so I cannot really understand your code. Could you please\
    \ explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ familiar with Julia so I cannot really understand your code. Could you please\
    \ explain it a little bit more? I understand that you are using an anonymous function,\
    \ but I do not understand how you get the rolling_max function to be able to use\
    \ it in your code. Could you please explain it a little bit more? Thanks again!\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not familiar with Julia so I cannot really\
    \ understand your code. Could you please explain it a little bit more? I understand\
    \ that you are using an anonymous function, but I do not understand how you get\
    \ the rolling_max function to be able to use it in your code. Could you please\
    \ explain it a little bit more? Thanks again!\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nI believe that this is what you are looking for:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49bo1hnd.jl:12\nin expression starting at\
    \ /tmp/tmp49bo1hnd.jl:12\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4a3q3uz.jl:16\nin expression starting at\
    \ /tmp/tmpd4a3q3uz.jl:16\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp31h7niaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp31h7niaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp31h7niaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp31h7niaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp31h7niaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp31h7niaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747967
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjs_gtbzv.jl:12\nin expression starting at\
    \ /tmp/tmpjs_gtbzv.jl:12\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_result\
    \ = rolling_max_result .+ rolling_max(rolling_max_result .+ [n - 1])\n    end\n\
    \    \n    return rolling_max_result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxbrtvyjp.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpxbrtvyjp.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbrtvyjp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbrtvyjp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxbrtvyjp.jl:21\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbrtvyjp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbrtvyjp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxbrtvyjp.jl:22\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: Int64[] == [3, 3, 3, 100, 100]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbrtvyjp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbrtvyjp.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for i = 1:length(numbers)\n        \n        if numbers[i] >\
    \ numbers[i-1]\n            rolling_max_elements.push(numbers[i])\n        end\n\
    \    end\n    \n    return rolling_max_elements\nend\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(numbers)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kngww6b.jl:17\nin expression starting at\
    \ /tmp/tmp1kngww6b.jl:17\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        maximums = maximum(maximums, number)\n\
    \    end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp57e_215l.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp57e_215l.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp57e_215l.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp57e_215l.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp57e_215l.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp57e_215l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp57e_215l.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp57e_215l.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that generates all the possible combinations of two vectors given as input.\
    \ \nThe function should return a list of tuples (v1,v2) where v1 and v2 are vectors\
    \ of length 2 that contain all the possible combinations of elements from v1 and\
    \ v2 with repetition.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2by0cym.jl:16\nin expression starting at\
    \ /tmp/tmpn2by0cym.jl:16\n"
  stdout: ''
  timestamp: 1659747969
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for number in numbers\n        maximums.push(maximum(numbers))\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuv8o93dr.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpuv8o93dr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuv8o93dr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuv8o93dr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[5:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[9:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[13:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[17:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[21:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[25:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n\
    \    rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplxgs23cg.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplxgs23cg.jl:1\n\
    in expression starting at /tmp/tmplxgs23cg.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > maximum\n           \
    \ maximum = numbers[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpb0yuk3q0.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpb0yuk3q0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpb0yuk3q0.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb0yuk3q0.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb0yuk3q0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb0yuk3q0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb0yuk3q0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb0yuk3q0.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb0yuk3q0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb0yuk3q0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprl1zp7fp.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmprl1zp7fp.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmprl1zp7fp.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprl1zp7fp.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprl1zp7fp.jl:15\ntest set:\
    \ Error During Test at /tmp/tmprl1zp7fp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmprl1zp7fp.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprl1zp7fp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprl1zp7fp.jl:15\ntest set:\
    \ Error During Test at /tmp/tmprl1zp7fp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest cand"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_array =\
    \ zeros(length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    return rolling_max_array\nend\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd0z4_xa.jl:11\nin expression starting at\
    \ /tmp/tmpyd0z4_xa.jl:11\n"
  stdout: ''
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    for n in numbers\n        rolling_max = max(n, rolling_max)\n    end\n\
    \    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0w_eiw5o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp0w_eiw5o.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching isless(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    isless(::AbstractVector,\
    \ !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n\
    \    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] max(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:492\n\
    \   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0w_eiw5o.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0w_eiw5o.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0w_eiw5o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp0w_eiw5o.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching isless(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractVector, !Matched::AbstractVector)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] max(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:492\n\
    \   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0w_eiw5o.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0w_eiw5o.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6i_tms1.jl:16\nin expression starting at\
    \ /tmp/tmps6i_tms1.jl:16\n"
  stdout: ''
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyjecv4ge.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyjecv4ge.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9jj48jq4.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9jj48jq4.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp9jj48jq4.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9jj48jq4.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9jj48jq4.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9jj48jq4.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9jj48jq4.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9jj48jq4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9jj48jq4.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9jj48jq4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ length(numbers))\n    \n    for i = 1:length(numbers)\n        maximums[i] =\
    \ maximum(numbers[i:i+1])\n    end\n    \n    return maximums\nend\n</cell>\n\
    <code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xqw_fh7.jl:14\nin expression starting at\
    \ /tmp/tmp3xqw_fh7.jl:14\n"
  stdout: ''
  timestamp: 1659747970
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe53852q8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpe53852q8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpe53852q8.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe53852q8.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe53852q8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpe53852q8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpe53852q8.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe53852q8.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe53852q8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpe53852q8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpe53852q8.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe53852q8.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tm"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number > maximum\n            maximum\
    \ = number\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0angou5g.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0angou5g.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0angou5g.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0angou5g.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0angou5g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0angou5g.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0angou5g.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0angou5g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0angou5g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0angou5g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuvsalrgl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpuvsalrgl.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkau_8pth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkau_8pth.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpkau_8pth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkau_8pth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates the cumulative sum of a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpssbanjkj.jl:14\nin expression starting at\
    \ /tmp/tmpssbanjkj.jl:14\n"
  stdout: ''
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[5:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[9:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[13:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[17:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[21:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[25:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n    rolling_max_list\
    \ = rolling_max_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7w8jvyi5.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7w8jvyi5.jl:1\n\
    in expression starting at /tmp/tmp7w8jvyi5.jl:1\n"
  stdout: ''
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(rolling_max_vector))\n    end\n    \n  \
    \  return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 9\nWrite a function that generates a vector with all\
    \ the numbers from 1 to n and returns the vector with the square of each number.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjp6lzdv.jl:14\nin expression starting at\
    \ /tmp/tmppjp6lzdv.jl:14\n"
  stdout: ''
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums.push(maximum(n))\n    end\n    \n\
    \    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_0_8cwg1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_0_8cwg1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_0_8cwg1.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_0_8cwg1.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_0_8cwg1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_0_8cwg1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_0_8cwg1.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_0_8cwg1.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_0_8cwg1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_0_8cwg1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_0_8cwg1.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_0_8cwg1.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_0_8cwg1.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuvsalrgl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpuvsalrgl.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for number in numbers\n        rolling_max_elements.append(maximum(number))\n\
    \    end\n    \n    return rolling_max_elements\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0x7gf9gn.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp0x7gf9gn.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0x7gf9gn.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0x7gf9gn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0x7gf9gn.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp0x7gf9gn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0x7gf9gn.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0x7gf9gn.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0x7gf9gn.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp0x7gf9gn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0x7gf9gn.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0x7gf9gn.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0x7gf9gn.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvu6_a3an.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpvu6_a3an.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpvu6_a3an.jl:7\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpvu6_a3an.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpvu6_a3an.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvu6_a3an.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpvu6_a3an.jl:7\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpvu6_a3an.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpvu6_a3an.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvu6_a3an.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = zeros(length(numbers))\n\
    \    rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max[i]\
    \ = max(numbers[i-1], numbers[i])\n    end\n    return rolling_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8wxj2mgo.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp8wxj2mgo.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8wxj2mgo.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8wxj2mgo.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8wxj2mgo.jl:16\ntest set:\
    \ Test Failed at /tmp/tmp8wxj2mgo.jl:19\n  Expression: candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n   Evaluated: [4, 4, 3, 2] == [4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wxj2mgo.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wxj2mgo.jl:16\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     1      1      4\n"
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3.2: Generate a list of rolling minimum element found\
    \ until given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmr3789y.jl:14\nin expression starting at\
    \ /tmp/tmpvmr3789y.jl:14\n"
  stdout: ''
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyjecv4ge.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyjecv4ge.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_vector[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj_bmodaj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpj_bmodaj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpj_bmodaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj_bmodaj.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj_bmodaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpj_bmodaj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpj_bmodaj.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj_bmodaj.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj_bmodaj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpj_bmodaj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        \n       \
    \ if number == 0\n            rolling_max = number\n        else\n           \
    \ rolling_max = max(rolling_max, number)\n        end\n    end\n    \n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo83550me.jl:19\nin expression starting at\
    \ /tmp/tmpo83550me.jl:19\n"
  stdout: ''
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = rolling_max\
    \ == nothing ? n : max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj_l1v4s.jl:14\nin expression starting at\
    \ /tmp/tmpqj_l1v4s.jl:14\n"
  stdout: ''
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_1dydfj.jl:14\nin expression starting at\
    \ /tmp/tmpm_1dydfj.jl:14\n"
  stdout: ''
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_result\
    \ = rolling_max_result .+ rolling_max(n - rolling_max_result)\n    end\n    \n\
    \    return rolling_max_result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi1prghmg.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpi1prghmg.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching -(::Int64, ::Vector{Int64})\n  For element-wise subtraction, use broadcasting\
    \ with dot syntax: scalar .- array\n  Closest candidates are:\n    -(::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\n\
    \    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n\
    \    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi1prghmg.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi1prghmg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi1prghmg.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpi1prghmg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching -(::Int64,\
    \ ::Vector{Int64})\n  For element-wise subtraction, use broadcasting with dot\
    \ syntax: scalar .- array\n  Closest candidates are:\n    -(::Union{Int128, Int16,\
    \ Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\n\
    \    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n\
    \    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi1prghmg.jl:9\n   [2] macro expansion\n    "
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > maximum\n           \
    \ maximum = numbers[i]\n        end\n    end\n    \n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates a random integer between $0$\
    \ and $10$, inclusive.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7nviw0g.jl:15\nin expression starting at\
    \ /tmp/tmpp7nviw0g.jl:15\n"
  stdout: ''
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_854fmo8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_854fmo8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_854fmo8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_854fmo8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers)+1)\n    \n    rolling_max_array[1] = numbers[1]\n  \
    \  \n    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgvniil36.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpgvniil36.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpgvniil36.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgvniil36.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgvniil36.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpgvniil36.jl:22\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [1, 1, 1, 1, 0] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvniil36.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvniil36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgvniil36.jl:23\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 4, 4, 4, 0] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvniil36.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvniil36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgvniil36.jl:24\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 3, 3, 3, 3, 0] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvniil36.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shar"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = []\n    \n    for n in numbers\n        rolling_max_array.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwtcz0dfa.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwtcz0dfa.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwtcz0dfa.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwtcz0dfa.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwtcz0dfa.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwtcz0dfa.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwtcz0dfa.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwtcz0dfa.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwtcz0dfa.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for number in numbers\n        maximums.push(maximum(numbers))\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuv8o93dr.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpuv8o93dr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuv8o93dr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuv8o93dr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuv8o93dr.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv8o93dr.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv8o93dr.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[2:end])\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5xgej_g.jl:10\nin expression starting at\
    \ /tmp/tmpu5xgej_g.jl:10\n"
  stdout: ''
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = []\n    \n    for number in numbers\n        rolling_max_list.append(maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps97gejxm.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmps97gejxm.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmps97gejxm.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps97gejxm.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps97gejxm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmps97gejxm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmps97gejxm.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps97gejxm.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps97gejxm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmps97gejxm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmps97gejxm.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps97gejxm.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps97gejxm.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8gqi0qx.jl:14\nin expression starting at\
    \ /tmp/tmph8gqi0qx.jl:14\n"
  stdout: ''
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_854fmo8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_854fmo8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_854fmo8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_854fmo8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0o4_ln4y.jl:14\nin expression starting at\
    \ /tmp/tmp0o4_ln4y.jl:14\n"
  stdout: ''
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = append!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n  \
    \  \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp52jto1_p.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp52jto1_p.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp52jto1_p.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp52jto1_p.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp52jto1_p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp52jto1_p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp52jto1_p.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp52jto1_p.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747971
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpncl0uxl3.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpncl0uxl3.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpncl0uxl3.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncl0uxl3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpncl0uxl3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpncl0uxl3.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncl0uxl3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpncl0uxl3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpncl0uxl3.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncl0uxl3.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnc"
  timestamp: 1659747966
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n\
    </cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcij2fiwa.jl:14\nin expression starting at\
    \ /tmp/tmpcij2fiwa.jl:14\n"
  stdout: ''
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_array =\
    \ zeros(length(numbers)) \n    rolling_max_array[1] = numbers[1] \n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], rolling_max_array[i-1])\
    \ \n    end\n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp76_5d2b0.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp76_5d2b0.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp76_5d2b0.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp76_5d2b0.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp76_5d2b0.jl:16\ntest set:\
    \ Test Failed at /tmp/tmp76_5d2b0.jl:18\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [1, 1, 2, 3] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76_5d2b0.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76_5d2b0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp76_5d2b0.jl:20\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 3, 3, 3, 100] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76_5d2b0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76_5d2b0.jl:16\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     2      1      4\n"
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d1qi7bt.jl:16\nin expression starting at\
    \ /tmp/tmp_d1qi7bt.jl:16\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(rolling_max_vector))\n    end\n    \n  \
    \  return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates a vector with all\
    \ the elements of the given vector except the element at the given index.\nFor\
    \ example, if the given vector is [1,2,3,4,5] and the given index is 2, the function\
    \ should return [1,2,3]\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01k11sfi.jl:14\nin expression starting at\
    \ /tmp/tmp01k11sfi.jl:14\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbx6n9_nz.jl:14\nin expression starting at\
    \ /tmp/tmpbx6n9_nz.jl:14\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers):end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-1])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-1:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-2])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-2:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-3])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-3:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-4])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-4:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-5])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-5:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-6])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-6:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-7])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-7:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-8])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpby09r9.jl:26\nin expression starting at\
    \ /tmp/tmptpby09r9.jl:26\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = rolling_max_vector + [rolling_max(numbers, number + 1, rolling_max_vector)]\n\
    \    end\n    \n    return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_w0l0c5m.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_w0l0c5m.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching rolling_max(::Vector{Int64}, ::Int64, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    rolling_max(::Vector{Int64}) at /tmp/tmp_w0l0c5m.jl:4\n  Stacktrace:\n\
    \   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_w0l0c5m.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w0l0c5m.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w0l0c5m.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_w0l0c5m.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching rolling_max(::Vector{Int64},\
    \ ::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rolling_max(::Vector{Int64})\
    \ at /tmp/tmp_w0l0c5m.jl:4\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_w0l0c5m.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w0l0c5m.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w0l0c5m.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_w0l0c5m.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: no method\
    \ matching rolling_max(::Vector{Int64}, ::Int64, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    rolling_max(::Vector{Int64}) at /tmp/tmp_w0l0c5m.jl:4\n  Stacktrace:\n\
    \   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_w0l0c5m.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w0l0c5m.jl:22"
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_elements\
    \ = []\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp13liwqk9.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13liwqk9.jl:1\n\
    in expression starting at /tmp/tmp13liwqk9.jl:1\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcczg6omc.jl:15\nin expression starting at\
    \ /tmp/tmpcczg6omc.jl:15\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkau_8pth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkau_8pth.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpkau_8pth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkau_8pth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_854fmo8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_854fmo8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_854fmo8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_854fmo8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = rolling_max_list + [rolling_max(n)]\n    end\n    \n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn5leuxap.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpn5leuxap.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpn5leuxap.jl:4\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpn5leuxap.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5leuxap.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5leuxap.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn5leuxap.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching rolling_max(::Int64)\n\
    \  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64}) at /tmp/tmpn5leuxap.jl:4\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpn5leuxap.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5leuxap.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5leuxap.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn5leuxap.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpn5leuxap.jl:4\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpn5leuxap.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5leuxap.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_array =\
    \ zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(numbers[i-1], rolling_max_array[i-1])\n  \
    \  end\n    return rolling_max_array\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nThe solution using Julia is very simple:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g85vrw9.jl:12\nin expression starting at\
    \ /tmp/tmp0g85vrw9.jl:12\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: -1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max(rolling_max_list)\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659747978
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2i0sckv.jl:1\nin expression starting at /tmp/tmpc2i0sckv.jl:1\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = [max(rolling_max[n],\
    \ n), rolling_max[n]]\n    end\n    \n    return rolling_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0hghafh3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp0hghafh3.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0hghafh3.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0hghafh3.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0hghafh3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp0hghafh3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0hghafh3.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0hghafh3.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0hghafh3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp0hghafh3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0hghafh3.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0hghafh3.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0h"
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: -1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[1:end-1]) \n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659747978
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_array =\
    \ zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return\
    \ rolling_max_array\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf92q2otf.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf92q2otf.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpf92q2otf.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf92q2otf.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf92q2otf.jl:16\ntest set:\
    \ Test Failed at /tmp/tmpf92q2otf.jl:19\n  Expression: candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n   Evaluated: [4, 4, 3, 2] == [4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf92q2otf.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf92q2otf.jl:16\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     1      1      4\n"
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_854fmo8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_854fmo8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_854fmo8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_854fmo8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyjecv4ge.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyjecv4ge.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(numbers)\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite \nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67qcyswj.jl:14\nin expression starting at\
    \ /tmp/tmp67qcyswj.jl:14\n"
  stdout: ''
  timestamp: 1659747974
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_list[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppo5snzi3.jl:14\nin expression starting at\
    \ /tmp/tmppo5snzi3.jl:14\n"
  stdout: ''
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ =  Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list[1]\
    \ = max(rolling_max_list[1], n)\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw5rqyd9.jl:14\nin expression starting at\
    \ /tmp/tmpkw5rqyd9.jl:14\n"
  stdout: ''
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(n))\n    end\n    \n    return rolling_max_vector\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9t9oyx1r.jl:14\nin expression starting at\
    \ /tmp/tmp9t9oyx1r.jl:14\n"
  stdout: ''
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(rolling_max_vector))\n    end\n    \n  \
    \  return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpc8sc3pra.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpc8sc3pra.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] rolling_max(numbers::Vector{Int64})\n      @ Main /tmp/tmpc8sc3pra.jl:9\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpc8sc3pra.jl:20 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpc8sc3pra.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpc8sc3pra.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2"
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_result[1] = numbers[1]\n    for i\
    \ = 2:length(numbers)\n        if numbers[i] > rolling_max_result[1]\n       \
    \     rolling_max_result[1] = numbers[i]\n        end\n    end\n    rolling_max_result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpymas4ye7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpymas4ye7.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpymas4ye7.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpymas4ye7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpymas4ye7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpymas4ye7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpymas4ye7.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpymas4ye7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpymas4ye7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpymas4ye7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpymas4ye7.jl:6\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpymas4ye7.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpym"
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums.push(n) \n    end\n    \n    maximums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9y0ulexn.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9y0ulexn.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp9y0ulexn.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9y0ulexn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9y0ulexn.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9y0ulexn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp9y0ulexn.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9y0ulexn.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9y0ulexn.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9y0ulexn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp9y0ulexn.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9y0ulexn.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9y0ulexn.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyjecv4ge.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyjecv4ge.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpyjecv4ge.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyjecv4ge.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyjecv4ge.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyjecv4ge.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a list of rolling minimum element\
    \ found until given moment in the sequence.\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt02jn66.jl:14\nin expression starting at\
    \ /tmp/tmpwt02jn66.jl:14\n"
  stdout: ''
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_elements\
    \ = []\n    \n    for n in numbers\n        rolling_max_elements.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_elements\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3215tn7h.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp3215tn7h.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3215tn7h.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3215tn7h.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp3215tn7h.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3215tn7h.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3215tn7h.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3215tn7h.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3215tn7h.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_list[i] = maximum(rolling_max_list[i-1], numbers[i])\n  \
    \  end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymdjyreu.jl:12\nin expression starting at\
    \ /tmp/tmpymdjyreu.jl:12\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: -1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[1:end-1]) \n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659747978
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = rolling_max\
    \ .+ [rolling_max[n-1]]\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3mtm_ig.jl:14\nin expression starting at\
    \ /tmp/tmpn3mtm_ig.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates a vector with random numbers\
    \ between 0 and 1\nUse this function to generate an array of random numbers between\
    \ 0 and 1\nUse this array to generate a rolling mean of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling standard deviation\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ median of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling minimum of 100 numbers and store it in another array\nUse this array\
    \ to generate a rolling maximum of 100 numbers and store it in another array\n\
    Use this array to generate a rolling sum and store it in another array\nUse this\
    \ array to generate a rolling count of 100 numbers and store it in another array\n\
    Use this array to generate a rolling standard deviation of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling median of 100 numbers\
    \ and store it in another array\nUse this array to generate a rolling minimum\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ maximum of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling sum and store it in another array\nUse this array to generate a rolling\
    \ count of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling standard deviation of 100 numbers and store it in another array\n\
    Use this array to generate a rolling median of 100 numbers and store it in another\
    \ array\nUse this array to generate a rolling minimum of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling maximum of 100 numbers\
    \ and store it in another array\nUse this array to generate a rolling sum and\
    \ store it in another array\nUse this array to generate a rolling count of 100\
    \ numbers and store it in another array\nUse this array to generate a rolling\
    \ standard deviation of 100 numbers and store it in another array\nUse this array\
    \ to generate a rolling median of 100 numbers and store it in another array\n\
    Use this array to generate a rolling minimum of 100 numbers and store it in another\
    \ array\nUse this array to generate a rolling maximum of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling sum and store it in\
    \ another array\nUse this array to generate a rolling count of 100 numbers and\
    \ store it in another array\nUse this array to generate a rolling standard deviation\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ median \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd74gjlwv.jl:14\nin expression starting at\
    \ /tmp/tmpd74gjlwv.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzew2e8y5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpzew2e8y5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzew2e8y5.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzew2e8y5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuvsalrgl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpuvsalrgl.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [2:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvsalrgl.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuvsalrgl.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuvsalrgl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpuvsalrgl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [2:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747972
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtpsfeuk.jl:14\nin expression starting at\
    \ /tmp/tmpgtpsfeuk.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a random integer between $0$ and $1$, inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2nxfqd4.jl:16\nin expression starting at\
    \ /tmp/tmpr2nxfqd4.jl:16\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_list =\
    \ Vector{Int64}()\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[5:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[9:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[13:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[17:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[21:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[25:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n\
    \    rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplxgs23cg.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplxgs23cg.jl:1\n\
    in expression starting at /tmp/tmplxgs23cg.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkau_8pth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkau_8pth.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpkau_8pth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkau_8pth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n\
    </cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoa56wjrg.jl:14\nin expression starting at\
    \ /tmp/tmpoa56wjrg.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = []\n    \n    for number in numbers\n        rolling_max_list.append(rolling_max(numbers))\n\
    \    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb4arzkqe.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpb4arzkqe.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpb4arzkqe.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb4arzkqe.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb4arzkqe.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb4arzkqe.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpb4arzkqe.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb4arzkqe.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb4arzkqe.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb4arzkqe.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpb4arzkqe.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb4arzkqe.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb4arzkqe.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkau_8pth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkau_8pth.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpkau_8pth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkau_8pth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nnumbers =\
    \ 1:10\nrolling_max(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates a list of rolling minimum element found until given moment in the\
    \ sequence.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqit4stk.jl:14\nin expression starting at\
    \ /tmp/tmpwqit4stk.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time maximum = rolling_max(numbers)\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.\nHint: use rolling_min.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ysjgh5p.jl:14\nin expression starting at\
    \ /tmp/tmp3ysjgh5p.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzew2e8y5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpzew2e8y5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzew2e8y5.jl:6\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzew2e8y5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzew2e8y5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzew2e8y5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzew2e8y5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}()\n\
    \    \n    for number in numbers\n        maximums.push(maximum(numbers))\n  \
    \  end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:10000);\n</cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(1:10000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:100000000);\n</cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000);\n</cell>\n\
    <code language=julia-1.5>\n@time rolling_max(1:100000000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(1:1000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:10000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:100000000000000);\n</cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000000000000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000000000000000000000000);\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl5dlo61.jl:14\nin expression starting at\
    \ /tmp/tmpzl5dlo61.jl:14\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    for n in numbers\n        rolling_max[end] = max(n,rolling_max[end])\n\
    \    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the cumulative sum of a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn643kh_w.jl:11\nin expression starting at\
    \ /tmp/tmpn643kh_w.jl:11\n"
  stdout: ''
  timestamp: 1659747976
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6u9yn6_w.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6u9yn6_w.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp6u9yn6_w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6u9yn6_w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp6u9yn6_w.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp6u9yn6_w.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_array =\
    \ zeros(length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    return rolling_max_array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3zrjckhu.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp3zrjckhu.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3zrjckhu.jl:7\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp3zrjckhu.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp3zrjckhu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3zrjckhu.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [4:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3zrjckhu.jl:7\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp3zrjckhu.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp3zrjckhu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3zrjckhu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [5:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(rolling_max_vector, n))\n    end\n    \n\
    \    return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm1vds47n.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpm1vds47n.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpm1vds47n.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpm1vds47n.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpm1vds47n.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpm1vds47n.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpm1vds47n.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpm1vds47n.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_854fmo8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_854fmo8.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_854fmo8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_854fmo8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp_854fmo8.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_854fmo8.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747975
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max = rolling_max\
    \ .+ [rolling_max[n]]\n    end\n    \n    return rolling_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjdt06yqs.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpjdt06yqs.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjdt06yqs.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjdt06yqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjdt06yqs.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpjdt06yqs.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjdt06yqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjdt06yqs.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjdt06yqs.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjdt06yqs.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjd"
  timestamp: 1659747968
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = append(rolling_max_vector, maximum(rolling_max_vector))\n    end\n    \n \
    \   return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a vector of rolling\
    \ minimum element found until given moment in the sequence.\n        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzffwt6lm.jl:14\nin expression starting at\
    \ /tmp/tmpzffwt6lm.jl:14\n"
  stdout: ''
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1g0ou1y.jl:14\nin expression starting at\
    \ /tmp/tmpb1g0ou1y.jl:14\n"
  stdout: ''
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3.6\nWrite a function that takes as input a vector of\
    \ integers and a window size and returns a vector of rolling sums over the given\
    \ window.\nFor example, if the input vector is [1,2,3,4,5,6,7] and window size\
    \ is 3, the output vector should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3pedul4.jl:14\nin expression starting at\
    \ /tmp/tmps3pedul4.jl:14\n"
  stdout: ''
  timestamp: 1659747977
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7ee07_7h.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp7ee07_7h.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp7ee07_7h.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7ee07_7h.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7ee07_7h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7ee07_7h.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp7ee07_7h.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7ee07_7h.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates the rolling minimum\
    \ element found until a given moment in the sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscz54n7i.jl:14\nin expression starting at\
    \ /tmp/tmpscz54n7i.jl:14\n"
  stdout: ''
  timestamp: 1659747978
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkau_8pth.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpkau_8pth.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpkau_8pth.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpkau_8pth.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpkau_8pth.jl:9\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpkau_8pth.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
  timestamp: 1659747973
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    rolling_max_rolling_window(numbers,\
    \ 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmptiogzfk5.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmptiogzfk5.jl:12\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ rolling_max_rolling_window not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptiogzfk5.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptiogzfk5.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptiogzfk5.jl:11\ntest set:\
    \ Error During Test at /tmp/tmptiogzfk5.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: rolling_max_rolling_window\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmptiogzfk5.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptiogzfk5.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptiogzfk5.jl:11\ntest set:\
    \ Error During Test at /tmp/tmptiogzfk5.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: rolling_max_rolling_window\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmptiogzfk5.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptiogzfk5.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptiogzfk5.jl:11\ntest set:\
    \ Error During Test at /tmp/tmptiogzfk5.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: rolling_max_rol"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max =\
    \ Vector{Int64}(undef, length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmss3lln1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpmss3lln1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpmss3lln1.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmss3lln1.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmss3lln1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmss3lln1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpmss3lln1.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmss3lln1.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmss3lln1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmss3lln1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n        rolling_max_list\
    \ = append(rolling_max_list, maximum(numbers[i:i+length(numbers)]))\n    end\n\
    \    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpp28wy7tr.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpp28wy7tr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpp28wy7tr.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp28wy7tr.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp28wy7tr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpp28wy7tr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpp28wy7tr.jl:9\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp28wy7tr.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp28wy7tr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpp28wy7tr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkb"
  timestamp: 1659747979
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
    \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplk9xazik.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplk9xazik.jl:1\n\
    in expression starting at /tmp/tmplk9xazik.jl:1\n"
  stdout: ''
  timestamp: 1659747965
