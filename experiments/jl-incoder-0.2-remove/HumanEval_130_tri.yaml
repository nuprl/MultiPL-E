name: HumanEval_130_tri
language: jl
prompt: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) =\
  \ 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n \
  \   tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 =\
  \ 8 \n    You are given a non-negative integer number n, you have to a return a\
  \ list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
  \        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
  \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
  \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
  \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
completions: ["    if n == 0 \n        return Vector{Int64}() \n    else if n == 1\
    \ \n        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 1 \n        return [1]\n    elseif n\
    \ == 2 \n        return [1, 1]\n    elseif n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend", "    if n == 0 \n\
    \        return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2)\
    \ + tri(n - 1)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [13, 17]\n\
    @assert tri(5) == [17, 21]\n@assert tri(6) == [21, 34]\n@assert tri(7) == [34,\
    \ 55]\n@assert tri(8) == [55, 89]\n@assert tri(9) == [89, 144]\n@assert tri(10)\
    \ == [144, 233]\n@assert tri(11) == [233, 377]\n@assert tri(12) == [377, 613]\n\
    @assert tri(13) == [613, 987]\n@assert tri(14) == [987, 1597]\n@assert tri(15)\
    \ == [1597,2584]\n@assert tri(16) == [2584, 4181]\n@assert tri(17) == [4181, 6765]\n\
    @assert tri(18) == [6765, 10531]\n@assert tri(19) == [10531, 17711]\n@assert tri(20)\
    \ == [17711, 28657]\n@assert tri(21) == [28657, 46368]\n@assert tri(22) == [46368,\
    \ 75025]\n@assert tri(23) == [75025, 121393]\n@assert tri(24) == [121393, 196418]\n\
    @assert tri(25) == [196418, 317811]\n@assert tri(26) == [317811, 514229]\n@assert\
    \ tri(27) == [514229, 832025]\n@assert tri(28) == [832025, 1346269]\n@assert tri(29)\
    \ == [1346269, 2178309]\n@assert tri(30) == [2178309, 3524578]\n@assert tri(31)\
    \ == [3524578, 5702887]\n@assert tri(32) == [5702887, 8998807]\n@assert tri(33)\
    \ == [8998807, 14930358]\n@assert tri(34) == [14930358, 24157817]\n@assert ",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9)\nend", "    if n == 0 \n        return Vector{Int64}()\n \
    \   else if n == 1 \n        return Vector{Int64}(3)\n    else if n % 2 == 0 \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [16, 21]\n\
    @assert tri(5) == [25, 28]\n@assert tri(6) == [35, 41]\n@assert tri(7) == [48,\
    \ 55]\n@assert tri(8) == [63, 70]\n@assert tri(9) == [78, 83]\n@assert tri(10)\
    \ == [90, 97]\n@assert tri(11) == [104, 111]\n@assert tri(12) == [112, 119]\n\
    @assert tri(13) == [126, 133]\n@assert tri(14) == [138, 143]\n@assert tri(15)\
    \ == [150, 157]\n@assert tri(16) == [158, 163]\n@assert tri(17) == [164, 171]\n\
    @assert tri(18) == [172, 179]\n@assert tri(19) == [179, 185]\n@assert tri(20)\
    \ == [186, 193]\n@assert tri(21) == [194, 201]\n@assert tri(22) == [202, 209]\n\
    @assert tri(23) == [210, 217]\n@assert tri(24) == [218, 225]\n@assert tri(25)\
    \ == [224, 231]\n@assert tri(26) == [232, 239]\n@assert tri(27) == [239, 247]\n\
    @assert tri(28) == [248, 255]\n@assert tri(29) == [256, 263]\n@assert tri(30)\
    \ == [265, 271]\n@assert tri(31) == [272, 279]\n@assert tri(32) == [280, 285]\n\
    @assert tri(33) == [286, 293]\n@assert tri(34) == [294, 301]\n@assert tri(35)\
    \ == [302, 309]\n@assert tri(36) == [309, 317]\n@assert tri(37) == [318, 325]\n\
    @assert tri(38) == [326, 333]\n@assert tri(39) == [334, ", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    end\nend", "    if n == 0\n        return Vector{Int64}()\n    else\
    \ if n == 1\n        return Vector{Int64}(3)\n    else\n        return Vector{Int64}(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    tri(10)\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n) returns the nth\
    \ number in the Fibonacci sequence\n    fib(0) = 0\n    fib(1) = 1\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    Examples:\n        fib(3) = 3\n        fib(5) = 5\n      \
    \  fib(10) = 55\n        fib(100) = 5500\n        fib(1000) = 5500\n        fib(10000)\
    \ = 5500000000\n        fib(100000) = 550000000000\n        fib(1000000) = 550000000000000\n\
    \        fib(10000000) = 5500000000000000\n        fib(100000000) = 55000000000000000\n\
    \        fib(1000000000) = 550000000000000000\n        fib(10000000000) = 5500000000000000000\n\
    \        fib(100000000000) = 55000000000000000000\n        fib(1000000000000)\
    \ = 550000000000000000000\n        fib(10000000000000) = 5500000000000000000000\n\
    \        fib(100000000000000) = 55000000000000000000000\n        fib(1000000000000000)\
    \ = 550000000000000000000000\n        fib(10000000000000000) = 5500000000000000000000000\n\
    \        fib(100000000000000000) = 55000000000000000000000000\n        fib(1000000000000000000)\
    \ = 550000000000000000000000000\n        fib(10000000000000000000) = 5500000000000000000000000000\n\
    \        fib(100000000000000000000) = 55000000000000000000000000000\n        fib(1000000000000000000000)\
    \ = 550000000000000000000000000000\n        fib(10000000000000000000000) = 5500000000000000000000000000000\n\
    \        fib(100000000000000000000000) = 55000000000000000000000000000000\n  \
    \      fib(1000000000000000000000000) = 550000000000000000000000000000000\n  \
    \      fib(10000000000000000000000000) = 5500000000000000000000000000000000\n\
    \        fib(100000000000000000000000000) = 55000000000000000000000000000000000\n\
    \        fib(1000000000000000000000000000) = 550000000000000000000000000000000000\n\
    \        fib(10000000000000000000000000000) = 5500000000000000000000000000000000000\n\
    \        fib(100000000000000000000000000000) = 55000000000000000000000000000000000000\n\
    \        fib(1000000000000000000000000000000) = 550000000000000000000000000000000000000\n\
    \        fib(10000000000000000000000000000000) = 5500000000000000000000000000000000000000\n\
    \        fib(100000000000000000000000000000000) = 55", "    if n == 0 \n     \
    \   return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the\
    \ squares of the first n positive integers. \nExamples:\n    sumsq(1) = 1\n  \
    \  sumsq(2) = 4\n    sumsq(3) = 9\n    sumsq(4) = 16\n    sumsq(5) = 25\n    sumsq(6)\
    \ = 49\n    sumsq(7) = 81\n    sumsq(8) = 144\n    sumsq(9) = 225\n    sumsq(10)\
    \ = 324\n    sumsq(11) = 429\n    sumsq(12) = 596\n    sumsq(13) = 831\n    sumsq(14)\
    \ = 1225\n    sumsq(15) = 1525\n    sumsq(16) = 1836\n    sumsq(17) = 2259\n \
    \   sumsq(18) = 2584\n    sumsq(19) = 2881\n    sumsq(20) = 3181\n    sumsq(21)\
    \ = 3521\n    sumsq(22) = 3904\n    sumsq(23) = 3975\n    sumsq(24) = 4186\n \
    \   sumsq(25) = 4511\n    sumsq(26) = 4876\n    sumsq(27) = 5261\n    sumsq(28)\
    \ = 5615\n    sumsq(29) = 6048\n    sumsq(30) = 6421\n    sumsq(31) = 6765\n \
    \   sumsq(32) = 7204\n    sumsq(33) = 7669\n    sumsq(34) = 8128\n    sumsq(35)\
    \ = 8593\n    sumsq(36) = 9060\n    sumsq(37) = 9592\n    sumsq(38) = 10127\n\
    \    sumsq(39) = 10690\n    sumsq(40) = 11221\n    sumsq(41) = 11872\n    sumsq(42)\
    \ = 12495\n    sumsq(43) = 13048\n    sumsq(44) = 13696\n    sumsq(45) = 14395\n\
    \    sumsq(46) = 15068\n    sumsq(47) = 15666\n", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the numbers\
    \ from 1 to n.", "    if n == 0\n        return Vector{Int64}()\n    elseif n\
    \ == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n        return\
    \ Vector{Int64}(3)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   end\nend", "    if n == 0\n        return Vector{Int64}()\n    else if n ==\
    \ 1\n        return Vector{Int64}(3)\n    else\n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers from 1 to n.\nExamples:\n    sum1to3(3) = 1 +\
    \ 2 + 3 = 6\n    sum1to3(5) = 1 + 2 + 3 + 4 + 5 = 15\n    sum1to3(10) = 1 + 2\
    \ + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n    sum1to3(100) = 1 + 2 + 3 + 4 + 5\
    \ + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\
    \ + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 +\
    \ 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52\
    \ + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 +\
    \ 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83\
    \ + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 +\
    \ 99 + 100\n    sum1to3(1000) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 +\
    \ 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27\
    \ + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 +\
    \ 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58\
    \ + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 +\
    \ 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89\
    \ + 90 + 91 + 92 + 93 + 94 + ", "    if n == 1 \n        return [1]\n    else\
    \ if n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) +\
    \ tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci number\
    \ using recursion.", "    if n == 0\n        Vector{Int64}()\n    elseif n ==\
    \ 1\n        Vector{Int64}(3)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n == 1 \n        return Vector{Int64}(3)\n    else \n        tri(n-1) = tri(n-1)\
    \ + tri(n-2) + tri(n+2)\n        return tri(n-1) + tri(n-2) + tri(n+2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n ==\
    \ 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert tri(2) == [1, 1, 2]\n@assert tri(3) == [1, 1, 2,\
    \ 3, 5, 8]\n@assert tri(4) == [1, 1, 2, 3, 5, 8, 13]\n@assert tri(5) == [1, 1,\
    \ 2, 3, 5, 8, 13, 21]\n@assert tri(6) == [1, 1, 2, 3, 5, 8, 13, 21, 34]\n@assert\
    \ tri(7) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n@assert tri(8) == [1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89]\n@assert tri(9) == [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144]\n@assert tri(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233]\n@assert tri(11) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n\
    @assert tri(12) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    @assert tri(13) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987]\n@assert tri(14) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597]\n@assert tri(15) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584]\n@assert tri(16) == [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n@assert tri(17) == [1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765]\n@assert tri(18) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584, 4181, 6765, 10946]\n@assert tri(19) == [1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10947,\
    \ 17711]\n@assert tri(20) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ", "    if n ==\
    \ 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n + 2) \nend", "    if n == 0\n        Vector{Int64}()\n\
    \    elseif n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3,5,7]\n@assert tri(3) == [8,13,21]\n@assert tri(4) == [15,21,35,50]\n\
    @assert tri(5) == [35,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571273,139583862445,217762029019,352474189217,57028875436,922746658047,149303528094,241578179907,390881691669,632459865867,102334155657,165580141934,267914295901,433494437380,701408733441,1134903170238,1836311903291,2971215073095,4807526976733,7778742049279,12586269025505,20365011073709,32951280099419,53316291175803,86267571273351,13958386244591,21776202901897,35247418921711,5702887543655,92274665804657,14930352809447,24157817990738,39088169166923,63245986586751,1023341556",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4)\n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\n    factorial(0)\
    \ = 1\n    factorial(1) = 1\n    factorial(2) = 2\n    factorial(3) = 6\n    factorial(4)\
    \ = 24\n    factorial(5) = 120\n    factorial(6) = 720\n    factorial(7) = 5040\n\
    \    factorial(8) = 40320\n    factorial(9) = 362880\n    factorial(10) = 3628800\
    \ \n    factorial(11) = 39916800\n    factorial(12) = 479001600\n    factorial(13)\
    \ = 6227020800\n    factorial(14) = 87178291200\n    factorial(15) = 1307674368000\n\
    \    factorial(16) = 20922789888000\n    factorial(17) = 355687428096000\n   \
    \ factorial(18) = 6402373705728000\n    factorial(19) = 121645100408832000\n \
    \   factorial(20) = 2432902008176640000\n    factorial(21) = 51090942171709440000\n\
    \    factorial(22) = 1124000727777607680000\n    factorial(23) = 25852016738884976640000\n\
    \    factorial(24) = 620448401733239439360000\n    factorial(25) = 15511210043330985984000000\n\
    \    factorial(26) = 403291461126605635584000000\n    factorial(27) = 10888869450418352160768000000\n\
    \    factorial(28) = 304888344611713860501504000000\n    factorial(29) = 8841761993739701954543616000000\n\
    \    factorial(30) = 265252859812191058636308480000000\n    factorial(31) = 8222838654177922817725562880000000\n\
    \    factorial(32) = 263130836933693530167218012160000000\n    factorial(", " \
    \   if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n       \
    \ return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend", "    if n == 0 \n        return Vector{Int64}() \n   \
    \ else if n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    @assert tri(2) == [3, 5]\n@assert tri(4) == [3, 6, 9]\n@assert tri(6) == [3, 6,\
    \ 9, 12]\n@assert tri(8) == [3, 6, 9, 12, 15]\n@assert tri(10) == [3, 6, 9, 12,\
    \ 15, 18]\n@assert tri(12) == [3, 6, 9, 12, 15, 18, 21]\n@assert tri(14) == [3,\
    \ 6, 9, 12, 15, 18, 21, 24]\n@assert tri(16) == [3, 6, 9, 12, 15, 18, 21, 24,\
    \ 27]\n@assert tri(18) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n@assert tri(20)\
    \ == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]\n@assert tri(22) == [3, 6, 9, 12,\
    \ 15, 18, 21, 24, 27, 30, 33, 36]\n@assert tri(24) == [3, 6, 9, 12, 15, 18, 21,\
    \ 24, 27, 30, 33, 36, 39]\n@assert tri(26) == [3, 6, 9, 12, 15, 18, 21, 24, 27,\
    \ 30, 33, 36, 39, 42]\n@assert tri(28) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30,\
    \ 33, 36, 39, 42, 45]\n@assert tri(30) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30,\
    \ 33, 36, 39, 42, 45, 48]\n@assert tri(32) == [3, 6, 9, 12, 15, 18, 21, 24, 27,\
    \ 30, 33, 36, 39, 42, 45, 48, 51]\n@assert tri(34) == [3, 6, 9, 12, 15, 18, 21,\
    \ 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54]\n@assert tri(36) == [3, 6, 9, 12,\
    \ 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57]\n@assert tri(38)\
    \ == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57,\
    \ 60]\n@assert tri(40) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42,\
    \ 45, 48, 51, 54, 57, 60, 63]\n@assert tri(42) == [3, 6, 9, 12, 15, 18, 21, 24,\
    \ 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66]\n@assert tri(44) ==\
    \ [3, ", "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n    \
    \    Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [13, 21]\n\
    @assert tri(5) == [16, 25, 30]\n@assert tri(6) == [25, 36, 49]\n@assert tri(7)\
    \ == [36, 49, 64]\n@assert tri(8) == [49, 64, 81]\n@assert tri(9) == [64, 81,\
    \ 100]\n@assert tri(10) == [81, 100, 121]\n@assert tri(11) == [100, 121, 144]\n\
    @assert tri(12) == [121, 144, 169]\n@assert tri(13) == [144, 169, 192]\n@assert\
    \ tri(14) == [169, 192, 225]\n@assert tri(15) == [192, 225, 276]\n@assert tri(16)\
    \ == [225, 276, 321]\n@assert tri(17) == [276, 321, 370]\n@assert tri(18) == [321,\
    \ 370, 423]\n@assert tri(19) == [370, 423, 478]\n@assert tri(20) == [423, 478,\
    \ 537]\n@assert tri(21) == [478, 537, 595]\n@assert tri(22) == [537, 595, 650]\n\
    @assert tri(23) == [595, 650, 710]\n@assert tri(24) == [650, 710, 775]\n@assert\
    \ tri(25) == [710, 775, 835]\n@assert tri(26) == [775, 835, 901]\n@assert tri(27)\
    \ == [835, 901, 969]\n@assert tri(28) == [901, 969, 1036]\n@assert tri(29) ==\
    \ [969, 1036, 1101]\n@assert tri(30) == [1036, 1101, 1174]\n@assert tri(31) ==\
    \ [1101, 1174, 1244]\n@assert tri(32) == [1174, 1244, 1321]\n@assert tri(33) ==\
    \ [1244, 1321, 1397]\n@assert tri(34) == [1321, 1397, 1464]\n@assert tri(35) ==\
    \ [1397, 1464, 1531]\n@assert tri(36) == [1464, 1531, 1607]\n@assert tri", " \
    \   if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n       \
    \ return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the n-th Fibonacci number.",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\nend", "    if n == 1 \n        return [1]\n    else\
    \ if n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) +\
    \ tri(n+1) + tri(n+2)\n    end\nend\n</code>\n<|/ a tags=fibonacci,julia,recursion\
    \ |>\n<| c |>\nThis does not answer the question. OP wants to know how to implement\
    \ the Fibonacci sequence in Julia.\n<|/ c |>\n<| c |>\nI answered the question\
    \ in the title. OP asked how to implement the Fibonacci sequence in Julia. He\
    \ also asked how to implement the Fibonacci sequence in Julia, and I answered\
    \ that question. He also asked how to implement the Fibonacci sequence in Julia,\
    \ and I answered that question. He also asked how to implement the Fibonacci sequence\
    \ in Julia, and I answered that question. He also asked how to implement the Fibonacci\
    \ sequence in Julia, and I answered that question. He also asked how to implement\
    \ the Fibonacci sequence in Julia, and I answered that question. He also asked\
    \ how to implement the Fibonacci sequence in Julia, and I answered that question.\
    \ He also asked how to implement the Fibonacci sequence in Julia, and I answered\
    \ that question. He also asked how to implement the Fibonacci sequence in Julia,\
    \ and I answered that question. He also asked how to implement the Fibonacci sequence\
    \ in Julia, and I answered that question. He also asked how to implement the Fibonacci\
    \ sequence in Julia, and I answered that question. He also asked how to implement\
    \ the Fibonacci sequence in Julia, and I answered that question. He also asked\
    \ how to implement the Fibonacci sequence in Julia, and I answered that question.\
    \ He also asked how to implement the Fibonacci sequence in Julia, and I answered\
    \ that question. He also asked how to implement the Fibonacci sequence in Julia,\
    \ and I answered that question. He also asked how to implement the Fibonacci sequence\
    \ in Julia, and I answered that question. He also asked how to implement the Fibonacci\
    \ sequence ", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1)\
    \ + tri(n-2) + tri(n+1) + 1\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [3, 5, 8]\n@assert tri(4) == [3, 5]\n\
    @assert tri(5) == [3, 5, 8]\n@assert tri(6) == [3, 5, 8, 13]\n@assert tri(7) ==\
    \ [3, 5, 8, 13, 21]\n@assert tri(8) == [3, 5, 8, 13, 21]\n@assert tri(9) == [3,\
    \ 5, 8, 13, 21, 34]\n@assert tri(10) == [3, 5, 8, 13, 21, 34, 55]\n@assert tri(11)\
    \ == [3, 5, 8, 13, 21, 34, 55, 89]\n@assert tri(12) == [3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144]\n@assert tri(13) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n@assert\
    \ tri(14) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n@assert tri(15) ==\
    \ [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n@assert tri(16) == [3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n@assert tri(17) == [3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n@assert tri(18) == [3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n@assert tri(19)\
    \ == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n\
    @assert tri(20) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181, 6765]\n@assert tri(21) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\n@assert tri(22) == [3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10947,\
    \ 17711]\n@assert tri(23) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ", "    if\
    \ n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend", "    if n == 0\n        return Vector{Int64}()\n    else if n\
    \ == 1\n        return Vector{Int64}(3)\n    else\n        tri_1 = tri(n - 1)\
    \ + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        tri_3 = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n    end\n\
    end", "    if n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the Fibonacci sequence up to\
    \ a number n.\nExamples:\nfib(5) = [0, 1, 1, 2, 3, 5]\nfib(10) = [0, 1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34, 55, 89]\nfib(20) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\nHints:\nUse a while loop to keep track of the current number in the\
    \ sequence.\nUse a Vector to store the sequence and append the new number to the\
    \ end of the vector.\nUse a recursive function to compute the next number in the\
    \ sequence.\nUse a base case to terminate the recursion.", "    if n == 0 \n \
    \       return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert tri(2) == [3, 5]\n@assert tri(3)\
    \ == [3, 5, 8]\n@assert tri(4) == [3, 5]\n@assert tri(5) == [3, 5, 8]\n@assert\
    \ tri(6) == [3, 5, 8, 13]\n@assert tri(7) == [3, 5, 8, 13, 21]\n@assert tri(8)\
    \ == [3, 5, 8, 13, 21]\n@assert tri(9) == [3, 5, 8, 13, 21, 34]\n@assert tri(10)\
    \ == [3, 5, 8, 13, 21, 34, 55]\n@assert tri(11) == [3, 5, 8, 13, 21, 34, 55, 89]\n\
    @assert tri(12) == [3, 5, 8, 13, 21, 34, 55, 89, 144]\n@assert tri(13) == [3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233]\n@assert tri(14) == [3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377]\n@assert tri(15) == [3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n@assert tri(16) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987]\n@assert tri(17) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597]\n@assert tri(18) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584]\n@assert tri(19) == [3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181]\n@assert tri(20) == [3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n@assert tri(21)\
    \ == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 13462]\n@assert tri(22) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584, 4181, 6765, 13462, 19371]\n@assert tri(23", "    if n\
    \ == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend", "    if n == 0 \n        return Vector{Int64}()\n    elseif n\
    \ == 1 \n        return Vector{Int64}(3)\n    elseif n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Fibonacci numbers, also known as Fibonacci sequence. \n    \n    Fibonacci\
    \ numbers are the numbers in the following order: 0, 1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, \n    \u2026\n    \n    Fibonacci numbers are the most popular\
    \ mathematical sequences. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in modern mathematics. \n    They are also the most important mathematical\
    \ sequences in ", "    if n == 0 \n        return Vector{Int64}()\n    else if\
    \ n == 1 \n        return Vector{Int64}(3)\n    else \n        return Vector{Int64}(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [13, 21]\n\
    @assert tri(5) == [21, 34]\n@assert tri(6) == [34, 55]\n@assert tri(7) == [55,\
    \ 89]\n@assert tri(8) == [89, 144]\n@assert tri(9) == [144, 233]\n@assert tri(10)\
    \ == [233, 377]\n@assert tri(11) == [377, 610]\n@assert tri(12) == [610, 987]\n\
    @assert tri(13) == [987, 1597]\n@assert tri(14) == [1597,2584]\n@assert tri(15)\
    \ == [2584, 4181]\n@assert tri(16) == [4181, 6765]\n@assert tri(17) == [6765,\
    \ 10946]\n@assert tri(18) == [10946,17711]\n@assert tri(19) == [17711,28657]\n\
    @assert tri(20) == [28657, 46368]\n@assert tri(21) == [46368, 75025]\n@assert\
    \ tri(22) == [75025, 121393]\n@assert tri(23) == [121393, 196418]\n@assert tri(24)\
    \ == [196418, 317811]\n@assert tri(25) == [317811, 514229]\n@assert tri(26) ==\
    \ [514229, 832025]\n@assert tri(27) == [832025, 1346269]\n@assert tri(28) == [1346269,\
    \ 2178309]\n@assert tri(29) == [2178309, 3524578]\n@assert tri(30) == [3524578,\
    \ 5702887]\n@assert tri(31) == [5702887, 8356423]\n@assert tri(32) == [8356423,\
    \ 14745619]\n@assert tri(33) == [14745619, 2178309]\n@assert tri(34) == [2178309,\
    \ 3524578]\n@assert tri(35) == [3524578, 5702", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else \n        tri_1 =\
    \ tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        return\
    \ tri_1 + tri_2\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [1, 1]\n@assert tri(4) == 3\n@assert tri(6) == [1, 1, 3, 5]\n@assert tri(8)\
    \ == [1, 1, 3, 5, 8, 13]\n@assert tri(10) == [1, 1, 3, 5, 8, 13, 21, 34, 55]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci\
    \ number.", "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n \
    \       Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [3,1]\n\
    @assert tri(3) == [8,5,4,1]\n@assert tri(4) == [8,5,4,1,3]\n@assert tri(5) ==\
    \ [8,5,4,1,3,8]\n@assert tri(6) == [8,5,4,1,3,8,13,4,1,3,8]\n@assert tri(7) ==\
    \ [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n@assert tri(8) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(9) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(10) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(11) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(12) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(13) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8]\n\
    @assert tri(14) == [8,5,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,8,13,4,1,3,",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:\n$$n! = n \\times n-1 \\times n-2 \\times ....\
    \ \\times 2 \\times 1$$\nExamples:\n$$1! = 1$$\n$$2! = 2 $$\n$$3! = 6 $$\n$$4!\
    \ = 24$$\n$$5! = 120$$\n$$6! = 720$$\n$$7! = 5040$$\n$$8! = 40320$$\n$$9! = 362880$$\n\
    $$10! = 3628800 $$\n$$11! = 39916800 $$\n$$12! = 40320 $$\n$$13! = 40320 $$\n\
    $$14! = 40320 $$\n$$15! = 40320 $$\n$$16! = 40320 $$\n$$17! = 40320 $$\n$$18!\
    \ = 40320 $$\n$$19! = 40320 $$\n$$20! = 40320 $$\n$$21! = 40320 $$\n$$22! = 40320\
    \ $$\n$$23! = 40320 $$\n$$24! = 40320 $$\n$$25! = 40320 $$\n$$26! = 40320 $$\n\
    $$27! = 40320 $$\n$$28! = 40320 $$\n$$29! = 40320 $$\n$$30! = 40320 $$\n$$31!\
    \ = 40320 $$\n$$32! = 40320 $$\n$$33! = 40320 $$\n$$34! = 40320 $$\n$$35! = 40320\
    \ $$\n$$36! = 40320 $$\n$$37! = 40320 $$\n$$38! = 40320 $$\n$$39! = 40320 $$\n\
    $$40! = 40320 $$\n$$41! = 40320 $$\n$$42! = 40320 $$\n$$43! = 40320 $$\n$$44!\
    \ = 40320 $$\n$$45! = 40320 $$\n$$46! = 40320 $$\n$$47! = 40320", "    if n ==\
    \ 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\n\
    end", "    if n == 0\n        return Vector{Int64}()\n    end\n    tri_1 = tri(n\
    \ - 1) + tri(n - 2)\n    tri_2 = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    tri_3\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n    tri_4 = tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5)\n    tri_5 = tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\n    tri_6\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\
    \ + tri(n - 7)\n    tri_7 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\
    \ + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\n    tri_8 = tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7)\
    \ + tri(n - 8) + tri(n - 9)\n    tri_9 = tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9)\
    \ + tri(n - 10)\n    tri_10 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\
    \ + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10)\
    \ + tri(n - 11)\n    tri_11 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\
    \ + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10)\
    \ + tri(n - 11) + tri(n - 12)\n    tri_12 = tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13)\n    tri_13 = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri",
  "    if n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3)\
    \ == [8, 13]\n@assert tri(4) == [16, 21]\n@assert tri(5) == [25, 31]\n@assert\
    \ tri(6) == [36, 49]\n@assert tri(7) == [49, 64]\n@assert tri(8) == [64, 81]\n\
    @assert tri(9) == [80, 97]\n@assert tri(10) == [87, 113]\n@assert tri(11) == [96,\
    \ 121]\n@assert tri(12) == [103, 129]\n@assert tri(13) == [112, 137]\n@assert\
    \ tri(14) == [119, 144]\n@assert tri(15) == [126, 151]\n@assert tri(16) == [135,\
    \ 160]\n@assert tri(17) == [144, 167]\n@assert tri(18) == [153, 174]\n@assert\
    \ tri(19) == [160, 181]\n@assert tri(20) == [167, 189]\n@assert tri(21) == [174,\
    \ 196]\n@assert tri(22) == [181, 203]\n@assert tri(23) == [189, 212]\n@assert\
    \ tri(24) == [196, 219]\n@assert tri(25) == [203, 225]\n@assert tri(26) == [209,\
    \ 231]\n@assert tri(27) == [214, 238]\n@assert tri(28) == [219, 246]\n@assert\
    \ tri(29) == [224, 253]\n@assert tri(30) == [228, 260]\n@assert tri(31) == [233,\
    \ 267]\n@assert tri(32) == [238, 274]\n@assert tri(33) == [239, 281]\n@assert\
    \ tri(34) == [242, 288]\n@assert tri(35) == [246, 293]\n@assert tri(36) == [250,\
    \ 300]\n@assert tri(37) == [254, 305]\n@assert tri(38) == [258, 310]\n@assert\
    \ tri(39) == [", "    if n == 0\n        return Vector{Int64}()\n    elseif n\
    \ == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n numbers of the Fibonacci sequence \n    starting from 0.\n    Examples:\n\
    \        fibonacci(0) = fibonacci(1) = 0\n        fibonacci(1) = 1\n        fibonacci(2)\
    \ = 1\n        fibonacci(3) = 2\n        fibonacci(4) = 3\n        fibonacci(5)\
    \ = 5\n        fibonacci(6) = 8 \n        fibonacci(7) = 13\n        fibonacci(8)\
    \ = 21\n        fibonacci(9) = 55\n        fibonacci(10) = 89\n        fibonacci(11)\
    \ = 144\n        fibonacci(12) = 233\n        fibonacci(13) = 377\n        fibonacci(14)\
    \ = 610\n        fibonacci(15) = 987\n        fibonacci(16) = 1597\n        fibonacci(17)\
    \ = 2584\n        fibonacci(18) = 4181\n        fibonacci(19) = 6765\n       \
    \ fibonacci(20) = 10946\n        fibonacci(21) = 17711\n        fibonacci(22)\
    \ = 28657\n        fibonacci(23) = 46368\n        fibonacci(24) = 75025\n    \
    \    fibonacci(25) = 121393\n        fibonacci(26) = 196418\n        fibonacci(27)\
    \ = 317811\n        fibonacci(28) = 514229\n        fibonacci(29) = 832040\n \
    \       fibonacci(30) = 1346269\n        fibonacci(31) = 2178309\n        fibonacci(32)\
    \ = 4291933\n        fibonacci(33) = 6737648\n        fibonacci(34) = 10946990\n\
    \        fibonacci(35) = 17711989\n        fibonacci(36) = 28657599", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend", "    if n == 0\n        return Vector{Int64}()\n\
    \    else if n == 1\n        return Vector{Int64}(3)\n    else\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nI like the `Vector{Int64}` solution. Thanks!\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>", "    if n == 0 \n        return Vector{Int64}()\n    else if n\
    \ == 1 \n        return Vector{Int64}(3)\n    else \n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1\
    \ + tri_2 + tri_3\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<text>\nProblem 4\nWrite a Julia function named fibonacci that takes\
    \ an integer number n and returns the nth number of the Fibonacci sequence.\n\
    Examples:\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10)\
    \ = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonacci(10) = 55\nfibonac",
  "    if n == 0 \n        return Vector{Int64}()\n    elseif n == 1 \n        return\
    \ Vector{Int64}(3)\n    elseif n == 2 \n        return Vector{Int64}(1, 3)\n \
    \   elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n ==\
    \ 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else\
    \ \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n\
    \ - 1)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n - 3)\n        return tri_1\
    \ + tri_2 + tri_3\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI appreciate\
    \ your answer. However I do not understand how this answers the question. Can\
    \ you please elaborate on how this answers the question?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank\
    \ you for taking the time to write this answer. However I do not understand how\
    \ this answers the question. Can you please elaborate on how this answers the\
    \ question?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it\
    \ helps.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1) \n        tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) \n        return tri_1 +\
    \ tri_2 \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) ==\
    \ [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [16, 21]\n@assert tri(5)\
    \ == [25, 31]\n@assert tri(6) == [36, 49]\n@assert tri(7) == [49, 64]\n@assert\
    \ tri(8) == [64, 81]\n@assert tri(9) == [80, 97]\n@assert tri(10) == [87, 113]\n\
    @assert tri(11) == [96, 121]\n@assert tri(12) == [103, 129]\n@assert tri(13) ==\
    \ [110, 137]\n@assert tri(14) == [118, 145]\n@assert tri(15) == [126, 153]\n@assert\
    \ tri(16) == [135, 161]\n@assert tri(17) == [144, 169]\n@assert tri(18) == [153,\
    \ 177]\n@assert tri(19) == [162, 185]\n@assert tri(20) == [171, 193]\n@assert\
    \ tri(21) == [180, 201]\n@assert tri(22) == [189, 209]\n@assert tri(23) == [198,\
    \ 217]\n@assert tri(24) == [207, 225]\n@assert tri(25) == [216, 233]\n@assert\
    \ tri(26) == [225, 241]\n@assert tri(27) == [233, 249]\n@assert tri(28) == [240,\
    \ 258]\n@assert tri(29) == [249, 267]\n@assert tri(30) == [258, 275]\n@assert\
    \ tri(31) == [265, 283]\n@assert tri(32) == [274, 291]\n@assert tri(33) == [282,\
    \ 299]\n@assert tri(34) == [290, 308]\n@assert tri(35) == [298, 317]\n@assert\
    \ tri(36) == [316, 325]\n@assert tri(37) == [324, 333]\n@assert tri(38) == [331, ",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2)\
    \ + tri(n - 1)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n - 3)\n       \
    \ tri_4 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n        tri_5 = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5)\n        tri_6 = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\n    \
    \    tri_7 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) +\
    \ tri(n - 6) + tri(n - 7)\n        tri_8 = tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\n        tri_9\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\
    \ + tri(n - 7) + tri(n - 8) + tri(n - 9)\n        tri_10 = tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10)\n        tri_11 = tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\
    \ + tri(n - 9) + tri(n - 10) + tri(n - 11)\n        tri_12 = tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n\
    \ - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12)\n        tri_13\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\
    \ + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n -\
    \ 12) + tri(n - 13)\n        tri_14 = tri(n - 1) + tri(n - 2) + ", "    if n ==\
    \ 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [2,3]\n@assert tri(3)\
    \ == [3,5,8]\n@assert tri(4) == [4,7,11,14]\n@assert tri(5) == [5,10,15,21]\n\
    @assert tri(6) == [6,12,18,24]\n@assert tri(7) == [7,14,21,28]\n@assert tri(8)\
    \ == [8,17,25,32]\n@assert tri(9) == [9,21,35,49]\n@assert tri(10) == [10,26,42,57]\n\
    @assert tri(11) == [11,30,47,63]\n@assert tri(12) == [12,35,52,81]\n@assert tri(13)\
    \ == [13,40,59,100]\n@assert tri(14) == [14,46,64,113]\n@assert tri(15) == [15,53,82,135]\n\
    @assert tri(16) == [16,60,100,160]\n@assert tri(17) == [17,67,120,210]\n@assert\
    \ tri(18) == [18,75,150,250]\n@assert tri(19) == [19,84,180,300]\n@assert tri(20)\
    \ == [20,91,210,360]\n@assert tri(21) == [21,98,250,420]\n@assert tri(22) == [22,106,300,490]\n\
    @assert tri(23) == [23,113,360,570]\n@assert tri(24) == [24,121,420,640]\n@assert\
    \ tri(25) == [25,129,480,720]\n@assert tri(26) == [26,136,540,900]\n@assert tri(27)\
    \ == [27,144,600,1010]\n@assert tri(28) == [28,151,660,1200]\n@assert tri(29)\
    \ == [29,158,720,1310]\n@assert tri(30) == [30,165,800,1420]\n@assert tri(31)\
    \ == [31,173,840,1530]\n@assert tri(32) == [32,181,900,1645]\n@assert tri(33)\
    \ == [33,189,960,1755]\n@", "    if n == 1 \n        return [1]\n    else if n\
    \ == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri(n-1) = tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n     \
    \   return tri(n-1) \n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th number\
    \ of the Fibonacci sequence. \n    For example, Fibonacci(10) = 10.\n    You have\
    \ to return an Int64 number.\n    Examples:\n        Fibonacci(1) = 1\n      \
    \  Fibonacci(2) = 1\n        Fibonacci(3) = 2\n        Fibonacci(4) = 3\n    \
    \    Fibonacci(5) = 5\n        Fibonacci(6) = 8\n        Fibonacci(7) = 13\n \
    \       Fibonacci(8) = 21\n        Fibonacci(9) = 55\n        Fibonacci(10) =\
    \ 89\n    \"\"\"", "    if n == 0 \n        return Vector{Int64}()\n    else if\
    \ n == 1 \n        return Vector{Int64}(3)\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThe question was about a recursive solution, not iterative.\n<|/\
    \ c |>\n<| c |>\nI didn't see that he was asking for a recursive solution. My\
    \ bad.\n<|/ c |>\n<| a |>\n<code>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers from 1 to n.", "    if n\
    \ == 0 \n        return Vector{Int64}()\n    elseif n == 1 \n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend", "    if n == 0 \n        return Vector{Int64}() \n    else if\
    \ n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</code>\n<|/ a tags=recursion,julia |>\n<|\
    \ a dscore=1 |>\nThe first thing that comes to mind is to write a recursive function\
    \ which returns the nth Fibonacci number:\n<code>", "    if n == 1 \n        return\
    \ [3]\n    else if n == 2 \n        return [1, 3]\n    else \n        tri_1 =\
    \ tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        tri_3\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3)\n        return [tri_1, tri_2, tri_3]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0\n        return Vector{Int64}()\n\
    \    elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend", "    if n\
    \ == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else \n        tri(n-1)\
    \ = tri(n-1) + tri(n-2) + tri(n+2)\n        return tri(n-1) + tri(n-2) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else \n        tri(n-1)\
    \ + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\n    factorial(5)\
    \ = 5 * 4 * 3 * 2 * 1\n    factorial(3) = 2 * 1 * 3\n    factorial(4) = factorial(3)\
    \ * 4\n    factorial(5) = factorial(4) * factorial(3)\n    factorial(6) = factorial(5)\
    \ * factorial(4)\n    factorial(7) = factorial(6) * factorial(5)\n    factorial(8)\
    \ = factorial(7) * factorial(6)\n    factorial(9) = factorial(8) * factorial(7)\n\
    \    factorial(10) = factorial(9) * factorial(8)\n    factorial(11) = factorial(10)\
    \ * factorial(9)\n    factorial(12) = factorial(11) * factorial(10)\n    factorial(13)\
    \ = factorial(12) * factorial(11)\n    factorial(14) = factorial(13) * factorial(12)\n\
    \    factorial(15) = factorial(14) * factorial(13)\n    factorial(16) = factorial(15)\
    \ * factorial(14)\n    factorial(17) = factorial(16) * factorial(15)\n    factorial(18)\
    \ = factorial(17) * factorial(16)\n    factorial(19) = factorial(18) * factorial(17)\n\
    \    factorial(20) = factorial(19) * factorial(18)\n    factorial(21) = factorial(20)\
    \ * factorial(19)\n    factorial(22) = factorial(21) * factorial(20)\n    factorial(23)\
    \ = factorial(22) * factorial(21)\n    factorial(24) = factorial(23) * factorial(22)\n\
    \    factorial(25) = factorial(24) * factorial(23)\n    factorial(26) = factorial(25)\
    \ * factorial(24)\n    factorial(27) = factorial(26) * factorial(25)\n    factorial(28)\
    \ = factorial(27) * factorial(26)\n    factorial(29) = factorial(28) * factorial(27)\n\
    \    factorial(30) = factorial(29) * factorial(28)\n    factorial(31) = factorial(30)\
    \ * factorial(29)\n    factorial(32) = factorial(31) * factorial(30)\n    factorial(33)\
    \ = factorial(32) * factorial(31)\n    factorial(34) = factorial(33) * factorial(32)\n\
    \    factorial(35) = factorial(34) * factorial(33)\n    factorial(36) = factorial(35",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\n\
    end", "    if n == 1 \n        return [1]\n    elseif n == 2 \n        return\
    \ [1, 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n + 1) + tri(n\
    \ - 2)\n    end\nend", "    if n == 1 \n        return [1]\n    else if n == 2\
    \ \n        return [1, 1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) \n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(4) == [14, 21]\n@assert tri(5) == [24, 35]\n@assert tri(6) == [36,\
    \ 49]\n@assert tri(7) == [48, 61]\n@assert tri(8) == [57, 82]\n@assert tri(9)\
    \ == [87, 109]\n@assert tri(10) == [110, 131]\n@assert tri(11) == [137, 163]\n\
    @assert tri(12) == [169, 193]\n@assert tri(13) == [196, 229]\n@assert tri(14)\
    \ == [233, 275]\n@assert tri(15) == [278, 319]\n@assert tri(16) == [320, 371]\n\
    @assert tri(17) == [374, 425]\n@assert tri(18) == [428, 493]\n@assert tri(19)\
    \ == [496, 559]\n@assert tri(20) == [564, 615]\n@assert tri(21) == [618, 673]\n\
    @assert tri(22) == [676, 735]\n@assert tri(23) == [738, 803]\n@assert tri(24)\
    \ == [809, 873]\n@assert tri(25) == [878, 943]\n@assert tri(26) == [948, 1013]\n\
    @assert tri(27) == [1016, 1097]\n@assert tri(28) == [1102, 1174]\n@assert tri(29)\
    \ == [1175, 1244]\n@assert tri(30) == [1247, 1319]\n@assert tri(31) == [1321,\
    \ 1397]\n@assert tri(32) == [1400, 1479]\n@assert tri(33) == [1484, 1559]\n@assert\
    \ tri(34) == [1562, 1637]\n@assert tri(35) == [1640, 1715]\n@assert tri(36) ==\
    \ [1719, 1791]\n@assert tri(37) == [1795, 1869]\n@assert tri(38) == [1872, 1945]\n\
    @assert tri(39) == [1948, 2027]\n@assert ", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.", "    if n == 1 \n        return [1]\n  \
    \  else if n == 2 \n        return [1, 1]\n    else \n        tri_1 = tri(n -\
    \ 1) + tri(n - 2)\n        tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \
    \    return tri_1 + tri_2\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [3, 5]\n@assert tri(3) == [3, 5, 8]\n@assert tri(4) == [3, 5]\n@assert tri(5)\
    \ == [3, 5, 8]\n@assert tri(6) == [3, 5, 8]\n@assert tri(7) == [3, 5, 8]\n@assert\
    \ tri(8) == [3, 5, 8]\n@assert tri(9) == [3, 5, 8]\n@assert tri(10) == [3, 5,\
    \ 8]\n@assert tri(11) == [3, 5, 8]\n@assert tri(12) == [3, 5, 8]\n@assert tri(13)\
    \ == [3, 5, 8]\n@assert tri(14) == [3, 5, 8]\n@assert tri(15) == [3, 5, 8]\n@assert\
    \ tri(16) == [3, 5, 8]\n@assert tri(17) == [3, 5, 8]\n@assert tri(18) == [3, 5,\
    \ 8]\n@assert tri(19) == [3, 5, 8]\n@assert tri(20) == [3, 5, 8]\n@assert tri(21)\
    \ == [3, 5, 8]\n@assert tri(22) == [3, 5, 8]\n@assert tri(23) == [3, 5, 8]\n@assert\
    \ tri(24) == [3, 5, 8]\n@assert tri(25) == [3, 5, 8]\n@assert tri(26) == [3, 5,\
    \ 8]\n@assert tri(27) == [3, 5, 8]\n@assert tri(28) == [3, 5, 8]\n@assert tri(29)\
    \ == [3, 5, 8]\n@assert tri(30) == [3, 5, 8]\n@assert tri(31) == [3, 5, 8]\n@assert\
    \ tri(32) == [3, 5, 8]\n@assert tri(33) == [3, 5, 8]\n@assert tri(34) == [3, 5,\
    \ 8]\n@assert tri(35) == [3, 5, 8]\n@assert tri(36) == [3, 5, 8]\n@assert tri(37)\
    \ == [3, 5, 8]\n@assert tri(38) == [3, 5, 8]\n@assert tri(39) == [3, 5, 8]\n@assert\
    \ tri(40) == [3, 5, 8]\n@assert tri(41) == [3, 5, 8]\n@assert tri(42) == [3, 5,\
    \ 8]\n@assert tri(43) == [3, 5, 8]\n@assert tri(44) == [3, 5, 8]\n@assert tri(45)\
    \ == ", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2)\
    \ + tri(n - 1)\n        return tri_1 + tri_2\n    end\nend", "    if n == 1 \n\
    \        return [3]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend", "    if n == 0\n        return Vector{Int64}()\n  \
    \  elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n - 3)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n    end\nend", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n \
    \       tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</code>\n<|/\
    \ a |>\n<| a tags=recursion,julia,fibonacci |>\n<code>", "    if n == 0 \n   \
    \     return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2) + tri(n+1) +\
    \ Vector{Int64}(n) \n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the squares\
    \ of the first n numbers of the Fibonacci sequence. \n    For example, fib(5)\
    \ = 5, fib(10) = 55. \n    You have to write this function in Julia, not Python.\n\
    \    Examples:\n        fib(5) = 5\n        fib(10) = 55\n        fib(15) = 610\n\
    \        fib(20) = 120\n        fib(25) = 1655\n        fib(30) = 4181\n     \
    \   fib(35) = 8365\n        fib(40) = 17641\n        fib(45) = 514229\n      \
    \  fib(50) = 106050\n        fib(55) = 420190\n        fib(60) = 163430\n    \
    \    fib(65) = 725810\n        fib(70) = 2411035\n        fib(75) = 1033617\n\
    \        fib(80) = 4660045\n        fib(85) = 16796161\n        fib(90) = 6769740\n\
    \        fib(95) = 24351040\n        fib(100) = 121645180\n        fib(105) =\
    \ 507904310\n        fib(110) = 203953700\n        fib(115) = 907154780\n    \
    \    fib(120) = 467099465\n        fib(125) = 1655801430\n        fib(130) = 7258101265\n\
    \        fib(135) = 24110351055\n        fib(140) = 10336170435\n        fib(145)\
    \ = 46600451679\n        fib(150) = 16796161079\n        fib(155) = 72581012653\n\
    \        fib(160) = 241103510553\n        fib(165) = 103361704353\n        fib(170)\
    \ = 466004516793\n        fib(175) = 167961610793\n        fib(180) = 67697402435\n\
    \        fib(185) = 243510401216\n        fib(190) = 121645180467\n        fib(",
  "    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1, 1]\n\
    \    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n + 1) + tri(n - 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Recursive Fibonacci function.\n    \n    Arguments:\n    \n    n -\
    \ The number of the Fibonacci sequence to return.\n    \n    Returns:\n    \n\
    \    Fibonacci sequence from 0 to n.\n    \n    Examples:\n    \n    fib(0) =\
    \ 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n >\
    \ 2\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n     \
    \   tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n == 0 \n  \
    \      return Vector{Int64}()\n    elseif n == 1 \n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [16, 21]\n@assert tri(5)\
    \ == [25, 29]\n@assert tri(6) == [36, 45]\n@assert tri(7) == [49, 64]\n@assert\
    \ tri(8) == [64, 81]\n@assert tri(9) == [80, 97]\n@assert tri(10) == [100, 121]\n\
    @assert tri(11) == [120, 144]\n@assert tri(12) == [144, 163]\n@assert tri(13)\
    \ == [163, 181]\n@assert tri(14) == [181, 201]\n@assert tri(15) == [201, 221]\n\
    @assert tri(16) == [220, 243]\n@assert tri(17) == [243, 261]\n@assert tri(18)\
    \ == [261, 278]\n@assert tri(19) == [278, 305]\n@assert tri(20) == [305, 333]\n\
    @assert tri(21) == [333, 360]\n@assert tri(22) == [360, 398]\n@assert tri(23)\
    \ == [398, 425]\n@assert tri(24) == [425, 455]\n@assert tri(25) == [455, 487]\n\
    @assert tri(26) == [487, 514]\n@assert tri(27) == [514, 543]\n@assert tri(28)\
    \ == [543, 570]\n@assert tri(29) == [570, 598]\n@assert tri(30) == [598, 623]\n\
    @assert tri(31) == [624, 651]\n@assert tri(32) == [651, 678]\n@assert tri(33)\
    \ == [678, 705]\n@assert tri(34) == [705, 733]\n@assert tri(35) == [733, 760]\n\
    @assert tri(36) == [760, 788]\n@assert tri(37) == [788, 815]\n@assert tri(38)\
    \ == [815, 84", "    if n == 0 \n        return Vector{Int64}()\n    else if n\
    \ == 1 \n        return Vector{Int64}(3)\n    else \n        return Vector{Int64}(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3))\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the nth number of the Fibonacci sequence. \nExamples:\n    Fibonacci(0)\
    \ = 0\n    Fibonacci(1) = 1\n    Fibonacci(2) = 1\n    Fibonacci(3) = 2\n    Fibonacci(4)\
    \ = 3\n    Fibonacci(5) = 5\n    Fibonacci(6) = 8 \n    Fibonacci(7) = 13\n  \
    \  Fibonacci(8) = 21\n    Fibonacci(9) = 55\n    Fibonacci(10) = 89\n    Fibonacci(11)\
    \ = 144\n    Fibonacci(12) = 233\n    Fibonacci(13) = 377\n    Fibonacci(14) =\
    \ 610\n    Fibonacci(15) = 987\n    Fibonacci(16) = 1597\n    Fibonacci(17) =\
    \ 2584\n    Fibonacci(18) = 4181\n    Fibonacci(19) = 6765\n    Fibonacci(20)\
    \ = 10946\n    Fibonacci(21) = 17711\n    Fibonacci(22) = 28657\n    Fibonacci(23)\
    \ = 46368\n    Fibonacci(24) = 75025\n    Fibonacci(25) = 121393\n    Fibonacci(26)\
    \ = 196418\n    Fibonacci(27) = 317811\n    Fibonacci(28) = 514229\n    Fibonacci(29)\
    \ = 832040\n    Fibonacci(30) = 1346269\n    Fibonacci(31) = 2178309\n    Fibonacci(32)\
    \ = 4291933\n    Fibonacci(33) = 6773936\n    Fibonacci(34) = 10233415\n    Fibonacci(35)\
    \ = 165580141\n    Fibonacci(36) = 267914296\n    Fibonacci(37) = 433494437\n\
    \    Fibonacci(38) = 701408733\n    Fibonacci(39) = 1134", "    if n == 0 \n \
    \       return Vector{Int64}()\n    elseif n == 1 \n        return Vector{Int64}(3)\n\
    \    elseif n == 2 \n        return Vector{Int64}(1, 3)\n    elseif n % 2 == 0\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\n\
    end", "    if n == 0\n        return Vector{Int64}()\n    end\n    if n == 1\n\
    \        return Vector{Int64}(3)\n    end\n    if n % 2 == 0\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n == 0 \n    \
    \    Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend", "    if n == 0 \n        return Vector{Int64}()\n    elseif n\
    \ == 1 \n        return Vector{Int64}(3)\n    elseif n == 2 \n        return Vector{Int64}(1,\
    \ 3)\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == Vector{Int64}(2,\
    \ 3)\n@assert tri(4) == Vector{Int64}(3, 5)\n@assert tri(6) == Vector{Int64}(8,\
    \ 11, 13)\n@assert tri(8) == Vector{Int64}(8, 11, 13, 17)\n@assert tri(10) ==\
    \ Vector{Int64}(8, 11, 13, 17, 19, 23, 29)\n@assert tri(12) == Vector{Int64}(8,\
    \ 11, 13, 17, 19, 23, 29, 35, 41)\n@assert tri(14) == Vector{Int64}(8, 11, 13,\
    \ 17, 19, 23, 29, 35, 41, 43, 51)\n@assert tri(16) == Vector{Int64}(8, 11, 13,\
    \ 17, 19, 23, 29, 35, 41, 43, 51, 55, 61)\n@assert tri(18) == Vector{Int64}(8,\
    \ 11, 13, 17, 19, 23, 29, 35, 41, 43, 51, 55, 61, 67, 71)\n@assert tri(20) ==\
    \ Vector{Int64}(8, 11, 13, 17, 19, 23, 29, 35, 41, 43, 51, 55, 61, 67, 71, 83,\
    \ 91)\n@assert tri(22) == Vector{Int64}(8, 11, 13, 17, 19, 23, 29, 35, 41, 43,\
    \ 51, 55, 61, 67, 71, 83, 91, 103, 111, 127)\n@assert tri(24) == Vector{Int64}(8,\
    \ 11, 13, 17, 19, 23, 29, 35, 41, 43, 51, 55, 61, 67, 71, 83, 91, 103, 111, 127,\
    \ 137)\n@assert tri(26) == Vector{Int64}(8, 11, 13, 17, 19, 23, 29, 35, 41, 43,\
    \ 51, 55, 61, 67, 71, 83, 91, 103, 111, 127, 137, 147)\n@assert tri(28) == Vector{Int64}(8,\
    \ 11, 13, 17, 19, 23, 29, 35, 41, 43, 51, 55, 61, 67, 71, 83, 91, 103, 111, 127,\
    \ 137, 147, 157)\n@assert tri(30) == Vector{Int64}(8, 11, 13, 17, 19, 23, 29,\
    \ 35, 41, 43, 51, 55, ", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend", "    if n ==\
    \ 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [3]\n    elseif n == 2 \n        return [1, 3]\n    elseif n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 1]\n@assert tri(6) == [1, 1, 2, 3, 5, 8]\n@assert tri(10)\
    \ == [1, 1, 2, 3, 5, 8, 13, 21]\n@assert tri(11) == [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89]\n@assert tri(12) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,\
    \ 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n</cell>\n<text>\nProblem 7\nWrite a function that calculates the factorial\
    \ of a given number. \nThe factorial of a number $n!$ is defined as:\n$$n! = n\
    \ \\times n-1 \\times n-2 \\times .... 1 \\times 1$$\nExamples:\n$$n! = 1, 1!\
    \ = 1$$\n$$n! = 2, 2! = 2, 3! = 6$$\n$$n! = 3, 3! = 6, 6! = 120$$\n$$n! = 4, 4!\
    \ = 24, 12! = 120$$\n$$n! = 5, 5! = 120, 120! = 720$$\n$$n! = 6, 6! = 240, 240!\
    \ = 5040$$\n$$n! = 7, 7! = 5040, 5040! = 40320$$\n$$n! = 8, 8! = 403200, 403200!\
    \ = 362880$$\n$$n! = 9, 9! = 362800, 362800! = 39321600$$\n$$n! = 10, 10! = 39321600,\
    \ 39321600! = 403209600$$\n$$n! = 11, 11! = 403209600, 403209600! = 403209600$$\n\
    $$n! = 12, 12! = 403209600, 403209600! = 403209600$$\n$$n! = 13, 13! = 403209600,\
    \ 403209600! = 403209600$$\n$$n! = 14, 14! = ", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [2,3]\n@assert\
    \ tri(3) == [3,5,8]\n@assert tri(4) == [4,7,11,16]\n@assert tri(5) == [5,10,15,21]\n\
    @assert tri(6) == [6,12,18,24]\n@assert tri(7) == [7,14,21,27]\n@assert tri(8)\
    \ == [8,17,28,33]\n@assert tri(9) == [9,21,35,50]\n@assert tri(10) == [10,25,40,65]\n\
    @assert tri(11) == [11,30,45,80]\n@assert tri(12) == [12,35,52,100]\n@assert tri(13)\
    \ == [13,40,65,125]\n@assert tri(14) == [14,45,80,160]\n@assert tri(15) == [15,52,100,200]\n\
    @assert tri(16) == [16,65,125,250]\n@assert tri(17) == [17,80,160,300]\n@assert\
    \ tri(18) == [18,100,200,350]\n@assert tri(19) == [19,125,250,450]\n@assert tri(20)\
    \ == [20,160,300,600]\n@assert tri(21) == [21,200,350,750]\n@assert tri(22) ==\
    \ [22,250,450,1000]\n@assert tri(23) == [23,300,600,125]\n@assert tri(24) == [24,350,750,160]\n\
    @assert tri(25) == [25,450,1000,200]\n@assert tri(26) == [26,600,125,250]\n@assert\
    \ tri(27) == [27,750,160,300]\n@assert tri(28) == [28,1000,200,350]\n@assert tri(29)\
    \ == [29,125,250,450]\n@assert tri(30) == [30,160,300,600]\n@assert tri(31) ==\
    \ [31,200,350,750]\n@assert tri(32) == [32,250,450,1000]\n@assert tri(33) == [33,300,600,125]\n\
    @assert tri(34) == [34,350,750,160]", "    if n == 0 \n        return Vector{Int64}()\n\
    \    elseif n == 1 \n        return Vector{Int64}(3)\n    elseif n % 2 == 0 \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the first n positive integers. \nExamples:\n\
    \    sumsq(1) = 1\n    sumsq(2) = 1\n    sumsq(3) = 3\n    sumsq(4) = 9\n    sumsq(5)\
    \ = 25\n    sumsq(6) = 81\n    sumsq(7) = 243\n    sumsq(8) = 441\n    sumsq(9)\
    \ = 729\n    sumsq(10) = 1725\n    sumsq(11) = 4101\n    sumsq(12) = 8231\n  \
    \  sumsq(13) = 24343\n    sumsq(14) = 44141\n    sumsq(15) = 72943\n    sumsq(16)\
    \ = 172541\n    sumsq(17) = 410131\n    sumsq(18) = 823131\n    sumsq(19) = 243434\n\
    \    sumsq(20) = 441441\n    sumsq(21) = 729434\n    sumsq(22) = 1725413\n   \
    \ sumsq(23) = 4101313\n    sumsq(24) = 8231313\n    sumsq(25) = 2434343\n    sumsq(26)\
    \ = 4414414\n    sumsq(27) = 72943443\n    sumsq(28) = 172541341\n    sumsq(29)\
    \ = 410131341\n    sumsq(30) = 823131341\n    sumsq(31) = 243434343\n    sumsq(32)\
    \ = 441441441\n    sumsq(33) = 729434433\n    sumsq(34) = 1725413432\n    sumsq(35)\
    \ = 4101313432\n    sumsq(36) = 8231313432\n    sumsq(37) = 2434343434\n    sumsq(38)\
    \ = 4414414413\n    sumsq(39) = 7294344343\n    sumsq(40) = 1725413434\n    sumsq(41)\
    \ = 41013134", "    if n == 0 \n        return Vector{Int64}() \n    else if n\
    \ == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the factorial of a given\
    \ number. \nExamples:\n    factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n    factorial(4)\
    \ = 4 x 3 x 2 x 1 = 24\n    factorial(3) = 3 x 2 x 1 = 6\n    factorial(0) = 1\n\
    \    factorial(-1) = \u221E\n    factorial(1) = 1\n    factorial(-2) = \u221E\n\
    \    factorial(-3) = \u221E\n    factorial(-4) = \u221E\n    factorial(-5) = \u221E\
    \n    factorial(-6) = \u221E\n    factorial(-7) = \u221E\n    factorial(-8) =\
    \ \u221E\n    factorial(-9) = \u221E\n    factorial(-10) = \u221E\n    factorial(-11)\
    \ = \u221E\n    factorial(-12) = \u221E\n    factorial(-13) = \u221E\n    factorial(-14)\
    \ = \u221E\n    factorial(-15) = \u221E\n    factorial(-16) = \u221E\n    factorial(-17)\
    \ = \u221E\n    factorial(-18) = \u221E\n    factorial(-19) = \u221E\n    factorial(-20)\
    \ = \u221E\n    factorial(-21) = \u221E\n    factorial(-22) = \u221E\n    factorial(-23)\
    \ = \u221E\n    factorial(-24) = \u221E\n    factorial(-25) = \u221E\n    factorial(-26)\
    \ = \u221E\n    factorial(-27) = \u221E\n    factorial(-28) = \u221E\n    factorial(-29)\
    \ = \u221E\n    factorial(-30) = \u221E\n    factorial(-31) = \u221E\n    factorial(-32)\
    \ = \u221E\n    factorial(-33) = \u221E\n    factorial(-34) = \u221E\n    factorial(-35)\
    \ = \u221E\n    factorial(-36) = \u221E\n    factorial(-37) = \u221E\n    factorial(-38)\
    \ = \u221E\n    factorial(-39) = \u221E\n    factorial(-40) = \u221E\n    factorial(-41)\
    \ = \u221E\n    factorial(-42) = \u221E\n    factori", "    if n == 1 \n     \
    \   return [1]\n    elseif n == 2 \n        return [1, 1]\n    elseif n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 ==\
    \ 1 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [1, 1, 2]\n@assert\
    \ tri(3) == [1, 1, 2, 3, 5, 8]\n@assert tri(4) == [1, 1, 2, 3, 5, 8, 13]\n@assert\
    \ tri(5) == [1, 1, 2, 3, 5, 8, 13, 21]\n@assert tri(6) == [1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34]\n@assert tri(7) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n@assert tri(8)\
    \ == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n@assert tri(9) == [1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144]\n@assert tri(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233]\n@assert tri(11) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377]\n@assert tri(12) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n@assert tri(13) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987]\n@assert tri(14) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597]\n@assert tri(15) == [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n@assert tri(16) == [1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n\
    @assert tri(17) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765]\n@assert tri(18) == [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\n@assert\
    \ tri(19) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, ", "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n\
    \        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the sum of\
    \ the numbers from 1 to n.\nExamples:\n    sum1to2(3) = 3\n    sum1to2(5) = 5\n\
    \    sum1to2(10) = 55\n    sum1to2(100) = 1255\n    sum1to2(1000) = 12555\n  \
    \  sum1to2(10000) = 125555\n    sum1to2(100000) = 12555555\n    sum1to2(1000000)\
    \ = 125555555\n    sum1to2(10000000) = 12555555554\n    sum1to2(100000000) = 1255555555432\n\
    \    sum1to2(1000000000) = 125555555543210\n    sum1to2(10000000000) = 12555555554321010\n\
    \    sum1to2(100000000000) = 1255555555432101012\n    sum1to2(1000000000000) =\
    \ 1255555555432101012134\n    sum1to2(10000000000000) = 125555555543210101213445\n\
    \    sum1to2(100000000000000) = 12555555554321010121344546\n    sum1to2(1000000000000000)\
    \ = 1255555555432101012134454687\n    sum1to2(1000000000000000000) = 125555555543210101213445468790\n\
    \    sum1to2(10000000000000000000) = 1255555555432101012134454687901\n    sum1to2(100000000000000000000)\
    \ = 125555555543210101213445468790112\n    sum1to2(1000000000000000000000) = 12555555554321010121344546879011235\n\
    \    sum1to2(10000000000000000000000) = 12555555554321010121344546879011235678\n\
    \    sum1to2(100000000000000000000000) = 1255555555432101012134454687901123567890\n\
    \    sum1to2(1000000000000000000000000) = 12555555554321010121344546879011235",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4) + tri(n + 2) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [3, 5, 8]\n@assert tri(5) == [3, 5,\
    \ 8, 13]\n@assert tri(10) == [3, 5, 8, 13, 21, 34, 55]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the n-th Fibonacci number in the Fibonacci\
    \ sequence. \n    For example, fib(3) = fib(2) + fib(1).", "    if n == 0\n  \
    \      return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=recursion,julia |>\n<code>", "    if n == 1 \n  \
    \      return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n   \
    \     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else \n        return Vector{Int64}(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\nend\n</code>\n<|/ a |>\n<| a tags=fibonacci,julia |>\n<code>",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert tri(2) == [3, 5]\n\
    @assert tri(3) == [8, 13]\n@assert tri(4) == [16, 21]\n@assert tri(5) == [25,\
    \ 28]\n@assert tri(6) == [33, 37]\n@assert tri(7) == [46, 51]\n@assert tri(8)\
    \ == [60, 67]\n@assert tri(9) == [74, 81]\n@assert tri(10) == [92, 97]\n@assert\
    \ tri(11) == [114, 121]\n@assert tri(12) == [128, 135]\n@assert tri(13) == [144,\
    \ 151]\n@assert tri(14) == [158, 163]\n@assert tri(15) == [172, 177]\n@assert\
    \ tri(16) == [184, 191]\n@assert tri(17) == [198, 203]\n@assert tri(18) == [212,\
    \ 217]\n@assert tri(19) == [224, 231]\n@assert tri(20) == [238, 245]\n@assert\
    \ tri(21) == [252, 258]\n@assert tri(22) == [262, 267]\n@assert tri(23) == [274,\
    \ 281]\n@assert tri(24) == [288, 293]\n@assert tri(25) == [306, 311]\n@assert\
    \ tri(26) == [316, 321]\n@assert tri(27) == [328, 333]\n@assert tri(28) == [342,\
    \ 347]\n@assert tri(29) == [354, 361]\n@assert tri(30) == [367, 373]\n@assert\
    \ tri(31) == [380, 387]\n@assert tri(32) == [392, 399]\n@assert tri(33) == [406,\
    \ 411]\n@assert tri(34) == [419, 423]\n@assert tri(35) == [428, 435]\n@assert\
    \ tri(36) == [442, 447]\n@assert tri(37) == [454, 461]\n@assert tri(38) == [467,\
    \ 473]\n@assert tri(39) == [479, 485]\n@assert tri(40) == [491, 497]\n@assert\
    \ tri(4", "    if n == 0\n        Vector{Int64}()\n    elseif n == 1\n       \
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.4>\ntri(10)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the squares of the\
    \ first n positive integers. \nExamples:\n    sumsq(1) = 1\n    sumsq(2) = 4\n\
    \    sumsq(3) = 9\n    sumsq(4) = 16\n    sumsq(5) = 25\n    sumsq(6) = 31\n \
    \   sumsq(7) = 42\n    sumsq(8) = 64\n    sumsq(9) = 81\n    sumsq(10) = 144\n\
    \    sumsq(11) = 233\n    sumsq(12) = 466\n    sumsq(13) = 693\n    sumsq(14)\
    \ = 918\n    sumsq(15) = 1230\n    sumsq(16) = 1530\n    sumsq(17) = 1833\n  \
    \  sumsq(18) = 2133\n    sumsq(19) = 2466\n    sumsq(20) = 2794\n    sumsq(21)\
    \ = 3126\n    sumsq(22) = 3456\n    sumsq(23) = 3779\n    sumsq(24) = 4186\n \
    \   sumsq(25) = 4699\n    sumsq(26) = 5119\n    sumsq(27) = 5620\n    sumsq(28)\
    \ = 6150\n    sumsq(29) = 6774\n    sumsq(30) = 7395\n    sumsq(31) = 8014\n \
    \   sumsq(32) = 8741\n    sumsq(33) = 9474\n    sumsq(34) = 10197\n    sumsq(35)\
    \ = 10800\n    sumsq(36) = 11497\n    sumsq(37) = 12202\n    sumsq(38) = 12800\n\
    \    sumsq(39) = 13497\n    sumsq(40) = 14202\n    sumsq(41) = 14899\n    sumsq(42)\
    \ = 15598\n    sumsq(43) = 16398\n    sumsq(44) = 17098\n    sumsq(45) = 17798\n\
    \    sumsq(46) = 18598\n    ", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 1]\n    else \n        tri_1 = tri(n - 1) + tri(n\
    \ - 2)\n        tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1\
    \ + tri_2\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\n\
    \        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n    elseif\
    \ n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n       \
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend",
  "    if n == 1 \n        return [3]\n    elseif n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(", "    if n == 0 \n     \
    \   return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n + 2) \nend", "    if n == 1 \n        return [1]\n\
    \    elseif n == 2 \n        return [1, 1]\n    elseif n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a dscore=2 |>\nI believe this can be done using only recursion:\n<code>",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 1 \n        return [1]\n    else if n\
    \ == 2 \n        return [1, 1]\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+1) + Vector{Int64}(n) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(4) == [13, 21]\n@assert tri(5) == [16, 25, 31]\n@assert tri(6) ==\
    \ [25, 36, 49]\n@assert tri(7) == [36, 49, 64]\n@assert tri(8) == [49, 64, 81]\n\
    @assert tri(9) == [64, 81, 100]\n@assert tri(10) == [81, 100, 121]\n@assert tri(11)\
    \ == [100, 121, 144]\n@assert tri(12) == [121, 144, 168]\n@assert tri(13) == [144,\
    \ 168, 193]\n@assert tri(14) == [168, 193, 220]\n@assert tri(15) == [193, 220,\
    \ 252]\n@assert tri(16) == [220, 252, 283]\n@assert tri(17) == [252, 283, 324]\n\
    @assert tri(18) == [283, 324, 366]\n@assert tri(19) == [324, 366, 419]\n@assert\
    \ tri(20) == [366, 419, 484]\n@assert tri(21) == [419, 484, 541]\n@assert tri(22)\
    \ == [484, 541, 612]\n@assert tri(23) == [541, 612, 673]\n@assert tri(24) == [612,\
    \ 673, 729]\n@assert tri(25) == [673, 729, 796]\n@assert tri(26) == [729, 796,\
    \ 841]\n@assert tri(27) == [796, 841, 913]\n@assert tri(28) == [841, 913, 980]\n\
    @assert tri(29) == [913, 980, 1047]\n@assert tri(30) == [980, 1047, 1123]\n@assert\
    \ tri(31) == [1047, 1123, 1188]\n@assert tri(32) == [1123, 1188, 1255]\n@assert\
    \ tri(33) == [1188, 1255, 1321]\n@assert tri(34) == [1255, 1321, 1397]\n@assert\
    \ tri(35) == [1321, 1347, 1444]\n@assert tri(36", "    if n == 0\n        Vector{Int64}(0)\n\
    \    elseif n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that calculates the sum of all numbers from 1 to n that are divisible by 3.",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\nLet's test our\
    \ function", "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n\
    \        Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the factorial of a given number. \nExamples:\n    factorial(5) = 5 * 5 * 4 *\
    \ 3 * 2 = 120\n    factorial(10) = 10 x 10 x 10 x 10 x 10 = 1,000 x 1,000 x 1,000\
    \ x 1,000 x 1,000 x 1,000 = 10,000,000\n    factorial(0) returns 1\n    factorial(-1)\
    \ returns an error\n    factorial(-2) returns an error\n    factorial(1000) returns\
    \ an error\n    factorial(100) returns an error\n    factorial(1000) returns an\
    \ error\n    factorial(1000000000000) returns an error\n    factorial(100000000000000)\
    \ returns an error\n    factorial(1000000000000000000) returns an error\n    factorial(1000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000) returns an error\n    factorial(1000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(100000000000000000000000000000000) returns an error\n\
    \    factorial(1000000000000000000000000000000000) returns an error\n    factorial(100000000000000000000000000000000)\
    \ returns an error\n    factorial(1000000000000000000000000000000000) returns\
    \ an error\n    factorial(", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n-1)\
    \ + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend", "    if n == 0\n        return\
    \ Vector{Int64}()\n    end\n    if n == 1\n        return Vector{Int64}(3)\n \
    \   end\n    if n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    end\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-0.6>\n@assert tri(2) == [3,5,7]\n@assert tri(8) == [3,5,7,11,13,17,19]\n\
    @assert tri(10) == [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    @assert tri(11) == [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers. \nExamples:\n    sumsquares(1) = 1\n    sumsquares(2)\
    \ = 4\n", "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1\
    \ \n        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th number\
    \ of the Fibonacci sequence. \n    For example, Fibonacci(10) = 10, Fibonacci(20)\
    \ = 55 and so on. \n    You have to return an Int or Float64. \n    \n    Examples:\n\
    \        Fibonacci(10) = 10\n        Fibonacci(20) = 55\n        Fibonacci(30)\
    \ = 120\n        Fibonacci(100) = 139855\n        Fibonacci(1000) = 1398550087\n\
    \        Fibonacci(10000) = 1398550087\n        Fibonacci(100000) = 1398550087\n\
    \        Fibonacci(1000000) = 1398550087\n        Fibonacci(10000000) = 1398550087\n\
    \        Fibonacci(100000000) = 1398550087\n        Fibonacci(1000000000) = 1398550087\n\
    \        Fibonacci(10000000000) = 1398550087\n        Fibonacci(100000000000)\
    \ = 1398550087\n        Fibonacci(1000000000000) = 1398550087\n        Fibonacci(10000000000000)\
    \ = 1398550087\n        Fibonacci(100000000000000) = 1398550087\n        Fibonacci(1000000000000000)\
    \ = 1398550087\n        Fibonacci(10000000000000000) = 1398550087\n        Fibonacci(100000000000000000)\
    \ = 1398550087\n        Fibonacci(1000000000000000000) = 1398550087\n        Fibonacci(10000000000000000000)\
    \ = 1398550087\n        Fibonacci(100000000000000000000) = 1398550087\n      \
    \  Fibonacci(1000000000000000000000) = 1398550087\n        Fibonacci(10000000000000000000000)\
    \ = 1398550087\n        Fibonacci(100000000000000000000000) = 1398550087\n   \
    \     Fibonacci(1000000000000000000000000) = 1398550087", "    if n == 0 \n  \
    \      return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end", "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n    \
    \    return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3)\n    else\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3,5]\n@assert tri(5) == [5,10,15,20]\n@assert tri(10) == [10,20,35,50]\n\
    @assert tri(15) == [15,35,65,90]\n@assert tri(20) == [20,55,105,150]\n@assert\
    \ tri(25) == [25,65,135,205]\n@assert tri(30) == [30,85,175,310]\n@assert tri(35)\
    \ == [35,90,225,370]\n@assert tri(40) == [40,105,275,530]\n@assert tri(45) ==\
    \ [45,135,325,770]\n@assert tri(50) == [50,175,425,1050]\n@assert tri(55) == [55,225,575,1525]\n\
    @assert tri(60) == [60,275,825,2075]\n@assert tri(65) == [65,325,1025,3025]\n\
    @assert tri(70) == [70,425,1365,4025]\n@assert tri(75) == [75,575,1725,5025]\n\
    @assert tri(80) == [80,825,2255,7025]\n@assert tri(85) == [85,1025,3250,9025]\n\
    @assert tri(90) == [90,1365,4250,10525]\n@assert tri(95) == [95,1725,5250,15625]\n\
    @assert tri(100) == [100,2255,7125,20875]\n@assert tri(105) == [105,3250,10125,30375]\n\
    @assert tri(110) == [110,4250,11125,40625]\n@assert tri(115) == [115,5250,11225,50625]\n\
    @assert tri(120) == [120,7125,11250,60625]\n@assert tri(125) == [125,11250,12250,70625]\n\
    @assert tri(130) == [130,11250,13250,90625]\n@assert tri(135) == [13", "    if\
    \ n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        return Vector{Int64}(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    end\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [1, 1, 2]\n@assert\
    \ tri(3) == [1, 1, 2, 3, 5, 8]\n@assert tri(4) == [1, 1, 2, 5, 15, 21, 28, 35,\
    \ 50]\n@assert tri(5) == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285, 420,\
    \ 550]\n@assert tri(6) == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285,\
    \ 420, 550, 835, 1000]\n@assert tri(7) == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85,\
    \ 140, 210, 285, 420, 550, 835, 1000, 1155]\n@assert tri(8) == [1, 1, 2, 5, 15,\
    \ 21, 28, 35, 50, 85, 140, 210, 285, 420, 550, 835, 1000, 1155, 1310]\n@assert\
    \ tri(9) == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285, 420, 550, 835,\
    \ 1000, 1155, 1310, 1605]\n@assert tri(10) == [1, 1, 2, 5, 15, 21, 28, 35, 50,\
    \ 85, 140, 210, 285, 420, 550, 835, 1000, 1155, 1310, 1605, 1920]\n@assert tri(11)\
    \ == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285, 420, 550, 835, 1000,\
    \ 1155, 1310, 1605, 1920, 2335]\n@assert tri(12) == [1, 1, 2, 5, 15, 21, 28, 35,\
    \ 50, 85, 140, 210, 285, 420, 550, 835, 1000, 1155, 1310, 1605, 1920, 2335, 2780]\n\
    @assert tri(13) == [1, 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285, 420, 550,\
    \ 835, 1000, 1155, 1310, 1605, 1920, 2335, 2780, 3035]\n@assert tri(14) == [1,\
    \ 1, 2, 5, 15, 21, 28, 35, 50, 85, 140, 210, 285, 420, 550, 835, 1000, 1155, 1310,\
    \ 1605, 1920, 2335, 2780, 3035, 3410]\n@assert tri(15) == [1, 1, 2, 5, 15, 21,\
    \ 28, 35, 50, 85, 140, ", "    if n == 0\n        return Vector{Int64}()\n   \
    \ elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(5) == [34, 55]\n@assert tri(10) == [86, 105]\n@assert tri(11) == [86,\
    \ 105, 130]\n@assert tri(12) == [86, 105, 130, 173]\n@assert tri(13) == [86, 105,\
    \ 130, 173, 206]\n@assert tri(14) == [86, 105, 130, 173, 206, 237]\n@assert tri(15)\
    \ == [86, 105, 130, 173, 206, 237, 286]\n@assert tri(16) == [86, 105, 130, 173,\
    \ 206, 237, 286, 331]\n@assert tri(17) == [86, 105, 130, 173, 206, 237, 286, 331,\
    \ 374]\n@assert tri(18) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429]\n\
    @assert tri(19) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429, 477]\n@assert\
    \ tri(20) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429, 477, 539]\n@assert\
    \ tri(21) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429, 477, 539, 595]\n\
    @assert tri(22) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429, 477, 539,\
    \ 595, 647]\n@assert tri(23) == [86, 105, 130, 173, 206, 237, 286, 331, 374, 429,\
    \ 477, 539, 595, 647, 713]\n@assert tri(24) == [86, 105, 130, 173, 206, 237, 286,\
    \ 331, 374, 429, 477, 539, 595, 647, 713, 784]\n@assert tri(25", "    if n ==\
    \ 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) == [3, 5]\n\
    @assert tri(3) == [8, 13]\n@assert tri(4) == [13, 21]\n@assert tri(5) == [16,\
    \ 25, 30]\n@assert tri(6) == [25, 35, 45]\n@assert tri(7) == [35, 55, 61]\n@assert\
    \ tri(8) == [55, 64, 81]\n@assert tri(9) == [64, 81, 100]\n@assert tri(10) ==\
    \ [81, 100, 121]\n@assert tri(11) == [100, 121, 144]\n@assert tri(12) == [121,\
    \ 144, 169]\n@assert tri(13) == [144, 169, 193]\n@assert tri(14) == [169, 193,\
    \ 225]\n@assert tri(15) == [193, 225, 250]\n@assert tri(16) == [193, 225, 250]\n\
    @assert tri(17) == [193, 225, 250]\n@assert tri(18) == [193, 225, 250]\n@assert\
    \ tri(19) == [193, 225, 250]\n@assert tri(20) == [193, 225, 250]\n@assert tri(21)\
    \ == [193, 225, 250]\n@assert tri(22) == [193, 225, 250]\n@assert tri(23) == [193,\
    \ 225, 250]\n@assert tri(24) == [193, 225, 250]\n@assert tri(25) == [193, 225,\
    \ 250]\n@assert tri(26) == [193, 225, 250]\n@assert tri(27) == [193, 225, 250]\n\
    @assert tri(28) == [193, 225, 250]\n@assert tri(29) == [193, 225, 250]\n@assert\
    \ tri(30) == [193, 225, 250]\n@assert tri(31) == [193, 225, 250]\n@assert tri(32)\
    \ == [193, 225, 250]\n@assert tri(33) == [193, 225, 250]\n@assert tri(34) == ",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert tri(2) == [3, 5]\n\
    @assert tri(3) == [8, 13]\n@assert tri(4) == [14, 21]\n@assert tri(5) == [35,\
    \ 55]\n@assert tri(6) == [89, 144]\n@assert tri(7) == [149, 233]\n@assert tri(8)\
    \ == [234, 377]\n@assert tri(9) == [378, 613]\n@assert tri(10) == [634, 987]\n\
    @assert tri(11) == [988, 1597]\n@assert tri(12) == [1600, 2584]\n@assert tri(13)\
    \ == [2585, 4123]\n@assert tri(14) == [4124, 6553]\n@assert tri(15) == [6554,\
    \ 9876]\n@assert tri(16) == [9877, 17711]\n@assert tri(17) == [17712, 28657]\n\
    @assert tri(18) == [28658, 46368]\n@assert tri(19) == [46369, 75025]\n@assert\
    \ tri(20) == [75026, 121393]\n@assert tri(21) == [121394, 196418]\n@assert tri(22)\
    \ == [196419, 317811]\n@assert tri(23) == [317812, 514229]\n@assert tri(24) ==\
    \ [514230, 8320409]\n@assert tri(25) == [8320410, 13462697]\n@assert tri(26) ==\
    \ [13462698, 21783097]\n@assert tri(27) == [21783098, 3524578]\n@assert tri(28)\
    \ == [3524579, 5702887]\n@assert tri(29) == [5702888, 82354303]\n@assert tri(30)\
    \ == [82354304, 137475269]\n@assert tri(31) == [137475270, 217987819]\n@assert\
    \ tri(32) == [217987820, 353361579]\n@assert tri(33) == [353361580, 570594287]\n\
    @assert tri(34) == [570594288, 832902008", "    if n == 0\n        return Vector{Int64}()\n\
    \    elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the nth number of the Fibonacci sequence. \n    For example, Fibonacci(10)\
    \ = 10, Fibonacci(8) = 13, Fibonacci(7) = 13, Fibonacci(6) = 20.", "    if n ==\
    \ 0\n        return Vector{Int64}()\n    else if n == 1\n        return Vector{Int64}(3)\n\
    \    else\n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2)\
    \ + tri(n - 1)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 3]\n@assert tri(3) == [8, 5, 3]\n@assert tri(4) == [8, 5,\
    \ 3, 1]\n@assert tri(5) == [8, 5, 3, 1, 2, 1]\n@assert tri(6) == [8, 5, 3, 1,\
    \ 2, 1, 1, 1]\n@assert tri(7) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(8)\
    \ == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n@assert tri(9) == [8, 5, 3, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(10) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1]\n@assert tri(11) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1, 2, 1]\n@assert tri(12) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1]\n@assert tri(13) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(14) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n@assert tri(15) == [8, 5, 3, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(16)\
    \ == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\
    \ 2, 1, 1, 1]\n@assert tri(17) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(18) == [8, 5, 3, 1,\
    \ 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1]\n@assert tri(19) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\
    \ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(20) == [8, 5,\
    \ 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\
    \ 2, 1, 1, 1, 2, 1, 1, 1]\n@assert tri(21) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\
    \ 1]\n@assert tri(22) == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]\n@assert tri(23)\
    \ == [8, 5, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, ",
  "    if n == 0\n        Vector{Int64}()\n    else\n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [3, 5]\n@assert tri(3) == [3, 5, 8]\n@assert tri(4) == [3, 5]\n@assert tri(5)\
    \ == [3, 5, 8]\n@assert tri(6) == [3, 5, 8, 13]\n@assert tri(7) == [3, 5, 8, 13,\
    \ 21]\n@assert tri(8) == [3, 5, 8, 13, 21, 34]\n@assert tri(9) == [3, 5, 8, 13,\
    \ 21, 34, 55]\n@assert tri(10) == [3, 5, 8, 13, 21, 34, 55, 89]\n@assert tri(11)\
    \ == [3, 5, 8, 13, 21, 34, 55, 89, 144]\n@assert tri(12) == [3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233]\n@assert tri(13) == [3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377]\n@assert tri(14) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    @assert tri(15) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n@assert\
    \ tri(16) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n@assert\
    \ tri(17) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n\
    @assert tri(18) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181]\n@assert tri(19) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584, 4181, 6765]\n@assert tri(20) == [3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\n@assert tri(21)\
    \ == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10947, 17711]\n@assert tri(22) == [3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597, 2584, 4181, 67", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else if n % 2 == 0\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", "    if n == 0\n  \
    \      Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert tri(2) == [3,5,7]\n@assert tri(3) == [3,5,7,11,13,17,19]\n@assert tri(4)\
    \ == [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    @assert tri(5) == [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n\
    @assert tri(6) == [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else \n        tri_1 =\
    \ tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        return\
    \ tri_1 + tri_2\n    end\nend", "    if n == 0\n        Vector{Int64}()\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThe code in the question does not use recursion.\n<|/ c |>\n<| c |>\n\
    I believe this answer should be updated to use recursion.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    if n == 1 \n        return [1]\n    else if n == 2 \n    \
    \    return [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of all even numbers in a given list.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3,5]\n@assert tri(3) == [3,5,8]\n\
    @assert tri(4) == [3,5,8,13]\n@assert tri(5) == [3,5,8,13,21]\n@assert tri(6)\
    \ == [3,5,8,13,21,34]\n@assert tri(7) == [3,5,8,13,21,34,55]\n@assert tri(8) ==\
    \ [3,5,8,13,21,34,55,89]\n@assert tri(9) == [3,5,8,13,21,34,55,89,144]\n@assert\
    \ tri(10) == [3,5,8,13,21,34,55,89,144,233]\n@assert tri(11) == [3,5,8,13,21,34,55,89,144,233,377]\n\
    @assert tri(12) == [3,5,8,13,21,34,55,89,144,233,377,613]\n@assert tri(13) ==\
    \ [3,5,8,13,21,34,55,89,144,233,377,613,987]\n@assert tri(14) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597]\n\
    @assert tri(15) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597,2584]\n@assert\
    \ tri(16) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597,2584,4181]\n@assert\
    \ tri(17) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597,2584,4181,6765]\n\
    @assert tri(18) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597,2584,4181,6765,10946]\n\
    @assert tri(19) == [3,5,8,13,21,34,55,89,144,233,377,613,987,1597,2584,4181,6765,10946,17711]\n\
    @assert tri(20) == [3,5,8,13,21,34,55,89,", "    if n == 0\n        Vector{Int64}()\n\
    \    elseif n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) + tri(n - 4)\n    end\nend", "    if n == 1 \n        return [3]\n\
    \    elseif n == 2 \n        return [1, 3]\n    elseif n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the Fibonacci\
    \ sequence up to a number n.\nExamples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\n\
    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\n\
    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\n\
    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 2\n\
    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2) for n > 2\nExamples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > ", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else if n % 2 == 0 \n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", "    if n == 0 \n \
    \       return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) \n    end\nend\n</cell>\n<text>\nTribonacci sequence is defined recursively\
    \ by three numbers: $a$, $b$ and $c$. \nThe first two numbers are $a$ and $b$,\
    \ they define the sequence and $c$ is $a$ + $b$. \nThe third number is $c$, it\
    \ is $a$ + $b$ + $c$. \nThe sequence is defined recursively by two numbers: $a$\
    \ and $b$. \nThe third number is $c$, it is $a$ + $b$ + $c$. \nThe sequence is\
    \ defined recursively by three numbers: $a$, $b$ and $c$. \nThe third number is\
    \ $c$, it is $a$ + $b$ + $c$. \nThe sequence is defined recursively by three numbers:\
    \ $a$, $b$ and $c$. \nThe third number is $c$, it is $a$ + $b$ + $c$. \nThe sequence\
    \ is defined recursively by three numbers: $a$, $b$ and $c$. \nThe third number\
    \ is $c$, it is $a$ + $b$ + $c$. \nThe sequence is defined recursively by three\
    \ numbers: $a$, $b$ and $c$. \nThe third number is $c$, it is $a$ + $b$ + $c$.\
    \ \nThe sequence is defined recursively by three numbers: $a$, $b$ and $c$. \n\
    The third number is $c$, it is $a$ + $b$ + $c$. \nThe sequence is defined recursively\
    \ by three numbers: $a$, $b$ and $c$. \nThe third number is $c$, it is $a$ + $b$\
    \ + $c$. \nThe sequence is defined recursively by three numbers: $a$, $b$ and\
    \ $c$. \nThe third number is $c$, it is $a$ + $b$ + $c$. \nThe sequence is defined\
    \ recursively by three numbers: $a$, $b$ and $c$. \nThe third number is $c$, it\
    \ is $a$ + $b$ + $", "    if n == 0\n        return Vector{Int64}()\n    elseif\
    \ n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [13, 21]\n\
    @assert tri(5) == [20, 35]\n@assert tri(6) == [35, 50]\n@assert tri(7) == [50,\
    \ 73]\n@assert tri(8) == [73, 102]\n@assert tri(9) == [102, 121]\n@assert tri(10)\
    \ == [121, 140]\n@assert tri(11) == [140, 163]\n@assert tri(12) == [163, 181]\n\
    @assert tri(13) == [181, 202]\n@assert tri(14) == [202, 225]\n@assert tri(15)\
    \ == [225, 253]\n@assert tri(16) == [253, 272]\n@assert tri(17) == [272, 291]\n\
    @assert tri(18) == [291, 308]\n@assert tri(19) == [308, 323]\n@assert tri(20)\
    \ == [323, 337]\n@assert tri(21) == [337, 356]\n@assert tri(22) == [356, 375]\n\
    @assert tri(23) == [375, 394]\n@assert tri(24) == [394, 413]\n@assert tri(25)\
    \ == [413, 423]\n@assert tri(26) == [423, 434]\n@assert tri(27) == [434, 443]\n\
    @assert tri(28) == [443, 452]\n@assert tri(29) == [452, 461]\n@assert tri(30)\
    \ == [461, 470]\n@assert tri(31) == [470, 479]\n@assert tri(32) == [479, 488]\n\
    @assert tri(33) == [488, 497]\n@assert tri(34) == [497, 506]\n@assert tri(35)\
    \ == [506, 513]\n@assert tri(36) == [513, 522]\n@assert tri(37) == [522, 532]\n\
    @assert tri(38) == [532, 541]\n@", "    if n == 1 \n        return [1]\n    else\
    \ if n == 2 \n        return [1, 1]\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\nend", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [1,2,3]\n@assert tri(3) == [1,2,3,4,5]\n\
    @assert tri(5) == [1,2,3,4,5,6]\n@assert tri(10) == [1,2,3,4,5,6,7,8,9,10]\n@assert\
    \ tri(11) == [1,2,3,4,5,6,7,8,9,10,11]\n@assert tri(12) == [1,2,3,4,5,6,7,8,9,10,11,12]\n\
    @assert tri(13) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n@assert tri(14) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n\
    @assert tri(15) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n@assert tri(16) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\
    @assert tri(17) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n@assert tri(18)\
    \ == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n@assert tri(19) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    @assert tri(20) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n@assert\
    \ tri(21) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n@assert\
    \ tri(22) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n@assert\
    \ tri(23) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n@assert\
    \ tri(24) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n\
    @assert tri(25) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n\
    @assert tri(26) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3)\nend\n</cell>\n<code language=julia-1.3>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number. \nExamples:\n    factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n  \
    \  factorial(3) = 6 x 5 x 4 x 3 x 2 x 1 = 720\n    factorial(4) = 8 x 6 x 5 x\
    \ 4 x 3 x 2 x 1 = 5040\n    factorial(6) = 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 40320\n\
    \    factorial(7) = 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 362880\n    factorial(8)\
    \ = 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 29691200\n    factorial(9) = 16\
    \ x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 219585600\n    factorial(10) =\
    \ 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 1577836800\n    factorial(11)\
    \ = 20 x 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 13743895200\n  \
    \  factorial(12) = 22 x 20 x 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x\
    \ 1 = 11490716800\n    factorial(13) = 24 x 22 x 20 x 18 x 16 x 14 x 12 x 10 x\
    \ 8 x 6 x 5 x 4 x 3 x 2 x 1 = 91941328240\n    factorial(14) = 26 x 24 x 22 x\
    \ 20 x 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 788165286400\n   \
    \ factorial(15) = 28 x 26 x 24 x 22 x 20 x 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5\
    \ x 4 x 3 x 2 x 1 = 671088643200\n    factorial(16) = 30 x 28 x 26 x 24 x 22 x\
    \ 20 x 18 x 16 x 14 x 12 x 10 x 8 x 6 x 5 x 4 x 3 x 2 x 1 = 53687091200\n    factori",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2) ==\
    \ [3, 5]\n@assert tri(3) == [3, 6, 9]\n@assert tri(4) == [4, 8, 12, 16]\n@assert\
    \ tri(5) == [5, 10, 15, 20, 25]\n@assert tri(6) == [6, 12, 18, 24, 30]\n@assert\
    \ tri(7) == [7, 14, 21, 28, 35, 40]\n@assert tri(8) == [8, 16, 24, 32, 40, 48]\n\
    @assert tri(9) == [9, 18, 27, 36, 45, 52, 57]\n@assert tri(10) == [10, 20, 30,\
    \ 42, 56, 63, 70]\n@assert tri(11) == [11, 22, 33, 46, 61, 70, 77, 84]\n@assert\
    \ tri(12) == [12, 24, 36, 48, 72, 88, 104, 120]\n@assert tri(13) == [13, 26, 39,\
    \ 51, 76, 103, 127, 144]\n@assert tri(14) == [14, 28, 42, 56, 84, 120, 146, 162]\n\
    @assert tri(15) == [15, 30, 45, 61, 91, 151, 181, 225]\n@assert tri(16) == [16,\
    \ 32, 48, 72, 108, 176, 232, 288]\n@assert tri(17) == [17, 34, 51, 78, 115, 210,\
    \ 276, 343]\n@assert tri(18) == [18, 36, 54, 82, 124, 266, 324, 408]\n@assert\
    \ tri(19) == [19, 38, 57, 92, 136, 294, 374, 456]\n@assert tri(20) == [20, 40,\
    \ 60, 102, 148, 364, 420, 498]\n@assert tri(21) == [21, 42, 64, 110, 162, 378,\
    \ 462, 540]\n@assert tri(22) == [22, 44, 67, 118, 184, 396, 524, 588]\n@assert\
    \ tri(23) == [23, 46, 69, 126, 196, 416, 574, 646]\n@assert tri(24) == [24, 48,\
    \ 73, 131, 208, 461, 624, 704]\n@assert tri(25) == [25, 50, 77, 145, 222, ", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2)\
    \ == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) ==\
    \ [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n\
    @assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert\
    \ tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2)\
    \ == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) ==\
    \ [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n\
    @assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert\
    \ tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2)\
    \ == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) ==\
    \ [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n\
    @assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert\
    \ tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2)\
    \ == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) == [3,1]\n@assert tri(2) ==\
    \ [3,1]\n@assert tri(2) == [3,1]", "    if n == 0\n        return Vector{Int64}()\n\
    \    elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend",
  "    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\n    \n \
    \   Recursive implementation of Fibonacci sequence\n    \n    Arguments:\n   \
    \ \n    n -- a positive integer\n    \n    Returns:\n    \n    fib(n) -- returns\
    \ Fibonacci sequence up to n\n    \n    Examples:\n    \n    fib(0) = 0\n    fib(1)\
    \ = 1\n    fib(2) = 1\n    \n    fib(3) = 3\n    \n    fib(n) = fib(n-1) + fib(n-2)\n\
    \    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6) + fib(n-7)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8)\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8)\
    \ + fib(n-9)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\
    \ + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10)\n    \n    fib(n) =\
    \ fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) +\
    \ fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11)\n    ", "    if n == 0 \n      \
    \  return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\nend\n</code>\n<|/ a |>\n<| a tags=recursion,julia,fibonacci |>\n\
    <code>", "    if n == 1 \n        return [1]\n    else if n == 2 \n        return\
    \ [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\n\
    end", "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n\
    \        return Vector{Int64}(1) \n    else \n        return Vector{Int64}(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3))\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ tri(2) == Vector{Int64}([3])\n@assert tri(3) == Vector{Int64}([3, 5])\n@assert\
    \ tri(4) == Vector{Int64}([3, 7, 11])\n@assert tri(5) == Vector{Int64}([3, 7,\
    \ 11, 15])\n@assert tri(6) == Vector{Int64}([3, 7, 11, 15, 21])\n@assert tri(7)\
    \ == Vector{Int64}([3, 7, 11, 15, 21, 29])\n@assert tri(8) == Vector{Int64}([3,\
    \ 7, 11, 15, 21, 29, 37])\n@assert tri(9) == Vector{Int64}([3, 7, 11, 15, 21,\
    \ 29, 37, 53])\n@assert tri(10) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53,\
    \ 69])\n@assert tri(11) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93])\n\
    @assert tri(12) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93, 109])\n\
    @assert tri(13) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93, 109, 127])\n\
    @assert tri(14) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93, 109, 127,\
    \ 143])\n@assert tri(15) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93,\
    \ 109, 127, 143, 161])\n@assert tri(16) == Vector{Int64}([3, 7, 11, 15, 21, 29,\
    \ 37, 53, 69, 93, 109, 127, 143, 161, 175])\n@assert tri(17) == Vector{Int64}([3,\
    \ 7, 11, 15, 21, 29, 37, 53, 69, 93, 109, 127, 143, 161, 175, 193])\n@assert tri(18)\
    \ == Vector{Int64}([3, 7, 11, 15, 21, 29, 37, 53, 69, 93, 109, 127, 143, 161,\
    \ 175, 193, 209])\n@assert tri(19) == Vector{Int64}([3, 7, 11, 15, 21, 29, 37,\
    \ 53, 69, 93, 109, 127, 143, 161, 175, 193, 209, 237])\n@", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n \
    \       tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n -\
    \ 1)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n - 3)\n        return tri_1\
    \ + tri_2 + tri_3\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0\n        return Vector{Int64}()\n    end\n    if n == 1\n        return\
    \ Vector{Int64}(3)\n    end\n    if n % 2 == 0\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\nend", "    if n == 1 \n        return [1]\n    else if n == 2\
    \ \n        return [1, 1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(4) == [13, 21]\n@assert tri(5) == [20, 35]\n@assert tri(6) == [35,\
    \ 50]\n@assert tri(7) == [55, 70]\n@assert tri(8) == [70, 85]\n@assert tri(9)\
    \ == [85, 100]\n@assert tri(10) == [100, 125]\n@assert tri(11) == [125, 150]\n\
    @assert tri(12) == [150, 175]\n@assert tri(13) == [175, 200]\n@assert tri(14)\
    \ == [200, 225]\n@assert tri(15) == [225, 250]\n@assert tri(16) == [250, 275]\n\
    @assert tri(17) == [275, 300]\n@assert tri(18) == [300, 325]\n@assert tri(19)\
    \ == [325, 350]\n@assert tri(20) == [350, 375]\n@assert tri(21) == [375, 400]\n\
    @assert tri(22) == [400, 425]\n@assert tri(23) == [425, 450]\n@assert tri(24)\
    \ == [450, 475]\n@assert tri(25) == [475, 500]\n@assert tri(26) == [500, 525]\n\
    @assert tri(27) == [525, 550]\n@assert tri(28) == [550, 575]\n@assert tri(29)\
    \ == [575, 600]\n@assert tri(30) == [600, 625]\n@assert tri(31) == [625, 650]\n\
    @assert tri(32) == [650, 675]\n@assert tri(33) == [675, 700]\n@assert tri(34)\
    \ == [700, 725]\n@assert tri(35) == [725, 750]\n@assert tri(36) == [750, 775]\n\
    @assert tri(37) == [775, 800]\n@assert tri(38) == [800, 825]\n@assert tri(39)\
    \ == [825, 850]\n@assert tri(40) == [850, 875]\n@assert tri", "    if n == 0 \n\
    \        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) \nend", "    if n == 0\n        return Vector{Int64}()\n    elseif n ==\
    \ 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n@assert tri(4) == [16, 21]\n\
    @assert tri(5) == [25, 28]\n@assert tri(6) == [33, 37]\n@assert tri(7) == [44,\
    \ 51]\n@assert tri(8) == [54, 61]\n@assert tri(9) == [64, 71]\n@assert tri(10)\
    \ == [74, 81]\n@assert tri(11) == [84, 91]\n@assert tri(12) == [85, 92]\n@assert\
    \ tri(13) == [86, 93]\n@assert tri(14) == [87, 94]\n@assert tri(15) == [88, 95]\n\
    @assert tri(16) == [89, 96]\n@assert tri(17) == [90, 97]\n@assert tri(18) == [91,\
    \ 98]\n@assert tri(19) == [92, 99]\n@assert tri(20) == [93, 100]\n@assert tri(21)\
    \ == [94, 101]\n@assert tri(22) == [95, 102]\n@assert tri(23) == [96, 103]\n@assert\
    \ tri(24) == [97, 104]\n@assert tri(25) == [98, 105]\n@assert tri(26) == [99,\
    \ 106]\n@assert tri(27) == [100, 107]\n@assert tri(28) == [101, 108]\n@assert\
    \ tri(29) == [102, 109]\n@assert tri(30) == [103, 110]\n@assert tri(31) == [104,\
    \ 111]\n@assert tri(32) == [105, 112]\n@assert tri(33) == [106, 113]\n@assert\
    \ tri(34) == [107, 114]\n@assert tri(35) == [108, 115]\n@assert tri(36) == [109,\
    \ 116]\n@assert tri(37) == [110, 117]\n@assert tri(38) == [111, 118]\n@assert\
    \ tri(39) == [112, 119]\n@assert tri(40) == ", "    if n == 1 \n        return\
    \ [1]\n    elseif n == 2 \n        return [1, 1]\n    elseif n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert tri(2) == [1, 1, 2, 3]\n@assert tri(3) == [1,\
    \ 1, 2, 3, 5, 8]\n@assert tri(5) == [1, 1, 2, 5, 15, 35]\n@assert tri(10) == [1,\
    \ 1, 2, 5, 15, 35, 56, 85, 144, 233, 377, 610, 987, 1597]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the Fibonacci sequence up to n.\nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor\
    \ example, fibonacci(3) = fibonacci(2) + fibonacci(1) + fibonacci(2).\nYou are\
    \ given a non-negative integer number n, you have to a return a list of the first\
    \ n numbers of the Fibonacci sequence.\nExamples:\nfibonacci(10) = [1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10) = [1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\nfibonacci(10)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233", "    if n == 0 \n      \
    \  return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert tri(2) == [3, 5]\n@assert tri(10)\
    \ == [3, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040,\
    \ 1346269, 2178309, 3524578, 5702887, 9227465]\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the sum of the numbers from 1 to n squared.", "    if\
    \ n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n  \
    \  else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\nend\n</cell>\n<code language=julia-1.4>\ntri(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number.\
    \ \nExamples:\n    factorial(0) = 1\n    factorial(1) = 1\n    factorial(2) =\
    \ 2\n    factorial(3) = 6\n    factorial(4) = 24\n    factorial(5) = 120\n   \
    \ factorial(6) = 720\n    factorial(7) = 5040\n    factorial(8) = 40320\n    factorial(9)\
    \ = 362880\n    factorial(10) = 3628800 \n    factorial(11) = 39916800\n    factorial(12)\
    \ = 479001600\n    factorial(13) = 6227020800\n    factorial(14) = 87178291200\n\
    \    factorial(15) = 1307674368000\n    factorial(16) = 20922789888000\n    factorial(17)\
    \ = 355687428096000\n    factorial(18) = 6402373705728000\n    factorial(19) =\
    \ 121645100408832000\n    factorial(20) = 2432902008176640000\n    factorial(21)\
    \ = 51090942171709440000\n    factorial(22) = 1124000727777607680000\n    factorial(23)\
    \ = 25852016738884976640000\n    factorial(24) = 620448401733239439360000\n  \
    \  factorial(25) = 15511210043330985984000000\n    factorial(26) = 403291461126605635584000000\n\
    \    factorial(27) = 10888869450418352160768000000\n    factorial(28) = 304888344611713860501504000000\n\
    \    factorial(29) = 8841761993739701954543616000000\n    factorial(30) = 265252859812191058636308480000000\n\
    \    factorial(31) = 8222838654177922817725562880000000\n    factorial(32) = 263130836933693530167218012160000000\n\
    \    factorial(33) = 69402007101356152343750003200000000", "    if n == 1 \n \
    \       return [1]\n    else if n == 2 \n        return [1, 1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", "   \
    \ if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>",
  "    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1, 1]\n\
    \    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [1, 1, 2]\n@assert tri(3) == [1, 1, 2, 3, 5, 8]\n@assert tri(4)\
    \ == [1, 1, 2, 3, 5, 8, 13, 21]\n@assert tri(5) == [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55]\n@assert tri(6) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\
    \ 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n\
    @assert tri(7) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,\
    \ 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465,\n    1476577, 2349095,\
    \ 3788903, 6109223, 9435359, 14472335, 29803669, 52348017, 86267573, 138883659,\
    \ 193517879, 317521823, 51422987, 832043923, 1346269259, 217830987, 3524578273,\
    \ 570288727, 922746557]\n@assert tri(8) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465,\n    1476577, 2349095, 3788903, 6109223, 9435359, 14472335, 29803669,\
    \ 52348017, 86267573, 1388836", "    if n == 1 \n        return [1]\n    else\
    \ if n == 2 \n        return [1, 1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2)\nend\n</code>\n<|/ a tags=fibonacci,julia |>\n<| c |>\nThe question was\
    \ about Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was about Julia, not\
    \ Python.\n<|/ c |>\n<| c |>\nThe question was about Julia, not Python.\n<|/ c\
    \ |>\n<| c |>\nThe question was about Julia, not Python.\n<|/ c |>\n<| a tags=fibonacci,julia\
    \ |>\n<code>", "    if n == 1 \n        return [1]\n    else if n == 2 \n    \
    \    return [1, 1]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n\
    \ - 2)\n        tri_3 = tri(n + 1) + tri(n + 2) + tri(n + 3)\n        return tri_1\
    \ + tri_2 + tri_3\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [1, 1, 2]\n@assert tri(3) == [1, 1, 2, 3, 5, 8]\n@assert tri(5) == [1, 1,\
    \ 2, 3, 5, 8, 13, 21]\n@assert tri(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n</cell>\n<text>\nProblem 3\nThe Fibonacci sequence is defined by the\
    \ recurrence:\n    fib(1) = 1\n    fib(n) = fib(n - 1) + fib(n - 2), if n is even.\n\
    \    fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3), if n is odd.\n    For example,\
    \ fib(3) = fib(2) + fib(1) + fib(3)\n    Implement a function that computes the\
    \ n-th Fibonacci number.\n    Examples:\n        fib(3) = fib(2) + fib(1) + fib(3)\n\
    \        fib(5) = fib(4) + fib(3) + fib(2) + fib(1) + fib(4)\n        fib(10)\
    \ = fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1)\
    \ + fib(4)\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend", "    if n ==\
    \ 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(4) == [13, 21]\n@assert tri(5) == [16, 25, 30]\n@assert tri(6) ==\
    \ [25, 36, 49]\n@assert tri(7) == [36, 49, 64]\n@assert tri(8) == [49, 64, 81]\n\
    @assert tri(9) == [64, 81, 100]\n@assert tri(10) == [81, 100, 121]\n@assert tri(11)\
    \ == [100, 121, 144]\n@assert tri(12) == [121, 144, 168]\n@assert tri(13) == [144,\
    \ 168, 193]\n@assert tri(14) == [168, 193, 225]\n@assert tri(15) == [193, 225,\
    \ 270]\n@assert tri(16) == [225, 270, 315]\n@assert tri(17) == [270, 315, 361]\n\
    @assert tri(18) == [315, 361, 410]\n@assert tri(19) == [361, 410, 466]\n@assert\
    \ tri(20) == [410, 466, 523]\n@assert tri(21) == [466, 523, 587]\n@assert tri(22)\
    \ == [523, 587, 644]\n@assert tri(23) == [587, 644, 710]\n@assert tri(24) == [644,\
    \ 710, 776]\n@assert tri(25) == [710, 776, 831]\n@assert tri(26) == [776, 831,\
    \ 908]\n@assert tri(27) == [831, 908, 983]\n@assert tri(28) == [908, 983, 1047]\n\
    @assert tri(29) == [983, 1047, 1123]\n@assert tri(30) == [1047, 1123, 1188]\n\
    @assert tri(31) == [1123, 1188, 1255]\n@assert tri(32) == [1188, 1255, 1321]\n\
    @assert tri(33) == [1255, 1321, 1397]\n@assert tri(", "    if n == 0 \n      \
    \  return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th number of the Fibonacci sequence. \n    For example,\
    \ fib(3) = fib(2) + fib(1) = 1 + 1 = 2.\n    You can assume that n will be a positive\
    \ integer.\n    You can assume that n will be less than or equal to 100.\n   \
    \ Examples:\n        fib(3) = fib(2) + fib(1) = 1 + 1 = 2\n        fib(4) = fib(3)\
    \ + fib(2) = 1 + 1 + 1 = 4\n        fib(5) = fib(4) + fib(3) = 1 + 1 + 1 + 1 =\
    \ 5\n        fib(6) = fib(5) + fib(4) = 1 + 1 + 1 + 1 + 1 = 6\n        fib(7)\
    \ = fib(6) + fib(5) = 1 + 1 + 1 + 1 + 1 + 1 = 7\n        fib(8) = fib(7) + fib(6)\
    \ = 1 + 1 + 1 + 1 + 1 + 1 + 1 = 8\n        fib(9) = fib(8) + fib(7) = 1 + 1 +\
    \ 1 + 1 + 1 + 1 + 1 + 1 = 9\n        fib(10) = fib(9) + fib(8) = 1 + 1 + 1 + 1\
    \ + 1 + 1 + 1 + 1 + 1 = 10\n        fib(11) = fib(10) + fib(9) = 1 + 1 + 1 + 1\
    \ + 1 + 1 + 1 + 1 + 1 = 11\n        fib(12) = fib(11) + fib(10) = 1 + 1 + 1 +\
    \ 1 + 1 + 1 + 1 + 1 + 1 + 1 = 12\n        fib(13) = fib(12) + fib(11) = 1 + 1\
    \ + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 13\n        fib(14) = fib(13) + fib(12)\
    \ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 14\n        fib(15) = fib(14)\
    \ + fib(13) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15\n        fib(16)\
    \ = fib(15) + fib(14) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 16\n\
    \        fib(17) = fib(16) + fib(15) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 = 17\n        fib(18) = fib(17) + fib(16) = 1 + 1 + 1 + 1 + ", " \
    \   if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend", "    if n == 0 \n        return Vector{Int64}() \n    else\
    \ if n == 1 \n        return Vector{Int64}(1) \n    else \n        return Vector{Int64}(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    end\nend", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else \n        return\
    \ Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [3, 5,\
    \ 8]\n@assert tri(4) == [3, 6, 9, 12]\n@assert tri(5) == [3, 5, 8, 13, 21]\n@assert\
    \ tri(6) == [3, 6, 9, 12, 15, 21]\n@assert tri(7) == [3, 6, 9, 12, 15, 21, 27]\n\
    @assert tri(8) == [3, 6, 9, 12, 15, 21, 27, 42]\n@assert tri(9) == [3, 6, 9, 12,\
    \ 15, 21, 27, 42, 55]\n@assert tri(10) == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89]\n\
    @assert tri(11) == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89, 144]\n@assert tri(12)\
    \ == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89, 144, 233]\n@assert tri(13) == [3, 6,\
    \ 9, 12, 15, 21, 27, 42, 55, 89, 144, 233, 377]\n@assert tri(14) == [3, 6, 9,\
    \ 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613]\n@assert tri(15) == [3, 6, 9,\
    \ 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613, 987]\n@assert tri(16) == [3,\
    \ 6, 9, 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613, 987, 1597]\n@assert tri(17)\
    \ == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613, 987, 1597, 2584]\n\
    @assert tri(18) == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613, 987,\
    \ 1597, 2584, 4181]\n@assert tri(19) == [3, 6, 9, 12, 15, 21, 27, 42, 55, 89,\
    \ 144, 233, 377, 613, 987, 1597, 2584, 4181, 6765]\n@assert tri(20) == [3, 6,\
    \ 9, 12, 15, 21, 27, 42, 55, 89, 144, 233, 377, 613, 987, 1597, 2584, 4181, 6765,\
    \ 10946]\n@assert tri(", "    if n == 0 \n        Vector{Int64}() \n    else if\
    \ n == 1 \n        Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(2) == [2,3]\n@assert tri(10) == [3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571273,139583862441,225851433717,365435296162,591286729871,956722026041,15480087559203,2419929216093,393996455801,6125260353951,9919485302421,15960029246767,25247578690129,40236167048969,63245986328125,102334155657861,165580142903125,26791429629125,433494437161525,701408733516381,1134903170314861,1836311903247861,2971215073144861,4807526976634861,7778742049217861,1258626902518861,2036501107494861,329512800994861,5331629117354861,86267571273518861,1395838624417861,22585143371754861,3654352961654861,591286729871518861,9567220260411481,154800875592034861,24199292160934861,3939964",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend", "    if n == 1 \n        return [1]\n   \
    \ elseif n == 2 \n        return [1, 1]\n    elseif n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return\
    \ tri(n - 1) + tri(n + 1) + tri(n - 2)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a positive integer $n$ and returns the $n$th\
    \ Fibonacci number.", "    if n == 0\n        return Vector{Int64}()\n    elseif\
    \ n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend", "    if n == 0 \n     \
    \   return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end\n</cell>\n<code language=julia-1.4>\ntri(10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the first n Fibonacci numbers. \nExamples:\n   \
    \ fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 1.\n  \
    \  \"\"\"", "    if n == 0 \n        return Vector{Int64}() \n    else if n ==\
    \ 1 \n        return Vector{Int64}(1) \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) + tri(n+2)\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    elseif n == 1 \n        return Vector{Int64}(3)\n    elseif n % 2 == 0 \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) ==\
    \ [8, 13]\n@assert tri(4) == [13, 17]\n@assert tri(5) == [17, 21]\n@assert tri(6)\
    \ == [21, 34]\n@assert tri(7) == [34, 55]\n@assert tri(8) == [55, 89]\n@assert\
    \ tri(9) == [89, 144]\n@assert tri(10) == [144, 233]\n@assert tri(11) == [233,\
    \ 377]\n@assert tri(12) == [377, 610]\n@assert tri(13) == [610, 987]\n@assert\
    \ tri(14) == [987, 1597]\n@assert tri(15) == [1597,2584]\n@assert tri(16) == [2584,\
    \ 4181]\n@assert tri(17) == [4181, 6765]\n@assert tri(18) == [6765, 10946]\n@assert\
    \ tri(19) == [10946,17711]\n@assert tri(20) == [17711, 28657]\n@assert tri(21)\
    \ == [28657, 46368]\n@assert tri(22) == [46368, 75025]\n@assert tri(23) == [75025,\
    \ 121393]\n@assert tri(24) == [121393, 196418]\n@assert tri(25) == [196418, 317811]\n\
    @assert tri(26) == [317811, 514229]\n@assert tri(27) == [514229, 832040]\n@assert\
    \ tri(28) == [832040, 1346269]\n@assert tri(29) == [1346269, 2178309]\n@assert\
    \ tri(30) == [2178309, 3524578]\n@assert tri(31) == [3524578, 5702887]\n@assert\
    \ tri(32) == [5702887, 8235429]\n@assert tri(33) == [8235429, 13747515]\n@assert\
    \ tri(34) == [13747515, 217830", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else if n % 2 == 0\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n == 1 \n        return Vector{Int64}(3)\n    else if n % 2 == 0 \n     \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend", "    if\
    \ n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert tri(2) == [3, 5]\n@assert tri(3) == [8, 13]\n\
    @assert tri(4) == [13, 21]\n@assert tri(5) == [16, 25, 31]\n@assert tri(6) ==\
    \ [25, 36, 49, 64, 81]\n@assert tri(7) == [36, 49, 64, 81, 100]\n@assert tri(8)\
    \ == [49, 64, 81, 100, 121]\n@assert tri(9) == [64, 81, 100, 121, 144]\n@assert\
    \ tri(10) == [81, 100, 121, 144, 169]\n@assert tri(11) == [100, 121, 144, 169,\
    \ 192]\n@assert tri(12) == [121, 144, 169, 192, 225]\n@assert tri(13) == [144,\
    \ 169, 192, 225, 276]\n@assert tri(14) == [169, 192, 225, 276, 339]\n@assert tri(15)\
    \ == [192, 225, 276, 339, 418]\n@assert tri(16) == [225, 276, 339, 418, 523]\n\
    @assert tri(17) == [276, 339, 418, 523, 627]\n@assert tri(18) == [339, 418, 523,\
    \ 627, 833]\n@assert tri(19) == [418, 523, 627, 833, 1039]\n@assert tri(20) ==\
    \ [523, 627, 833, 1039, 1249]\n@assert tri(21) == [627, 833, 1039, 1249, 1459]\n\
    @assert tri(22) == [833, 1039, 1249, 1459, 1669]\n@assert tri(23) == [1039, 1249,\
    \ 1459, 1669, 1871]\n@assert tri(24) == [1249, 1459, 1669, 1871, 2074]\n@assert\
    \ tri(25) == [1459, 1669, 1871, 2074, 2177]\n@assert tri(26) == [1669, 1871, 2074,\
    \ 2177, 2379]\n@assert tri(27) == [1871, 2074, 2177, 2379, 2600]\n@assert tri(28)\
    \ == [2074", "    if n == 0\n        return Vector{Int64}()\n    else if n ==\
    \ 1\n        return Vector{Int64}(3)\n    else\n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert tri(2)\
    \ == [3,2]\n@assert tri(4) == [3,5,1]\n@assert tri(6) == [3,5,8,13,12]\n@assert\
    \ tri(10) == [3,5,8,13,12,17,11,10]\n@assert tri(11) == [3,5,8,13,12,17,11,10,15,14,13,11,10]\n\
    @assert tri(12) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10]\n@assert\
    \ tri(13) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12]\n@assert\
    \ tri(14) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11]\n\
    @assert tri(15) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13]\n\
    @assert tri(16) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17]\n\
    @assert tri(17) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10]\n\
    @assert tri(18) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13,12]\n\
    @assert tri(19) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11]\n\
    @assert tri(20) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13]\n\
    @assert tri(21) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10,13,12,17,11,10]\n\
    @assert tri(22) == [3,5,8,13,12,17,11,10,15,14,13,11,10,13,12,17,11,10,13,12,",
  "    if n == 0\n        return Vector{Int64}()\n    end\n    if n == 1\n       \
    \ return Vector{Int64}(3)\n    end\n    if n % 2 == 0\n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    end\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\nend", "    if n == 1 \n        return [1]\n    else\
    \ if n == 2 \n        return [1, 1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
