language: jl
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n        \
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9qwm02g.jl:20\nin expression starting at\
    \ /tmp/tmpt9qwm02g.jl:20\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\niscube(2)\n\
    </cell>\n<code language=julia-1.3>\niscube(10)\n</cell>\n<code language=julia-1.3>\n\
    iscube(100)\n</cell>\n<code language=julia-1.3>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(10000)\n</cell>\n<code language=julia-1.3>\niscube(100000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(1000000000)\n</cell>\n<code language=julia-1.3>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.3>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(10000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\niscube(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\niscube(10000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(1000000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(100000000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(1000000000000000000000000000000000) \n</cell>\n\
    <code language=julia-1.3>\niscube(100000000000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(10000000000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000000000000000000000)\
    \ \n</cell>\n<code language=julia-1.3>\niscube(100000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(100000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkd_kejsx.jl:13\nin expression starting at\
    \ /tmp/tmpkd_kejsx.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(1)\n\
    </cell>\n<code language=julia-1.5>\niscube(2)\n</cell>\n<code language=julia-1.5>\n\
    iscube(3)\n</cell>\n<code language=julia-1.5>\niscube(4)\n</cell>\n<code language=julia-1.5>\n\
    iscube(5)\n</cell>\n<code language=julia-1.5>\niscube(6)\n</cell>\n<code language=julia-1.5>\n\
    iscube(7)\n</cell>\n<code language=julia-1.5>\niscube(8)\n</cell>\n<code language=julia-1.5>\n\
    iscube(9)\n</cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(11)\n</cell>\n<code language=julia-1.5>\niscube(12)\n</cell>\n<code language=julia-1.5>\n\
    iscube(13)\n</cell>\n<code language=julia-1.5>\niscube(14)\n</cell>\n<code language=julia-1.5>\n\
    iscube(15)\n</cell>\n<code language=julia-1.5>\niscube(16)\n</cell>\n<code language=julia-1.5>\n\
    iscube(17)\n</cell>\n<code language=julia-1.5>\niscube(18)\n</cell>\n<code language=julia-1.5>\n\
    iscube(19)\n</cell>\n<code language=julia-1.5>\niscube(20)\n</cell>\n<code language=julia-1.5>\n\
    iscube(21)\n</cell>\n<code language=julia-1.5>\niscube(22)\n</cell>\n<code language=julia-1.5>\n\
    iscube(23)\n</cell>\n<code language=julia-1.5>\niscube(24)\n</cell>\n<code language=julia-1.5>\n\
    iscube(25)\n</cell>\n<code language=julia-1.5>\niscube(26)\n</cell>\n<code language=julia-1.5>\n\
    iscube(27)\n</cell>\n<code language=julia-1.5>\niscube(28)\n</cell>\n<code language=julia-1.5>\n\
    iscube(29)\n</cell>\n<code language=julia-1.5>\niscube(30)\n</cell>\n<code language=julia-1.5>\n\
    iscube(31)\n</cell>\n<code language=julia-1.5>\niscube(32)\n</cell>\n<code language=julia-1.5>\n\
    iscube(33)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0bwkby1.jl:13\nin expression starting at\
    \ /tmp/tmpr0bwkby1.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(9)\n\
    </cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(11)\n</cell>\n<code language=julia-1.5>\niscube(12)\n</cell>\n<code language=julia-1.5>\n\
    iscube(13)\n</cell>\n<code language=julia-1.5>\niscube(14)\n</cell>\n<code language=julia-1.5>\n\
    iscube(15)\n</cell>\n<code language=julia-1.5>\niscube(16)\n</cell>\n<code language=julia-1.5>\n\
    iscube(17)\n</cell>\n<code language=julia-1.5>\niscube(18)\n</cell>\n<code language=julia-1.5>\n\
    iscube(19)\n</cell>\n<code language=julia-1.5>\niscube(20)\n</cell>\n<code language=julia-1.5>\n\
    iscube(21)\n</cell>\n<code language=julia-1.5>\niscube(22)\n</cell>\n<code language=julia-1.5>\n\
    iscube(23)\n</cell>\n<code language=julia-1.5>\niscube(24)\n</cell>\n<code language=julia-1.5>\n\
    iscube(25)\n</cell>\n<code language=julia-1.5>\niscube(26)\n</cell>\n<code language=julia-1.5>\n\
    iscube(27)\n</cell>\n<code language=julia-1.5>\niscube(28)\n</cell>\n<code language=julia-1.5>\n\
    iscube(29)\n</cell>\n<code language=julia-1.5>\niscube(30)\n</cell>\n<code language=julia-1.5>\n\
    iscube(31)\n</cell>\n<code language=julia-1.5>\niscube(32)\n</cell>\n<code language=julia-1.5>\n\
    iscube(33)\n</cell>\n<code language=julia-1.5>\niscube(34)\n</cell>\n<code language=julia-1.5>\n\
    iscube(35)\n</cell>\n<code language=julia-1.5>\niscube(36)\n</cell>\n<code language=julia-1.5>\n\
    iscube(37)\n</cell>\n<code language=julia-1.5>\niscube(38)\n</cell>\n<code language=julia-1.5>\n\
    iscube(39)\n</cell>\n<code language=julia-1.5>\niscube(40)\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2h60qyq.jl:13\nin expression starting at\
    \ /tmp/tmpf2h60qyq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube::Int64=1\n        for i=2 to a\n            cube=cube*i\n\
    \            if cube==a\n                then return true\n            else \n\
    \                cube=1\n        end\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n        \
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp9605bnv.jl:9\nin expression starting at /tmp/tmpp9605bnv.jl:9\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a <= 0 \n        then return\
    \ false\n    else \n        cube = 1\n        for i in 1:a\n            cube =\
    \ cube * i\n        end\n        return cube == a\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000)\n</cell>\n<code language=julia-1.5>\niscube(100000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) ==\
    \ true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_93mmok6.jl:10\nin expression starting at /tmp/tmp_93mmok6.jl:10\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        cube=true\n        for i=2 to a\n            cube=cube and\
    \ iscube(a*i)\n        return cube\n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis is not the correct solution. `iscube` returns `true` when `a` is\
    \ `1`, but `iscube(1)` returns `false`. The correct solution is `cube=true; for\
    \ i=2 to a; cube=cube and iscube(a*i); end; return cube`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've edited my answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\nA recursive solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5mm1riv9.jl:9\nin expression starting at /tmp/tmp5mm1riv9.jl:9\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 || a == 1 || a == 2 || a ==\
    \ 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 ||\
    \ a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 ||\
    \ a == 18 || a == 19 || a == 20 || a == 21 || a == 22 || a == 23 || a == 24 ||\
    \ a == 25 || a == 26 || a == 27 || a == 28 || a == 29 || a == 30 || a == 31 ||\
    \ a == 32 || a == 33 || a == 34 || a == 35 || a == 36 || a == 37 || a == 38 ||\
    \ a == 39 || a == 40 || a == 41 || a == 42 || a == 43 || a == 44 || a == 45 ||\
    \ a == 46 || a == 47 || a == 48 || a == 49 || a == 50 || a == 51 || a == 52 ||\
    \ a == 53 || a == 54 || a == 55 || a == 56 || a == 57 || a == 58 || a == 59 ||\
    \ a == 60 || a == 61 || a == 62 || a == 63 || a == 64 || a == 65 || a == 66 ||\
    \ a == 67 || a == 68 || a == 69 || a == 70 || a == 71 || a == 72 || a == 73 ||\
    \ a == 74 || a == 75 || a == 76 || a == 77 || a == 78 || a == 79 || a == 80 ||\
    \ a == 81 || a == 82 || a == 83 || a == 84 || a == 85 || a == 86 || a == 87 ||\
    \ a == 88 || a == 89 || a == 90 || a == 91 || a == 92 || a == 93 || a == 94 ||\
    \ a == 95 || a == 96 || a == 97 || a == 98 || a == 99 || a == 100 || a == 101\
    \ || a == 102 || a == 103 || a == 104 || a == 105 || a == 106 || a == 107 || a\
    \ == 108 || a == 109 || a == 110 || a == 111 || a == 112 || a == 113 || a == 114\
    \ || a == 115 || a == 116 || a == 117 || a == 118 || a == 119 \n    then return\
    \ true\n    else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpplxg2cme.jl:9\nin expression starting at /tmp/tmpplxg2cme.jl:9\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 || a == 1 || a == 2 || a ==\
    \ 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 ||\
    \ a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 ||\
    \ a == 18 || a == 19 || a == 20 || a == 21 || a == 22 || a == 23 || a == 24 ||\
    \ a == 25 || a == 26 || a == 27 || a == 28 || a == 29 || a == 30 || a == 31 ||\
    \ a == 32 || a == 33 || a == 34 || a == 35 || a == 36 || a == 37 || a == 38 ||\
    \ a == 39 || a == 40 || a == 41 || a == 42 || a == 43 || a == 44 || a == 45 ||\
    \ a == 46 || a == 47 || a == 48 || a == 49 || a == 50 || a == 51 || a == 52 ||\
    \ a == 53 || a == 54 || a == 55 || a == 56 || a == 57 || a == 58 || a == 59 ||\
    \ a == 60 || a == 61 || a == 62 || a == 63 || a == 64 || a == 65 || a == 66 ||\
    \ a == 67 || a == 68 || a == 69 || a == 70 || a == 71 || a == 72 || a == 73 ||\
    \ a == 74 || a == 75 || a == 76 || a == 77 || a == 78 || a == 79 || a == 80 ||\
    \ a == 81 || a == 82 || a == 83 || a == 84 || a == 85 || a == 86 || a == 87 ||\
    \ a == 88 || a == 89 || a == 90 || a == 91 || a == 92 || a == 93 || a == 94 ||\
    \ a == 95 || a == 96 || a == 97 || a == 98 || a == 99 || a == 100 || a == 101\
    \ || a == 102 || a == 103 || a == 104 || a == 105 || a == 106 || a == 107 || a\
    \ == 108 || a == 109 || a == 110 || a == 111 || a == 112 || a == 113 || a == 114\
    \ || a == 115 || a == 116 || a == 117 || a == 118 || a == 119 \n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomukqqtb.jl:14\nin expression starting at\
    \ /tmp/tmpomukqqtb.jl:14\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpppmcwxp5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpppmcwxp5.jl:1\n\
    in expression starting at /tmp/tmpppmcwxp5.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        if a==0 \n            then return false\n        else \n  \
    \          if a==-1 \n                then return false\n            else \n \
    \               if a==-2 \n                    then return false\n           \
    \     else \n                    if a==-3 \n                        then return\
    \ false\n                    else \n                        if a==-4 \n      \
    \                      then return false\n                        else \n    \
    \                        if a==-5 \n                                then return\
    \ false\n                            else \n                                if\
    \ a==-6 \n                                    then return false\n            \
    \                    else \n                                    if a==-7 \n  \
    \                                      then return false\n                   \
    \                 else \n                                        if a==-8 \n \
    \                                           then return false\n              \
    \                          else \n                                           \
    \ if a==-9 \n                                                then return false\n\
    \                                            else \n                         \
    \                       if a==-10 \n                                         \
    \           then return false\n                                              \
    \  else \n                                                    if a==-11 \n   \
    \                                                     then return false\n    \
    \                                                else \n                     \
    \                                   if a==-12 \n                             \
    \                               then return false\n                          \
    \                              else \n                                       \
    \                     if a==-13 \n                                           \
    \                     then return false\n                                    \
    \                        else \n                                             \
    \                   if a==-14 \n                                             \
    \                       then return false\n                                  \
    \                                  else \n                                   \
    \                     if a==-15 \n                                           \
    \                 then return false\n                                        \
    \                    else \n                                                 \
    \               if a==-16 \n                                                 \
    \                   then return false\n                                      \
    \                              else \n                                       \
    \                 if a==-17 \n                                               \
    \             then return false\n                                            \
    \                else \n                                                     \
    \           if a==-18 \n                                                     \
    \               then return false\n                                          \
    \                          else \n                                           \
    \             if a==-19 \n                                                   \
    \         then return false\n                                                \
    \            else \n                                                         \
    \       if a==-20 \n                                                         \
    \           then return false\n                                              \
    \                      else \n                                               \
    \         if a==-21 \n                                                       \
    \     then return false\n                                                    \
    \        else \n                                                             \
    \   if a==-22 \n                                                             \
    \       then return false\n                                                  \
    \                  else \n                                                   \
    \     if a==-23 \n                                                           \
    \ then return false\n                                                        \
    \    else \n                                                                if\
    \ a==-24 \n                                                                  \
    \  then return false\n                                                       \
    \             else \n                                                        if\
    \ a==-25 \n                                                            then return\
    \ false\n                                                            else \n \
    \                                                               if a==-26 \n \
    \                                                                   then return\
    \ false\n                                                                    else\
    \ \n                                                        if a==-27 \n     \
    \                                                       then return false\n  \
    \                                                          else \n           \
    \                                                     if a==-28 \n           \
    \                                                         then return false\n\
    \                                                                    else \n \
    \                                                       if a==-29 \n         \
    \                                                   then return false\n      \
    \                                                      else \n               \
    \                                                 if a==-30 \n               \
    \                                                     then return false\n    \
    \                                                                else \n     \
    \                                                   if a==-31 \n             \
    \                                               then return false\n          \
    \                                                  else \n                   \
    \                                             if a==-32 \n                   \
    \                                                 then return false\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3hven4o5.jl:9\nin expression starting at /tmp/tmp3hven4o5.jl:9\n"
  stdout: ''
  timestamp: 1659747789
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n\"\"\"\n\"\"\"\n    Write a function\
    \ that takes an integer a and returns True \n    if this ingeger is a cube of\
    \ some integer number.\n    Note: you may assume the input is always valid.\n\
    \    Examples:\n                            \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg56ah7k1.jl:9\nin expression starting at /tmp/tmpg56ah7k1.jl:9\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(10)\n\
    </cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xor2hpw.jl:13\nin expression starting at\
    \ /tmp/tmp9xor2hpw.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            cube=cube && iscube(i*i)\n\
    \        end\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf26xzzrp.jl:9\nin expression starting at /tmp/tmpf26xzzrp.jl:9\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihfoeuy7.jl:13\nin expression starting at\
    \ /tmp/tmpihfoeuy7.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a==0 \n        then return true\n\
    \    else \n        cube=true\n        for i=1:a\n            if i==1\n      \
    \          then cube=false\n            else \n                if i%2==0\n   \
    \                 then cube=false\n                else \n                   \
    \ if i%3==0\n                        then cube=false\n                    else\
    \ \n                        if i%5==0\n                            then cube=false\n\
    \                        else \n                            if i%7==0\n      \
    \                          then cube=false\n                            else \n\
    \                                if i%11==0\n                                \
    \    then cube=false\n                                else \n                \
    \                    if i%13==0\n                                        then\
    \ cube=false\n                                    else \n                    \
    \                    if i%17==0\n                                            then\
    \ cube=false\n                                        else \n                \
    \                            if i%19==0\n                                    \
    \            then cube=false\n                                            else\
    \ \n                                                if i%23==0\n             \
    \                                       then cube=false\n                    \
    \                            else \n                                         \
    \           cube=true\n        end\n    end\n    return cube\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Write a function that takes an integer a and\
    \ returns True \n    if this ingeger is a cube of some integer number.\n    Note:\
    \ you may assume the input is always valid.\n    Examples:\n                 \
    \           \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpum909h6t.jl:10\nin expression starting at /tmp/tmpum909h6t.jl:10\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1\n        true\n    else\n    \
    \    false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Write\
    \ a function that takes an integer a and returns True \n    if this ingeger is\
    \ a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumj73xda.jl:14\nin expression starting at\
    \ /tmp/tmpumj73xda.jl:14\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a==0\n        return true\n \
    \   end\n    \n    if a==1\n        return true\n    end\n    \n    if a==2\n\
    \        return true\n    end\n    \n    if a==3\n        return true\n    end\n\
    \    \n    if a==4\n        return true\n    end\n    \n    if a==5\n        return\
    \ true\n    end\n    \n    if a==6\n        return true\n    end\n    \n    if\
    \ a==7\n        return true\n    end\n    \n    if a==8\n        return true\n\
    \    end\n    \n    if a==9\n        return true\n    end\n    \n    if a==10\n\
    \        return true\n    end\n    \n    if a==11\n        return true\n    end\n\
    \    \n    if a==12\n        return true\n    end\n    \n    if a==13\n      \
    \  return true\n    end\n    \n    if a==14\n        return true\n    end\n  \
    \  \n    if a==15\n        return true\n    end\n    \n    if a==16\n        return\
    \ true\n    end\n    \n    if a==17\n        return true\n    end\n    \n    if\
    \ a==18\n        return true\n    end\n    \n    if a==19\n        return true\n\
    \    end\n    \n    if a==20\n        return true\n    end\n    \n    if a==21\n\
    \        return true\n    end\n    \n    if a==22\n        return true\n    end\n\
    \    \n    if a==23\n        return true\n    end\n    \n    if a==24\n      \
    \  return true\n    end\n    \n    if a==25\n        return true\n    end\n  \
    \  \n    if a==26\n        return true\n    end\n    \n    if a==27\n        return\
    \ true\n    end\n    \n    if a==28\n        return true\n    end\n    \n    if\
    \ a==29\n        return true\n    end\n    \n    if a==30\n        return true\n\
    \    end\n    \n    if a==31\n        return true\n    end\n    \n    if a==32\n\
    \        return true\n    end\n    \n    if a==33\n        return true\n    end\n\
    \    \n    if a==34\n        return true\n    end\n    \n    if a==35\n      \
    \  return true\n    end\n    \n    if a==36\n        return true\n    end\n  \
    \  \n    if a==37\n        return true\n    end\n    \n    if a==38\n        return\
    \ true\n    end\n    \n    if a==39\n        return true\n    end\n    \n    if\
    \ a==40\n        return true\n    end\n    \n    if a==41\n        return true\n\
    \    end\n    \n    if a==42\n        return \nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwldl8b5.jl:1\nin expression starting at /tmp/tmpfwldl8b5.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a cube of some integer number.\n    Note: you may assume the input\
    \ is always valid.\n    Examples:\n                            \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kk70cpm.jl:14\nin expression starting at\
    \ /tmp/tmp0kk70cpm.jl:14\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 || a==1 || a==2 || a==3 || a==4\
    \ || a==5 || a==6 || a==7 || a==8 || a==9 || a==10 || a==11 || a==12 || a==13\
    \ || a==14 || a==15 || a==16 || a==17 || a==18 || a==19 || a==20 || a==21 || a==22\
    \ || a==23 || a==24 || a==25 || a==26 || a==27 || a==28 || a==29 || a==30 || a==31\
    \ || a==32 || a==33 || a==34 || a==35 || a==36 || a==37 || a==38 || a==39 || a==40\
    \ || a==41 || a==42 || a==43 || a==44 || a==45 || a==46 || a==47 || a==48 || a==49\
    \ || a==50 || a==51 || a==52 || a==53 || a==54 || a==55 || a==56 || a==57 || a==58\
    \ || a==59 || a==60 || a==61 || a==62 || a==63 || a==64 || a==65 || a==66 || a==67\
    \ || a==68 || a==69 || a==70 || a==71 || a==72 || a==73 || a==74 || a==75 || a==76\
    \ || a==77 || a==78 || a==79 || a==80 || a==81 || a==82 || a==83 || a==84 || a==85\
    \ || a==86 || a==87 || a==88 || a==89 || a==90 || a==91 || a==92 || a==93 || a==94\
    \ || a==95 || a==96 || a==97 || a==98 || a==99 || a==100 || a==101 || a==102 ||\
    \ a==103 || a==104 || a==105 || a==106 || a==107 || a==108 || a==109 || a==110\
    \ || a==111 || a==112 || a==113 || a==114 || a==115 || a==116 || a==117 || a==118\
    \ || a==119 || a==120 || a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu3cwls7.jl:1\nin expression starting at /tmp/tmpyu3cwls7.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 then return true\n    else if\
    \ a==0 then return false\n    else if a==-1 then return false\n    else if a==-2\
    \ then return false\n    else if a==-3 then return false\n    else if a==-4 then\
    \ return false\n    else if a==-5 then return false\n    else if a==-6 then return\
    \ false\n    else if a==-7 then return false\n    else if a==-8 then return false\n\
    \    else if a==-9 then return false\n    else if a==-10 then return false\n \
    \   else if a==-11 then return false\n    else if a==-12 then return false\n \
    \   else if a==-13 then return false\n    else if a==-14 then return false\n \
    \   else if a==-15 then return false\n    else if a==-16 then return false\n \
    \   else if a==-17 then return false\n    else if a==-18 then return false\n \
    \   else if a==-19 then return false\n    else if a==-20 then return false\n \
    \   else if a==-21 then return false\n    else if a==-22 then return false\n \
    \   else if a==-23 then return false\n    else if a==-24 then return false\n \
    \   else if a==-25 then return false\n    else if a==-26 then return false\n \
    \   else if a==-27 then return false\n    else if a==-28 then return false\n \
    \   else if a==-29 then return false\n    else if a==-30 then return false\n \
    \   else if a==-31 then return false\n    else if a==-32 then return false\n \
    \   else if a==-33 then return false\n    else if a==-34 then return false\n \
    \   else if a==-35 then return false\n    else if a==-36 then return false\n \
    \   else if a==-37 then return false\n    else if a==-38 then return false\n \
    \   else if a==-39 then return false\n    else if a==-40 then return false\n \
    \   else if a==-41 then return false\n    else if a==-42 then return false\n \
    \   else if a==-43 then return false\n    else if a==-44 then return false\n \
    \   else if a==-45 then \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw_7pt4e.jl:8\nin expression starting at /tmp/tmprw_7pt4e.jl:8\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\nWrite a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n        \
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpagt_6itr.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpagt_6itr.jl:1\n\
    in expression starting at /tmp/tmpagt_6itr.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a < 0 \n        return false\n\
    \    \n    if a == 0 \n        return true\n    \n    if a == 1 \n        return\
    \ true\n    \n    if a == 2 \n        return true\n    \n    if a == 3 \n    \
    \    return true\n    \n    if a == 4 \n        return true\n    \n    if a ==\
    \ 5 \n        return true\n    \n    if a == 6 \n        return true\n    \n \
    \   if a == 7 \n        return true\n    \n    if a == 8 \n        return true\n\
    \    \n    if a == 9 \n        return true\n    \n    if a == 10 \n        return\
    \ true\n    \n    if a == 11 \n        return true\n    \n    if a == 12 \n  \
    \      return true\n    \n    if a == 13 \n        return true\n    \n    if a\
    \ == 14 \n        return true\n    \n    if a == 15 \n        return true\n  \
    \  \n    if a == 16 \n        return true\n    \n    if a == 17 \n        return\
    \ true\n    \n    if a == 18 \n        return true\n    \n    if a == 19 \n  \
    \      return true\n    \n    if a == 20 \n        return true\n    \n    if a\
    \ == 21 \n        return true\n    \n    if a == 22 \n        return true\n  \
    \  \n    if a == 23 \n        return true\n    \n    if a == 24 \n        return\
    \ true\n    \n    if a == 25 \n        return true\n    \n    if a == 26 \n  \
    \      return true\n    \n    if a == 27 \n        return true\n    \n    if a\
    \ == 28 \n        return true\n    \n    if a == 29 \n        return true\n  \
    \  \n    if a == 30 \n        return true\n    \n    if a == 31 \n        return\
    \ true\n    \n    if a == 32 \n        return true\n    \n    if a == 33 \n  \
    \      return true\n    \n    if a == 34 \n        return true\n    \n    if a\
    \ == 35 \n        return true\n    \n    if a == 36 \n        return true\n  \
    \  \n    if a == 37 \n        return true\n    \n    if a == 38 \n        return\
    \ true\n    \n    if a == 39 \n        return true\n    \n    if a == 40 \n  \
    \      return true\n    \n    if a == 41 \n        return true\n    \n    if a\
    \ == 42 \n        return true\n    \n    if a == 43 \n        return true\n  \
    \  \n    if a == 44 \n        return true\n    \n    if a == 45 \n        return\
    \ true\n    \n    if a == 46 \n        return true\n    \n    if a == 47 \n  \
    \      return true\n    \n    if a == 48 \n        return true\n    \n    if a\
    \ == 49 \n        return true\n    \n    if a == 50 \n        return true\n  \
    \  \n    if a == 51 \n        return true\n    \n    if a == 52 \n        return\
    \ true\n    \n    if a == 53 \n        return true\n    \n    if \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpiwsziwj_.jl:174\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpiwsziwj_.jl:175\nin expression\
    \ starting at /tmp/tmpiwsziwj_.jl:175\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(10)\n\
    </cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000000000000)\n\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15lglcoq.jl:13\nin expression starting at\
    \ /tmp/tmp15lglcoq.jl:13\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else\n        cube=true\n        for i=1:a\n            if i==1\n        \
    \        then cube=false\n            else\n                if i==a\n        \
    \            then cube=false\n                else\n                    if i%2==0\n\
    \                        then cube=false\n                    else\n         \
    \               if i%3==0\n                            then cube=false\n     \
    \                   else\n                            if i%5==0\n            \
    \                    then cube=false\n                            else\n     \
    \                           if i%7==0\n                                    then\
    \ cube=false\n                                else\n                         \
    \           if i%11==0\n                                        then cube=false\n\
    \                                    else\n                                  \
    \      if i%13==0\n                                            then cube=false\n\
    \                                        else\n                              \
    \              if i%17==0\n                                                then\
    \ cube=false\n                                            else\n             \
    \                                   if i%19==0\n                             \
    \                       then cube=false\n                                    \
    \            else\n                                                    if i%23==0\n\
    \                                                        then cube=false\n   \
    \                                                 else\n                     \
    \                                   if i%29==0\n                             \
    \                               then cube=false\n                            \
    \                            else\n                                          \
    \                  cube=false\n    end\n    return cube\nend\n\"\"\"\n\"\"\"\n\
    \    Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppsz0i3rw.jl:9\nin expression starting at /tmp/tmppsz0i3rw.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1 \n      \
    \          then cube=false\n            else \n                if i==a\n     \
    \               then cube=false\n                else \n                    if\
    \ i%2==0\n                        then cube=false\n                    else \n\
    \                        if i%3==0\n                            then cube=false\n\
    \                        else \n                            if i%5==0\n      \
    \                          then cube=false\n                            else \n\
    \                                if i%7==0\n                                 \
    \   then cube=false\n                                else \n                 \
    \                   if i%11==0\n                                        then cube=false\n\
    \                                    else \n                                 \
    \       if i%13==0\n                                            then cube=false\n\
    \                                        else \n                             \
    \               if i%17==0\n                                                then\
    \ cube=false\n                                            else \n            \
    \                                    if i%19==0\n                            \
    \                        then cube=false\n                                   \
    \             else \n                                                    if i%23==0\n\
    \                                                        then cube=false\n   \
    \                                                 else \n                    \
    \                                    if i%27==0\n                            \
    \                                then cube=false\n                           \
    \                             else \n                                        \
    \                    cube=false\n    end\n    return cube\nend\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000)\n</cell>\n<code language=julia-1.5>\niscube(100000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000)\n</cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxrf97ofb.jl:9\nin expression starting at /tmp/tmpxrf97ofb.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        if a==3 \n            then return true\n        else \n   \
    \         if a==5 \n                then return true\n            else \n    \
    \            if a==7 \n                    then return true\n                else\
    \ \n                    if a==9 \n                        then return true\n \
    \                   else \n                        if a==11 \n               \
    \             then return true\n                        else \n              \
    \              if a==13 \n                                then return true\n \
    \                           else \n                                if a==15 \n\
    \                                    then return true\n                      \
    \          else \n                                    return false\n    end\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(13)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype iscube(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(17)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(19)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(21)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(23)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype iscube(25)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(27)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(29)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(31)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(33)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype iscube(35)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(37)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(39)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(41)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(43)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype iscube(45)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(47)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(49)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(51)\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ob49sby.jl:9\nin expression starting at /tmp/tmp7ob49sby.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 then return true\n    else if\
    \ a==0 then return false\n    else if a==-1 then return false\n    else if a==-2\
    \ then return false\n    else if a==-3 then return false\n    else if a==-4 then\
    \ return false\n    else if a==-5 then return false\n    else if a==-6 then return\
    \ false\n    else if a==-7 then return false\n    else if a==-8 then return false\n\
    \    else if a==-9 then return false\n    else if a==-10 then return false\n \
    \   else if a==-11 then return false\n    else if a==-12 then return false\n \
    \   else if a==-13 then return false\n    else if a==-14 then return false\n \
    \   else if a==-15 then return false\n    else if a==-16 then return false\n \
    \   else if a==-17 then return false\n    else if a==-18 then return false\n \
    \   else if a==-19 then return false\n    else if a==-20 then return false\n \
    \   else if a==-21 then return false\n    else if a==-22 then return false\n \
    \   else if a==-23 then return false\n    else if a==-24 then return false\n \
    \   else if a==-25 then return false\n    else if a==-26 then return false\n \
    \   else if a==-27 then return false\n    else if a==-28 then return false\n \
    \   else if a==-29 then return false\n    else if a==-30 then return false\n \
    \   else if a==-31 then return false\n    else if a==-32 then return false\n \
    \   else if a==-33 then return false\n    else if a==-34 then return false\n \
    \   else if a==-35 then return false\n    else if a==-36 then return false\n \
    \   else if a==-37 then return false\n    else if a==-38 then return false\n \
    \   else if a==-39 then return false\n    else if a==-40 then return false\n \
    \   else if a==-41 then return false\n    else if a==-42 then return false\n \
    \   else if a==-43 then return false\n    else if a==-44 then return false\n \
    \   else if a==-45 then \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw_7pt4e.jl:8\nin expression starting at /tmp/tmprw_7pt4e.jl:8\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhl98c9u.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvhl98c9u.jl:1\n\
    in expression starting at /tmp/tmpvhl98c9u.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.3>\n\
    iscube(2)\n</cell>\n<code language=julia-1.3>\niscube(9)\n</cell>\n<code language=julia-1.3>\n\
    iscube(10)\n</cell>\n<code language=julia-1.3>\niscube(11)\n</cell>\n<code language=julia-1.3>\n\
    iscube(12)\n</cell>\n<code language=julia-1.3>\niscube(13)\n</cell>\n<code language=julia-1.3>\n\
    iscube(14)\n</cell>\n<code language=julia-1.3>\niscube(15)\n</cell>\n<code language=julia-1.3>\n\
    iscube(16)\n</cell>\n<code language=julia-1.3>\niscube(17)\n</cell>\n<code language=julia-1.3>\n\
    iscube(18)\n</cell>\n<code language=julia-1.3>\niscube(19)\n</cell>\n<code language=julia-1.3>\n\
    iscube(20)\n</cell>\n<code language=julia-1.3>\niscube(21)\n</cell>\n<code language=julia-1.3>\n\
    iscube(22)\n</cell>\n<code language=julia-1.3>\niscube(23)\n</cell>\n<code language=julia-1.3>\n\
    iscube(24)\n</cell>\n<code language=julia-1.3>\niscube(25)\n</cell>\n<code language=julia-1.3>\n\
    iscube(26)\n</cell>\n<code language=julia-1.3>\niscube(27)\n</cell>\n<code language=julia-1.3>\n\
    iscube(28)\n</cell>\n<code language=julia-1.3>\niscube(29)\n</cell>\n<code language=julia-1.3>\n\
    iscube(30)\n</cell>\n<code language=julia-1.3>\niscube(31)\n</cell>\n<code language=julia-1.3>\n\
    iscube(32)\n</cell>\n<code language=julia-1.3>\niscube(33)\n</cell>\n<code language=julia-1.3>\n\
    iscube(34)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkp05lwn.jl:9\nin expression starting at /tmp/tmptkp05lwn.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else if a==1 \n        then return true\n    else if a==2 \n        then return\
    \ true\n    else if a==3 \n        then return true\n    else if a==4 \n     \
    \   then return true\n    else if a==5 \n        then return true\n    else if\
    \ a==6 \n        then return true\n    else if a==7 \n        then return true\n\
    \    else if a==8 \n        then return true\n    else if a==9 \n        then\
    \ return true\n    else \n        error(\"iscube: input is not valid\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph69rrb2y.jl:9\nin expression starting at /tmp/tmph69rrb2y.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 then return true\n    if a==0\
    \ then return false\n    if a==-1 then return false\n    if a==-2 then return\
    \ false\n    if a==-3 then return false\n    if a==-4 then return false\n    if\
    \ a==-5 then return false\n    if a==-6 then return false\n    if a==-7 then return\
    \ false\n    if a==-8 then return false\n    if a==-9 then return false\n    if\
    \ a==-10 then return false\n    if a==-11 then return false\n    if a==-12 then\
    \ return false\n    if a==-13 then return false\n    if a==-14 then return false\n\
    \    if a==-15 then return false\n    if a==-16 then return false\n    if a==-17\
    \ then return false\n    if a==-18 then return false\n    if a==-19 then return\
    \ false\n    if a==-20 then return false\n    if a==-21 then return false\n  \
    \  if a==-22 then return false\n    if a==-23 then return false\n    if a==-24\
    \ then return false\n    if a==-25 then return false\n    if a==-26 then return\
    \ false\n    if a==-27 then return false\n    if a==-28 then return false\n  \
    \  if a==-29 then return false\n    if a==-30 then return false\n    if a==-31\
    \ then return false\n    if a==-32 then return false\n    if a==-33 then return\
    \ false\n    if a==-34 then return false\n    if a==-35 then return false\n  \
    \  if a==-36 then return false\n    if a==-37 then return false\n    if a==-38\
    \ then return false\n    if a==-39 then return false\n    if a==-40 then return\
    \ false\n    if a==-41 then return false\n    if a==-42 then return false\n  \
    \  if a==-43 then return false\n    if a==-44 then return false\n    if a==-45\
    \ then return false\n    if a==-46 then return false\n    if a==-47 then return\
    \ false\n    if a==-48 then return false\n    if a==-49 then return false\n  \
    \  if a==-50 then return false\n    if a==-51 then return false\n    if a==-52\
    \ then return false\n    if a==-53 then return false\n    if a==-54 then return\
    \ false\n    if a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjp3ke2bh.jl:8\nin expression starting at /tmp/tmpjp3ke2bh.jl:8\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 then return true\n    if a==0\
    \ then return false\n    if a==-1 then return false\n    if a==-2 then return\
    \ false\n    if a==-3 then return false\n    if a==-4 then return false\n    if\
    \ a==-5 then return false\n    if a==-6 then return false\n    if a==-7 then return\
    \ false\n    if a==-8 then return false\n    if a==-9 then return false\n    if\
    \ a==-10 then return false\n    if a==-11 then return false\n    if a==-12 then\
    \ return false\n    if a==-13 then return false\n    if a==-14 then return false\n\
    \    if a==-15 then return false\n    if a==-16 then return false\n    if a==-17\
    \ then return false\n    if a==-18 then return false\n    if a==-19 then return\
    \ false\n    if a==-20 then return false\n    if a==-21 then return false\n  \
    \  if a==-22 then return false\n    if a==-23 then return false\n    if a==-24\
    \ then return false\n    if a==-25 then return false\n    if a==-26 then return\
    \ false\n    if a==-27 then return false\n    if a==-28 then return false\n  \
    \  if a==-29 then return false\n    if a==-30 then return false\n    if a==-31\
    \ then return false\n    if a==-32 then return false\n    if a==-33 then return\
    \ false\n    if a==-34 then return false\n    if a==-35 then return false\n  \
    \  if a==-36 then return false\n    if a==-37 then return false\n    if a==-38\
    \ then return false\n    if a==-39 then return false\n    if a==-40 then return\
    \ false\n    if a==-41 then return false\n    if a==-42 then return false\n  \
    \  if a==-43 then return false\n    if a==-44 then return false\n    if a==-45\
    \ then return false\n    if a==-46 then return false\n    if a==-47 then return\
    \ false\n    if a==-48 then return false\n    if a==-49 then return false\n  \
    \  if a==-50 then return false\n    if a==-51 then return false\n    if a==-52\
    \ then return false\n    if a==-53 then return false\n    if a==-54 then return\
    \ false\n    if a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjp3ke2bh.jl:8\nin expression starting at /tmp/tmpjp3ke2bh.jl:8\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n        \
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4an3f_f1.jl:20\nin expression starting at\
    \ /tmp/tmp4an3f_f1.jl:20\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    cube::Int64 = 1\n    for i in a \n   \
    \     if i^(i+1)^(i+2)^(i+3)^(i+4)^(i+5)^(i+6)^(i+7)^(i+8)^(i+9)^(i+10)^(i+11)^(i+12)^(i+13)^(i+14)^(i+15)^(i+16)^(i+17)^(i+18)^(i+19)^(i+20)^(i+21)^(i+22)^(i+23)^(i+24)^(i+25)^(i+26)^(i+27)^(i+28)^(i+29)^(i+30)^(i+31)^(i+32)^(i+33)^(i+34)^(i+35)^(i+36)^(i+37)^(i+38)^(i+39)^(i+40)^(i+41)^(i+42)^(i+43)^(i+44)^(i+45)^(i+46)^(i+47)^(i+48)^(i+49)^(i+50)^(i+51)^(i+52)^(i+53)^(i+54)^(i+55)^(i+56)^(i+57)^(i+58)^(i+59)^(i+60)^(i+61)^(i+62)^(i+63)^(i+64)^(i+65)^(i+66)^(i+67)^(i+68)^(i+69)^(i+70)^(i+71)^(i+72)^(i+73)^(i+74)^(i+75)^(i+76)^(i+77)^(i+78)^(i+79)^(i+80)^(i+81)^(i+82)^(i+83)^(i+84)^(i+85)^(i+86)^(i+87)^(i+88)^(i+89)^(i+90)^(i+91)^(i+92)^(i+93)^(i+94)^(i+95)^(i+96)^(i+97)^(i+98)^(i+99)^(i+100)^(i+101)^(i+102)^(i+103)^(i+104)^(i+105)^(i+106)^(i+107)^\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvoobtva.jl:1\nin expression starting at /tmp/tmpzvoobtva.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1\n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zpohbpy.jl:13\nin expression starting at\
    \ /tmp/tmp3zpohbpy.jl:13\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4xwv2xyl.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xwv2xyl.jl:15\n\
    in expression starting at /tmp/tmp4xwv2xyl.jl:15\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else if a==1 \n        then return true\n    else if a==2 \n        then return\
    \ true\n    else if a==3 \n        then return true\n    else if a==4 \n     \
    \   then return true\n    else if a==5 \n        then return true\n    else if\
    \ a==6 \n        then return true\n    else if a==7 \n        then return true\n\
    \    else if a==8 \n        then return true\n    else if a==9 \n        then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8f4rf6lb.jl:9\nin expression starting at /tmp/tmp8f4rf6lb.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a < 0 \n        error(\"The input\
    \ must be positive\")\n    end\n    \n    if a == 0 \n        return true\n  \
    \  end\n    \n    if a > 0 \n        cube = 1\n        \n        for i in 1:(a\
    \ / 3) \n            cube = cube * i\n        end\n        \n        for i in\
    \ (a / 3):(3 * a / 3) \n            cube = cube * i\n        end\n        \n \
    \       for i in (3 * a / 3):(6 * a / 3) \n            cube = cube * i\n     \
    \   end\n        \n        for i in (6 * a / 3):(9 * a / 3) \n            cube\
    \ = cube * i\n        end\n        \n        for i in (9 * a / 3):(12 * a / 3)\
    \ \n            cube = cube * i\n        end\n        \n        for i in (12 *\
    \ a / 3):(15 * a / 3) \n            cube = cube * i\n        end\n        \n \
    \       for i in (15 * a / 3):(18 * a / 3) \n            cube = cube * i\n   \
    \     end\n        \n        for i in (18 * a / 3):(21 * a / 3) \n           \
    \ cube = cube * i\n        end\n        \n        for i in (21 * a / 3):(24 *\
    \ a / 3) \n            cube = cube * i\n        end\n        \n        for i in\
    \ (24 * a / 3):(27 * a / 3) \n            cube = cube * i\n        end\n     \
    \   \n        for i in (27 * a / 3):(30 * a / 3) \n            cube = cube * i\n\
    \        end\n        \n        for i in (30 * a / 3):(33 * a / 3) \n        \
    \    cube = cube * i\n        end\n        \n        for i in (33 * a / 3):(36\
    \ * a / 3) \n            cube = cube * i\n        end\n        \n        for i\
    \ in (36 * a / 3):(39 * a / 3) \n            cube = cube * i\n        end\n  \
    \      \n        for i in (39 * a / 3):(42 * a / 3) \n            cube = cube\
    \ * i\n        end\n        \n        for i in (42 * a / 3):(45 * a / 3) \n  \
    \          cube = cube * i\n        end\n        \n        for i in (45 * a /\
    \ 3):(48 * a / 3) \n            cube = cube * i\n        end\n        \n     \
    \   for i in (48 * a / 3):(51 * a / 3) \n            cube = cube * i\n       \
    \ end\n        \n        for i in (51 * a / 3):(54 * a / 3) \n            cube\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpeb5eb3zz.jl:92\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeb5eb3zz.jl:1\n\
    in expression starting at /tmp/tmpeb5eb3zz.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ if a == 1 \n        return true\n    else if a == 2 \n        return true\n\
    \    else if a == 3 \n        return true\n    else if a == 4 \n        return\
    \ true\n    else if a == 5 \n        return true\n    else if a == 6 \n      \
    \  return true\n    else if a == 7 \n        return true\n    else if a == 8 \n\
    \        return true\n    else if a == 9 \n        return true\n    else if a\
    \ == 10 \n        return true\n    else if a == 11 \n        return true\n   \
    \ else if a == 12 \n        return true\n    else if a == 13 \n        return\
    \ true\n    else if a == 14 \n        return true\n    else if a == 15 \n    \
    \    return true\n    else if a == 16 \n        return true\n    else if a ==\
    \ 17 \n        return true\n    else if a == 18 \n        return true\n    else\
    \ if a == 19 \n        return true\n    else if a == 20 \n        return true\n\
    \    else if a == 21 \n        return true\n    else if a == 22 \n        return\
    \ true\n    else if a == 23 \n        return true\n    else if a == 24 \n    \
    \    return true\n    else if a == 25 \n        return true\n    else if a ==\
    \ 26 \n        return true\n    else if a == 27 \n        return true\n    else\
    \ if a == 28 \n        return true\n    else if a == 29 \n        return true\n\
    \    else if a == 30 \n        return true\n    else if a == 31 \n        return\
    \ true\n    else if a == 32 \n        return true\n    else if a == 33 \n    \
    \    return true\n    else if a == 34 \n        return true\n    else if a ==\
    \ 35 \n        return true\n    else if a == 36 \n        return true\n    else\
    \ if a == 37 \n        return true\n    else if a == 38 \n        return true\n\
    \    else if a == 39 \n        return true\n    else if a == 40 \n        return\
    \ true\n    else if a == 41 \n        return true\n    else if a == 42 \n    \
    \    return true\n    else if a == 43 \n        return true\n    else if a ==\
    \ 44 \n        return true\n    else if a == 45 \n        return true\n    else\
    \ if a == 46 \n        return true\n    else if a == 47 \n        return true\n\
    \    else if a == 48 \n        return true\n    else if a == 49 \n        return\
    \ true\n    else if a == 50 \n        return true\n    else if a == 51 \n    \
    \    return true\n    else if a == 52 \n        return true\n    else if a ==\
    \ 53 \n        return true\n    else if a == 54 \n        return true\n    else\
    \ if a == 55\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6zpjjqh.jl:10\nin expression starting at\
    \ /tmp/tmpi6zpjjqh.jl:10\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_tnmqw.jl:9\nin expression starting at /tmp/tmpmj_tnmqw.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1\n       \
    \         then cube=false\n            else \n                if i%2==0\n    \
    \                then cube=false\n                else \n                    if\
    \ i%3==0\n                        then cube=false\n                    else \n\
    \                        if i%5==0\n                            then cube=false\n\
    \                        else \n                            if i%7==0\n      \
    \                          then cube=false\n                            else \n\
    \                                if i%11==0\n                                \
    \    then cube=false\n                                else \n                \
    \                    if i%13==0\n                                        then\
    \ cube=false\n                                    else \n                    \
    \                    if i%17==0\n                                            then\
    \ cube=false\n                                        else \n                \
    \                            if i%19==0\n                                    \
    \            then cube=false\n                                            else\
    \ \n                                                if i%23==0\n             \
    \                                       then cube=false\n                    \
    \                            else \n                                         \
    \           cube=true\n        end\n    end\n    return cube\nend\n</cell>\n<code\
    \ language=julia-1.4>\niscube(13)\n</cell>\n<code language=julia-1.4>\niscube(17)\n\
    </cell>\n<code language=julia-1.4>\niscube(19)\n</cell>\n<code language=julia-1.4>\n\
    iscube(23)\n</cell>\n<code language=julia-1.4>\niscube(29)\n</cell>\n<code language=julia-1.4>\n\
    iscube(33)\n</cell>\n<code language=julia-1.4>\niscube(37)\n</cell>\n<code language=julia-1.4>\n\
    iscube(39)\n</cell>\n<code language=julia-1.4>\niscube(47)\n</cell>\n<code language=julia-1.4>\n\
    iscube(49)\n</cell>\n<code language=julia-1.4>\niscube(51)\n</cell>\n<code language=julia-1.4>\n\
    iscube(55)\n</cell>\n<code language=julia-1.4>\niscube(57)\n</cell>\n<code language=julia-1.4>\n\
    iscube(59)\n</cell>\n<code language=julia-1.4>\niscube(61)\n</cell>\n<code language=julia-1.4>\n\
    iscube(67)\n</cell>\n<code language=julia-1.4>\niscube(71)\n</cell>\n<code language=julia-1.4>\n\
    iscube(73)\n</cell>\n<code language=julia-1.4>\niscube(79)\n</cell>\n<code language=julia-1.4>\n\
    iscube(81)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppwm1xchh.jl:9\nin expression starting at /tmp/tmppwm1xchh.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        then return true\n\
    \    else \n        if a < 0 \n            then return false\n        else \n\
    \            if a > 0 \n                then return iscube(a-1) * iscube(a-2)\
    \ * iscube(a-3)\n            else \n                return true\n        end\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it\
    \ out with a = -3 or a = 4\n<|/ c |>\n<| c |>\nIt works. I tested it before posting.\
    \ What do you mean by \"doesn't work\"? It returns true for a = -3 and a = 4\n\
    <|/ c |>\n<| c |>\nIt returns true for a = -3 and a = 4\n<|/ c |>\n<| c |>\nI\
    \ tested it before posting. What do you mean by \"doesn't work\"? It returns true\
    \ for a = -3 and a = 4\n<|/ c |>\n<| c |>\nI tested it before posting. What do\
    \ you mean by \"doesn't work\"? It returns true for a = -3 and a = 4\n<|/ c |>\n\
    <| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7s74vtnm.jl:9\nin expression starting at /tmp/tmp7s74vtnm.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        cube=true\n        for i=2:a\n            cube=cube && a%i==0\n\
    \        end\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3s3hvbs6.jl:9\nin expression starting at /tmp/tmp3s3hvbs6.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(2)\n\
    </cell>\n<code language=julia-1.5>\niscube(8)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0waiuuj.jl:13\nin expression starting at\
    \ /tmp/tmpw0waiuuj.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            cube=cube && iscube(a-i)\n\
    \        end\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaakq23ii.jl:9\nin expression starting at /tmp/tmpaakq23ii.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(9)\n\
    </cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(11)\n</cell>\n<code language=julia-1.5>\niscube(12)\n</cell>\n<code language=julia-1.5>\n\
    iscube(13)\n</cell>\n<code language=julia-1.5>\niscube(14)\n</cell>\n<code language=julia-1.5>\n\
    iscube(15)\n</cell>\n<code language=julia-1.5>\niscube(16)\n</cell>\n<code language=julia-1.5>\n\
    iscube(17)\n</cell>\n<code language=julia-1.5>\niscube(18)\n</cell>\n<code language=julia-1.5>\n\
    iscube(19)\n</cell>\n<code language=julia-1.5>\niscube(20)\n</cell>\n<code language=julia-1.5>\n\
    iscube(21)\n</cell>\n<code language=julia-1.5>\niscube(22)\n</cell>\n<code language=julia-1.5>\n\
    iscube(23)\n</cell>\n<code language=julia-1.5>\niscube(24)\n</cell>\n<code language=julia-1.5>\n\
    iscube(25)\n</cell>\n<code language=julia-1.5>\niscube(26)\n</cell>\n<code language=julia-1.5>\n\
    iscube(27)\n</cell>\n<code language=julia-1.5>\niscube(28)\n</cell>\n<code language=julia-1.5>\n\
    iscube(29)\n</cell>\n<code language=julia-1.5>\niscube(30)\n</cell>\n<code language=julia-1.5>\n\
    iscube(31)\n</cell>\n<code language=julia-1.5>\niscube(32)\n</cell>\n<code language=julia-1.5>\n\
    iscube(33)\n</cell>\n<code language=julia-1.5>\niscube(34)\n</cell>\n<code language=julia-1.5>\n\
    iscube(35)\n</cell>\n<code language=julia-1.5>\niscube(36)\n</cell>\n<code language=julia-1.5>\n\
    iscube(37)\n</cell>\n<code language=julia-1.5>\niscube(38)\n</cell>\n<code language=julia-1.5>\n\
    iscube(39)\n</cell>\n<code language=julia-1.5>\niscube(40)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e674ssp.jl:13\nin expression starting at\
    \ /tmp/tmp5e674ssp.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4xwv2xyl.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xwv2xyl.jl:15\n\
    in expression starting at /tmp/tmp4xwv2xyl.jl:15\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        then return true\n\
    \    else \n        if a < 0 \n            then return false\n        else \n\
    \            if a < 3 \n                then return true\n            else \n\
    \                if a < 9 \n                    then return true\n           \
    \     else \n                    if a < 27 \n                        then return\
    \ true\n                    else \n                        if a < 81 \n      \
    \                      then return true\n                        else \n     \
    \                       if a < 243 \n                                then return\
    \ true\n                            else \n                                if\
    \ a< 729 \n                                    then return true\n            \
    \                    else \n                                    if a< 1485 \n\
    \                                        then return true\n                  \
    \                  else \n                                        if a< 2827 \n\
    \                                            then return true\n              \
    \                          else \n                                           \
    \ if a< 5639 \n                                                then return true\n\
    \                                            else \n                         \
    \                       if a< 10927 \n                                       \
    \             then return true\n                                             \
    \   else \n                                                    if a< 17441 \n\
    \                                                        then return true\n  \
    \                                                  else \n                   \
    \                                     if a< 28693 \n                         \
    \                                   then return true\n                       \
    \                                 else \n                                    \
    \                        if a< 57729 \n                                      \
    \                          then return true\n                                \
    \                            else \n                                         \
    \                       if a< 114659 \n                                      \
    \                              then return true\n                            \
    \                                        else \n                             \
    \                           if a< 182781 \n                                  \
    \                          then return true\n                                \
    \                            else \n                                         \
    \                       if a< 272627 \n                                      \
    \                              then return true\n                            \
    \                                        else \n                             \
    \                           if a< 564439 \n                                  \
    \                          then return true\n                                \
    \                            else \n                                         \
    \                       if a< 1197271 \n                                     \
    \                               then return true\n                           \
    \                                         else \n                            \
    \                            if a< 18278113 \n                               \
    \                             then return true\n                             \
    \                               else \n                                      \
    \                          if a< 27262717 \n                                 \
    \                                   then return true\n                       \
    \                                             else \n                        \
    \                                if a< 56443921 \n                           \
    \                                 then return true\n                         \
    \                                   else \n                                  \
    \                              if a< 119727173 \n                            \
    \                                        then return true\n                  \
    \                                                  else \n                   \
    \                                     if a< 182781133 \n                     \
    \                                       then return true\n                   \
    \                                         else \n                            \
    \                                    if a< 2726271733 \n                     \
    \                                               then return true\n           \
    \                                                         else \n            \
    \                                            if a< 564439213 \n              \
    \                                              then return true\n            \
    \                                                else \n                     \
    \                                           if a< 11972717333 \n             \
    \                                                       then return true\n   \
    \                                                                 else \n    \
    \                                                    if a< 1827811333 \n     \
    \                                                       then return true\n   \
    \                                                         else \n            \
    \                                                    if a< 27262717333 \n    \
    \                                                                then return true\n\
    \                                                                    else \n \
    \                                                       if a< 5644392131 \n  \
    \                                                          then \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmj1w3_qr.jl:9\nin expression starting at /tmp/tmpmj1w3_qr.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(3)\n\
    </cell>\n<code language=julia-1.5>\niscube(9)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetqa8zi_.jl:13\nin expression starting at\
    \ /tmp/tmpetqa8zi_.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprygbt6tx.jl:13\nin expression starting at\
    \ /tmp/tmprygbt6tx.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t63kjpn.jl:13\nin expression starting at\
    \ /tmp/tmp5t63kjpn.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(8)\n\
    </cell>\n<code language=julia-1.5>\niscube(9)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(11)\n</cell>\n<code language=julia-1.5>\n\
    iscube(12)\n</cell>\n<code language=julia-1.5>\niscube(13)\n</cell>\n<code language=julia-1.5>\n\
    iscube(14)\n</cell>\n<code language=julia-1.5>\niscube(15)\n</cell>\n<code language=julia-1.5>\n\
    iscube(16)\n</cell>\n<code language=julia-1.5>\niscube(17)\n</cell>\n<code language=julia-1.5>\n\
    iscube(18)\n</cell>\n<code language=julia-1.5>\niscube(19)\n</cell>\n<code language=julia-1.5>\n\
    iscube(20)\n</cell>\n<code language=julia-1.5>\niscube(21)\n</cell>\n<code language=julia-1.5>\n\
    iscube(22)\n</cell>\n<code language=julia-1.5>\niscube(23)\n</cell>\n<code language=julia-1.5>\n\
    iscube(24)\n</cell>\n<code language=julia-1.5>\niscube(25)\n</cell>\n<code language=julia-1.5>\n\
    iscube(26)\n</cell>\n<code language=julia-1.5>\niscube(27)\n</cell>\n<code language=julia-1.5>\n\
    iscube(28)\n</cell>\n<code language=julia-1.5>\niscube(29)\n</cell>\n<code language=julia-1.5>\n\
    iscube(30)\n</cell>\n<code language=julia-1.5>\niscube(31)\n</cell>\n<code language=julia-1.5>\n\
    iscube(32)\n</cell>\n<code language=julia-1.5>\niscube(33)\n</cell>\n<code language=julia-1.5>\n\
    iscube(34)\n</cell>\n<code language=julia-1.5>\niscube(35)\n</cell>\n<code language=julia-1.5>\n\
    iscube(36)\n</cell>\n<code language=julia-1.5>\niscube(37)\n</cell>\n<code language=julia-1.5>\n\
    iscube(38)\n</cell>\n<code language=julia-1.5>\niscube(39)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpsvco9i.jl:13\nin expression starting at\
    \ /tmp/tmpqpsvco9i.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\niscube(2)\n\
    </cell>\n<code language=julia-1.0>\niscube(8)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10)\n</cell>\n<code language=julia-1.0>\niscube(100)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.0>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000)\n</cell>\n<code language=julia-1.0>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.0\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56r_edt2.jl:13\nin expression starting at\
    \ /tmp/tmp56r_edt2.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        cube=true\n        for i=2 to a\n            cube=cube and\
    \ iscube(a*i)\n        return cube\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a cube of some integer number.\n    Note: you may assume the input\
    \ is always valid.\n    Examples:\n                            \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw31ajk_3.jl:9\nin expression starting at /tmp/tmpw31ajk_3.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1 \n      \
    \          then cube=false\n            else \n                if i==a\n     \
    \               then cube=false\n                else \n                    if\
    \ i%2==0 \n                        then cube=false\n                    else \n\
    \                        if i%3==0 \n                            then cube=false\n\
    \                        else \n                            if i%5==0 \n     \
    \                           then cube=false\n                            else\
    \ \n                                if i%7==0 \n                             \
    \       then cube=false\n                                else \n             \
    \                       if i%11==0 \n                                        then\
    \ cube=false\n                                    else \n                    \
    \                    if i%13==0 \n                                           \
    \ then cube=false\n                                        else \n           \
    \                                 if i%17==0 \n                              \
    \                  then cube=false\n                                         \
    \   else \n                                                if i%19==0 \n     \
    \                                               then cube=false\n            \
    \                                    else \n                                 \
    \                   if i%23==0 \n                                            \
    \            then cube=false\n                                               \
    \     else \n                                                        if i%29==0\
    \ \n                                                            then cube=false\n\
    \                                                        else \n             \
    \                                               cube=false\n    end\n    return\
    \ cube\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for the answer! I did\
    \ some research and found out that `iscube` can be written as `cube(a)` which\
    \ makes it more efficient.\n<|/ c |>\n<| c |>\nYes, I know. But I wanted to show\
    \ you the way how to write it in a functional style. :)\n<|/ c |>\n<| c |>\nI\
    \ see. Thanks for the answer!\n<|/ c |>\n<| a tags=julia |>\nThe answer by is\
    \ correct, but I wanted to show you how to write it in a functional style. :)\n\
    <code>\niscube(a::Int64) = a <= 0 || a == 1 || isodd(a) || iseven(a) || isdivisibleby(a,\
    \ 3)\nisodd(a::Int64) = a % 2 != 0\niseven(a::Int64) = a % 2 == 0\nisdivisibleby(a::Int64,\
    \ k::Int64) = a % k == 0\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the\
    \ answer! I did some research and found out that `iscube` can be written as `cube(a)`\
    \ which makes it more efficient.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp564fivee.jl:9\nin expression starting at /tmp/tmp564fivee.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1\n        return true\n    else\
    \ if a==3\n        return true\n    else if a==5\n        return true\n    else\
    \ if a==7\n        return true\n    else if a==9\n        return true\n    else\
    \ if a==11\n        return true\n    else if a==13\n        return true\n    else\
    \ if a==15\n        return true\n    else if a==17\n        return true\n    else\
    \ if a==19\n        return true\n    else if a==21\n        return true\n    else\
    \ if a==23\n        return true\n    else if a==25\n        return true\n    else\
    \ if a==27\n        return true\n    else if a==29\n        return true\n    else\
    \ if a==31\n        return true\n    else if a==33\n        return true\n    else\
    \ if a==35\n        return true\n    else if a==37\n        return true\n    else\
    \ if a==39\n        return true\n    else if a==41\n        return true\n    else\
    \ if a==43\n        return true\n    else if a==45\n        return true\n    else\
    \ if a==47\n        return true\n    else if a==49\n        return true\n    else\
    \ if a==51\n        return true\n    else if a==53\n        return true\n    else\
    \ if a==55\n        return true\n    else if a==57\n        return true\n    else\
    \ if a==59\n        return true\n    else if a==61\n        return true\n    else\
    \ if a==63\n        return true\n    else if a==65\n        return true\n    else\
    \ if a==67\n        return true\n    else if a==69\n        return true\n    else\
    \ if a==71\n        return true\n    else if a==73\n        return true\n    else\
    \ if a==75\n        return true\n    else if a==77\n        return true\n    else\
    \ if a==79\n        return true\n    else if a==81\n        return true\n    else\
    \ if a==83\n        return true\n    else if a==85\n        return true\n    else\
    \ if a==87\n        return true\n    else if a==89\n        return true\n    else\
    \ if a==91\n        return true\n    else if a==93\n        return true\n    else\
    \ if a==95\n        return true\n    else if a==97\n        return true\n    else\
    \ if a==99\n        return true\n    else if a==101\n        return true\n   \
    \ else if a\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxked90le.jl:10\nin expression starting at\
    \ /tmp/tmpxked90le.jl:10\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 1 \n        then return true\n\
    \    else \n        cube = cuberoot(a)\n        if cube == a \n            then\
    \ return true\n        else \n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp58pfquil.jl:9\nin expression starting at /tmp/tmp58pfquil.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpep_ks72z.jl:13\nin expression starting at\
    \ /tmp/tmpep_ks72z.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_tnmqw.jl:9\nin expression starting at /tmp/tmpmj_tnmqw.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4xwv2xyl.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xwv2xyl.jl:15\n\
    in expression starting at /tmp/tmp4xwv2xyl.jl:15\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.0>\niscube(2)\n</cell>\n<code language=julia-1.0>\niscube(9)\n\
    </cell>\n<code language=julia-1.0>\niscube(10)\n</cell>\n<code language=julia-1.0>\n\
    iscube(11)\n</cell>\n<code language=julia-1.0>\niscube(12)\n</cell>\n<code language=julia-1.0>\n\
    iscube(13)\n</cell>\n<code language=julia-1.0>\niscube(14)\n</cell>\n<code language=julia-1.0>\n\
    iscube(15)\n</cell>\n<code language=julia-1.0>\niscube(16)\n</cell>\n<code language=julia-1.0>\n\
    iscube(17)\n</cell>\n<code language=julia-1.0>\niscube(18)\n</cell>\n<code language=julia-1.0>\n\
    iscube(19)\n</cell>\n<code language=julia-1.0>\niscube(20)\n</cell>\n<code language=julia-1.0>\n\
    iscube(21)\n</cell>\n<code language=julia-1.0>\niscube(22)\n</cell>\n<code language=julia-1.0>\n\
    iscube(23)\n</cell>\n<code language=julia-1.0>\niscube(24)\n</cell>\n<code language=julia-1.0>\n\
    iscube(25)\n</cell>\n<code language=julia-1.0>\niscube(26)\n</cell>\n<code language=julia-1.0>\n\
    iscube(27)\n</cell>\n<code language=julia-1.0>\niscube(28)\n</cell>\n<code language=julia-1.0>\n\
    iscube(29)\n</cell>\n<code language=julia-1.0>\niscube(30)\n</cell>\n<code language=julia-1.0>\n\
    iscube(31)\n</cell>\n<code language=julia-1.0>\niscube(32)\n</cell>\n<code language=julia-1.0>\n\
    iscube(33)\n</cell>\n<code language=julia-1.0>\niscube(34)\n</cell>\n<code language=julia-1.0>\n\
    iscube(35)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f3j5hb5.jl:20\nin expression starting at\
    \ /tmp/tmp3f3j5hb5.jl:20\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a==0 \n        then return true\n\
    \    else \n        cube=true\n        for i=1:a\n            if i==1\n      \
    \          then cube=false\n            else \n                cube=cube*i\n \
    \       end\n        return cube\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a cube of some integer number.\n    Note: you may assume the input\
    \ is always valid.\n    Examples:\n                            \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvdqzpuu0.jl:10\nin expression starting at /tmp/tmpvdqzpuu0.jl:10\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpep_ks72z.jl:13\nin expression starting at\
    \ /tmp/tmpep_ks72z.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgx057gj0.jl:9\nin expression starting at /tmp/tmpgx057gj0.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    cube::Int64 = 1\n    \n    for i\
    \ in a \n        if i mod cube == 0 \n            return true\n        else \n\
    \            return false\nend\n</cell>\n<code language=julia-1.4>\niscube(10)\n\
    </cell>\n<code language=julia-1.4>\niscube(100)\n</cell>\n<code language=julia-1.4>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.4>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.4>\niscube(100000)\n</cell>\n<code language=julia-1.4>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.4>\niscube(10000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.4>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.4>\niscube(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.4>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\niscube(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.4>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.4>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.4>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.4>\niscube(10000000000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"cube\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr907ae_8.jl:12\nin expression starting at /tmp/tmpr907ae_8.jl:12\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\niscube(2)\n\
    </cell>\n<code language=julia-1.0>\niscube(10)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100)\n</cell>\n<code language=julia-1.0>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(10000)\n</cell>\n<code language=julia-1.0>\niscube(100000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(10000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(100000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(1000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(10000000000000000000000000000)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxd6dwo_t.jl:13\nin expression starting at\
    \ /tmp/tmpxd6dwo_t.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        cube=true\n        for i=2 to a\n            cube=cube and\
    \ iscube(a*i)\n        return cube\nend\n\"\"\"\n\"\"\"\nWrite a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ao6ca6r.jl:9\nin expression starting at /tmp/tmp_ao6ca6r.jl:9\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a==0 \n        return true\n\
    \    else \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(10)\n\
    </cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyui50r_7.jl:14\nin expression starting at\
    \ /tmp/tmpyui50r_7.jl:14\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   elseif a==1 \n        then return true\n    elseif a==2 \n        then return\
    \ true\n    elseif a==3 \n        then return true\n    elseif a==4 \n       \
    \ then return true\n    elseif a==5 \n        then return true\n    elseif a==6\
    \ \n        then return true\n    elseif a==7 \n        then return true\n   \
    \ elseif a==8 \n        then return true\n    elseif a==9 \n        then return\
    \ true\n    else\n        then return false\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid the\
    \ repetition of `a==1`, `a==2`, etc.\n<|/ c |>\n<| c |>\nI guess you could use\
    \ a `for` loop, but that would be less efficient than a vectorized solution.\n\
    <|/ c |>\n<| c |>\nI added a vectorized solution that is more efficient than a\
    \ for loop. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nA simple solution that\
    \ does not require any looping or recursion:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcu0zl8wb.jl:9\nin expression starting at /tmp/tmpcu0zl8wb.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\niscube(2)\n\
    </cell>\n<code language=julia-1.3>\niscube(10)\n</cell>\n<code language=julia-1.3>\n\
    iscube(100)\n</cell>\n<code language=julia-1.3>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(10000)\n</cell>\n<code language=julia-1.3>\niscube(100000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.3>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.3>\niscube(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.3>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(10000000000000)\n</cell>\n<code language=julia-1.3>\niscube(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(10000000000000000)\n</cell>\n<code language=julia-1.3>\niscube(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(100000000000000000000)\n</cell>\n<code language=julia-1.3>\niscube(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\niscube(100000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    iscube(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\niscube(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\niscube(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\niscube(1000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\niscube(10000000000000000000000000000)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkr5_g7b.jl:13\nin expression starting at\
    \ /tmp/tmpmkr5_g7b.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        then return true\n\
    \    else \n        cube = cuberoot(a)\n        if cube == 0 \n            then\
    \ return true\n        else \n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(11)\n</cell>\n<code language=julia-1.5>\n\
    iscube(12)\n</cell>\n<code language=julia-1.5>\niscube(13)\n</cell>\n<code language=julia-1.5>\n\
    iscube(14)\n</cell>\n<code language=julia-1.5>\niscube(15)\n</cell>\n<code language=julia-1.5>\n\
    iscube(16)\n</cell>\n<code language=julia-1.5>\niscube(17)\n</cell>\n<code language=julia-1.5>\n\
    iscube(18)\n</cell>\n<code language=julia-1.5>\niscube(19)\n</cell>\n<code language=julia-1.5>\n\
    iscube(20)\n</cell>\n<code language=julia-1.5>\niscube(21)\n</cell>\n<code language=julia-1.5>\n\
    iscube(22)\n</cell>\n<code language=julia-1.5>\niscube(23)\n</cell>\n<code language=julia-1.5>\n\
    iscube(24)\n</cell>\n<code language=julia-1.5>\niscube(25)\n</cell>\n<code language=julia-1.5>\n\
    iscube(26)\n</cell>\n<code language=julia-1.5>\niscube(27)\n</cell>\n<code language=julia-1.5>\n\
    iscube(28)\n</cell>\n<code language=julia-1.5>\niscube(29)\n</cell>\n<code language=julia-1.5>\n\
    iscube(30)\n</cell>\n<code language=julia-1.5>\niscube(31)\n</cell>\n<code language=julia-1.5>\n\
    iscube(32)\n</cell>\n<code language=julia-1.5>\niscube(33)\n</cell>\n<code language=julia-1.5>\n\
    iscube(34)\n</cell>\n<code language=julia-1.5>\niscube(35)\n</cell>\n<code language=julia-1.5>\n\
    iscube(36)\n</cell>\n<code language=julia-1.5>\niscube(37)\n</cell>\n<code language=julia-1.5>\n\
    iscube(38)\n</cell>\n<code language=julia-1.5>\niscube(39)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) ==\
    \ true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu4d3nzix.jl:9\nin expression starting at /tmp/tmpu4d3nzix.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprygbt6tx.jl:13\nin expression starting at\
    \ /tmp/tmprygbt6tx.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 1 \n        then return true\n\
    \    else \n        cube::Int64 = 1\n        for i in 1..a \n            cube\
    \ = cube * i\n            if cube == a \n                then return true\n  \
    \          else \n                cube = 1\n        end\n        return false\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not answer the question.\
    \ OP wants to know if an integer is a cube.\n<|/ c |>\n<| c |>\nI answered the\
    \ question \"Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\"\n<|/ c |>\n<| c |>\nThis does\
    \ not answer the question. OP wants to know if an integer is a cube.\n<|/ c |>\n\
    <| c |>\nI answered the question \"Write a function that takes an integer a and\
    \ returns True \n    if this ingeger is a cube of some integer number.\"\n<|/\
    \ c |>\n<| c |>\nI answered the question \"Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\"\
    \n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpazb_k7pb.jl:9\nin expression starting at /tmp/tmpazb_k7pb.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_1uadmf.jl:13\nin expression starting at\
    \ /tmp/tmpj_1uadmf.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else \n        cube::Int64 = 0\n        while a > 1 \n            cube = cube\
    \ * a\n            a = a / 3\n        end\n        return cube == a\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100)\n</cell>\n<code language=julia-1.5>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000)\n</cell>\n<code language=julia-1.5>\niscube(100000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(1000000000000000000000000000)\n</cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1wrdzaki.jl:9\nin expression starting at /tmp/tmp1wrdzaki.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4xwv2xyl.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xwv2xyl.jl:15\n\
    in expression starting at /tmp/tmp4xwv2xyl.jl:15\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\niscube(2)\n\
    </cell>\n<code language=julia-1.0>\niscube(10)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100)\n</cell>\n<code language=julia-1.0>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(10000)\n</cell>\n<code language=julia-1.0>\niscube(100000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000001)\n</cell>\n<code language=julia-1.0>\niscube(1000000000002)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000003)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000004)\n</cell>\n<code language=julia-1.0>\niscube(1000000000005)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000006)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000007)\n</cell>\n<code language=julia-1.0>\niscube(1000000000008)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000009)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000010)\n</cell>\n<code language=julia-1.0>\niscube(1000000000011)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000012)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000013)\n</cell>\n<code language=julia-1.0>\niscube(1000000000014)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000015)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000016)\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae7479jb.jl:13\nin expression starting at\
    \ /tmp/tmpae7479jb.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 || a==1 || a==2 || a==3 || a==4\
    \ || a==5 || a==6 || a==7 || a==8 || a==9 || a==10 || a==11 || a==12 || a==13\
    \ || a==14 || a==15 || a==16 || a==17 || a==18 || a==19 || a==20 || a==21 || a==22\
    \ || a==23 || a==24 || a==25 || a==26 || a==27 || a==28 || a==29 || a==30 || a==31\
    \ || a==32 || a==33 || a==34 || a==35 || a==36 || a==37 || a==38 || a==39 || a==40\
    \ || a==41 || a==42 || a==43 || a==44 || a==45 || a==46 || a==47 || a==48 || a==49\
    \ || a==50 || a==51 || a==52 || a==53 || a==54 || a==55 || a==56 || a==57 || a==58\
    \ || a==59 || a==60 || a==61 || a==62 || a==63 || a==64 || a==65 || a==66 || a==67\
    \ || a==68 || a==69 || a==70 || a==71 || a==72 || a==73 || a==74 || a==75 || a==76\
    \ || a==77 || a==78 || a==79 || a==80 || a==81 || a==82 || a==83 || a==84 || a==85\
    \ || a==86 || a==87 || a==88 || a==89 || a==90 || a==91 || a==92 || a==93 || a==94\
    \ || a==95 || a==96 || a==97 || a==98 || a==99 || a==100 || a==101 || a==102 ||\
    \ a==103 || a==104 || a==105 || a==106 || a==107 || a==108 || a==109 || a==110\
    \ || a==111 || a==112 || a==113 || a==114 || a==115 || a==116 || a==117 || a==118\
    \ || a==119 || a==120 || a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu3cwls7.jl:1\nin expression starting at /tmp/tmpyu3cwls7.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else if a==1 \n        then return true\n    else if a==2 \n        then return\
    \ true\n    else if a==3 \n        then return true\n    else if a==4 \n     \
    \   then return true\n    else if a==5 \n        then return true\n    else if\
    \ a==6 \n        then return true\n    else if a==7 \n        then return true\n\
    \    else if a==8 \n        then return true\n    else if a==9 \n        then\
    \ return true\n    else return false\nend\n</code>\n<|/ a |>\n<| c |>\nI guess\
    \ you meant `return true` instead of `return false`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. Fixed it.\n<|/ c |>\n<| c |>\n`iscube(10)` returns `true`\
    \ but `iscube(11)` returns `false`\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. Fixed it.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfd73szgp.jl:9\nin expression starting at /tmp/tmpfd73szgp.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5_tfahp.jl:13\nin expression starting at\
    \ /tmp/tmpx5_tfahp.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_tnmqw.jl:9\nin expression starting at /tmp/tmpmj_tnmqw.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihfoeuy7.jl:13\nin expression starting at\
    \ /tmp/tmpihfoeuy7.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 || a==1 || a==2 || a==3 || a==4\
    \ || a==5 || a==6 || a==7 || a==8 || a==9 || a==10 || a==11 || a==12 || a==13\
    \ || a==14 || a==15 || a==16 || a==17 || a==18 || a==19 || a==20 || a==21 || a==22\
    \ || a==23 || a==24 || a==25 || a==26 || a==27 || a==28 || a==29 || a==30 || a==31\
    \ || a==32 || a==33 || a==34 || a==35 || a==36 || a==37 || a==38 || a==39 || a==40\
    \ || a==41 || a==42 || a==43 || a==44 || a==45 || a==46 || a==47 || a==48 || a==49\
    \ || a==50 || a==51 || a==52 || a==53 || a==54 || a==55 || a==56 || a==57 || a==58\
    \ || a==59 || a==60 || a==61 || a==62 || a==63 || a==64 || a==65 || a==66 || a==67\
    \ || a==68 || a==69 || a==70 || a==71 || a==72 || a==73 || a==74 || a==75 || a==76\
    \ || a==77 || a==78 || a==79 || a==80 || a==81 || a==82 || a==83 || a==84 || a==85\
    \ || a==86 || a==87 || a==88 || a==89 || a==90 || a==91 || a==92 || a==93 || a==94\
    \ || a==95 || a==96 || a==97 || a==98 || a==99 || a==100 || a==101 || a==102 ||\
    \ a==103 || a==104 || a==105 || a==106 || a==107 || a==108 || a==109 || a==110\
    \ || a==111 || a==112 || a==113 || a==114 || a==115 || a==116 || a==117 || a==118\
    \ || a==119 || a==120 || a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu3cwls7.jl:1\nin expression starting at /tmp/tmpyu3cwls7.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else\n        cube=true\n        for i=1:a\n            if i==1\n        \
    \        then cube=false\n            else\n                if i==a\n        \
    \            then cube=false\n                else\n                    if i%2==0\n\
    \                        then cube=false\n                    else\n         \
    \               if i%3==0\n                            then cube=false\n     \
    \                   else\n                            if i%5==0\n            \
    \                    then cube=false\n                            else\n     \
    \                           if i%7==0\n                                    then\
    \ cube=false\n                                else\n                         \
    \           cube=false\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(100)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(1000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype iscube(100000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype iscube(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype iscube(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype iscube(1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ iscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype iscube(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype iscube(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3nr7ufap.jl:9\nin expression starting at /tmp/tmp3nr7ufap.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 1 \n        return true\n    else\
    \ if a == 3 \n        return true\n    else if a == 5 \n        return true\n\
    \    else if a == 7 \n        return true\n    else if a == 9 \n        return\
    \ true\n    else if a == 11 \n        return true\n    else if a == 13 \n    \
    \    return true\n    else if a == 15 \n        return true\n    else if a ==\
    \ 17 \n        return true\n    else if a == 19 \n        return true\n    else\
    \ if a == 21 \n        return true\n    else if a == 23 \n        return true\n\
    \    else if a == 25 \n        return true\n    else if a == 27 \n        return\
    \ true\n    else if a == 29 \n        return true\n    else if a == 31 \n    \
    \    return true\n    else if a == 33 \n        return true\n    else if a ==\
    \ 35 \n        return true\n    else if a == 37 \n        return true\n    else\
    \ if a == 39 \n        return true\n    else if a == 41 \n        return true\n\
    \    else if a == 43 \n        return true\n    else if a == 45 \n        return\
    \ true\n    else if a == 47 \n        return true\n    else if a == 49 \n    \
    \    return true\n    else if a == 51 \n        return true\n    else if a ==\
    \ 53 \n        return true\n    else if a == 55 \n        return true\n    else\
    \ if a == 57 \n        return true\n    else if a == 59 \n        return true\n\
    \    else if a == 61 \n        return true\n    else if a == 63 \n        return\
    \ true\n    else if a == 65 \n        return true\n    else if a == 67 \n    \
    \    return true\n    else if a == 69 \n        return true\n    else if a ==\
    \ 71 \n        return true\n    else if a == 73 \n        return true\n    else\
    \ if a == 75 \n        return true\n    else if a == 77 \n        return true\n\
    \    else if a == 79 \n        return true\n    else if a == 81 \n        return\
    \ true\n    else if a == 83 \n        return true\n    else if a == 85 \n    \
    \    return true\n    else if a == 87 \n        return true\n    else if a ==\
    \ 89 \n        return true\n    else if a == 91 \n        return true\n    else\
    \ if a == 93 \n        return true\n    else if a == 95 \n        return true\n\
    \    else if a == 97 \n        return true\n    else if a == 99 \n        return\
    \ true\n    else if a == 101 \n        return true\n    else if a == 103 \n  \
    \      return true\n    else if a == 105 \n        return true\n    else if a\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppb2r2lkn.jl:10\nin expression starting at\
    \ /tmp/tmppb2r2lkn.jl:10\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    \n    if a==0 \n        then return true\n\
    \    else \n        if a==1 \n            then return true\n        else \n  \
    \          if a==2 \n                then return true\n            else \n   \
    \             if a==3 \n                    then return true\n               \
    \ else \n                    if a==4 \n                        then return true\n\
    \                    else \n                        if a==5 \n               \
    \             then return true\n                        else \n              \
    \              if a==6 \n                                then return true\n  \
    \                          else \n                                if a==7 \n \
    \                                   then return true\n                       \
    \         else \n                                    if a==8 \n              \
    \                          then return true\n                                \
    \    else \n                                        if a==9 \n               \
    \                             then return true\n                             \
    \           else \n                                            if a==10 \n   \
    \                                             then return true\n             \
    \                               else \n                                      \
    \          if a==11 \n                                                    then\
    \ return true\n                                                else \n       \
    \                                             if a==12 \n                    \
    \                                    then return true\n                      \
    \                              else \n                                       \
    \                 if a==13 \n                                                \
    \            then return true\n                                              \
    \          else \n                                                           \
    \ if a==14 \n                                                                then\
    \ return true\n                                                            else\
    \ \n                                                                if a==15 \n\
    \                                                                    then return\
    \ true\n                                                                    else\
    \ \n                                                        if a==16 \n      \
    \                                                      then return true\n    \
    \                                                        else \n             \
    \                                                   if a==17 \n              \
    \                                                      then return true\n    \
    \                                                                else \n     \
    \                                                   if a==18 \n              \
    \                                              then return true\n            \
    \                                                else \n                     \
    \                                           if a==19 \n                      \
    \                                              then return true\n            \
    \                                                        else \n             \
    \                                           if a==20 \n                      \
    \                                      then return true\n                    \
    \                                        else \n                             \
    \                                   if a==21 \n                              \
    \                                      then return true\n                    \
    \                                                else \n                     \
    \                                   if a==22 \n                              \
    \                              then return true\n                            \
    \                                else \n                                     \
    \                           if a==23 \n                                      \
    \                              then return true\n                            \
    \                                        else \n                             \
    \                           if a==24 \n                                      \
    \                      then return true\n                                    \
    \                        else \n                                             \
    \                   if a==25 \n                                              \
    \                      then return true\n                                    \
    \                                else \n                                     \
    \                   if a==26 \n                                              \
    \              then return true\n                                            \
    \                else \n                                                     \
    \           if a==27 \n                                                      \
    \              then return true\n                                            \
    \                        else \n                                             \
    \           if a==28 \n                                                      \
    \      then return true\n                                                    \
    \        else \n                                                             \
    \   if a==29 \n                                                              \
    \      then return true\n                                                    \
    \                else \n                                                     \
    \   if a==30 \n                                                            then\
    \ return true\n                                                            else\
    \ \n                                                                if a==31 \n\
    \                                                                    then return\
    \ true\n                                                                    else\
    \ \n                                                        if a==32 \n      \
    \                                                      then return true\n    \
    \                                                        else \n             \
    \                                                   if a==33 \n              \
    \                                                      then return true\n    \
    \                                                                else \n     \
    \                                                   if a==34 \n              \
    \                                              then return true\n            \
    \                                                else \n                     \
    \                                           if a==35 \n                      \
    \                                              then return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpywrjnpqg.jl:10\nin expression starting at /tmp/tmpywrjnpqg.jl:10\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(2)\n\
    </cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100)\n</cell>\n<code language=julia-1.5>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000)\n</cell>\n<code language=julia-1.5>\niscube(100000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000001)\n</cell>\n<code language=julia-1.5>\niscube(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000004)\n</cell>\n<code language=julia-1.5>\niscube(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000007)\n</cell>\n<code language=julia-1.5>\niscube(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000010)\n</cell>\n<code language=julia-1.5>\niscube(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000013)\n</cell>\n<code language=julia-1.5>\niscube(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000016)\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhf8kjlo.jl:13\nin expression starting at\
    \ /tmp/tmpvhf8kjlo.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1\n       \
    \         then cube=false\n            else \n                if i%3==0\n    \
    \                then cube=false\n                else \n                    cube=true\n\
    \        end\n        return cube\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"\n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a cube of some integer number.\n    Note: you may assume the input\
    \ is always valid.\n    Examples:\n                            \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpta4ajsuz.jl:9\nin expression starting at /tmp/tmpta4ajsuz.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        if a==1 \n            then return true\n        else \n   \
    \         if a==2 \n                then return true\n            else \n    \
    \            if a==3 \n                    then return true\n                else\
    \ \n                    if a==4 \n                        then return true\n \
    \                   else \n                        if a==5 \n                \
    \            then return true\n                        else \n               \
    \             if a==6 \n                                then return true\n   \
    \                         else \n                                if a==7 \n  \
    \                                  then return true\n                        \
    \        else \n                                    if a==8 \n               \
    \                         then return true\n                                 \
    \   else \n                                        if a==9 \n                \
    \                            then return true\n                              \
    \          else \n                                            if a==10 \n    \
    \                                            then return true\n              \
    \                              else \n                                       \
    \         if a==11 \n                                                    then\
    \ return true\n                                                else \n       \
    \                                             if a==12 \n                    \
    \                                    then return true\n                      \
    \                              else \n                                       \
    \                 if a==13 \n                                                \
    \            then return true\n                                              \
    \          else \n                                                           \
    \ if a==14 \n                                                                then\
    \ return true\n                                                            else\
    \ \n                                                                if a==15 \n\
    \                                                                    then return\
    \ true\n                                                                    else\
    \ \n                                                        if a==16 \n      \
    \                                                      then return true\n    \
    \                                                        else \n             \
    \                                                   if a==17 \n              \
    \                                                      then return true\n    \
    \                                                                else \n     \
    \                                                   if a==18 \n              \
    \                                              then return true\n            \
    \                                                else \n                     \
    \                                           if a==19 \n                      \
    \                                              then return true\n            \
    \                                                        else \n             \
    \                                           if a==20 \n                      \
    \                                      then return true\n                    \
    \                                        else \n                             \
    \                                   if a==21 \n                              \
    \                                      then return true\n                    \
    \                                                else \n                     \
    \                                   if a==22 \n                              \
    \                              then return true\n                            \
    \                                else \n                                     \
    \                           if a==23 \n                                      \
    \                              then return true\n                            \
    \                                        else \n                             \
    \                           if a==24 \n                                      \
    \                      then return true\n                                    \
    \                        else \n                                             \
    \                   if a==25 \n                                              \
    \                      then return true\n                                    \
    \                                else \n                                     \
    \                   if a==26 \n                                              \
    \              then return true\n                                            \
    \                else \n                                                     \
    \           if a==27 \n                                                      \
    \              then return true\n                                            \
    \                        else \n                                             \
    \           if a==28 \n                                                      \
    \      then return true\n                                                    \
    \        else \n                                                             \
    \   if a==29 \n                                                              \
    \      then return true\n                                                    \
    \                else \n                                                     \
    \   if a==30 \n                                                            then\
    \ return true\n                                                            else\
    \ \n                                                                if a==31 \n\
    \                                                                    then return\
    \ true\n                                                                    else\
    \ \n                                                        if a==32 \n      \
    \                                                      then return true\n    \
    \                                                        else \n             \
    \                                                   if a==33 \n              \
    \                                                      then return true\n    \
    \                                                                else \n     \
    \                                                   if a==34 \n              \
    \                                              then return true\n            \
    \                                                else \n                     \
    \                                           if a==35 \n                      \
    \                                              then return true\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg5vtzcb3.jl:9\nin expression starting at /tmp/tmpg5vtzcb3.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if a%i==0 \n    \
    \            then cube=false\n            end\n        end\n        return cube\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Write a function\
    \ that takes an integer a and returns True \n    if this ingeger is a cube of\
    \ some integer number.\n    Note: you may assume the input is always valid.\n\
    \    Examples:\n                            \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1t9bt3jv.jl:9\nin expression starting at /tmp/tmp1t9bt3jv.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5_tfahp.jl:13\nin expression starting at\
    \ /tmp/tmpx5_tfahp.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else if a==3 \n        then return true\n    else if a==5 \n        then return\
    \ true\n    else if a==7 \n        then return true\n    else if a==9 \n     \
    \   then return true\n    else if a==11 \n        then return true\n    else if\
    \ a==13 \n        then return true\n    else if a==15 \n        then return true\n\
    \    else if a==17 \n        then return true\n    else if a==19 \n        then\
    \ return true\n    else if a==21 \n        then return true\n    else if a==23\
    \ \n        then return true\n    else if a==25 \n        then return true\n \
    \   else if a==27 \n        then return true\n    else if a==29 \n        then\
    \ return true\n    else if a==31 \n        then return true\n    else if a==33\
    \ \n        then return true\n    else if a==35 \n        then return true\n \
    \   else if a==37 \n        then return true\n    else if a==39 \n        then\
    \ return true\n    else if a==41 \n        then return true\n    else if a==43\
    \ \n        then return true\n    else if a==45 \n        then return true\n \
    \   else if a==47 \n        then return true\n    else if a==49 \n        then\
    \ return true\n    else if a==51 \n        then return true\n    else if a==53\
    \ \n        then return true\n    else if a==55 \n        then return true\n \
    \   else if a==57 \n        then return true\n    else if a==59 \n        then\
    \ return true\n    else if a==61 \n        then return true\n    else if a==63\
    \ \n        then return true\n    else if a==65 \n        then return true\n \
    \   else if a==67 \n        then return true\n    else if a==69 \n        then\
    \ return true\n    else if a==71 \n        then return true\n    else if a==73\
    \ \n        then return true\n    else if a==75 \n        then return true\n \
    \   else if a==77 \n        then return true\n    else if a==79 \n        then\
    \ return true\n    else if a==81 \n        then return true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgqkes_xl.jl:9\nin expression starting at /tmp/tmpgqkes_xl.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl26d8mq.jl:13\nin expression starting at\
    \ /tmp/tmppl26d8mq.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else if a==1 \n        then return true\n    else if a==2 \n        then return\
    \ true\n    else if a==3 \n        then return true\n    else if a==4 \n     \
    \   then return true\n    else if a==5 \n        then return true\n    else if\
    \ a==6 \n        then return true\n    else if a==7 \n        then return true\n\
    \    else if a==8 \n        then return true\n    else if a==9 \n        then\
    \ return true\n    else return false\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis does not answer the question. OP wants to know if an `Int64` can be\
    \ written as a sum of cubes of smaller `Int64`s.\n<|/ c |>\n<| c |>\nI thought\
    \ the question was \"how do I write an efficient function that checks if an `Int64`\
    \ can be written as a sum of cubes of smaller `Int64`s?\" The answer is \"you\
    \ can't\". The only way is to check all `Int64` values from `1` to `9` by hand.\n\
    <|/ c |>\n<| c |>\nYes, I understand that. But OP wants to know if an `Int64`\
    \ can be written as a sum of cubes of smaller `Int64`s. Your answer does not do\
    \ that. Your answer checks if an `Int64` can be written as a sum of cubes of smaller\
    \ `Int64`s *modulo 10*. OP wants to know if an `Int64` can be written as a sum\
    \ of cubes of smaller `Int64`s *modulo 100*. Your answer does not do that. Your\
    \ answer checks if an `Int64` can be written as a sum of cubes of smaller `Int64`s\
    \ *modulo 1000*. OP wants to know if an `Int64` can be written as a sum of cubes\
    \ of smaller `Int64`s *modulo 10000*. Your answer does not do that. Your answer\
    \ checks if an `Int64` can be written as a sum of cubes of smaller `Int64`s *modulo\
    \ 100000*. OP wants to know if an `Int64` can be written as a sum of cubes of\
    \ smaller `Int64`s *modulo 1000000*. Your answer does not do that. Your answer\
    \ checks if an `Int64` can be written as a sum of cubes of smaller `Int64`s *modulo\
    \ 10000000*. OP wants to know if an `Int64` \nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo079siei.jl:9\nin expression starting at /tmp/tmpo079siei.jl:9\n"
  stdout: ''
  timestamp: 1659747794
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5_tfahp.jl:13\nin expression starting at\
    \ /tmp/tmpx5_tfahp.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\niscube(8)\n\
    </cell>\n<code language=julia-1.0>\niscube(9)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10)\n</cell>\n<code language=julia-1.0>\niscube(11)\n</cell>\n<code language=julia-1.0>\n\
    iscube(12)\n</cell>\n<code language=julia-1.0>\niscube(13)\n</cell>\n<code language=julia-1.0>\n\
    iscube(14)\n</cell>\n<code language=julia-1.0>\niscube(15)\n</cell>\n<code language=julia-1.0>\n\
    iscube(16)\n</cell>\n<code language=julia-1.0>\niscube(17)\n</cell>\n<code language=julia-1.0>\n\
    iscube(18)\n</cell>\n<code language=julia-1.0>\niscube(19)\n</cell>\n<code language=julia-1.0>\n\
    iscube(20)\n</cell>\n<code language=julia-1.0>\niscube(21)\n</cell>\n<code language=julia-1.0>\n\
    iscube(22)\n</cell>\n<code language=julia-1.0>\niscube(23)\n</cell>\n<code language=julia-1.0>\n\
    iscube(24)\n</cell>\n<code language=julia-1.0>\niscube(25)\n</cell>\n<code language=julia-1.0>\n\
    iscube(26)\n</cell>\n<code language=julia-1.0>\niscube(27)\n</cell>\n<code language=julia-1.0>\n\
    iscube(28)\n</cell>\n<code language=julia-1.0>\niscube(29)\n</cell>\n<code language=julia-1.0>\n\
    iscube(30)\n</cell>\n<code language=julia-1.0>\niscube(31)\n</cell>\n<code language=julia-1.0>\n\
    iscube(32)\n</cell>\n<code language=julia-1.0>\niscube(33)\n</cell>\n<code language=julia-1.0>\n\
    iscube(34)\n</cell>\n<code language=julia-1.0>\niscube(35)\n</cell>\n<code language=julia-1.0>\n\
    iscube(36)\n</cell>\n<code language=julia-1.0>\niscube(37)\n</cell>\n<code language=julia-1.0>\n\
    iscube(38)\n</cell>\n<code language=julia-1.0>\niscube(39)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkg_upxm.jl:13\nin expression starting at\
    \ /tmp/tmpvkg_upxm.jl:13\n"
  stdout: ''
  timestamp: 1659747794
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 || a == 1 || a == 2 || a ==\
    \ 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 ||\
    \ a == 11 || a == 12 || a == 13 || a == 14 || a == 15 || a == 16 || a == 17 ||\
    \ a == 18 || a == 19 || a == 20 || a == 21 || a == 22 || a == 23 || a == 24 ||\
    \ a == 25 || a == 26 || a == 27 || a == 28 || a == 29 || a == 30 || a == 31 ||\
    \ a == 32 || a == 33 || a == 34 || a == 35 || a == 36 || a == 37 || a == 38 ||\
    \ a == 39 || a == 40 || a == 41 || a == 42 || a == 43 || a == 44 || a == 45 ||\
    \ a == 46 || a == 47 || a == 48 || a == 49 || a == 50 || a == 51 || a == 52 ||\
    \ a == 53 || a == 54 || a == 55 || a == 56 || a == 57 || a == 58 || a == 59 ||\
    \ a == 60 || a == 61 || a == 62 || a == 63 || a == 64 || a == 65 || a == 66 ||\
    \ a == 67 || a == 68 || a == 69 || a == 70 || a == 71 || a == 72 || a == 73 ||\
    \ a == 74 || a == 75 || a == 76 || a == 77 || a == 78 || a == 79 || a == 80 ||\
    \ a == 81 || a == 82 || a == 83 || a == 84 || a == 85 || a == 86 || a == 87 ||\
    \ a == 88 || a == 89 || a == 90 || a == 91 || a == 92 || a == 93 || a == 94 ||\
    \ a == 95 || a == 96 || a == 97 || a == 98 || a == 99 || a == 100 || a == 101\
    \ || a == 102 || a == 103 || a == 104 || a == 105 || a == 106 || a == 107 || a\
    \ == 108 || a == 109 || a == 110 || a == 111 || a == 112 || a == 113 || a == 114\
    \ || a == 115 || a == 116 || a == 117 || a == 118 || a == 119 \n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomukqqtb.jl:14\nin expression starting at\
    \ /tmp/tmpomukqqtb.jl:14\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(2)\n\
    </cell>\n<code language=julia-1.5>\niscube(9)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(11)\n</cell>\n<code language=julia-1.5>\n\
    iscube(12)\n</cell>\n<code language=julia-1.5>\niscube(13)\n</cell>\n<code language=julia-1.5>\n\
    iscube(14)\n</cell>\n<code language=julia-1.5>\niscube(15)\n</cell>\n<code language=julia-1.5>\n\
    iscube(16)\n</cell>\n<code language=julia-1.5>\niscube(17)\n</cell>\n<code language=julia-1.5>\n\
    iscube(18)\n</cell>\n<code language=julia-1.5>\niscube(19)\n</cell>\n<code language=julia-1.5>\n\
    iscube(20)\n</cell>\n<code language=julia-1.5>\niscube(21)\n</cell>\n<code language=julia-1.5>\n\
    iscube(22)\n</cell>\n<code language=julia-1.5>\niscube(23)\n</cell>\n<code language=julia-1.5>\n\
    iscube(24)\n</cell>\n<code language=julia-1.5>\niscube(25)\n</cell>\n<code language=julia-1.5>\n\
    iscube(26)\n</cell>\n<code language=julia-1.5>\niscube(27)\n</cell>\n<code language=julia-1.5>\n\
    iscube(28)\n</cell>\n<code language=julia-1.5>\niscube(29)\n</cell>\n<code language=julia-1.5>\n\
    iscube(30)\n</cell>\n<code language=julia-1.5>\niscube(31)\n</cell>\n<code language=julia-1.5>\n\
    iscube(32)\n</cell>\n<code language=julia-1.5>\niscube(33)\n</cell>\n<code language=julia-1.5>\n\
    iscube(34)\n</cell>\n<code language=julia-1.5>\niscube(35)\n</cell>\n<code language=julia-1.5>\n\
    iscube(36)\n</cell>\n<code language=julia-1.5>\niscube(37)\n</cell>\n<code language=julia-1.5>\n\
    iscube(38)\n</cell>\n<code language=julia-1.5>\niscube(39)\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzhexttm.jl:13\nin expression starting at\
    \ /tmp/tmprzhexttm.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1\n       \
    \         then cube=false\n            else \n                if i==a\n      \
    \              then cube=false\n                else \n                    if\
    \ i%2==0\n                        then cube=false\n                    else \n\
    \                        if i%3==0\n                            then cube=false\n\
    \                        else \n                            if i%5==0\n      \
    \                          then cube=false\n                            else \n\
    \                                if i%7==0\n                                 \
    \   then cube=false\n                                else \n                 \
    \                   cube=false\n        end\n    end\n    return cube\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. `iscube(10)` returns `true`\
    \ but `iscube(11)` returns `false`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited the code so you can test it again.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works. I edited the code so you can test it again.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I edited the code so you can test it\
    \ again.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited the code\
    \ so you can test it again.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz37udlah.jl:9\nin expression starting at /tmp/tmpz37udlah.jl:9\n"
  stdout: ''
  timestamp: 1659747794
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1\n       \
    \         then cube=false\n            else \n                cube=cube*(i%2==0)\n\
    \        end\n        return cube\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This code does not work as intended. `iscube(10)` returns `false` instead of `true`.\n\
    <|/ c |>\n<| c |>\nI fixed the code so that it works as intended. Thanks for pointing\
    \ out my mistake.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplgd9arwm.jl:9\nin expression starting at /tmp/tmplgd9arwm.jl:9\n"
  stdout: ''
  timestamp: 1659747794
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(2)\n\
    </cell>\n<code language=julia-1.5>\niscube(8)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10)\n</cell>\n<code language=julia-1.5>\niscube(100)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.5>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000)\n</cell>\n<code language=julia-1.5>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxpjfdn4.jl:13\nin expression starting at\
    \ /tmp/tmpbxpjfdn4.jl:13\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            cube=cube && iscube(i*i)\n\
    \        end\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqt7h6iif.jl:9\nin expression starting at /tmp/tmpqt7h6iif.jl:9\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==a \n      \
    \          then cube=false\n            else \n                if i^(i-1)==0 \n\
    \                    then cube=false\n                else \n                \
    \    cube=true\n        end\n    end\n    return cube\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgctor0uh.jl:9\nin expression starting at /tmp/tmpgctor0uh.jl:9\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprygbt6tx.jl:13\nin expression starting at\
    \ /tmp/tmprygbt6tx.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.4>\niscube(10)\n\
    </cell>\n<code language=julia-1.4>\niscube(11)\n</cell>\n<code language=julia-1.4>\n\
    iscube(12)\n</cell>\n<code language=julia-1.4>\niscube(13)\n</cell>\n<code language=julia-1.4>\n\
    iscube(14)\n</cell>\n<code language=julia-1.4>\niscube(15)\n</cell>\n<code language=julia-1.4>\n\
    iscube(16)\n</cell>\n<code language=julia-1.4>\niscube(17)\n</cell>\n<code language=julia-1.4>\n\
    iscube(18)\n</cell>\n<code language=julia-1.4>\niscube(19)\n</cell>\n<code language=julia-1.4>\n\
    iscube(20)\n</cell>\n<code language=julia-1.4>\niscube(21)\n</cell>\n<code language=julia-1.4>\n\
    iscube(22)\n</cell>\n<code language=julia-1.4>\niscube(23)\n</cell>\n<code language=julia-1.4>\n\
    iscube(24)\n</cell>\n<code language=julia-1.4>\niscube(25)\n</cell>\n<code language=julia-1.4>\n\
    iscube(26)\n</cell>\n<code language=julia-1.4>\niscube(27)\n</cell>\n<code language=julia-1.4>\n\
    iscube(28)\n</cell>\n<code language=julia-1.4>\niscube(29)\n</cell>\n<code language=julia-1.4>\n\
    iscube(30)\n</cell>\n<code language=julia-1.4>\niscube(31)\n</cell>\n<code language=julia-1.4>\n\
    iscube(32)\n</cell>\n<code language=julia-1.4>\niscube(33)\n</cell>\n<code language=julia-1.4>\n\
    iscube(34)\n</cell>\n<code language=julia-1.4>\niscube(35)\n</cell>\n<code language=julia-1.4>\n\
    iscube(36)\n</cell>\n<code language=julia-1.4>\niscube(37)\n</cell>\n<code language=julia-1.4>\n\
    iscube(38)\n</cell>\n<code language=julia-1.4>\niscube(39)\n</cell>\n<code language=julia-1.4>\n\
    iscube(40)\n</cell>\n<code language=julia-1.4>\niscube(41)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaeho5m9_.jl:13\nin expression starting at\
    \ /tmp/tmpaeho5m9_.jl:13\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4xwv2xyl.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xwv2xyl.jl:15\n\
    in expression starting at /tmp/tmp4xwv2xyl.jl:15\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ if a == 1 \n        return true\n    else if a == 2 \n        return true\n\
    \    else if a == 3 \n        return true\n    else if a == 4 \n        return\
    \ true\n    else if a == 5 \n        return true\n    else if a == 6 \n      \
    \  return true\n    else if a == 7 \n        return true\n    else if a == 8 \n\
    \        return true\n    else if a == 9 \n        return true\n    else if a\
    \ == 10 \n        return true\n    else if a == 11 \n        return true\n   \
    \ else if a == 12 \n        return true\n    else if a == 13 \n        return\
    \ true\n    else if a == 14 \n        return true\n    else if a == 15 \n    \
    \    return true\n    else if a == 16 \n        return true\n    else if a ==\
    \ 17 \n        return true\n    else if a == 18 \n        return true\n    else\
    \ if a == 19 \n        return true\n    else if a == 20 \n        return true\n\
    \    else if a == 21 \n        return true\n    else if a == 22 \n        return\
    \ true\n    else if a == 23 \n        return true\n    else if a == 24 \n    \
    \    return true\n    else if a == 25 \n        return true\n    else if a ==\
    \ 26 \n        return true\n    else if a == 27 \n        return true\n    else\
    \ if a == 28 \n        return true\n    else if a == 29 \n        return true\n\
    \    else if a == 30 \n        return true\n    else if a == 31 \n        return\
    \ true\n    else if a == 32 \n        return true\n    else if a == 33 \n    \
    \    return true\n    else if a == 34 \n        return true\n    else if a ==\
    \ 35 \n        return true\n    else if a == 36 \n        return true\n    else\
    \ if a == 37 \n        return true\n    else if a == 38 \n        return true\n\
    \    else if a == 39 \n        return true\n    else if a == 40 \n        return\
    \ true\n    else if a == 41 \n        return true\n    else if a == 42 \n    \
    \    return true\n    else if a == 43 \n        return true\n    else if a ==\
    \ 44 \n        return true\n    else if a == 45 \n        return true\n    else\
    \ if a == 46 \n        return true\n    else if a == 47 \n        return true\n\
    \    else if a == 48 \n        return true\n    else if a == 49 \n        return\
    \ true\n    else if a == 50 \n        return true\n    else if a == 51 \n    \
    \    return true\n    else if a == 52 \n        return true\n    else if a ==\
    \ 53 \n        return true\n    else if a == 54 \n        return true\n    else\
    \ if a == 55\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6zpjjqh.jl:10\nin expression starting at\
    \ /tmp/tmpi6zpjjqh.jl:10\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    else if a==1\
    \ return true\n    else if a==2 return true\n    else if a==3 return true\n  \
    \  else if a==4 return true\n    else if a==5 return true\n    else if a==6 return\
    \ true\n    else if a==7 return true\n    else if a==8 return true\n    else if\
    \ a==9 return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3rsgn40.jl:9\nin expression starting at /tmp/tmpd3rsgn40.jl:9\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        then return true\n \
    \   else if a==3 \n        then return true\n    else if a==5 \n        then return\
    \ true\n    else if a==7 \n        then return true\n    else if a==9 \n     \
    \   then return true\n    else if a==11 \n        then return true\n    else if\
    \ a==13 \n        then return true\n    else if a==15 \n        then return true\n\
    \    else if a==17 \n        then return true\n    else if a==19 \n        then\
    \ return true\n    else if a==21 \n        then return true\n    else if a==23\
    \ \n        then return true\n    else if a==25 \n        then return true\n \
    \   else if a==27 \n        then return true\n    else if a==29 \n        then\
    \ return true\n    else if a==31 \n        then return true\n    else if a==33\
    \ \n        then return true\n    else if a==35 \n        then return true\n \
    \   else if a==37 \n        then return true\n    else if a==39 \n        then\
    \ return true\n    else if a==41 \n        then return true\n    else if a==43\
    \ \n        then return true\n    else if a==45 \n        then return true\n \
    \   else if a==47 \n        then return true\n    else if a==49 \n        then\
    \ return true\n    else if a==51 \n        then return true\n    else if a==53\
    \ \n        then return true\n    else if a==55 \n        then return true\n \
    \   else if a==57 \n        then return true\n    else if a==59 \n        then\
    \ return true\n    else if a==61 \n        then return true\n    else if a==63\
    \ \n        then return true\n    else if a==65 \n        then return true\n \
    \   else if a==67 \n        then return true\n    else if a==69 \n        then\
    \ return true\n    else if a==71 \n        then return true\n    else if a==73\
    \ \n        then return true\n    else if a==75 \n        then return true\n \
    \   else if a==77 \n        then return true\n    else if a==79 \n        then\
    \ return true\n    else if a==81 \n        then return true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgqkes_xl.jl:9\nin expression starting at /tmp/tmpgqkes_xl.jl:9\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhl98c9u.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvhl98c9u.jl:1\n\
    in expression starting at /tmp/tmpvhl98c9u.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprygbt6tx.jl:13\nin expression starting at\
    \ /tmp/tmprygbt6tx.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ if a == 1 \n        return true\n    else if a == 2 \n        return true\n\
    \    else if a == 3 \n        return true\n    else if a == 4 \n        return\
    \ true\n    else if a == 5 \n        return true\n    else if a == 6 \n      \
    \  return true\n    else if a == 7 \n        return true\n    else if a == 8 \n\
    \        return true\n    else if a == 9 \n        return true\n    else if a\
    \ == 10 \n        return true\n    else if a == 11 \n        return true\n   \
    \ else if a == 12 \n        return true\n    else if a == 13 \n        return\
    \ true\n    else if a == 14 \n        return true\n    else if a == 15 \n    \
    \    return true\n    else if a == 16 \n        return true\n    else if a ==\
    \ 17 \n        return true\n    else if a == 18 \n        return true\n    else\
    \ if a == 19 \n        return true\n    else if a == 20 \n        return true\n\
    \    else if a == 21 \n        return true\n    else if a == 22 \n        return\
    \ true\n    else if a == 23 \n        return true\n    else if a == 24 \n    \
    \    return true\n    else if a == 25 \n        return true\n    else if a ==\
    \ 26 \n        return true\n    else if a == 27 \n        return true\n    else\
    \ if a == 28 \n        return true\n    else if a == 29 \n        return true\n\
    \    else if a == 30 \n        return true\n    else if a == 31 \n        return\
    \ true\n    else if a == 32 \n        return true\n    else if a == 33 \n    \
    \    return true\n    else if a == 34 \n        return true\n    else if a ==\
    \ 35 \n        return true\n    else if a == 36 \n        return true\n    else\
    \ if a == 37 \n        return true\n    else if a == 38 \n        return true\n\
    \    else if a == 39 \n        return true\n    else if a == 40 \n        return\
    \ true\n    else if a == 41 \n        return true\n    else if a == 42 \n    \
    \    return true\n    else if a == 43 \n        return true\n    else if a ==\
    \ 44 \n        return true\n    else if a == 45 \n        return true\n    else\
    \ if a == 46 \n        return true\n    else if a == 47 \n        return true\n\
    \    else if a == 48 \n        return true\n    else if a == 49 \n        return\
    \ true\n    else if a == 50 \n        return true\n    else if a == 51 \n    \
    \    return true\n    else if a == 52 \n        return true\n    else if a ==\
    \ 53 \n        return true\n    else if a == 54 \n        return true\n    else\
    \ if a == 55\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6zpjjqh.jl:10\nin expression starting at\
    \ /tmp/tmpi6zpjjqh.jl:10\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o9vpr7c.jl:13\nin expression starting at\
    \ /tmp/tmp2o9vpr7c.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThank you\
    \ very much for your answer. I am sorry that I did not make it clear that I am\
    \ looking for a function that takes an integer a and returns true if the input\
    \ is a cube of some integer number. For example, if I input iscube(5), the function\
    \ should return true. I am sorry that I did not make it clear that I am looking\
    \ for a function that takes an integer a and returns true if the input is a cube\
    \ of some integer number. For example, if I input iscube(5), the function should\
    \ return true. I am sorry that I did not make it clear that I am looking for a\
    \ function that takes an integer a and returns true if the input is a cube of\
    \ some integer number. For example, if I input iscube(5), the function should\
    \ return true. I am sorry that I did not make it clear that I am looking for a\
    \ function that takes an integer a and returns true if the input is a cube of\
    \ some integer number. For example, if I input iscube(5), the function should\
    \ return true. I am sorry that I did not make it clear that I am looking for a\
    \ function that takes an integer a and returns true if the input is a cube of\
    \ some integer number. For example, if I input iscube(5), the function should\
    \ return true.\n<|/ c |>\n<| c |>\nThank you very much for your answer. I am sorry\
    \ that I did not make it clear that I am looking for a function that takes an\
    \ integer a and returns true if the input is a cube of some integer number. For\
    \ example, if I input iscube(5), the function should return true. I am sorry that\
    \ I did not make it clear that I am looking for a function that takes an integer\
    \ a and returns true if the input is a cube of some integer number. For example,\
    \ if I input iscube(5), the function should return true. I am sorry that I did\
    \ not make it clear that I am looking for a function that takes an integer a and\
    \ returns true if the input is a cube of some integer number. For example, if\
    \ I input iscube(5), the function should return true. I am sorry that I did not\
    \ make it clear that I am looking for a function that takes an integer a and returns\
    \ true if the input is a cube of some integer number. For example, if I input\
    \ iscube(5), the function should return true.\n<|/ c |>\n<| c |>\nThank you very\
    \ much for your answer. I am sorry that I did not make it clear that I am looking\
    \ for a function that takes an integer a and returns true if the input is a cube\
    \ of some integer number. For example, if I input iscube(5), the function should\
    \ return true. I am sorry that I did not make it clear that I am looking for a\
    \ function that takes an integer a and returns true \nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vt8otll.jl:13\nin expression starting at\
    \ /tmp/tmp9vt8otll.jl:13\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 || a==1 || a==2 || a==3 || a==4\
    \ || a==5 || a==6 || a==7 || a==8 || a==9 || a==10 || a==11 || a==12 || a==13\
    \ || a==14 || a==15 || a==16 || a==17 || a==18 || a==19 || a==20 || a==21 || a==22\
    \ || a==23 || a==24 || a==25 || a==26 || a==27 || a==28 || a==29 || a==30 || a==31\
    \ || a==32 || a==33 || a==34 || a==35 || a==36 || a==37 || a==38 || a==39 || a==40\
    \ || a==41 || a==42 || a==43 || a==44 || a==45 || a==46 || a==47 || a==48 || a==49\
    \ || a==50 || a==51 || a==52 || a==53 || a==54 || a==55 || a==56 || a==57 || a==58\
    \ || a==59 || a==60 || a==61 || a==62 || a==63 || a==64 || a==65 || a==66 || a==67\
    \ || a==68 || a==69 || a==70 || a==71 || a==72 || a==73 || a==74 || a==75 || a==76\
    \ || a==77 || a==78 || a==79 || a==80 || a==81 || a==82 || a==83 || a==84 || a==85\
    \ || a==86 || a==87 || a==88 || a==89 || a==90 || a==91 || a==92 || a==93 || a==94\
    \ || a==95 || a==96 || a==97 || a==98 || a==99 || a==100 || a==101 || a==102 ||\
    \ a==103 || a==104 || a==105 || a==106 || a==107 || a==108 || a==109 || a==110\
    \ || a==111 || a==112 || a==113 || a==114 || a==115 || a==116 || a==117 || a==118\
    \ || a==119 || a==120 || a==\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu3cwls7.jl:1\nin expression starting at /tmp/tmpyu3cwls7.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert iscube(6) == true\n@assert iscube(7) == true\n\
    @assert iscube(8) == true\n@assert iscube(9) == true\n@assert iscube(10) == false\n\
    @assert iscube(11) == false\n@assert iscube(12) == false\n@assert iscube(13) ==\
    \ false\n@assert iscube(14) == false\n@assert iscube(15) == false\n@assert iscube(16)\
    \ == false\n@assert iscube(17) == false\n@assert iscube(18) == false\n@assert\
    \ iscube(19) == false\n@assert iscube(20) == false\n@assert iscube(21) == false\n\
    @assert iscube(22) == false\n@assert iscube(23) == false\n@assert iscube(24) ==\
    \ false\n@assert iscube(25) == false\n@assert iscube(26) == false\n@assert iscube(27)\
    \ == false\n@assert iscube(28) == false\n@assert iscube(29) == false\n@assert\
    \ iscube(30) == false\n@assert iscube(31) == false\n@assert iscube(32) == false\n\
    @assert iscube(33) == false\n@assert iscube(34) == false\n@assert iscube(35) ==\
    \ false\n@assert iscube(36) == false\n@assert iscube(37) == false\n@assert iscube(38)\
    \ == false\n@assert iscube(39) == false\n@assert iscube(40) == false\n@assert\
    \ iscube(41) == false\n@assert iscube(42) == false\n@assert iscube(43) == false\n\
    @assert iscube(44) == false\n@assert iscube(45) == false\n@assert iscube(46) ==\
    \ false\n@assert iscube(47) == false\n@assert iscube(48) == false\n@assert iscube(49)\
    \ == false\n@assert iscube(50) == false\n@assert iscube(51) == false\n@assert\
    \ iscube(52) == false\n@assert iscube\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchaqt9gc.jl:20\nin expression starting at\
    \ /tmp/tmpchaqt9gc.jl:20\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihfoeuy7.jl:13\nin expression starting at\
    \ /tmp/tmpihfoeuy7.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_1uadmf.jl:13\nin expression starting at\
    \ /tmp/tmpj_1uadmf.jl:13\n"
  stdout: ''
  timestamp: 1659747793
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        then return true\n \
    \   else \n        cube=true\n        for i=1:a\n            if i==1\n       \
    \         then cube=false\n            else \n                cube=cube*(i%2==0)\n\
    \        end\n        return cube\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Write a function that takes an integer a and returns True \n    if\
    \ this ingeger is a cube of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n                            \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz512kr76.jl:9\nin expression starting at /tmp/tmpz512kr76.jl:9\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(2)\n\
    </cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100)\n</cell>\n<code language=julia-1.5>\niscube(1000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000)\n</cell>\n<code language=julia-1.5>\niscube(100000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(10000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(100000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    iscube(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\niscube(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\niscube(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\niscube(1000000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\niscube(10000000000000000000000000000)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j7wqbay.jl:13\nin expression starting at\
    \ /tmp/tmp7j7wqbay.jl:13\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\niscube(10)\n\
    </cell>\n<code language=julia-1.0>\niscube(100)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000)\n</cell>\n<code language=julia-1.0>\niscube(10000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000)\n</cell>\n<code language=julia-1.0>\niscube(1000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(100000000000000)\n</cell>\n<code language=julia-1.0>\niscube(1000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(1000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(10000000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\niscube(10000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\niscube(100000000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    iscube(1000000000000000000000000000)\n</cell>\n<code language=julia-1.0>\niscube(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\niscube(100000000000000000000000000000)\n\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_y6oedtt.jl:13\nin expression starting at\
    \ /tmp/tmp_y6oedtt.jl:13\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        then return true\n\
    \    else \n        cube = cuberoot(a)\n        if cube == 0 \n            then\
    \ return true\n        else \n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert iscube(0) === true\n@assert iscube(1) === true\n@assert iscube(2) ===\
    \ false\n@assert iscube(3) === false\n@assert iscube(4) === false\n@assert iscube(5)\
    \ === false\n@assert iscube(6) === false\n@assert iscube(7) === false\n@assert\
    \ iscube(8) === false\n@assert iscube(9) === false\n@assert iscube(10) === false\n\
    @assert iscube(11) === false\n@assert iscube(12) === false\n@assert iscube(13)\
    \ === false\n@assert iscube(14) === false\n@assert iscube(15) === false\n@assert\
    \ iscube(16) === false\n@assert iscube(17) === false\n@assert iscube(18) === false\n\
    @assert iscube(19) === false\n@assert iscube(20) === false\n@assert iscube(21)\
    \ === false\n@assert iscube(22) === false\n@assert iscube(23) === false\n@assert\
    \ iscube(24) === false\n@assert iscube(25) === false\n@assert iscube(26) === false\n\
    @assert iscube(27) === false\n@assert iscube(28) === false\n@assert iscube(29)\
    \ === false\n@assert iscube(30) === false\n@assert iscube(31) === false\n@assert\
    \ iscube(32) === false\n@assert iscube(33) === false\n@assert iscube(34) === false\n\
    @assert iscube(35) === false\n@assert iscube(36) === false\n@assert iscube(37)\
    \ === false\n@assert iscube(38) === false\n@assert iscube(39) === false\n@assert\
    \ iscube(40) === false\n@assert iscube(41) === false\n@assert iscube(42) === false\n\
    @assert iscube(43) === false\n@assert iscube(44) === false\n@assert iscube(45)\
    \ === false\n@assert iscube(46) === false\n@assert iscube(47) === false\n@assert\
    \ iscube(48) === false\n@assert iscube(49) === false\n@assert iscube(50) === false\n\
    @assert iscube\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9lt5c4jh.jl:9\nin expression starting at /tmp/tmp9lt5c4jh.jl:9\n"
  stdout: ''
  timestamp: 1659747795
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpppmcwxp5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpppmcwxp5.jl:1\n\
    in expression starting at /tmp/tmpppmcwxp5.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqm1tjfq.jl:13\nin expression starting at\
    \ /tmp/tmpmqm1tjfq.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 then return true\n    else if\
    \ a==0 then return false\n    else if a==-1 then return false\n    else if a==-2\
    \ then return false\n    else if a==-3 then return false\n    else if a==-4 then\
    \ return false\n    else if a==-5 then return false\n    else if a==-6 then return\
    \ false\n    else if a==-7 then return false\n    else if a==-8 then return false\n\
    \    else if a==-9 then return false\n    else if a==-10 then return false\n \
    \   else if a==-11 then return false\n    else if a==-12 then return false\n \
    \   else if a==-13 then return false\n    else if a==-14 then return false\n \
    \   else if a==-15 then return false\n    else if a==-16 then return false\n \
    \   else if a==-17 then return false\n    else if a==-18 then return false\n \
    \   else if a==-19 then return false\n    else if a==-20 then return false\n \
    \   else if a==-21 then return false\n    else if a==-22 then return false\n \
    \   else if a==-23 then return false\n    else if a==-24 then return false\n \
    \   else if a==-25 then return false\n    else if a==-26 then return false\n \
    \   else if a==-27 then return false\n    else if a==-28 then return false\n \
    \   else if a==-29 then return false\n    else if a==-30 then return false\n \
    \   else if a==-31 then return false\n    else if a==-32 then return false\n \
    \   else if a==-33 then return false\n    else if a==-34 then return false\n \
    \   else if a==-35 then return false\n    else if a==-36 then return false\n \
    \   else if a==-37 then return false\n    else if a==-38 then return false\n \
    \   else if a==-39 then return false\n    else if a==-40 then return false\n \
    \   else if a==-41 then return false\n    else if a==-42 then return false\n \
    \   else if a==-43 then return false\n    else if a==-44 then return false\n \
    \   else if a==-45 then \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw_7pt4e.jl:8\nin expression starting at /tmp/tmprw_7pt4e.jl:8\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdpm0nb3.jl:13\nin expression starting at\
    \ /tmp/tmpwdpm0nb3.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\niscube(9)\n\
    </cell>\n<code language=julia-1.5>\niscube(10)\n</cell>\n<code language=julia-1.5>\n\
    iscube(11)\n</cell>\n<code language=julia-1.5>\niscube(12)\n</cell>\n<code language=julia-1.5>\n\
    iscube(13)\n</cell>\n<code language=julia-1.5>\niscube(14)\n</cell>\n<code language=julia-1.5>\n\
    iscube(15)\n</cell>\n<code language=julia-1.5>\niscube(16)\n</cell>\n<code language=julia-1.5>\n\
    iscube(17)\n</cell>\n<code language=julia-1.5>\niscube(18)\n</cell>\n<code language=julia-1.5>\n\
    iscube(19)\n</cell>\n<code language=julia-1.5>\niscube(20)\n</cell>\n<code language=julia-1.5>\n\
    iscube(21)\n</cell>\n<code language=julia-1.5>\niscube(22)\n</cell>\n<code language=julia-1.5>\n\
    iscube(23)\n</cell>\n<code language=julia-1.5>\niscube(24)\n</cell>\n<code language=julia-1.5>\n\
    iscube(25)\n</cell>\n<code language=julia-1.5>\niscube(26)\n</cell>\n<code language=julia-1.5>\n\
    iscube(27)\n</cell>\n<code language=julia-1.5>\niscube(28)\n</cell>\n<code language=julia-1.5>\n\
    iscube(29)\n</cell>\n<code language=julia-1.5>\niscube(30)\n</cell>\n<code language=julia-1.5>\n\
    iscube(31)\n</cell>\n<code language=julia-1.5>\niscube(32)\n</cell>\n<code language=julia-1.5>\n\
    iscube(33)\n</cell>\n<code language=julia-1.5>\niscube(34)\n</cell>\n<code language=julia-1.5>\n\
    iscube(35)\n</cell>\n<code language=julia-1.5>\niscube(36)\n</cell>\n<code language=julia-1.5>\n\
    iscube(37)\n</cell>\n<code language=julia-1.5>\niscube(38)\n</cell>\n<code language=julia-1.5>\n\
    iscube(39)\n</cell>\n<code language=julia-1.5>\niscube(40)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e674ssp.jl:13\nin expression starting at\
    \ /tmp/tmp5e674ssp.jl:13\n"
  stdout: ''
  timestamp: 1659747792
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n    else\
    \ \n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5xnlib.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq5xnlib.jl:1\n\
    in expression starting at /tmp/tmpgq5xnlib.jl:1\n"
  stdout: ''
  timestamp: 1659747790
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==0 return true\n    if a==1 return\
    \ true\n    if a==2 return true\n    if a==3 return true\n    if a==4 return true\n\
    \    if a==5 return true\n    if a==6 return true\n    if a==7 return true\n \
    \   if a==8 return true\n    if a==9 return true\n    if a==10 return true\n \
    \   if a==11 return true\n    if a==12 return true\n    if a==13 return true\n\
    \    if a==14 return true\n    if a==15 return true\n    if a==16 return true\n\
    \    if a==17 return true\n    if a==18 return true\n    if a==19 return true\n\
    \    if a==20 return true\n    if a==21 return true\n    if a==22 return true\n\
    \    if a==23 return true\n    if a==24 return true\n    if a==25 return true\n\
    \    if a==26 return true\n    if a==27 return true\n    if a==28 return true\n\
    \    if a==29 return true\n    if a==30 return true\n    if a==31 return true\n\
    \    if a==32 return true\n    if a==33 return true\n    if a==34 return true\n\
    \    if a==35 return true\n    if a==36 return true\n    if a==37 return true\n\
    \    if a==38 return true\n    if a==39 return true\n    if a==40 return true\n\
    \    if a==41 return true\n    if a==42 return true\n    if a==43 return true\n\
    \    if a==44 return true\n    if a==45 return true\n    if a==46 return true\n\
    \    if a==47 return true\n    if a==48 return true\n    if a==49 return true\n\
    \    if a==50 return true\n    if a==51 return true\n    if a==52 return true\n\
    \    if a==53 return true\n    if a==54 return true\n    if a==55 return true\n\
    \    if a==56 return true\n    if a==57 return true\n    if a==58 return true\n\
    \    if a==59 return true\n    if a==60 return true\n    if a==61 return true\n\
    \    if a==62 return true\n    if a==63 return true\n    if a==64 return true\n\
    \    if a==65 return true\n    if a==66 return true\n    if a==67 return true\n\
    \    if a==68 return true\n    if a==69 return true\n    if a==70 return true\n\
    \    if a==71 \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr862dqy.jl:1\nin expression starting at /tmp/tmpxr862dqy.jl:1\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Write a function that takes an integer a and returns True \n    if this ingeger\
    \ is a cube of some integer number.\n    Note: you may assume the input is always\
    \ valid.\n    Examples:\n                            \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihfoeuy7.jl:13\nin expression starting at\
    \ /tmp/tmpihfoeuy7.jl:13\n"
  stdout: ''
  timestamp: 1659747788
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n                            \"\"\"\
    \nfunction iscube(a::Int64)::Bool \n    if a==1 \n        return true\n    else\
    \ \n        return false\nend\n\"\"\"\n\"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxmyit63k.jl:7 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmyit63k.jl:15\n\
    in expression starting at /tmp/tmpxmyit63k.jl:15\n"
  stdout: ''
  timestamp: 1659747795
