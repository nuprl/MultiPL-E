name: HumanEval_31_is_prime
language: jl
prompt: "\"\"\"Return true if a given number is prime, and false otherwise.\n    \
  \                            \"\"\"\nfunction is_prime(n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6)\
  \ == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t\
  @test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4)\
  \ == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11)\
  \ == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t\
  @test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n"
completions: ["    if n < 2 || n % 2 == 0 \n        return false\n    else \n    \
    \    return is_prime(n-1) || is_prime(n-2)\nend", "    if n < 2 || n % 2 == 0\
    \ \n        return false\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend", "    if is_prime_helper(n,2)\n    else \n        return false\n\
    end", "    if is_prime_helper(n) == true\n    else \n        return false\n  \
    \  end\nend", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n\
    \        return is_prime(n - 1) || is_prime(n - 3)\nend", "    \n    local is_prime\
    \ = true\n    \n    if n < 2 \n        then return false\n    end\n    \n    for\
    \ i = 2:n \n        if n % i == 0 \n            then return false\n        end\n\
    \    end\n    \n    return is_prime\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.4>\n@time is_prime(102)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(103)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(104)\n</cell>\n<code language=julia-1.4>\n@time is_prime(105)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(106)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(107)\n</cell>\n<code language=julia-1.4>\n@time is_prime(108)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(109)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(110)\n</cell>\n<code language=julia-1.4>\n@time is_prime(111)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(112)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(113)\n</cell>\n<code language=julia-1.4>\n@time is_prime(114)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(115)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(116)\n</cell>\n<code language=julia-1.4>\n@time is_prime(117)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(118)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(119)\n</cell>\n<code language=julia-1.4>\n@time is_prime(120)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(121)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(122)\n</cell>\n<code language=julia-1.4>\n@time is_prime(123)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(124)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(125)\n</cell>\n<code language=julia-1.4>\n@time is_prime", "  \
    \  \n    if n < 2 || n == 1 \n        return true\n    \n    primes = primes_list(n)\n\
    \    \n    for p in primes\n        if n % p == 0 \n            return false\n\
    \    end\n    \n    return true\nend", "    if is_prime_helper(n,1)\n    else\
    \ \n        false\n    end\nend", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false \n    else \n        primes = primes(n) \n        for p in primes \n \
    \           if n % p == 0 \n                then return false \n            else\
    \ \n                return true \nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ is_prime(10^6)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a given number is even.", "    \n    primes = primes(n)\n    \n    for p in\
    \ primes\n        if n % p == 0 \n            return false\n    end\n    \n  \
    \  return true\nend", "    if is_factor(n, 2) == true\n        return true\n \
    \   else \n        return false\nend", "    \n    prime_check::Bool = n % 2 ==\
    \ 0\n    \n    if prime_check\n        \n        for i = 3 .. Int(sqrt(n))\n \
    \           \n            if n % i == 0\n                \n                prime_check\
    \ = false\n                break\n            end\n        end\n    end\n    \n\
    \    return prime_check\nend\n</cell>\n<code language=julia-1.5>\nis_prime(7)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(8)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(9)\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(12)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(14)\n</cell>\n<code language=julia-1.5>\nis_prime(15)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(16)\n</cell>\n<code language=julia-1.5>\nis_prime(17)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(18)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(19)\n</cell>\n<code language=julia-1.5>\nis_prime(20)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(21)\n</cell>\n<code language=julia-1.5>\nis_prime(22)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(23)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(24)\n</cell>\n<code language=julia-1.5>\nis_prime(25)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(26)\n</cell>\n<code language=julia-1.5>\nis_prime(27)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(28)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(29)\n</cell>\n<code language=julia-1.5>\nis_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(31)\n</cell>\n<code language=julia-1.5>\nis_prime(32)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(33)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(34)\n</cell>\n<code language=julia-1.5>\nis_prime(35)\n</cell>\n", " \
    \   if n < 2 || n % 2 == 0 \n        then return false\n    else \n        primes\
    \ <- primes(n)\n        i in 1:length(primes)\n            && primes[i] == n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime",
  "    \n    primes = primes(n)\n    \n    prime = primes[end]\n    \n    return prime\
    \ == n\nend", "    \n    prime::Bool = false\n    \n    if n < 2 || n == 1 \n\
    \        prime = true\n    else \n        for p in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\
    \ \n            if n % p == 0 \n                prime = false\n              \
    \  break\n        end\n    end\n    \n    return prime\nend\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.3>\nis_prime(100)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(100000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10000000000000000000000000)\n", "    if is_factor(n,2)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    \n    if n < 2 ||\
    \ n % 2 == 0 \n        return false\n    \n    i = 2\n    while i * i <= n \n\
    \        if n % i == 0 \n            return false\n        i += 1\n    return\
    \ true\nend", "    \n    primes = primes_list(n)\n    \n    for i in primes\n\
    \        if n % i == 0\n            return false\n    end\n    return true\nend",
  "    if is_prime_impl(n) == true\n    else \n        error(\"The number $n isn't\
    \ prime\")\n    end\nend", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5\
    \ == 0 || n % 7 == 0 \n        then return false\n    else \n        primes <-\
    \ primes(n)\n        i <- length(primes)\n        while i >= 1 \n            do\
    \ if primes[i] != n \n                then return false\n                i <-\
    \ i - 1\n            end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^6)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^7)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^8)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^10)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^11)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^12)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^13)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^14)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^15)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^16)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^17)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^18)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^19)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^20)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^21)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^22)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^23)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^24)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^25)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^26)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^27)\n</cell>\n<code language=julia-1.4>\n@time is_prime(", " \
    \   \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n   \
    \ while i * i <= n \n        if n % i == 0 \n            return false\n      \
    \  i = i + 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a given number is\
    \ even.", "    \n    if n < 2\n        return false\n    \n    primes = primes_upto(n)\n\
    \    \n    for p in primes\n        if n % p == 0\n            return false\n\
    \    \n    return true\nend", "    \n    if n < 2 || n == 1 \n        return true\n\
    \    \n    i = 2\n    while i <= sqrt(n) \n        if n % i == 0 \n          \
    \  return false\n        i += 1\n    return true\nend", "    \n    if n < 2 ||\
    \ n == 1\n        return false\n    \n    for p in primes\n        if n % p ==\
    \ 0\n            return false\n    end\n    return true\nend", "    \n    if n\
    \ < 2 || n == 1 \n        return true\n    \n    for d in 2:(n-1)\n        if\
    \ n % d == 0 \n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.4>\nis_prime(10)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.4>\nis_prime(12)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(13)\n</cell>\n<code language=julia-1.4>\nis_prime(14)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(15)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(16)\n</cell>\n<code language=julia-1.4>\nis_prime(17)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(18)\n</cell>\n<code language=julia-1.4>\nis_prime(19)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(20)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(21)\n</cell>\n<code language=julia-1.4>\nis_prime(22)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(23)\n</cell>\n<code language=julia-1.4>\nis_prime(24)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(25)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(26)\n</cell>\n<code language=julia-1.4>\nis_prime(27)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(28)\n</cell>\n<code language=julia-1.4>\nis_prime(29)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(31)\n</cell>\n<code language=julia-1.4>\nis_prime(32)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(33)\n</cell>\n<code language=julia-1.4>\nis_prime(34)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(35)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(36)\n</cell>\n<code language=julia-1.4>\nis_prime(37)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(38)\n</cell>\n<code language=julia-1.4>\nis_prime(39)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(40)", "    if n < 2 || n % 2 == 0\
    \ \n        return false\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend", "    \n    if n < 2\n        return false\n    end\n    \n    if\
    \ n == 2\n        return true\n    end\n    \n    if n % 2 == 0\n        return\
    \ false\n    end\n    \n    for d in range(3, n-1, 2)\n        if n % d == 0\n\
    \            return false\n        end\n    end\n    \n    return true\nend",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else \n        for\
    \ m in 3..sqrt(n) \n            if n % m == 0 \n                then return false\n\
    \            else return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_", "    if is_factor(n, 2)\n        return true\n    else \n        return\
    \ false\nend", "    \n    if n < 2 || n == 1 \n        return true\n    \n   \
    \ for d in 2:(n-1)\n        if n % d == 0 \n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(102)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(103)\n</cell>\n<code language=julia-1.4>\n@time is_prime(104)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(105)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(106)\n</cell>\n<code language=julia-1.4>\n@time is_prime(107)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(108)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(109)\n</cell>\n<code language=julia-1.4>\n@time is_prime(110)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(111)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(112)\n</cell>\n<code language=julia-1.4>\n@time is_prime(113)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(114)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(115)\n</cell>\n<code language=julia-1.4>\n@time is_prime(116)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(117)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(118)\n</cell>\n<code language=julia-1.4>\n@time is_prime(119)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(120)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(121)\n</cell>\n<code language=julia-1.4>\n@time is_prime(122)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(123)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(124)\n</cell>\n<code language=julia-1.4>\n@time is_prime(125)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(126)\n</cell>\n<code language=julia-1.4>\n\
    @", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n        return\
    \ is_prime(n - 1) || is_prime(n - 3)\nend", "    if is_prime_impl(n) == true\n\
    \    else \n        return false\n    end\nend", "    if n < 2 || n % 2 == 0 \n\
    \        return false\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3) \nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by all numbers from 1 to n.", "    \n    prime::Bool = false\n    \n    if n\
    \ == 1\n        prime = true\n    elseif n == 2\n        prime = true\n    elseif\
    \ n % 2 == 0\n        prime = false\n    else\n        for i = 3 .. Int(sqrt(n))\n\
    \            if n % i == 0\n                prime = false\n                break\n\
    \        end\n    end\n    \n    return prime\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^7)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^8)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^10)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^12)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^13)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^14)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^15)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^16)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^17)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^18)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^19)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^20)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^21)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^22)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^23)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^24)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^25)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^26)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^27)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^28)\n",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        return false\n    else \n  \
    \      return is_prime(n - 1) || is_prime(n - 3)\nend", "    if n < 2 || n % 2\
    \ == 0 \n        return false\n    else if n == 2 \n        return true\n    else\
    \ \n        return is_prime(n-1) || is_prime(n-2)\nend", "    if n < 2 || n %\
    \ 2 == 0 \n        return false\n    else if n == 2 \n        return true\n  \
    \  else \n        return is_prime(n-1) || is_prime(n-2)\nend", "    \n    if n\
    \ < 2 || n % 2 == 0\n        return false\n    \n    for i in 2..Int(sqrt(n))\n\
    \        if n % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<text>\nExercise:\
    \ Write a function that checks if a given number is even.", "    \n    if n <\
    \ 2 || n % 2 == 0\n        return false\n    \n    for d in 3:2:sqrt(n)\n    \
    \    if n % d == 0\n            return false\n    end\n    return true\nend",
  "    if is_prime_helper(n) == true\n    else \n        return false\n    end\nend",
  "    \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while\
    \ i <= sqrt(n) \n        if n % i == 0 \n            return false\n        i +=\
    \ 1\n    return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000001)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000002)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000003)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000004)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000005)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000006)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000007)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000008)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000009)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000010)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000011)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000012)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000013)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000014)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000015)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000016)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000017)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000018)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000019)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000020)\n</cell>\n<code language=julia-1.3>\n@time is_prime(20000021)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(20000022)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(20000023)\n</cell>\n<code language=julia-1.3>\n@time is_prime",
  "    if n < 2 || n == 1 \n        return true\n    else if n == 2 \n        return\
    \ true\n    else if n % 2 == 0 \n        return false\n    else \n        return\
    \ is_prime(n - 1) || is_prime(n - 3)\nend", "    if n < 2 || n % 2 == 0 \n   \
    \     return false\n    else \n        return is_prime(n - 1) || is_prime(n -\
    \ 3)\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as:", "    if is_prime_helper(n,2,false)\n\
    \    else \n        false\n    end\nend", "    if n < 2 || n % 2 == 0 \n     \
    \   return false\n    else if n == 2 \n        return true\n    else \n      \
    \  return is_prime(n-1) || is_prime(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(100)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is divisible by all numbers from 1 to $n$. \nHint: Use a for\
    \ loop.", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n    \
    \    return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.5>\nis_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(10000000000000000000000000000)\n</cell>\n\
    <code language=juli", "    if is_factor(n) == false \n        then return false\
    \ \n        else return true\n    end\nend", "    if n < 2 || n % 2 == 0 \n  \
    \      return false\n    else \n        return is_prime(n - 1) || is_prime(n -\
    \ 3)\nend", "    \n    prime::Bool = is_prime_helper(n, 2)\n    \n    return prime\n\
    end", "    \n    if n < 2 || n == 1 \n        return true\n    \n    for d in\
    \ 2:(n-1)\n        if n % d == 0 \n            return false\n    end\n    \n \
    \   return true\nend", "    \n    if n < 2 || n % 2 == 0 \n        return false\n\
    \    \n    i = 2\n    \n    while i <= n \n        if n % i == 0 \n          \
    \  return false\n        \n        i = i + 1\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a given number is divisible by another given\
    \ number.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n        then return false\n    else \n        primes = primes_upto(n)\n\
    \        for i in primes\n            if n % i == 0 || n % (i + 2) == 0 || n %\
    \ (i + 3) == 0 || n % (i + 5) == 0 || n % (i + 7) == 0\n                then return\
    \ false\n        return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.3>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(2", "    if n == 2 || n ==\
    \ 3 || n == 5 || n == 7 || n == 11 \n        then return true\n    else if n %\
    \ 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0\n        then\
    \ return false\n    else \n        prime_sum::Int64 = 0\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::Int64\
    \ = prime_sum + n\n        prime_sum::Int64 = prime_sum + n\n        prime_sum::",
  "    if is_prime_impl(n) == true\n    else \n        false\n    end\nend", "   \
    \ if is_prime_helper(n,1)\n    else \n        false\n    end\nend", "    if n\
    \ < 2 || n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1) || is_prime(n - 3)\nend", "    if n < 2 || n == 1 \n        return true\n\
    \    else if n == 2 \n        return true\n    else if n % 2 == 0 \n        return\
    \ false\n    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that checks if a given number is even.", "    \n    primes = primes_list(n)\n\
    \    \n    for p in primes\n        if n % p == 0 \n            return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ is_prime(10^6)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^7)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(10^8)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^10)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^11)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^12)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^13)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^14)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^15)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^16)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^17)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^18)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^19)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^20)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^21)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^22)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^23)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^24)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^25)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^26)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(10^27)\n</cell>\n<code language=julia-1.4>\n@time is_prime(10^28)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(10^29)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(", "    if is_prime_helper(n,2)\n    else \n        false\n   \
    \ end\nend", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n \
    \       return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.0>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(12)\n</cell>\n<code language=julia-1.0>\nis_prime(13)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(14)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(15)\n</cell>\n<code language=julia-1.0>\nis_prime(16)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(17)\n</cell>\n<code language=julia-1.0>\nis_prime(18)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(19)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(20)\n</cell>\n<code language=julia-1.0>\nis_prime(21)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(22)\n</cell>\n<code language=julia-1.0>\nis_prime(23)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(24)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(25)\n</cell>\n<code language=julia-1.0>\nis_prime(26)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(27)\n</cell>\n<code language=julia-1.0>\nis_prime(28)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(29)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(30)\n</cell>\n<code language=julia-1.0>\nis_prime(31)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(32)\n</cell>\n<code language=julia-1.0>\nis_prime(33)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(34)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(35)\n</cell>\n<code language=julia-1.0>\nis_prime(36)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(37)\n</cell>\n<code language=julia-1.0>\nis_prime(38)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(39)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(40)\n</cell>\n<code language=", "    \n    if n < 2 || n % 2 == 0 \n\
    \        return false\n    \n    else \n        for i in 2..n \n            if\
    \ n % i == 0 \n                return false\n        end\n        return true\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given number is\
    \ prime, and false otherwise.\n                                \"\"\"", "    if\
    \ n < 2 || n % 2 == 0 \n        then return false \n    else \n        for m in\
    \ 3:2:sqrt(n) \n            if n % m == 0 \n                then return false\
    \ \n            else \n                return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time ", "    if n < 2 || n % 2 == 0 \n  \
    \      return false\n    else \n        return is_prime(n - 1) || is_prime(n -\
    \ 3)\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^6)\n</cell>\n\
    <text>\nExercise\nWrite a function that checks if a given number is prime.", " \
    \   \n    if n < 2 || n == 1 \n        return true\n    \n    for d in 2:(n-1)\n\
    \        if n % d == 0 \n            return false\n    end\n    return true\n\
    end", "    if n == 1 \n        return true\n    else if n == 2 \n        return\
    \ true\n    else if n % 2 == 0 \n        return false\n    else \n        return\
    \ is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(100_000_000)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given number is divisible by any number between 1 and a given number.\
    \ \nThe function should return true if the number is divisible by any number between\
    \ 1 and a given number, and false otherwise.", "    if n < 2 || n % 2 == 0 \n\
    \        return false\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend", "    if n < 2 || n == 1 \n        return true\n    else if n ==\
    \ 2 \n        return true\n    else if n % 2 == 0 \n        return false\n   \
    \ else \n        return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(10)\n</cell>\n<code language=julia-1.0>\nis_prime(11)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(12)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(13)\n</cell>\n<code language=julia-1.0>\nis_prime(14)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(15)\n</cell>\n<code language=julia-1.0>\nis_prime(16)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(17)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(18)\n</cell>\n<code language=julia-1.0>\nis_prime(19)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(20)\n</cell>\n<code language=julia-1.0>\nis_prime(21)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(22)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(23)\n</cell>\n<code language=julia-1.0>\nis_prime(24)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(25)\n</cell>\n<code language=julia-1.0>\nis_prime(26)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(27)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(28)\n</cell>\n<code language=julia-1.0>\nis_prime(29)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(30)\n</cell>\n<code language=julia-1.0>\nis_prime(31)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(32)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(33)\n</cell>\n<code language=julia-1.0>\nis_prime(34)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(35)\n</cell>\n<code language=julia-1.0>\nis_prime(36)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(37)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(38)\n</cell>\n<code language=julia-1.0>\nis_prime(39)\n</cell", "   \
    \ \n    if n < 2 || n == 1 \n        return true\n    \n    else if n == 2 \n\
    \        return true\n    \n    else if n % 2 == 0 \n        return false\n  \
    \  \n    else \n        for m in range(3, floor(sqrt(n))+1, 2) \n            if\
    \ n % m == 0 \n                return false\n        end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.3>\nis_prime(10)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(12)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(13)\n</cell>\n<code language=julia-1.3>\nis_prime(14)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(15)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(16)\n</cell>\n<code language=julia-1.3>\nis_prime(17)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(18)\n</cell>\n<code language=julia-1.3>\nis_prime(19)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(20)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(21)\n</cell>\n<code language=julia-1.3>\nis_prime(22)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(23)\n</cell>\n<code language=julia-1.3>\nis_prime(24)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(25)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(26)\n</cell>\n<code language=julia-1.3>\nis_prime(27)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(28)\n</cell>\n<code language=julia-1.3>\nis_prime(29)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(31)\n</cell>\n<code language=julia-1.3>\nis_prime(32)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(33)\n</cell>\n<code language=julia-1.3>\nis_prime(34)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(35)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(36)\n</cell>\n<code language=julia-1.3>\nis_prime(37)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(", "    if n < 2 || n % 2 == 0 \n        return\
    \ false\n    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n\
    <code language=julia-1.3>\nis_prime(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns all prime numbers less than a given number.", "    if n < 2 ||\
    \ n == 0 || is_even(n) || is_odd(n) \n        return false \n    else \n     \
    \   primes = prime_table()\n        for p in primes \n            if p == n \n\
    \                return true \n        return false \nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2); @time is_prime(5); @time is_prime(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns all prime numbers less than a given number.",
  "    \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while\
    \ i <= sqrt(n) \n        if n % i == 0 \n            return false\n        i +=\
    \ 1\n    return true\nend", "    \n    primes :: Set{Int64}\n    primes = Set{Int64}()\n\
    \    \n    primes.add(2)\n    \n    for p in primes\n        if n % p == 0 \n\
    \            return false\n        \n        if p > sqrt(n)\n            return\
    \ true\n        \n        for q in primes\n            if p % q == 0\n       \
    \         return false\n        \n        primes.add(p + 2)\n    end\n    \n \
    \   return true\nend", "    \n    if n < 2 || n % 2 == 0 || n % 3 == 0 \n    \
    \    return false\n    \n    i = 5\n    while i * i <= n \n        i += 2\n  \
    \  \n    return n == 1 || n == i\nend", "    \n    prime::Bool = false\n    \n\
    \    if n == 1\n        prime = true\n    else\n        \n        if n % 2 ==\
    \ 0\n            prime = false\n        else\n            \n            if n %\
    \ 3 == 0\n                prime = false\n            else\n                \n\
    \                if n % 5 == 0\n                    prime = false\n          \
    \      else\n                    \n                    if n % 7 == 0\n       \
    \                 prime = false\n                    else\n                  \
    \      \n                        if n % 11 == 0\n                            prime\
    \ = false\n                        else\n                            \n      \
    \                      if n % 13 == 0\n                                prime =\
    \ false\n                            else\n                                \n\
    \                                if n % 17 == 0\n                            \
    \        prime = false\n                                else\n               \
    \                     \n                                    if n % 19 == 0\n \
    \                                       prime = false\n                      \
    \              else\n                                        \n              \
    \                          if n % 23 == 0\n                                  \
    \          prime = false\n                                        else\n     \
    \                                       \n                                   \
    \         if n % 29 == 0\n                                                prime\
    \ = false\n                                            else\n                \
    \                                \n                                          \
    \      if n % 31 == 0\n                                                    prime\
    \ = false\n                                                else\n            \
    \                                        \n                                  \
    \                  if n % 37 == 0\n                                          \
    \              prime = false\n                                               \
    \     else\n                                                        \n       \
    \                                                 if n % 41 == 0\n           \
    \                                                 prime = false\n            \
    \                                            else\n                          \
    \                                  \n                                        \
    \                    if n % 43 == 0\n                                        \
    \                        prime = false\n                                     \
    \                       else\n                                               \
    \                 \n                                                         \
    \       if n % 47 == 0\n                                                     \
    \               prime = false\n                                              \
    \                  else\n                                                    \
    \                \n                                                          \
    \          if n % 53 == 0\n                                                  \
    \                      prime = false\n                                       \
    \                             else\n                                         \
    \                               \n                                           \
    \             if n % 59 == 0\n                                               \
    \             prime = false\n                                                \
    \        else\n                                                            \n\
    \                                                            if n % 61 == 0\n\
    \                                                                prime = false\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            if n % 67 == 0\n                \
    \                                                    prime = false\n         \
    \                                                       else\n               \
    \                                                     \n                     \
    \                                               if n % 71 == 0\n             \
    \                                                           prime = false\n  \
    \                                                                  else\n    \
    \                                                                    \n      \
    \                                                  if n % 73 == 0\n          \
    \                                                  prime = false\n           \
    \                                             else\n                         \
    \                                   \n                                       \
    \                     if n % 79 == 0\n                                       \
    \                         prime = false\n                                    \
    \                        else\n                                              \
    \                  \n                                                        \
    \        if n % 83 == 0\n                                                    \
    \                prime = false\n                                             \
    \                   else\n                                                   \
    \                 \n                                                         \
    \           if n % 89 == 0\n                                                 \
    \                       prime = false\n                                      \
    \                              else\n                                        \
    \                                \n                                          \
    \              if n % 97 == 0\n                                              \
    \              prime = false\n                                               \
    \         else\n                                                            \n\
    \                                                            if n % 101 == 0\n\
    \                                                                prime = false\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            if n % 103 == 0\n               \
    \                                                     prime = false\n        \
    \                                                        else\n              \
    \                                                      \n                    \
    \                                                if n % 107 == 0\n           \
    \                                                             prime = false\n\
    \                                                                    else\n  \
    \                                                                      \n    \
    \                                                    if n % 111 == 0\n       \
    \                                                     prime = false\n        \
    \                                                else\n                      \
    \                                      \n                                    \
    \                        if n % 115 == 0\n                                   \
    \                             prime = false\n                                \
    \                            else\n                                          \
    \                      \n                                                    \
    \            if n % 119 == 0\n                                               \
    \                     prime = false\n                                        \
    \                        else\n                                              \
    \                      \n                                                    \
    \                if n % ", "    \n    if n < 2 || n == 1\n        return false\n\
    \    end\n    \n    if n == 2\n        return true\n    end\n    \n    for p in\
    \ primes\n        if p == n\n            return true\n        end\n    end\n \
    \   \n    return false\nend", "    \n    prime::Bool = n % 2 == 0\n    \n    if\
    \ prime == true\n        \n        for i = 3 to n div 2\n            \n      \
    \      if n % i == 0\n                \n                prime = false\n      \
    \          \n                break\n            \n        end\n    end\n    \n\
    \    return prime\nend\n</cell>\n<code language=julia-1.3>\nis_prime(10)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(20)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(30)\n</cell>\n<code language=julia-1.3>\nis_prime(40)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(50)\n</cell>\n<code language=julia-1.3>\nis_prime(60)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(70)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(80)\n</cell>\n<code language=julia-1.3>\nis_prime(90)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(100)\n</cell>\n<code language=julia-1.3>\nis_prime(1000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(10000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000000000000000000)", "    \n\
    \    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while\
    \ i <= sqrt(n) \n        if n % i == 0 \n            return false\n        i +=\
    \ 1\n    return true\nend", "    if n < 2 || n % 2 == 0\n        return false\n\
    \    \n    i = 5\n    while i * i <= n\n        i += 2\n    \n    return n ==\
    \ i || n % i == 0\nend", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n-1) || is_prime(n-2)\nend", "    \n    if\
    \ n == 1\n        return true\n    \n    else if n == 2\n        return true\n\
    \    \n    else\n        return false\nend", "    if is_prime_helper(n,1)\n  \
    \  else \n        return false\n    end\nend", "    \n    prime::Bool = n % 2\
    \ == 0\n    \n    if prime == true\n        \n        for i = 3 to sqrt(n) do\n\
    \            if n % i == 0\n                prime = false\n                break\n\
    \        end\n    end\n    \n    return prime\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(102)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(103)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(104)\n</cell>\n<code language=julia-1.5>\n@time is_prime(105)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(106)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(107)\n</cell>\n<code language=julia-1.5>\n@time is_prime(108)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(109)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(110)\n</cell>\n<code language=julia-1.5>\n@time is_prime(111)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(112)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(113)\n</cell>\n<code language=julia-1.5>\n@time is_prime(114)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(115)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(116)\n</cell>\n<code language=julia-1.5>\n@time is_prime(117)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(118)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(119)\n</cell>\n<code language=julia-1.5>\n@time is_prime(120)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(121)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(122)\n</cell>\n<code language=julia-1.5>\n@time is_prime(123)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(124)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(125)\n</cell>\n<code language=julia-1.5>\n@time is_", "    \n \
    \   if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while\
    \ i <= sqrt(n) \n        if n % i == 0 \n            return false\n        i +=\
    \ 1\n    return true\nend", "    \n    prime::Bool = false\n    \n    if n <=\
    \ 1 \n        prime = true\n    elseif n % 2 == 0 \n        prime = false\n  \
    \  elseif n % 3 == 0 \n        prime = false\n    elseif n % 5 == 0 \n       \
    \ prime = false\n    elseif n % 7 == 0 \n        prime = false\n    elseif n %\
    \ 11 == 0 \n        prime = false\n    elseif n % 13 == 0 \n        prime = false\n\
    \    elseif n % 17 == 0 \n        prime = false\n    elseif n % 19 == 0 \n   \
    \     prime = false\n    elseif n % 23 == 0 \n        prime = false\n    elseif\
    \ n % 29 == 0 \n        prime = false\n    elseif n % 31 == 0 \n        prime\
    \ = false\n    elseif n % 37 == 0 \n        prime = false\n    elseif n % 41 ==\
    \ 0 \n        prime = false\n    elseif n % 43 == 0 \n        prime = false\n\
    \    elseif n % 47 == 0 \n        prime = false\n    elseif n % 53 == 0 \n   \
    \     prime = false\n    elseif n % 59 == 0 \n        prime = false\n    elseif\
    \ n % 61 == 0 \n        prime = false\n    elseif n % 67 == 0 \n        prime\
    \ = false\n    elseif n % 71 == 0 \n        prime = false\n    elseif n % 73 ==\
    \ 0 \n        prime = false\n    elseif n % 79 == 0 \n        prime = false\n\
    \    elseif n % 83 == 0 \n        prime = false\n    elseif n % 89 == 0 \n   \
    \     prime = false\n    elseif n % 97 == 0 \n        prime = false\n    elseif\
    \ n % 101 == 0 \n        prime = false\n    elseif n % 103 == 0 \n        prime\
    \ = false\n    elseif n % 107 == 0 \n        prime = false\n    elseif n % 109\
    \ == 0 \n        prime = false\n    elseif n % 113 == 0 \n        prime = false\n\
    \    elseif n % 117 == 0 \n        prime = false\n    elseif n % 121 == 0 \n \
    \       prime = false\n    elseif n % 123 == 0 \n        prime = false\n    elseif\
    \ n % 127 == 0 \n        prime = false\n    elseif n % 131 == 0 \n        prime\
    \ = false\n    elseif n % 137 == 0 \n        prime = false\n    elseif n % 139\
    \ == 0 \n        prime = false\n    elseif n % 143 == 0 \n        prime = false\n\
    \    elseif n % 147 == 0 \n        prime = false\n    elseif n % 151 == 0 \n \
    \       prime = false\n    elseif n % 157 == 0 \n        prime = false\n    elseif\
    \ n % 159 == 0 \n        prime = false\n    elseif n % 163 == 0 \n        prime\
    \ = false\n    elseif n % 167 == 0 \n        prime = false\n    elseif n % 171\
    \ == 0 \n        prime = false\n", "    \n    if n < 2 || n % 2 == 0\n       \
    \ return false\n    \n    i = 5\n    while i * i <= n\n        i += 2\n    \n\
    \    return n == 1 || n % i == 0\nend", "    if is_prime_helper(n,1)\n    else\
    \ \n        false\n    end\nend", "    if is_prime_impl(n) == true\n    else \n\
    \        return false\n    end\nend", "    \n    if n == 2\n        return true\n\
    \    \n    else if n == 1\n        return false\n    \n    else\n        for prime\
    \ in primes\n            if n % prime == 0\n                return false\n   \
    \     end\n        \n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^7)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given number is\
    \ divisible by any number from 1 to 100. \nHint: You can use the mod operator\
    \ to do this.", "    if n < 2 || n % 2 == 0 \n        return false\n    else if\
    \ n == 2 \n        return true\n    else \n        return is_prime(n-1) || is_prime(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\nis_prime(10)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(12)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(13)\n</cell>\n<code language=julia-1.3>\nis_prime(14)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(15)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(16)\n</cell>\n<code language=julia-1.3>\nis_prime(17)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(18)\n</cell>\n<code language=julia-1.3>\nis_prime(19)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(20)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(21)\n</cell>\n<code language=julia-1.3>\nis_prime(22)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(23)\n</cell>\n<code language=julia-1.3>\nis_prime(24)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(25)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(26)\n</cell>\n<code language=julia-1.3>\nis_prime(27)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(28)\n</cell>\n<code language=julia-1.3>\nis_prime(29)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(31)\n</cell>\n<code language=julia-1.3>\nis_prime(32)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(33)\n</cell>\n<code language=julia-1.3>\nis_prime(34)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(35)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(36)\n</cell>\n<code language=julia-1.3>\nis_prime(37)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(38)\n</cell>\n<code language=julia-1.3>\nis_prime(39)\n\
    </cell>\n<code language=julia-1.3>\nis_prime", "    \n    if n < 2 || n % 2 ==\
    \ 0 \n        return false\n    \n    i = 2\n    while i * i <= n \n        if\
    \ n % i == 0 \n            return false\n        i = i + 1\n    return true\n\
    end", "    if n < 2 || n % 2 == 0\n        return false\n    else if n == 2\n\
    \        return true\n    else\n        return is_prime(n - 1) || is_prime(n -\
    \ 3)\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(100_000_000)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and a given number. Hint: Use a for loop.", "    \n\
    \    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 \n        then return\
    \ false\n    else \n        p <- 3\n        while p < n \n            do if n\
    \ % p == 0 \n                then return false\n                else p <- p +\
    \ 2\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_", "    if is_prime_helper(n,2)\n    else\
    \ \n        false\n    end\nend", "    \n    primes = 2:2:Int(sqrt(n))\n    \n\
    \    for p in primes\n        if n % p == 0 \n            return false\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^6)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if a given number\
    \ is even, and false otherwise.", "    \n    if n < 2 || n % 2 == 0 \n       \
    \ return false\n    \n    i = 2\n    while i <= sqrt(n) \n        if n % i ==\
    \ 0 \n            return false\n        i += 1\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(10^8)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of a given number. \nThe\
    \ function should take one argument, n, of type Int64.", "    \n    if n == 1\
    \ \n        then return true\n        else return false\n    end\n    \n    if\
    \ n == 2 \n        then return true\n        else return false\n    end\n    \n\
    \    if n % 2 == 0 \n        then return false\n    end\n    \n    for i in 3..(floor(sqrt(n)))\
    \ \n        do if n % i == 0 \n            then return false\n        end\n  \
    \  end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(102)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(103)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(104)\n</cell>\n<code language=julia-1.5>\n@time is_prime(105)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(106)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(107)\n</cell>\n<code language=julia-1.5>\n@time is_prime(108)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(109)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(110)\n</cell>\n<code language=julia-1.5>\n@time is_prime(111)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(112)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(113)\n</cell>\n<code language=julia-1.5>\n@time is_prime(114)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(115)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(116)\n</cell>\n<code language=julia-1.5>\n@time is_prime(117)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(118)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(119)\n</cell>\n<code language=julia-1.5>\n@time is_prime(120)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(121)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(122)\n</cell>\n<code language=julia-1.5>\n@time is_prime(123)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(124)\n", "    if n < 2 || n\
    \ % 2 == 0 \n        return false\n    else \n        return is_prime(n-1) ||\
    \ is_prime(n-2)\nend\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns true if a given number is even,\
    \ and false otherwise.", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else if n % 3 == 0 \n        return false\n    else if n % 5 == 0 \n    \
    \    return false\n    else if n % 7 == 0 \n        return false\n    else if\
    \ n % 11 == 0 \n        return false\n    else if n % 13 == 0 \n        return\
    \ false\n    else if n % 17 == 0 \n        return false\n    else if n % 19 ==\
    \ 0 \n        return false\n    else if n % 23 == 0 \n        return false\n \
    \   else if n % 29 == 0 \n        return false\n    else if n % 31 == 0 \n   \
    \     return false\n    else if n % 37 == 0 \n        return false\n    else if\
    \ n % 41 == 0 \n        return false\n    else if n % 43 == 0 \n        return\
    \ false\n    else if n % 47 == 0 \n        return false\n    else if n % 53 ==\
    \ 0 \n        return false\n    else if n % 59 == 0 \n        return false\n \
    \   else if n % 61 == 0 \n        return false\n    else if n % 67 == 0 \n   \
    \     return false\n    else if n % 71 == 0 \n        return false\n    else if\
    \ n % 73 == 0 \n        return false\n    else if n % 79 == 0 \n        return\
    \ false\n    else if n % 83 == 0 \n        return false\n    else if n % 89 ==\
    \ 0 \n        return false\n    else if n % 97 == 0 \n        return false\n \
    \   else if n % 101 == 0 \n        return false\n    else if n % 103 == 0 \n \
    \       return false\n    else if n % 107 == 0 \n        return false\n    else\
    \ if n % 111 == 0 \n        return false\n    else if n % 117 == 0 \n        return\
    \ false\n    else if n % 121 == 0 \n        return false\n    else if n % 127\
    \ == 0 \n        return false\n    else if n % 131 == 0 \n        return false\n\
    \    else if n % 137 == 0 \n        return false\n    else if n % 141 == 0 \n\
    \        return false\n    else if n % 147 == 0 \n        return false\n    else\
    \ if n % 151 == 0 \n        return false\n    else if n % 157 == 0 \n        return\
    \ false\n    else if n % 163 == 0 \n        return false\n    else if n % 169\
    \ == 0 \n        return false\n    else if n % 173 == 0 \n        return false\n\
    \    else if n % 177 == 0 \n        return false\n    else if n % 181 == 0 \n\
    \        return false\n    else if n % 187 == 0 \n        return false\n    else\
    \ if n % 191 == 0 \n        return false\n    else if n % 193 == 0 \n        return\
    \ false\n    else if n % 197 == 0 ", "    if is_prime_helper(n,1)\n    else \n\
    \        false\n    end\nend", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend", "    if is_factor(n,2)\n\
    \        return true\n    else \n        return false\nend", "    \n    primes\
    \ = primes(n)\n    \n    if length(primes) < 2\n        return true\n    end\n\
    \    \n    for p in primes\n        if n % p == 0 \n            return false\n\
    \        end\n    end\n    \n    return true\nend", "    \n    primes = primes(n)\n\
    \    \n    for p in primes\n        if n % p == 0\n            return false\n\
    \    end\n    \n    return true\nend", "    if n == 1 \n        return true\n\
    \    else if n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nis_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(10000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000000000)\n</", "  \
    \  if is_factor(n) == false\n        return false\n    else \n        return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_factor(7)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(8)\n</cell>\n<code language=julia-1.5>\nis_factor(9)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(10)\n</cell>\n<code language=julia-1.5>\nis_factor(11)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(12)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(13)\n</cell>\n<code language=julia-1.5>\nis_factor(14)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(15)\n</cell>\n<code language=julia-1.5>\nis_factor(16)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(17)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(18)\n</cell>\n<code language=julia-1.5>\nis_factor(19)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(20)\n</cell>\n<code language=julia-1.5>\nis_factor(21)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(22)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(23)\n</cell>\n<code language=julia-1.5>\nis_factor(24)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(25)\n</cell>\n<code language=julia-1.5>\nis_factor(26)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(27)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(28)\n</cell>\n<code language=julia-1.5>\nis_factor(29)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(30)\n</cell>\n<code language=julia-1.5>\nis_factor(31)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(32)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(33)\n</cell>\n<code language=julia-1.5>\nis_factor(34)\n</cell>\n<code\
    \ language=julia-1.5>\nis_factor(35)\n</cell>\n<code language=julia-1.5>\nis_factor(36)\n\
    </cell>\n<code language=julia-1.5>\nis_factor(37)\n</cell>\n<code language=julia-1.5>\n\
    is_factor(38)\n</cell>", "    if is_prime_helper(n,1)\n    else \n        false\n\
    \    end\nend", "    if n == 1 \n        return true\n    else if n % 2 == 0 \n\
    \        return false\n    else \n        return is_prime(n / 2)\nend", "    \n\
    \    primes = primes_up_to_n(n+1)\n    \n    for p in primes\n        if n % p\
    \ == 0 \n            return false\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(100000)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is even.", "    \n  \
    \  if n < 2 || n == 1 \n        return false\n    \n    else if n == 2 \n    \
    \    return true\n    \n    else if n % 2 == 0 \n        return false\n    \n\
    \    else \n        for m in range(3, floor(sqrt(n))+1, 2) \n            if n\
    \ % m == 0 \n                return false\n        end\n    \n    return true\n\
    end", "    \n    if n < 2 || n == 1 \n        return false\n    \n    else if\
    \ n == 2 \n        return true\n    \n    else if n % 2 == 0 \n        return\
    \ false\n    \n    else \n        for m in 3:(n-1)/2 \n            if n % m ==\
    \ 0 \n                return false\n        end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(10^8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(10^9)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as\n$$\nn! = n  (n-1)  (n-2)  ...  2  1\n$$\nFor example, 5! = 5 x 4 x 3 x 2\
    \ x 1 = 120.\nWrite a function that computes the factorial of a given number using\
    \ recursion.", "    if n < 2 || n % 2 == 0 \n        return false\n    else if\
    \ n == 2 \n        return true\n    else \n        return is_prime(n-1) || is_prime(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(20000001)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is even, and false otherwise.",
  "    if is_prime_helper(n,1)\n    else return false\nend", "    if is_prime_impl(n)\
    \ \n        return true\n    else \n        return false\nend", "    if n < 2\
    \ || n % 2 == 0 \n        then return false\n    else \n        for i in 2..n-1\
    \ \n            if n % i == 0 \n                then return false\n          \
    \  else \n                return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<text>\nExercise: Write a function that checks\
    \ if a given number is even.", "    \n    if n < 2 || n == 0 || n == 1 \n    \
    \    return true\n    \n    else \n        return false\nend", "    \n    if n\
    \ < 2 \n        return false\n    \n    primes = primes_list(n)\n    \n    for\
    \ p in primes \n        if n % p == 0 \n            return false\n    \n    return\
    \ true\nend", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n\
    \        return is_prime(n - 1) || is_prime(n - 3) \nend", "    if n < 2 || n\
    \ % 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else \n        for i in 3..n \n            if n % i == 0 \n      \
    \          then return false\n            else\n                return true\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given number is\
    \ prime, and false otherwise.\n                                \"\"\"", "    if\
    \ is_factor(n) == true\n    else \n        false\n    end\nend", "    \n    if\
    \ n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n    else \n \
    \       for i in 2..n \n            if n % i == 0 || n % (i + 2) == 0 \n     \
    \           then return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(10^6)\n</cell>\n<text>\nExercise 2\n\
    Write a function that checks if a given number is divisible by another number.\
    \ \nThe function should return false if the number is not divisible by another\
    \ number, and true otherwise.", "    \n    if n < 2\n        return false\n  \
    \  \n    if n == 2\n        return true\n    \n    i = 2\n    while i <= sqrt(n)\n\
    \        if n % i == 0\n            return false\n        i = i + 1\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(2); @time is_prime(10);\
    \ @time is_prime(100);\n</cell>\n<text>\nExercise: Write a function that checks\
    \ if a given number is even.", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend", "    if n\
    \ < 2 || n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1) || is_prime(n - 3)\nend", "    \n    if n < 2 || n % 2 == 0 \n        return\
    \ false\n    \n    i = 2\n    while i <= sqrt(n) \n        if n % i == 0 \n  \
    \          return false\n        i += 1\n    return true\nend", "    if n < 2\
    \ || n % 2 == 0 \n        return false\n    else \n        return is_prime(n -\
    \ 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(10000000000000000000000000000)\n</cell>\n\
    <code language=juli", "    \n    if n < 2\n        return false\n    end\n   \
    \ \n    primes = Set()\n    \n    for p in primes\n        if n % p == 0\n   \
    \         return false\n        end\n    end\n    \n    primes.add(2)\n    \n\
    \    for p in primes\n        if n % p == 0\n            primes.remove(p)\n  \
    \      end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^8)\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a given number is divisible by all numbers from 1 to n. \nThe function should\
    \ return true if the number is divisible by all numbers from 1 to n, false otherwise.\n\
    The function should return false if the number is divisible by 1 or n (but not\
    \ by any other number).\nThe function should return false if the number is divisible\
    \ by 0.", "    if n < 2 || n == 1 \n        return true\n    else if n == 2 \n\
    \        return true\n    else if n % 2 == 0 \n        return false\n    else\
    \ \n        return is_prime(n - 1) || is_prime(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.3>\nis_prime(100)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(100000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\nis_prime(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1000000000000000000000000000)\n</cell>\n\
    <code language=juli", "    \n    if n == 1 \n        return true\n    \n    else\
    \ if n == 2 \n        return true\n    \n    else if n % 2 == 0 \n        return\
    \ false\n    \n    else \n        return is_prime(n - 1) || is_prime(n - 3)\n\
    end", "    \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i =\
    \ 2\n    while i <= sqrt(n) \n        if n % i == 0 \n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.3>\nis_prime(7)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(8)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(9)\n</cell>\n<code language=julia-1.3>\nis_prime(10)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(12)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(14)\n</cell>\n<code language=julia-1.3>\nis_prime(15)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(16)\n</cell>\n<code language=julia-1.3>\nis_prime(17)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(18)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(19)\n</cell>\n<code language=julia-1.3>\nis_prime(20)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(21)\n</cell>\n<code language=julia-1.3>\nis_prime(22)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(23)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(24)\n</cell>\n<code language=julia-1.3>\nis_prime(25)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(26)\n</cell>\n<code language=julia-1.3>\nis_prime(27)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(28)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(29)\n</cell>\n<code language=julia-1.3>\nis_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(31)\n</cell>\n<code language=julia-1.3>\nis_prime(32)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(33)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(34)\n</cell>\n<code language=julia-1.3>\nis_prime(35)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(36)\n</cell>\n<code language=julia-1.3>\nis_",
  "    if is_factor(n) == false\n        return false\n    end\n    for d in 2:n\n\
    \        if is_factor(d) == true\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n < 2 || n == 1 \n        return true\n    else\
    \ if n == 2 \n        return true\n    else \n        return false\nend", "  \
    \  if n < 2 || n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1) || is_prime(n - 3)\nend", "    \n    if n < 2 || n % 2 == 0 \n        return\
    \ false\n    \n    for d in range(3, n-1, 2) \n        if n % d == 0 \n      \
    \      return false\n    \n    return true\nend", "    \n    if n < 2 || n ==\
    \ 1 \n        return true\n    \n    else \n        return false\nend", "    if\
    \ n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while i*i <=\
    \ n \n        if n % i == 0 \n            return false\n        i = i + 1\n  \
    \  return true\nend", "    if is_prime_impl(n) then return true else return false\n\
    end", "    \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i =\
    \ 5\n    while i * i <= n \n        i += 2\n    \n    return n == 1 || n % i ==\
    \ 0\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ divisible by all prime factors of the given number.", "    if n < 2 || n % 2\
    \ == 0 \n        return false\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^6)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and 100. Hint: Use a for loop.", "    if is_prime_helper(n,1)\n\
    \    else \n        return false\n    end\nend", "    \n    if n < 2 || n % 2\
    \ == 0 \n        return false\n    \n    else \n        return is_prime(n - 1)\
    \ || is_prime(n - 3)\nend", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n == 2 \n        then return true\n    else \n        for\
    \ m in 3:(n-1)/2 do \n            if n % m == 0 \n                then return\
    \ false\n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_prime(10)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(11)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(12)\n</cell>\n<code language=julia-1.4>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(14)\n</cell>\n<code language=julia-1.4>\nis_prime(15)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(16)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(17)\n</cell>\n<code language=julia-1.4>\nis_prime(18)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(19)\n</cell>\n<code language=julia-1.4>\nis_prime(20)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(21)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(22)\n</cell>\n<code language=julia-1.4>\nis_prime(23)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(24)\n</cell>\n<code language=julia-1.4>\nis_prime(25)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(26)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(27)\n</cell>\n<code language=julia-1.4>\nis_prime(28)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(29)\n</cell>\n<code language=julia-1.4>\nis_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(31)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(32)\n</cell>\n<code language=julia-1.4>\nis_prime(33)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(34)\n</cell>\n<code language=julia-1.4>\nis_prime(35)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(36)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(37)\n</cell>\n<code language=julia-1.4>\nis_prime(38)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime", "    \n    prime::Bool = false\n    \n    if\
    \ n == 1\n        prime = true\n    elseif n == 2\n        prime = true\n    elseif\
    \ n % 2 == 0\n        prime = false\n    else\n        prime = true\n        for\
    \ i = 3 to sqrt(n) do\n            if n % i == 0\n                prime = false\n\
    \                break\n        end\n    end\n    \n    return prime\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^9)\n</", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n - 1) || is_prime(n - 3) \nend", "    if\
    \ n == 2\n        return true\n    else if n % 2 == 0\n        return false\n\
    \    else\n        return is_prime(n / 2)\nend", "    \n    primes = primes_list(n)\n\
    \    \n    for p in primes\n        if n % p == 0 \n            return false\n\
    \    end\n    \n    return true\nend", "    \n    primes :: Set{Int64}\n    primes\
    \ = Set()\n    \n    primes |= Set(1, 3)\n    primes |= Set(2, 5)\n    primes\
    \ |= Set(5, 7)\n    primes |= Set(7, 11)\n    primes |= Set(11, 13)\n    primes\
    \ |= Set(13, 17)\n    primes |= Set(17, 19)\n    primes |= Set(19, 23)\n    primes\
    \ |= Set(23, 29)\n    primes |= Set(29, 31)\n    primes |= Set(31, 37)\n    primes\
    \ |= Set(37, 41)\n    primes |= Set(41, 43)\n    primes |= Set(43, 47)\n    primes\
    \ |= Set(47, 53)\n    primes |= Set(53, 59)\n    primes |= Set(59, 61)\n    primes\
    \ |= Set(61, 67)\n    primes |= Set(67, 71)\n    primes |= Set(71, 73)\n    primes\
    \ |= Set(73, 79)\n    primes |= Set(79, 83)\n    primes |= Set(83, 89)\n    primes\
    \ |= Set(89, 97)\n    primes |= Set(97, 101)\n    primes |= Set(101, 103)\n  \
    \  primes |= Set(103, 109)\n    primes |= Set(109, 113)\n    primes |= Set(113,\
    \ 127)\n    primes |= Set(127, 131)\n    primes |= Set(131, 137)\n    primes |=\
    \ Set(137, 139)\n    primes |= Set(139, 149)\n    primes |= Set(149, 151)\n  \
    \  primes |= Set(151, 157)\n    primes |= Set(157, 163)\n    primes |= Set(163,\
    \ 167)\n    primes |= Set(167, 173)\n    primes |= Set(173, 179)\n    primes |=\
    \ Set(179, 181)\n    primes |= Set(181, 191)\n    primes |= Set(191, 193)\n  \
    \  primes |= Set(193, 197)\n    primes |= Set(197, 199)\n    primes |= Set(199,\
    \ 211)\n    primes |= Set(211, 223)\n    primes |= Set(223, 227)\n    primes |=\
    \ Set(227, 229)\n    primes |= Set(229, 233)\n    primes |= Set(233, 239)\n  \
    \  primes |= Set(239, 241)\n    primes |= Set(24", "    if n == 2 || n == 3 ||\
    \ n == 5 || n == 7 || n == 11 \n        then return true\n    else if n <= 1 \n\
    \        then return false\n    else if n % 2 == 0 || n % 3 == 0 || n % 5 == 0\
    \ || n % 7 == 0 || n % 11 == 0\n        then return false\n    else \n       \
    \ return is_prime(3*n-1) || is_prime(3*n+2)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.5>\nis_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if n < 2 || n == 1 \n        return true\n    \n    else if n == 2 \n\
    \        return true\n    \n    else if n % 2 == 0 \n        return false\n  \
    \  \n    else \n        for i in 3..sqrt(n) \n            if n % i == 0 \n   \
    \             return false\n            \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_", "  \
    \  if is_prime_helper(n,1)\n    else \n        return false\n    end\nend", " \
    \   if n < 2 || n % 2 == 0 || n % 3 == 0 \n        return false\n    \n    i =\
    \ 5\n    while i * i <= n \n        i += 2\n    \n    return n == 1 || i == 5\n\
    end", "    \n    local is_prime::Bool\n    \n    if n == 1 then\n        is_prime\
    \ = true\n    elseif n == 2 then\n        is_prime = false\n    elseif n % 2 ==\
    \ 0 then\n        is_prime = false\n    else\n        for i = 4 to n do\n    \
    \        if n % i == 0 then\n                is_prime = false\n              \
    \  break\n            end\n        end\n    end\n    \n    return is_prime\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000001)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000002)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000003)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000004)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000005)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000006)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000007)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000008)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000009)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000010)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000011)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000012)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000013)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000014)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000015)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000016)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000017)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000018)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20000019)\n</cell>\n<code language=julia-1.5>\n@time is_prime(20000020)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(20000021)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(", "    \n    primes :: [Int64]\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in primes\n        if n % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime",
  "    \n    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n    while\
    \ i * i <= n \n        if n % i == 0 \n            return false\n        i +=\
    \ 1\n    return true\nend", "    if is_prime_prime(n) == true\n    else \n   \
    \     return false\n    end\nend", "    if n < 2 || n % 2 == 0 || n % 3 == 0 ||\
    \ n % 5 == 0 || n % 7 == 0 \n        then return false\n    else \n        primes\
    \ <- primes(n)\n        i in 1:length(primes)\n            p <- primes[i]\n  \
    \          if n % p == 0 \n                then return false\n            end\n\
    \        end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. \nThe function should take one argument,\
    \ n, of type Int64, and return an Int64.", "    \n    if n == 1 \n        return\
    \ true\n    \n    else if n % 2 == 0 \n        return false\n    \n    else \n\
    \        for i in 3..sqrt(n) \n            if n % i == 0 \n                return\
    \ false\n            \n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n         \
    \                       \"\"\"", "    if is_prime_helper(n,2)\n    else \n   \
    \     false\n    end\nend", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend", "    if n\
    \ < 2 || n == 1 \n        return true\n    else if n == 2 \n        return true\n\
    \    else if n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime factors\
    \ of a given number.", "    \n    prime::Bool = n % 2 == 0\n    \n    if prime\
    \ == true\n        \n        for m in 3:2:sqrt(n)\n            if n % m == 0\n\
    \                prime = false\n                break\n        end\n    end\n\
    \    \n    return prime\nend", "    if is_factor(n) == false \n        then return\
    \ false \n        else return is_prime(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_", "   \
    \ \n    if n == 1 \n        return true\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while\
    \ i * i <= n \n        i += 2\n    \n    return n % i == 0\nend", "    if n <\
    \ 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n        else return\
    \ true\n    end\nend", "    if n < 2 || n % 2 == 0 \n        return false\n  \
    \  else if n % 3 == 0 \n        return false\n    else if n % 5 == 0 \n      \
    \  return false\n    else if n % 7 == 0 \n        return false\n    else \n  \
    \      return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return true\
    \ if a given number is prime, and false otherwise.\n\"\"\"", "    \n    if n <\
    \ 2 || n == 1 \n        return false\n    \n    primes = primes(n)\n    \n   \
    \ for p in primes\n        if n % p == 0 \n            return false\n    \n  \
    \  return true\nend", "    \n    prime::Bool = n % 2 == 0\n    \n    if prime\
    \ == true\n        \n        for i = 3 to sqrt(n) do\n            \n         \
    \   if n % i == 0 then\n                \n                prime = false\n    \
    \            break\n            end\n        end\n    end\n    \n    return prime\n\
    end", "    \n    if n < 2 || n == 1 \n        return false\n    \n    primes =\
    \ primes_list(n)\n    \n    for p in primes\n        if n % p == 0 \n        \
    \    return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(102)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(103)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(104)\n</cell>\n<code language=julia-1.5>\n@time is_prime(105)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(106)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(107)\n</cell>\n<code language=julia-1.5>\n@time is_prime(108)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(109)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(110)\n</cell>\n<code language=julia-1.5>\n@time is_prime(111)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(112)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(113)\n</cell>\n<code language=julia-1.5>\n@time is_prime(114)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(115)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(116)\n</cell>\n<code language=julia-1.5>\n@time is_prime(117)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(118)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(119)\n</cell>\n<code language=julia-1.5>\n@time is_prime(120)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(121)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(122)\n</cell>\n<code language=julia-1.5>\n@time is_prime(123)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(124)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(125)\n</cell>\n<code language=julia-1.5>\n@time is_prime(126)\n\
    </", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        return false\n    else\
    \ \n        return is_prime(n - 1) || is_prime(n - 3)\nend", "    if n < 2 ||\
    \ n % 2 == 0\n        return false\n    \n    i = 5\n    while i * i <= n\n  \
    \      if n % i == 0\n            return false\n        i += 6\n    return true\n\
    end", "    if is_prime_helper(n,1)\n    else \n        false\n    end\nend", " \
    \   if is_prime_helper(n,2)\n    else \n        return false\n    end\nend", " \
    \   \n    primes :: Set{Int64}\n    primes = Set()\n    \n    primes.add(2)\n\
    \    \n    for p in primes\n        if n % p == 0 \n            return false\n\
    \        \n        primes.add(p*p)\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.1>\nis_prime(10)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.1>\nis_prime(12)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(13)\n</cell>\n<code language=julia-1.1>\nis_prime(14)\n\
    </cell>\n<code language=julia-1.1>\nis_prime(15)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(16)\n</cell>\n<code language=julia-1.1>\nis_prime(17)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(18)\n</cell>\n<code language=julia-1.1>\nis_prime(19)\n\
    </cell>\n<code language=julia-1.1>\nis_prime(20)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(21)\n</cell>\n<code language=julia-1.1>\nis_prime(22)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(23)\n</cell>\n<code language=julia-1.1>\nis_prime(24)\n\
    </cell>\n<code language=julia-1.1>\nis_prime(25)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(26)\n</cell>\n<code language=julia-1.1>\nis_prime(27)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(28)\n</cell>\n<code language=julia-1.1>\nis_prime(29)\n\
    </cell>\n<code language=julia-1.1>\nis_prime(30)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(31)\n</cell>\n<code language=julia-1.1>\nis_prime(32)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(33)\n</cell>\n<code language=julia-1.1>\nis_prime(34)\n\
    </cell>\n<code language=julia-1.1>\nis_prime(35)\n</cell>\n<code language=julia-1.1>\n\
    is_prime(36)\n</cell>\n<code language=julia-1.1>\nis_prime(37)\n</cell>\n<code\
    \ language=julia-1.1>\nis_prime(38)\n</cell>\n<code language=juli", "    if n\
    \ < 2 || n % 2 == 0 \n        return false\n    else if n == 2 \n        return\
    \ true\n    else \n        return is_prime(n - 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(10^6)\n</cell>\n<text>\nExercise: Write a function that checks\
    \ if a given number is divisible by all numbers from 1 to $n$. \nHint: Use a for\
    \ loop. \nHint: Use a while loop. \nHint: Use a recursive function.", "    \n\
    \    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n     \
    \   then return false\n    else \n        primes = primes_list(n)\n        for\
    \ i in primes\n            if n % i == 0 || n % (i + 2) == 0 || n % (i + 3) ==\
    \ 0\n                then return false\n        end\n        return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(102)\n</cell>\n<code language=julia-1.5>\n@time is_prime(103)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(104)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(105)\n</cell>\n<code language=julia-1.5>\n@time is_prime(106)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(107)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(108)\n</cell>\n<code language=julia-1.5>\n@time is_prime(109)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(110)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(111)\n</cell>\n<code language=julia-1.5>\n@time is_prime(112)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(113)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(114)\n</cell>\n<code language=julia-1.5>\n@time is_prime(115)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(116)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(117)\n</cell>\n<code language=julia-1.5>\n@time is_prime(118)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(119)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(120)\n</cell>\n<code language=julia-1.5>\n@time is_prime(121)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(122)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(123)\n</cell>\n<code language=julia-1.5>\n@time is_prime(124)\n\
    </cell>\n<code language=julia-1.5>\n@time is_", "    if n == 2\n        return\
    \ true\n    if n % 2 == 0\n        return false\n    for d in 3:-1:2\n       \
    \ if n % d == 0\n            return false\n    end\n    return true\nend", " \
    \   \n    primes = primes(n)\n    \n    for p in primes\n        if p == n\n \
    \           return true\n    end\n    \n    return false\nend", "    if n == 1\
    \ \n        return true\n    else if n % 2 == 0 \n        return false\n    else\
    \ \n        return is_prime(n / 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.0>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(12)\n</cell>\n<code language=julia-1.0>\nis_prime(13)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(14)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(15)\n</cell>\n<code language=julia-1.0>\nis_prime(16)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(17)\n</cell>\n<code language=julia-1.0>\nis_prime(18)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(19)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(20)\n</cell>\n<code language=julia-1.0>\nis_prime(21)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(22)\n</cell>\n<code language=julia-1.0>\nis_prime(23)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(24)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(25)\n</cell>\n<code language=julia-1.0>\nis_prime(26)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(27)\n</cell>\n<code language=julia-1.0>\nis_prime(28)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(29)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(30)\n</cell>\n<code language=julia-1.0>\nis_prime(31)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(32)\n</cell>\n<code language=julia-1.0>\nis_prime(33)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(34)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(35)\n</cell>\n<code language=julia-1.0>\nis_prime(36)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(37)\n</cell>\n<code language=julia-1.0>\nis_prime(38)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(39)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(40)\n</cell>\n", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(100_000_000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(100_000_001)\n</cell>\n<text>\nExercise: Write a function that\
    \ checks if a given number is divisible by another number. Hint: use the modulo\
    \ operator %.", "    if n < 2 || n % 2 == 0 \n        return false\n    else if\
    \ n == 2 \n        return true\n    else \n        return is_prime(n-1) || is_prime(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_prime(10^6)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the GCD of two numbers. \nThe function\
    \ should take two numbers as input, and return one number.", "    if n < 2 ||\
    \ n % 2 == 0 \n        return false\n    else \n        return is_prime(n - 1)\
    \ || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.0>\n@time is_prime(20000000)\n\
    </cell>\n<text>\nExercise: Write a function that checks if a given number is divisible\
    \ by another number. Hint: use the modulo operator %.", "    \n    if n < 2 ||\
    \ n % 2 == 0 \n        then return false\n    else \n        for i in 3..sqrt(n)\
    \ \n            if n % i == 0 \n                then return false\n        end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000);\n</cell>\n<code language=julia-1.5>\n@time is_prime",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n    else\
    \ \n        for p in [3,5..n] \n            do if n % p == 0 \n              \
    \  then return false\n        end\n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given number is divisible by all numbers from 1 to 100, and false\
    \ otherwise.", "    if n < 2 || n % 2 == 0 \n        return false\n    else if\
    \ n == 2 \n        return true\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend", "    if is_factor(n,2)\n        return true\n    else \n       \
    \ return false\nend", "    if n < 2 || n == 0 || n == 1 \n        return false\n\
    \    else if n == 2 \n        return true\n    else if n % 2 == 0 \n        return\
    \ false\n    else \n        return is_prime(n - 1) || is_prime(n - 2)\nend", " \
    \   \n    primes = primes(n)\n    \n    if primes == []\n        false\n    elseif\
    \ primes == [1]\n        true\n    else\n        primes[1] == false\n    end\n\
    end", "    if n < 2 || n % 2 == 0\n        return false\n    end\n    \n    primes\
    \ = primes_upto(n)\n    for p in primes\n        if n % p == 0 \n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(2000000)\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(2000000)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 || n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(12)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(14)\n</cell>\n<code language=julia-1.5>\nis_prime(15)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(16)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(17)\n</cell>\n<code language=julia-1.5>\nis_prime(18)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(19)\n</cell>\n<code language=julia-1.5>\nis_prime(20)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(21)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(22)\n</cell>\n<code language=julia-1.5>\nis_prime(23)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(24)\n</cell>\n<code language=julia-1.5>\nis_prime(25)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(26)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(27)\n</cell>\n<code language=julia-1.5>\nis_prime(28)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(29)\n</cell>\n<code language=julia-1.5>\nis_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(31)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(32)\n</cell>\n<code language=julia-1.5>\nis_prime(33)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(34)\n</cell>\n<code language=julia-1.5>\nis_prime(35)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(36)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(37)\n</cell>\n<code language=julia-1.5>\nis_prime(38)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(39)\n</cell>\n<code language=julia-1.5>\nis_prime(40)\n\
    </cell>\n<code language=", "    if n < 2 || n == 0 || n == 1 \n        return\
    \ false\n    else if n == 2 \n        return true\n    else if n % 2 == 0 \n \
    \       return false\n    else \n        return is_prime(n - 1)\nend", "    if\
    \ n < 2 || n % 2 == 0 \n        return false\n    else \n        return is_prime(n\
    \ - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\nis_prime(10)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(12)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(14)\n</cell>\n<code language=julia-1.5>\nis_prime(15)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(16)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(17)\n</cell>\n<code language=julia-1.5>\nis_prime(18)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(19)\n</cell>\n<code language=julia-1.5>\nis_prime(20)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(21)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(22)\n</cell>\n<code language=julia-1.5>\nis_prime(23)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(24)\n</cell>\n<code language=julia-1.5>\nis_prime(25)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(26)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(27)\n</cell>\n<code language=julia-1.5>\nis_prime(28)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(29)\n</cell>\n<code language=julia-1.5>\nis_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(31)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(32)\n</cell>\n<code language=julia-1.5>\nis_prime(33)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(34)\n</cell>\n<code language=julia-1.5>\nis_prime(35)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(36)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(37)\n</cell>\n<code language=julia-1.5>\nis_prime(38)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(39)\n</cell>\n<code language=julia-1.5>\nis_prime(40)\n\
    </cell>\n<code language=", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n-1) || is_prime(n-2)\nend", "    if is_factor(n,\
    \ 2) then return false \n    for d in 3:n-1 do \n        if is_factor(n, d) then\
    \ return false \n    end \n    return true \nend ", "    \n    if n < 2 \n   \
    \     return false\n    \n    for d in 2:(n-1)\n        if n % d == 0 \n     \
    \       return false\n    end\n    return true\nend", "    if n < 2 || n % 2 ==\
    \ 0 \n        return false\n    else if n == 2 \n        return true\n    else\
    \ \n        return is_prime(n-1) || is_prime(n-2)\nend", "    \n    if n == 1\n\
    \        return true\n    \n    if n % 2 == 0\n        return false\n    \n  \
    \  for d in range(3, floor(sqrt(n))+1, 2)\n        if n % d == 0\n           \
    \ return false\n    end\n    return true\nend", "    \n    primes = primes(n)\n\
    \    \n    prime_found = false\n    for p in primes\n        if p == n\n     \
    \       prime_found = true\n            break\n        end\n    end\n    \n  \
    \  return prime_found\nend", "    if n < 2 || n == 0 || n == 1 \n        return\
    \ true\n    else if n == 2 \n        return true\n    else if n % 2 == 0 \n  \
    \      return false\n    else \n        return is_prime(n - 1)\nend", "    if\
    \ n == 1 \n        return true\n    else if n % 2 == 0 \n        return false\n\
    \    else \n        return is_prime(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10)\n</cell>\n<code language=julia-1.5>\nis_prime(20)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(30)\n</cell>\n<code language=julia-1.5>\nis_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_",
  "    \n    if n == 1 \n        return true\n    \n    else if n == 2 \n        return\
    \ true\n    \n    else if n % 2 == 0 \n        return false\n    \n    else \n\
    \        for m in range(3, floor(sqrt(n))+1, 2) \n            if n % m == 0 \n\
    \                return false\n        end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(14)\n</cell>\n<code language=julia-1.5>\nis_prime(15)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(16)\n</cell>\n<code language=julia-1.5>\nis_prime(17)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(18)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(19)\n</cell>\n<code language=julia-1.5>\nis_prime(20)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(21)\n</cell>\n<code language=julia-1.5>\nis_prime(22)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(23)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(24)\n</cell>\n<code language=julia-1.5>\nis_prime(25)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(26)\n</cell>\n<code language=julia-1.5>\nis_prime(27)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(28)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(29)\n</cell>\n<code language=julia-1.5>\nis_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(31)\n</cell>\n<code language=julia-1.5>\nis_prime(32)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(33)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(34)\n</cell>\n<code language=julia-1.5>\nis_prime(35)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(36)\n</cell>\n<code language=julia-1.5>\nis_prime(37)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(38)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(39)\n</cell>\n<code language=julia-1.5>\nis_prime(40)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(41)", "    \n    if n == 1 \n        return true\n\
    \    \n    else if n % 2 == 0 \n        return false\n    \n    else \n      \
    \  for i in 3..sqrt(n) \n            if n % i == 0 \n                return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(2000000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if a given number\
    \ is even, and false otherwise."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
