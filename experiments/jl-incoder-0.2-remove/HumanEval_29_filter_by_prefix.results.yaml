language: jl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"qux\"], \"foo\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ a string list by whether it starts with a given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3vvh7bm.jl:6\nin expression starting at /tmp/tmpj3vvh7bm.jl:6\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f9mn4wk.jl:14\nin expression starting at\
    \ /tmp/tmp0f9mn4wk.jl:14\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\",\"foo\",\"bar\"],\"hello\")\n</cell>\n<text>\n\
    filter_by_prefix(s,prefix) returns a new vector with all the elements of s that\
    \ start with the prefix prefix. \nIf prefix is missing, all elements of s are\
    \ returned.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5hqgupr.jl:14\nin expression starting at\
    \ /tmp/tmps5hqgupr.jl:14\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <text>\nExercise: Write a function that filters strings by a prefix and suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt43u5cgl.jl:15\nin expression starting at\
    \ /tmp/tmpt43u5cgl.jl:15\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of strings and a prefix and returns a vector\
    \ of strings that start with the prefix. For example, filter_by_prefix([\"hello\"\
    , \"world\", \"hello\", \"world\"], \"hello\") should return [\"hello\", \"world\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqi2pc2m.jl:15\nin expression starting at\
    \ /tmp/tmpoqi2pc2m.jl:15\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_str = prefix:gsub(\"^\",\
    \ \"\")\n    \n    filtered_strings = filter(x->(x:starts_with(prefix_str)), strings)\n\
    \    \n    return filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpcmx2i_7e.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcmx2i_7e.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: gsub not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpcmx2i_7e.jl:5\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcmx2i_7e.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcmx2i_7e.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcmx2i_7e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: gsub not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpcmx2i_7e.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcmx2i_7e.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcmx2i_7e.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> starts_with(x,\
    \ prefix), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptg1scwwr.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmptg1scwwr.jl:13\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmptg1scwwr.jl:4\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmptg1scwwr.jl:4\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptg1scwwr.jl:13 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptg1scwwr.jl:11\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. \nfilter! returns a new list with the filtered elements.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui8tsb99.jl:6\nin expression starting at /tmp/tmpui8tsb99.jl:6\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooba\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooobaar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworld\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"fooobaarworldfoo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoo\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"fooobaarworldfoofoofoo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooobaarworldfoofoofoofoofoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoofoofoo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoofoofoofoofoo\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"fooobaarworldfoofoofoofoofoofoofoofoofoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworld\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpridwemyc.jl:17\nin expression starting at\
    \ /tmp/tmpridwemyc.jl:17\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm8_cvgr.jl:15\nin expression starting at\
    \ /tmp/tmpmm8_cvgr.jl:15\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters strings by a regular expression. \nFor example,\
    \ filter_by_regex([\"hello\", \"world\", \"hello\", \"world\"], \"hello\") should\
    \ return [\"hello\", \"world\"].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa78asjx0.jl:7\nin expression starting at /tmp/tmpa78asjx0.jl:7\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters a vector of strings based on whether they contain a given substring.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujw1ikez.jl:14\nin expression starting at\
    \ /tmp/tmpujw1ikez.jl:14\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\"\
    )\n</cell>\n<text>\nFiltering by substrings\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8y_307wk.jl:17\nin expression starting at\
    \ /tmp/tmp8y_307wk.jl:17\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"\
    hello\")\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm40794h.jl:17\nin expression starting at\
    \ /tmp/tmpnm40794h.jl:17\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooo\")\n</cell>\n<code language=juli\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpur1g11.jl:15\nin expression starting at\
    \ /tmp/tmpjpur1g11.jl:15\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for s in strings\n        if startswith(s,prefix)\n            push!(filtered_strings,s)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\",\"foo\",\"bar\"],\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\",\"world\",\"foo\",\"bar\"],\"\
    world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\"world\"\
    ,\"foo\",\"bar\"],\"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\",\"world\",\"foo\",\"bar\"],\"bar\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a regular expression.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_xw640h.jl:13\nin expression starting at\
    \ /tmp/tmpo_xw640h.jl:13\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"goodbye\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwy5oo6yh.jl:14\nin expression starting at\
    \ /tmp/tmpwy5oo6yh.jl:14\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter!\nfilter! modifies\
    \ the input list in-place. It returns nothing.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7j65g5d.jl:6\nin expression starting at /tmp/tmpx7j65g5d.jl:6\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrdftsjd.jl:6\nin expression starting at /tmp/tmpnrdftsjd.jl:6\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"\
    hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"\
    world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"good\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"world\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters a list of strings only for those that\
    \ end with a given suffix.\nHint: Use endswith.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj0l8jdh.jl:17\nin expression starting at\
    \ /tmp/tmpgj0l8jdh.jl:17\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooo\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for those that end with a given suffix.\nHint:\
    \ Use ends_with() instead of starts_with()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gn28gol.jl:17\nin expression starting at\
    \ /tmp/tmp2gn28gol.jl:17\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foo\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters strings by a regex pattern. Test it on\
    \ a list of strings and a regex pattern. Then, write a function that filters strings\
    \ by a regex pattern and that also filters strings by a function.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yl5xb9q.jl:14\nin expression starting at\
    \ /tmp/tmp9yl5xb9q.jl:14\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. \nIt also returns nothing.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeht9vdd_.jl:6\nin expression starting at /tmp/tmpeht9vdd_.jl:6\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747328
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(x,prefix),\
    \ strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(:foo,\
    \ \"foo\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48n3ki90.jl:15\nin expression starting at\
    \ /tmp/tmp48n3ki90.jl:15\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wki4ukp.jl:15\nin expression starting at\
    \ /tmp/tmp3wki4ukp.jl:15\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp75nnatw9.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp75nnatw9.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp75nnatw9.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp75nnatw9.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaa\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooaaa\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooaaaaaa\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooaaaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooaaaaaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18l_wog2.jl:14\nin expression starting at\
    \ /tmp/tmp18l_wog2.jl:14\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooooooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt179_1cw.jl:15\nin expression starting at\
    \ /tmp/tmpt179_1cw.jl:15\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    , \"d\"], \"b\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input list in-place.\
    \ \nfilter! returns a new list with the filtered elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge7l3swo.jl:6\nin expression starting at /tmp/tmpge7l3swo.jl:6\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp63vi9_e.jl:13\nin expression starting at\
    \ /tmp/tmpp63vi9_e.jl:13\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    Hint: use endswith() instead of ends_with()\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucvlxxma.jl:14\nin expression starting at\
    \ /tmp/tmpucvlxxma.jl:14\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter!\nfilter! modifies\
    \ the input list in-place and returns the modified list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ps9g_6u.jl:6\nin expression starting at /tmp/tmp2ps9g_6u.jl:6\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa4_hkmmc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa4_hkmmc.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpa4_hkmmc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4_hkmmc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4_hkmmc.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1a051jc.jl:6\nin expression starting at /tmp/tmpz1a051jc.jl:6\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for those that end with a given suffix.\nHint: Use endswith\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxjml8wf.jl:15\nin expression starting at\
    \ /tmp/tmphxjml8wf.jl:15\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"quux\"], \"foo\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6__h5ind.jl:6\nin expression starting at /tmp/tmp6__h5ind.jl:6\n"
  stdout: ''
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            push!(filtered,\
    \ string)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"\
    hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"\
    world\", \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a list of strings based on whether they start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp235dhw6p.jl:14\nin expression starting at\
    \ /tmp/tmp235dhw6p.jl:14\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76vk5spw.jl:7\nin expression starting at /tmp/tmp76vk5spw.jl:7\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal44401r.jl:14\nin expression starting at\
    \ /tmp/tmpal44401r.jl:14\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter((x) ->\
    \ startswith(prefix, x), strings)\n    return filtered_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn2pvplql.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpn2pvplql.jl:14\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2pvplql.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2pvplql.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa4_hkmmc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa4_hkmmc.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpa4_hkmmc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4_hkmmc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4_hkmmc.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters a list of strings only for those that end with a given\
    \ suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwocw273q.jl:6\nin expression starting at /tmp/tmpwocw273q.jl:6\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return filtered_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter((x) ->\
    \ startswith(prefix, x), strings)\n    \n    return filtered_strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4wzewu5y.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp4wzewu5y.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wzewu5y.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wzewu5y.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\"],\"hello\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ with all the strings starting with a given prefix.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaifvxmp2.jl:13\nin expression starting at\
    \ /tmp/tmpaifvxmp2.jl:13\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x,prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1nodzmqd.jl:7\nin expression starting at /tmp/tmp1nodzmqd.jl:7\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters strings by a regex pattern. For example, filter_by_regex([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"^foo$\")\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgnngqrc.jl:15\nin expression starting at\
    \ /tmp/tmppgnngqrc.jl:15\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"goodbye\"], \"hello\")\n</cell>\n<text>\nFiltering by length\nWe can filter\
    \ by length as well:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oti6srq.jl:6\nin expression starting at /tmp/tmp4oti6srq.jl:6\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5y4_p6j.jl:14\nin expression starting at\
    \ /tmp/tmpk5y4_p6j.jl:14\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa4_hkmmc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa4_hkmmc.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpa4_hkmmc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4_hkmmc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4_hkmmc.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8le8bqd.jl:14\nin expression starting at\
    \ /tmp/tmpt8le8bqd.jl:14\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter!\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ydiqt7s.jl:6\nin expression starting at /tmp/tmp0ydiqt7s.jl:6\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters out the strings that end with a given suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivb7ypbp.jl:6\nin expression starting at /tmp/tmpivb7ypbp.jl:6\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. Here is an example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce0s5w31.jl:6\nin expression starting at /tmp/tmpce0s5w31.jl:6\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(x,prefix),\
    \ strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nfilter_by_prefix(L::AbstractVector, prefix::AbstractString)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf21qs7m.jl:14\nin expression starting at\
    \ /tmp/tmpkf21qs7m.jl:14\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    ], \"b\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdh3fncad.jl:6\nin expression starting at /tmp/tmpdh3fncad.jl:6\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[findall(x -> startswith(prefix,\
    \ x), strings)]\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9765e320.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp9765e320.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9765e320.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9765e320.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(prefix, s)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooooo\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfggq7w3m.jl:14\nin expression starting at\
    \ /tmp/tmpfggq7w3m.jl:14\n"
  stdout: ''
  timestamp: 1659747331
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return filtered_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptpuerlo0.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmptpuerlo0.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpuerlo0.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpuerlo0.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpph3h58i6.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpph3h58i6.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph3h58i6.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph3h58i6.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x, prefix),\
    \ strings )\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<text>\nmap\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4h2xlqp.jl:6\nin expression starting at /tmp/tmpa4h2xlqp.jl:6\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt6mmdn_.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpnt6mmdn_.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt6mmdn_.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt6mmdn_.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x,prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    a\",\"b\",\"c\",\"d\"],\"a\")\n</cell>\n<text>\nfilter_by_prefix([],\"a\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zl45sjz.jl:7\nin expression starting at /tmp/tmp5zl45sjz.jl:7\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\nHint: Use ends_with\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqp8k5ye.jl:15\nin expression starting at\
    \ /tmp/tmpdqp8k5ye.jl:15\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings that only contain\
    \ words that start with the prefix \"foo\".\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp143qxmyx.jl:14\nin expression starting at\
    \ /tmp/tmp143qxmyx.jl:14\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered_strings,\
    \ s)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"\
    ], \"hello\")\n</cell>\n<text>\nfilter_by_prefix(l, p) returns a new list containing\
    \ only those elements of l that start with the prefix p. If l is empty, then the\
    \ result is also empty.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2xg2ob5.jl:14\nin expression starting at\
    \ /tmp/tmpm2xg2ob5.jl:14\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered_strings,\
    \ s)\n        end\n    end\n    \n    return filtered_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinaemxp3.jl:14\nin expression starting at\
    \ /tmp/tmpinaemxp3.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(x,prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    Hint: Use endswith()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yqo2tuy.jl:7\nin expression starting at /tmp/tmp3yqo2tuy.jl:7\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter_by_prefix(my_strings,\
    \ \"hello\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rgp_74f.jl:14\nin expression starting at\
    \ /tmp/tmp9rgp_74f.jl:14\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt6mmdn_.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpnt6mmdn_.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt6mmdn_.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt6mmdn_.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for s in strings\n        if startswith(s,prefix)\n            push!(filtered_strings,s)\n\
    \        end\n    end\n    return filtered_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdx07sl0_.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpdx07sl0_.jl:14\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdx07sl0_.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdx07sl0_.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters strings by a regular expression. \nHint: Use Regexps.jl to construct\
    \ a regular expression that matches only strings that start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ku32d42.jl:6\nin expression starting at /tmp/tmp3ku32d42.jl:6\n"
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that filters a list of strings based\
    \ on whether they start with a given prefix.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp105ltpsp.jl:17\nin expression starting at\
    \ /tmp/tmp105ltpsp.jl:17\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"quux\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"quux\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"fooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"quux\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"fooooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    , \"quux\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"fooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"quux\"], \"foooooooooooooooo\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43d7uz49.jl:14\nin expression starting at\
    \ /tmp/tmp43d7uz49.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjxkymfb.jl:14\nin expression starting at\
    \ /tmp/tmphjxkymfb.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    ], \"a\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq5rx_kv.jl:6\nin expression starting at /tmp/tmpwq5rx_kv.jl:6\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt91n21m_.jl:14\nin expression starting at\
    \ /tmp/tmpt91n21m_.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ filters strings by a regular expression. \nUse filter_by_regex() to filter strings\
    \ by a regular expression.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbz71bhh.jl:14\nin expression starting at\
    \ /tmp/tmpnbz71bhh.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}(undef, length(strings))\n    \n \
    \   for string in strings\n        if string.starts_with(prefix)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hi\", \"bye\"], \"hi\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a list of strings based on whether they start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkbszsa7.jl:17\nin expression starting at\
    \ /tmp/tmplkbszsa7.jl:17\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5geq9mgb.jl:14\nin expression starting at\
    \ /tmp/tmp5geq9mgb.jl:14\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal44401r.jl:14\nin expression starting at\
    \ /tmp/tmpal44401r.jl:14\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    Hint: use the function filter_by_suffix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvbuwf37.jl:13\nin expression starting at\
    \ /tmp/tmphvbuwf37.jl:13\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    ], \"a\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq5rx_kv.jl:6\nin expression starting at /tmp/tmpwq5rx_kv.jl:6\n"
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal44401r.jl:14\nin expression starting at\
    \ /tmp/tmpal44401r.jl:14\n"
  stdout: ''
  timestamp: 1659747330
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(x,\
    \ prefix), strings)\n    return filtered\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp75nnatw9.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp75nnatw9.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp75nnatw9.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp75nnatw9.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747330
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6vti46t.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpt6vti46t.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6vti46t.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6vti46t.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  \n    for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<text>\nExercise:\
    \ Write a function that filters an input list of strings only for ones that end\
    \ with a given suffix.\nHint: Use endswith.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfoawzpc.jl:15\nin expression starting at\
    \ /tmp/tmpqfoawzpc.jl:15\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nmap\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjoh4so4s.jl:6\nin expression starting at /tmp/tmpjoh4so4s.jl:6\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nFiltering by substrings\nWe can\
    \ filter by substrings by using startswith.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdhimo3h.jl:14\nin expression starting at\
    \ /tmp/tmpmdhimo3h.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubz1yi16.jl:13\nin expression starting at\
    \ /tmp/tmpubz1yi16.jl:13\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[findall(s -> startswith(s,prefix),\
    \ strings)]\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747333
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfux0x49o.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpfux0x49o.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Vector{String}, ::String,\
    \ ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:11 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpfux0x49o.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Vector{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place and returns the modified list.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_conkkf.jl:6\nin expression starting at /tmp/tmpx_conkkf.jl:6\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"fooooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooo\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznb41kux.jl:15\nin expression starting at\
    \ /tmp/tmpznb41kux.jl:15\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. \nIt also returns nothing.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyh_8fxxd.jl:6\nin expression starting at /tmp/tmpyh_8fxxd.jl:6\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp075mqhg5.jl:14\nin expression starting at\
    \ /tmp/tmp075mqhg5.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu8yif549.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpu8yif549.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu8yif549.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu8yif549.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu8yif549.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ filters an input list of strings only for those that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_00joe_o.jl:14\nin expression starting at\
    \ /tmp/tmp_00joe_o.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\nHint:\
    \ Use endswith() instead of starts_with()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd2dzdqq.jl:14\nin expression starting at\
    \ /tmp/tmpyd2dzdqq.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\",\"hello\",\"world\"],\"hello\")\n</cell>\n\
    <text>\nExercise: Write a function that filters strings by a regular expression.\
    \ \nThe function should take two arguments: the list of strings and the regular\
    \ expression. \nThe function should return a list of strings that match the regular\
    \ expression. \nThe function should ignore case. \nThe function should ignore\
    \ the case of the regular expression. \nThe function should ignore the case of\
    \ the strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2v6qkhbs.jl:14\nin expression starting at\
    \ /tmp/tmp2v6qkhbs.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nFiltering by substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24qxxve4.jl:14\nin expression starting at\
    \ /tmp/tmp24qxxve4.jl:14\n"
  stdout: ''
  timestamp: 1659747334
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(x,prefix),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return filtered_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747330
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747327
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpph3h58i6.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpph3h58i6.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph3h58i6.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph3h58i6.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter((x) -> startswith(x,\
    \ prefix), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\"],\"hel\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters a vector of strings based on whether they end with\
    \ a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuyg1y9m.jl:13\nin expression starting at\
    \ /tmp/tmpzuyg1y9m.jl:13\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters strings by a predicate that returns true if the string starts with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1rza0k_.jl:6\nin expression starting at /tmp/tmpl1rza0k_.jl:6\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo8jeowb.jl:15\nin expression starting at\
    \ /tmp/tmpfo8jeowb.jl:15\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[strings[end-1:end]\
    \ .== prefix]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nfilter_by_prefix(L, \"foo\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54scttio.jl:9\nin expression starting at /tmp/tmp54scttio.jl:9\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4h8s8krf.jl:14\nin expression starting at\
    \ /tmp/tmp4h8s8krf.jl:14\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\", \"\
    hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression. \nUse a regular expression that\
    \ matches only words that start with a capital letter. \nUse a regular expression\
    \ that matches only words that end with a digit. \nUse a regular expression that\
    \ matches only words that end with a lowercase letter. \nUse a regular expression\
    \ that matches only words that end with a capital letter and a digit. \nUse a\
    \ regular expression that matches only words that end with a lowercase letter\
    \ and a digit. \nUse a regular expression that matches only words that end with\
    \ a capital letter, lowercase letter, and digit. \nUse a regular expression that\
    \ matches only words that end with a lowercase letter, digit, and capital letter.\
    \ \nUse a regular expression that matches only words that end with a lowercase\
    \ letter, digit, and lowercase letter. \nUse a regular expression that matches\
    \ only words that end with a lowercase letter, digit, and capital letter. \nUse\
    \ a regular expression that matches only words that end with a lowercase letter,\
    \ digit, and lowercase letter. \nUse a regular expression that matches only words\
    \ that end with a lowercase letter, digit, and capital letter. \nUse a regular\
    \ expression that matches only words that end with a lowercase letter, digit,\
    \ and lowercase letter. \nUse a regular expression that matches only words that\
    \ end with a lowercase letter, digit, and capital letter. \nUse a regular expression\
    \ that matches only words that end with a lowercase letter, digit, and lowercase\
    \ letter. \nUse a regular expression that matches only words that end with a lowercase\
    \ letter, digit, and capital letter. \nUse a regular expression that matches only\
    \ words that end with a lowercase letter, digit, and lowercase letter. \nUse a\
    \ regular expression that matches only words that end with a lowercase letter,\
    \ digit, and capital letter. \nUse a regular expression that matches only words\
    \ that end with a lowercase letter, digit, and lowercase letter. \nUse a regular\
    \ expression that matches only words that end with a lowercase letter, digit,\
    \ and capital letter. \nUse a regular expression that matches only words that\
    \ end with a lowercase letter, digit, and lowercase letter. \nUse a regular expression\
    \ that matches only words that end with a lowercase letter, digit\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtl8venb.jl:17\nin expression starting at\
    \ /tmp/tmpgtl8venb.jl:17\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters strings by a regular expression. For example, filter_by_regex([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\") should return [\"hello\"\
    , \"world\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzd5jsad.jl:14\nin expression starting at\
    \ /tmp/tmpxzd5jsad.jl:14\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz41m28z.jl:6\nin expression starting at /tmp/tmpdz41m28z.jl:6\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered_strings,\
    \ s)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters strings by a prefix and suffix.\nHint: Use filter_by_prefix and\
    \ filter_by_suffix to solve this exercise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5odio_tt.jl:14\nin expression starting at\
    \ /tmp/tmp5odio_tt.jl:14\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nFiltering by substring\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22bvdlqn.jl:6\nin expression starting at /tmp/tmp22bvdlqn.jl:6\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[findall(x -> startswith(prefix,\
    \ x), strings)]\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9765e320.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp9765e320.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9765e320.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9765e320.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_str = prefix:gsub(\"^\",\
    \ \"\")\n    \n    filtered_strings = filter(x->startswith(prefix_str, x), strings)\n\
    \    \n    return filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpvm91f63h.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpvm91f63h.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: gsub not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpvm91f63h.jl:5\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm91f63h.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm91f63h.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvm91f63h.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: gsub not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpvm91f63h.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm91f63h.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm91f63h.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"\
    ], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqav6te_.jl:17\nin expression starting at\
    \ /tmp/tmpoqav6te_.jl:17\n"
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfux0x49o.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpfux0x49o.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Vector{String}, ::String,\
    \ ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:11 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpfux0x49o.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Vector{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747336
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(prefix, s)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for those that end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_hrkgmi.jl:14\nin expression starting at\
    \ /tmp/tmps_hrkgmi.jl:14\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  \n    for string in strings\n        if string.starts_with(prefix)\n      \
    \      push!(filtered, string)\n        end\n    end\n    \n    return filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters words in a given list that start with a given prefix.\nWrite a\
    \ function that filters words in a given list that end with a given suffix.\n\
    Write a function that filters words in a given list that contain given substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyehh4ma0.jl:15\nin expression starting at\
    \ /tmp/tmpyehh4ma0.jl:15\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"],\
    \ \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"\
    bar\", \"baz\", \"qux\"], \"fo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"fooox\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"],\
    \ \"foooxqu\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"qux\"], \"foooxqux\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxx\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"\
    ], \"foooxquxxbar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbaz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazqu\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    , \"qux\"], \"foooxquxxbarbazqux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazquxx\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazquxxbaz\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"qux\"], \"foooxquxxbarbazquxxbazqu\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxx\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp6w3qmj.jl:17\nin expression starting at\
    \ /tmp/tmptp6w3qmj.jl:17\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters a list of strings based on whether they start with\
    \ a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ubfku1e.jl:15\nin expression starting at\
    \ /tmp/tmp5ubfku1e.jl:15\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_tlrf11t.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmp_tlrf11t.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tlrf11t.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tlrf11t.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pg4g9ir.jl:6\nin expression starting at /tmp/tmp8pg4g9ir.jl:6\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters a list of strings only for the ones that end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ksfoq70.jl:15\nin expression starting at\
    \ /tmp/tmp3ksfoq70.jl:15\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[strings[end-1]\
    \ \u2209 prefix]\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpe_3uqwfw.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpe_3uqwfw.jl:14\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  BoundsError: attempt to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpe_3uqwfw.jl:5\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe_3uqwfw.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe_3uqwfw.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpe_3uqwfw.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] \u2209(x::String,\
    \ itr::String)\n     @ Base ./operators.jl:1294\n   [4] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpe_3uqwfw.jl:5\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpe_3uqwfw.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpe_3uqwfw.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[strings[2:end]\
    \ .== prefix]\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_1g5nm52.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp_1g5nm52.jl:14\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access 6-element Vector{String} at index [5-element BitVector]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{String}, I::Tuple{Base.LogicalIndex{Int64,\
    \ BitVector}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @\
    \ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmp_1g5nm52.jl:5\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_1g5nm52.jl:14 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_1g5nm52.jl:12\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747338
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foo\")\n</cell>\n<text>\n\
    map\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9uxvfx_.jl:14\nin expression starting at\
    \ /tmp/tmpn9uxvfx_.jl:14\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747334
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    \n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659747335
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nFiltering by substring\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp424pv3dy.jl:6\nin expression starting at /tmp/tmp424pv3dy.jl:6\n"
  stdout: ''
  timestamp: 1659747336
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpph3h58i6.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpph3h58i6.jl:15\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph3h58i6.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph3h58i6.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. \nIt returns the modified list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbquz1o8b.jl:6\nin expression starting at /tmp/tmpbquz1o8b.jl:6\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a vector of strings based on whether they end with a given suffix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5byqy2g.jl:14\nin expression starting at\
    \ /tmp/tmpv5byqy2g.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnt6mmdn_.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpnt6mmdn_.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnt6mmdn_.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnt6mmdn_.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747332
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\", \"\
    hello\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for those that end with a given suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ic7zgul.jl:17\nin expression starting at\
    \ /tmp/tmp4ic7zgul.jl:17\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa4_hkmmc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa4_hkmmc.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpa4_hkmmc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa4_hkmmc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa4_hkmmc.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659747331
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters strings by a regular expression.\
    \ \nFor example, filter_by_regex([\"hello\", \"world\", \"goodbye\", \"hello\"\
    , \"world\"], \"hello\") should return [\"hello\", \"hello\"].\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqqw31cr.jl:15\nin expression starting at\
    \ /tmp/tmpoqqw31cr.jl:15\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6vti46t.jl:9

    '
  stdout: "test set: Test Failed at /tmp/tmpt6vti46t.jl:13\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6vti46t.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6vti46t.jl:11\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747334
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\"], \"foo\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftt3nah6.jl:6\nin expression starting at /tmp/tmpftt3nah6.jl:6\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp493o72un.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmp493o72un.jl:12\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp493o72un.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp493o72un.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659747329
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\"], \"hello\")\n</cell>\n<text>\n\
    filter_by_prefix(vec)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5szy8tbe.jl:9\nin expression starting at /tmp/tmp5szy8tbe.jl:9\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    , \"d\"], \"b\")\n</cell>\n<text>\nfilter!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9gmdiio.jl:6\nin expression starting at /tmp/tmpt9gmdiio.jl:6\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkd2ikb6h.jl:14\nin expression starting at\
    \ /tmp/tmpkd2ikb6h.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhutko5f.jl:14\nin expression starting at\
    \ /tmp/tmpvhutko5f.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhapn2f2.jl:14\nin expression starting at\
    \ /tmp/tmpkhapn2f2.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered = Vector{String}()\n  \
    \  for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcso675w.jl:14\nin expression starting at\
    \ /tmp/tmppcso675w.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nFiltering by substrings\nWe can\
    \ filter by substrings by using the filter function with a predicate that checks\
    \ for substrings:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp032nuf8_.jl:6\nin expression starting at /tmp/tmp032nuf8_.jl:6\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h3qs5v7.jl:14\nin expression starting at\
    \ /tmp/tmp9h3qs5v7.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"goodbye\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"world\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\nHint: Use endswith() instead of starts_with()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9x3zph1.jl:14\nin expression starting at\
    \ /tmp/tmpz9x3zph1.jl:14\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter_by_prefix(strings, prefix, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfux0x49o.jl:8

    '
  stdout: "test set: Error During Test at /tmp/tmpfux0x49o.jl:11\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Vector{String}, ::String,\
    \ ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:11 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\ntest set:\
    \ Error During Test at /tmp/tmpfux0x49o.jl:12\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Vector{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpfux0x49o.jl:3\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpfux0x49o.jl:4\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfux0x49o.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfux0x49o.jl:10\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659747336
