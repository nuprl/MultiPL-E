language: jl
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,4,5,7,8,9,10]) ==\
    \ [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test\
    \ sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n\
    @test sort_array([1,4,5,7,8,9,10]) == [10,9,8,7,5,4,1]\n@test sort_array([1,4,5,7,8,9,10])\
    \ == [10,9,8,7,5,4,1]\n@test sort_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpote_z94g.jl:24\nin expression starting at\
    \ /tmp/tmpote_z94g.jl:24\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = sort_array(reverse(array))\n    end\n    return array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for element in array\n        sum = sum + element\n\
    \    end\n    if sum % 2 == 1\n        sorted = reverse(array)\n    else\n   \
    \     sorted = array\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphtjy0zdt.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmphtjy0zdt.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtjy0zdt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtjy0zdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphtjy0zdt.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtjy0zdt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtjy0zdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphtjy0zdt.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtjy0zdt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtjy0zdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphtjy0zdt.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtjy0zdt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtjy0zd"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuvrlw3ot.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpuvrlw3ot.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3o"
  timestamp: 1659749483
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4w0556ow.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4w0556ow.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4w0556ow.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4w0556ow.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4w0556ow.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4w0556ow.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4w0556ow.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sort!(array)\n    else\n        sort!(array, by = reverse)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp61h4anus.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp61h4anus.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61h4anus.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61h4anus.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp61h4anus.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61h4anus.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61h4anus.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749482
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyx7eejar.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyx7eejar.jl:1\n\
    in expression starting at /tmp/tmpyx7eejar.jl:1\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for i in 1:length(array)\n        sum += array[i]\n\
    \    end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array,\
    \ by=(x->-x)); \n    end\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_7h_vrmd.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp_7h_vrmd.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7h_vrmd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7h_vrmd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7h_vrmd.jl:35\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7h_vrmd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7h_vrmd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7h_vrmd.jl:36\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7h_vrmd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7h_vrmd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7h_vrmd.jl:37\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7h_vrmd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7h_vrmd.jl:31\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqept_j6v.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpqept_j6v.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:33\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:35\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:36\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted = array\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoipqnsw0.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpoipqnsw0.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array.sort!\n    else\n        array.reverse!\n    end\n    return\
    \ array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gk42h0d.jl:23\nin expression starting at\
    \ /tmp/tmp4gk42h0d.jl:23\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4_r1pihl.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp4_r1pihl.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_r1pihl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_r1pihl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4_r1pihl.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_r1pihl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_r1pihl.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\n# test your code\n@code_warntype sort_array(array\
    \ = [4,2,5,1,3])\n</cell>\n<text>\n@code_warntype will warn you if your function\
    \ does not return a value or if the return type is not what you expected.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql6scolc.jl:24\nin expression starting at\
    \ /tmp/tmpql6scolc.jl:24\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = sort_array(array[::-1])\n\
    \    end\n    return array\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not answer\
    \ the question. He wants to sort an array in descending order if the sum of the\
    \ first and last elements is even.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ the descending order condition. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprp2bkxh6.jl:14\n\
    in expression starting at /tmp/tmprp2bkxh6.jl:14\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for i in array\n        sum += i\n    end\n   \
    \ if sum % 2 == 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 != 0\n        sorted = sort_array(array[end-1:end])\n        push!(sorted,array[end])\n\
    \        return sorted\n    else\n        sorted = sort_array(array[end-1:end-1])\n\
    \        push!(sorted,array[end-1])\n        return sorted\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuual85lt.jl:28\nin expression starting at\
    \ /tmp/tmpuual85lt.jl:28\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted = array\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp99jgd8sr.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp99jgd8sr.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99jgd8sr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99jgd8sr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp99jgd8sr.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99jgd8sr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99jgd8sr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp99jgd8sr.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99jgd8sr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99jgd8sr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp99jgd8sr.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99jgd8sr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99jgd8s"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7d6ekxu.jl:21\nin expression starting at\
    \ /tmp/tmpg7d6ekxu.jl:21\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqzu6y4m5.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpqzu6y4m5.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzu6y4m5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzu6y4m5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqzu6y4m5.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzu6y4m5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzu6y4m5.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749482
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    \n    if sum_array % 2 == 1\n        \n\
    \        array = sort(array)\n        \n    else\n        \n        array = sort(reverse(\
    \ array ))\n        \n    end\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl3glzflr.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpl3glzflr.jl:35\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3glzflr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3glzflr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3glzflr.jl:38\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3glzflr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3glzflr.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749483
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 != 0\n        sort!(array)\n    else\n        sort!(array,\
    \ reverse=true)\n    end\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array.sort!\n    else\n        array.reverse!\n    end\n    return\
    \ array\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9d2ccedl.jl:23\nin expression starting at\
    \ /tmp/tmp9d2ccedl.jl:23\n"
  stdout: ''
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for element in array\n        sum += element\n    end\n    if\
    \ sum % 2 == 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp15oiv7o1.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp15oiv7o1.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15oiv7o1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15oiv7o1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp15oiv7o1.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15oiv7o1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15oiv7o1.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuvrlw3ot.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpuvrlw3ot.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3o"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array =\
    \ sort_array(array[1...end-1]) + array[end] + sort_array(array[1:end-1])\n   \
    \ else\n        array = sort_array(array[1...end-1]) + array[end] + sort_array(array[1:end-1])\n\
    \    end\n    return array\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort the array in descending order if the sum\
    \ of the first and last elements is even.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted my answer. I've updated my answer accordingly.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjplp5n3a.jl:15\n\
    in expression starting at /tmp/tmpjplp5n3a.jl:15\n"
  stdout: ''
  timestamp: 1659749484
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort(array)\n    else\n        sort(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749486
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum += x\n    end\n   \
    \ if sum % 2 == 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749486
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array = array[end-1:end]\n\
    \    else\n        sort_array = array[end-1:end]\n        sort_array.reverse\n\
    \    end\n    return sort_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpm49somud.jl:26\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmpm49somud.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm49somud.jl:26 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm49somud.jl:25\ntest set: Error
    During Test at /tmp/tmpm49somud.jl:27\n  Test threw exception\n  Expression: candidate([5])
    == [5]\n  BoundsError: attempt to access 1-element Vector{Int64} at index [0:1]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmpm49somud.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm49somud.jl:27 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm49somud.jl:25\ntest set: Test
    Failed at /tmp/tmpm49somud.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5])
    == [0, 1, 2, 3, 4, 5]\n   Evaluated: [1, 5] == [0, 1, 2, 3, 4, 5]'''
  timestamp: 1659749486
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for a in array\n        sum += a\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptr7fqda1.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmptr7fqda1.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptr7fqda1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptr7fqda1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptr7fqda1.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptr7fqda1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptr7fqda1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptr7fqda1.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptr7fqda1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptr7fqda1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptr7fqda1.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptr7fqda1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptr7fqda"
  timestamp: 1659749487
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort(array)\n    else\n        sort(array, reverse=true)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.0>\n@test sort_array(vec(1:10))\
    \ == sort(vec(1:10))\n@test sort_array(vec(1:10)) == sort(vec(1:10), rev=true)\n\
    </cell>\n<text>\nExercise 2\nGiven an array of non-negative integers, return a\
    \ copy of the given array after sorting in ascending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbug34m8g.jl:24\nin expression starting at\
    \ /tmp/tmpbug34m8g.jl:24\n"
  stdout: ''
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted\
    \ = array\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1,3,5,7,9]) == [9,7,5,3,1]\n@test sort_array([2,4,6,8,10]) ==\
    \ [10,8,6,4,2]\n@test sort_array([5,6,7,8,9]) == [9,8,7,6,5]\n@test sort_array([10,11,12,13,14])\
    \ == [14,13,12,11,10]\n@test sort_array([15,16,17,18,19]) == [19,18,17,16,15]\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns the sum of the first\
    \ n positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkc9d9cz9.jl:27\nin expression starting at\
    \ /tmp/tmpkc9d9cz9.jl:27\n"
  stdout: ''
  timestamp: 1659749485
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort_array(array) \n    else\n        sort_array(reverse(array))\n\
    \    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749488
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 0\n        sort_array = array\n\
    \    else\n        sort_array = reverse(array)\n    end\n    return sort_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp086avt6y.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp086avt6y.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp086avt6y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp086avt6y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp086avt6y.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp086avt6y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp086avt6y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp086avt6y.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp086avt6y.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp086avt6y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp086avt6y.jl:31\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp086avt6y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp086avt6"
  timestamp: 1659749487
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype sort_array(array)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the given array.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxofavpbw.jl:24\nin expression starting at\
    \ /tmp/tmpxofavpbw.jl:24\n"
  stdout: ''
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort_array = array\n    else\n        sort_array = reverse(array)\n\
    \    end\n    \n    return sort_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp191nyshg.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp191nyshg.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp191nyshg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp191nyshg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp191nyshg.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp191nyshg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp191nyshg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp191nyshg.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp191nyshg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp191nyshg.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp191nyshg.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp191nyshg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp191nyshg.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749487
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort_array(reverse(array))\n    else\n        array\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = sort_array(reverse(array))\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 0\n        sort_array(array) \n    else\n        sort_array(reverse(array))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749489
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by=x->-x)\n    end\n \
    \   return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z8aowxd.jl:23\nin expression starting at\
    \ /tmp/tmp_z8aowxd.jl:23\n"
  stdout: ''
  timestamp: 1659749486
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    i = 0\n    \n    while i < length(array)\n        sum = sum\
    \ + array[i]\n        i = i + 1\n    end\n    \n    if sum % 2 == 1\n        sort!(array)\n\
    \    else\n        sort!(array, reverse=true)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array(array1)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the number of times a given element\
    \ appears in an array. \nFor example, given [1, 1, 2, 3], return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66au3c3s.jl:28\nin expression starting at\
    \ /tmp/tmp66au3c3s.jl:28\n"
  stdout: ''
  timestamp: 1659749486
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 0 \n        sorted = sort(array)\n\
    \    else\n        sorted = sort(reversed(array))\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpd_g9q00r.jl:26\n  Test threw
    exception\n  Expression: candidate([5]) == [5]\n  UndefVarError: reversed not
    defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpd_g9q00r.jl:16\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_g9q00r.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_g9q00r.jl:24\ntest set: Error
    During Test at /tmp/tmpd_g9q00r.jl:27\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: reversed not defined\n  Stacktrace:\n   [1]
    sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpd_g9q00r.jl:16\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_g9q00r.jl:27 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_g9q00r.jl:24\ntest set: Error
    During Test at /tmp/tmpd_g9q00r.jl:28\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError: reversed not defined\n  Stacktrace:\n   [1]
    sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpd_g9q00r.jl:16\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_g9q00r.jl:28 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_g9q00r.jl:24\ntest set: Error
    During Test at /tmp/tmpd_g9q00r.jl:29\n  Test threw exception\n  Expression: candidate([2,
    1]) == [1, 2]\n  UndefVarError: reversed not defined\n  Stacktrace:\n   [1] sor'
  timestamp: 1659749489
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1buq2n81.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp1buq2n81.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1buq2n81.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1buq2n81.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1buq2n81.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1buq2n81.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1buq2n81.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    odd_sum = 0\n    even_sum = 0\n    \n    for x in array\n  \
    \      sum += x\n        if sum % 2 == 0\n            even_sum += x\n        else\n\
    \            odd_sum += x\n        end\n    end\n    \n    if odd_sum % 2 == 0\n\
    \        odd_array = array\n        even_array = array\n    else\n        odd_array\
    \ = array\n        even_array = array\n    end\n    \n    odd_array.sort!\n  \
    \  even_array.sort!\n    \n    if odd_sum % 2 == 0\n        odd_array.push!(even_array)\n\
    \    else\n        even_array.push!(odd_array)\n    end\n    \n    return odd_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpym0d5gzq.jl:49\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type
    Array has no field sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpym0d5gzq.jl:33\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpym0d5gzq.jl:49 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpym0d5gzq.jl:48\ntest set: Error
    During Test at /tmp/tmpym0d5gzq.jl:50\n  Test threw exception\n  Expression: candidate([5])
    == [5]\n  type Array has no field sort!\n  Stacktrace:\n   [1] getproperty\n     @
    ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpym0d5gzq.jl:33\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpym0d5gzq.jl:50 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpym0d5gzq.jl:48\ntest set: Error
    During Test at /tmp/tmpym0d5gzq.jl:51\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field sort!\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpym0d5gzq.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpym0d5gzq.jl:51 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpym0d5gzq.jl:48\ntest set: Error
    During Test at /tmp/tmpym0d5gzq.jl:52\n  Te'
  timestamp: 1659749489
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 != 0\n        sort!(array)\n    else\n        sort!(array[end:-1:1])\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnel4tasj.jl:26\nin expression starting at\
    \ /tmp/tmpnel4tasj.jl:26\n"
  stdout: ''
  timestamp: 1659749486
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0td0ynh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpx0td0ynh.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0yn"
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659749489
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659749489
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 == 1\n        sort_array = array\n    else\n  \
    \      sort_array = reverse(array)\n    end\n    \n    return sort_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_35bwgot.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp_35bwgot.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb6gcxoit.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpb6gcxoit.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=arrays,julia |>\n<| c |>\nThis does not answer the question. The question\
    \ asks how to sort an array in descending order if the sum of the first and last\
    \ elements is odd, or in ascending order if the sum of the first and last elements\
    \ is even.\n<|/ c |>\n<| c |>\nI misunderstood the question. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| a tags=arrays,julia |>\nThis can be done using\
    \ sortperm:\n<code>\njulia> a = [1,2,3,4,5,6,7,8,9,10]\n10-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xtht45l.jl:21\nin expression starting at\
    \ /tmp/tmp_xtht45l.jl:21\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0td0ynh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpx0td0ynh.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0yn"
  timestamp: 1659749488
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array = array\n\
    \    else\n        sort_array = reverse(array)\n    end\n    return sort_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpad48cxq_.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpad48cxq_.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:29\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudwz52yl.jl:21\nin expression starting at\
    \ /tmp/tmpudwz52yl.jl:21\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0td0ynh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpx0td0ynh.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0ynh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx0td0ynh.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0td0ynh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0td0yn"
  timestamp: 1659749488
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 0\n        sort_array(array) \n    else\n        sort_array(reverse(array))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749492
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 != 0\n        sort_array = array\n    else\n  \
    \      sort_array = reverse(array)\n    end\n    \n    return sort_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplad18wcs.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmplad18wcs.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplad18wcs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplad18wcs.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplad18wcs.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplad18wcs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplad18wcs.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplad18wcs.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplad18wcs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplad18wcs.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplad18wcs.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplad18wcs.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplad18wcs.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749491
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort(array)\n    else\n        sort(reverse, array)\n    end\n  \
    \  return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4b4crujt.jl:28\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:
    no method matching sort(::typeof(reverse), ::Vector{Int64})\n  Stacktrace:\n   [1]
    sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp4b4crujt.jl:19\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4b4crujt.jl:28 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4b4crujt.jl:27\ntest set: Test
    Failed at /tmp/tmp4b4crujt.jl:30\n  Expression: candidate([2, 4, 3, 0, 1, 5])
    == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0, 1, 2, 3, 4, 5]'''
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = reverse(array)\n    else\n        sorted = array\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc1zj5s3m.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpc1zj5s3m.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1zj5s3m.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1zj5s3m.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpc1zj5s3m.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1zj5s3m.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1zj5s3m.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpc1zj5s3m.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1zj5s3m.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1zj5s3m.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpc1zj5s3m.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1zj5s3m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1zj5s3"
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(reverse, array)\n    end\n  \
    \  return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_array([1,3,5,7,9])` returns `[9, 7, 5, 3, 1]`\n<|/\
    \ c |>\n<| c |>\nI tested it on julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on\
    \ julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on julia 0.6.2\n<|/ c |>\n<| c |>\n\
    I tested it on julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package for\
    \ this:\nhttps://github.com/jrm/julia-sort\n<code>\njulia> using JuliaSort\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2g1hf8ms.jl:23\nin expression starting at\
    \ /tmp/tmp2g1hf8ms.jl:23\n"
  stdout: ''
  timestamp: 1659749489
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrc4kkhi.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpbrc4kkhi.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkh"
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort(array)\n    else\n        sort(array, by=(x->-x)->Int64)\n \
    \   end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"x -> begin\n    # /tmp/tmpbz0zhr5z.jl, line\
    \ 19\n    -(x)\nend\" is not a valid function argument name around /tmp/tmpbz0zhr5z.jl:19\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbz0zhr5z.jl:1\nin expression starting\
    \ at /tmp/tmpbz0zhr5z.jl:1\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, by=(x->-x)->Int64)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"x -> begin\n    # /tmp/tmpmdpv7db_.jl, line\
    \ 19\n    -(x)\nend\" is not a valid function argument name around /tmp/tmpmdpv7db_.jl:19\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdpv7db_.jl:1\nin expression starting\
    \ at /tmp/tmpmdpv7db_.jl:1\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c9xpche.jl:22\nin expression starting at\
    \ /tmp/tmp2c9xpche.jl:22\n"
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array =\
    \ reverse(array)\n    end\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt7i7i192.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpt7i7i192.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:31\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i19"
  timestamp: 1659749492
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2,1,3,5,4,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2,1,3,5,4,6,\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9edwvf33.jl:24\nin expression starting at\
    \ /tmp/tmp9edwvf33.jl:24\n"
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| a dscore=1 |>\nI wrote a package called ArrayTools.jl that has many useful\
    \ functions for working with arrays. I believe it has the functionality you are\
    \ looking for.\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\nI wrote\
    \ a package called ArrayTools.jl that has many useful functions for working with\
    \ arrays. I believe it has the functionality you are looking for.\n<code>\nusing\
    \ ArrayTools\n</code>\nThe function sort! is used to sort the array in ascending\
    \ order. \n<code>\nsort!(array::Vector{Int64})\n</code>\nThe function sort! is\
    \ used to sort the array in descending order. \n<code>\nsort!(array::Vector{Int64},\
    \ by=(x->-x)) -> Vector{Int64}\n</code>\nThe function sort! is used to sort the\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd, or sort it in descending order if the sum( first index value, last index\
    \ value) is even.\n<code>\nsort!(array::Vector{Int64}, by=(x->-x)) -> Vector{Int64}\n\
    </code>\nThe function sort! is used to sort the array in ascending order if the\
    \ sum( first index value, last index value) is odd, or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n<code>\nsort!(array::Vector{Int64},\
    \ by=(x->-x)) -> Vector{Int64}\n</code>\nThe function sort! is used to sort the\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd, or sort it in descending order if the sum( first index value, last index\
    \ value) is even.\n<code>\nsort!(array::Vector{Int64}, by=(x->-x)) -> Vector{Int64}\n\
    </code>\nThe function sort! is used to sort the array in ascending order if the\
    \ sum( first index value, last index value) is odd, or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n<code>\nsort!(array::Vector{Int64},\
    \ by=(x->-x)) -> Vector{Int64}\n</code>\nThe function sort! is used to sor\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lk1tqay.jl:24\nin expression starting at\
    \ /tmp/tmp6lk1tqay.jl:24\n"
  stdout: ''
  timestamp: 1659749491
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort_array(reverse(array))\n        return sorted + array\n\
    \    else\n        return array\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 0\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpifpbtmlf.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpifpbtmlf.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749493
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort_array(reverse(array))\n    else\n        array\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6j7766_s.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp6j7766_s.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j7766_s.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j7766_s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6j7766_s.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j7766_s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j7766_s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6j7766_s.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j7766_s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j7766_s.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6j7766_s.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j7766_s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j7766_"
  timestamp: 1659749493
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for element in array\n        sum = sum + element\n\
    \    end\n    \n    if sum % 2 == 1\n        sorted = reverse(array)\n    else\n\
    \        sorted = array\n    end\n    \n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array(array1)\n</cell>\n<code language=julia-1.5>\n\
    sort_array(array2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ an array of non-negative integers and returns the sum of the first and last\
    \ index values.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplol_xreo.jl:27\nin expression starting at\
    \ /tmp/tmplol_xreo.jl:27\n"
  stdout: ''
  timestamp: 1659749491
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array =\
    \ sort_array(reverse(array))\n    end\n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort(array)\n    else\n        sort(array, by=(x->-x, x->x))\n  \
    \  end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6qrw771.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpo6qrw771.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6qrw771.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6qrw771.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo6qrw771.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6qrw771.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6qrw771.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo6qrw771.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6qrw771.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6qrw771.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo6qrw771.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6qrw771.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6qrw771.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749493
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe\
    \ this answer does not meet the requirements stated in the question. Specifically,\
    \ the question states that \"the given array should be sorted in ascending order\
    \ if the sum( first index value, last index value) is odd, or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\" This answer\
    \ does not meet this requirement.\n<|/ c |>\n<| c |>\nThe question states \"the\
    \ given array should be sorted in ascending order if the sum( first index value,\
    \ last index value) is odd, or sort it in descending order if the sum( first index\
    \ value, last index value) is even.\" This answer does not meet this requirement.\n\
    <|/ c |>\n<| c |>\nI believe this answer does meet the requirements stated in\
    \ the question. Specifically, the question states that \"the given array should\
    \ be sorted in ascending order if the sum( first index value, last index value)\
    \ is odd, or sort it in descending order if the sum( first index value, last index\
    \ value) is even.\" This answer does meet this requirement.\n<|/ c |>\n<| c |>\n\
    I believe this answer does meet the requirements stated in the question. Specifically,\
    \ the question states that \"the given array should be sorted in ascending order\
    \ if the sum( first index value, last index value) is odd, or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\" This answer\
    \ does meet this requirement.\n<|/ c |>\n<| c |>\nI believe this answer does meet\
    \ the requirements stated in the question. Specifically, the question states that\
    \ \"the given array should be sorted in ascending order if the sum( first index\
    \ value, last index value) is odd, or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\" This answer does meet this requirement.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ifd5czt.jl:23\nin expression starting at\
    \ /tmp/tmp8ifd5czt.jl:23\n"
  stdout: ''
  timestamp: 1659749492
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    \n    if sum_array % 2 == 1\n        sort_array\
    \ = array\n    else\n        sort_array = reverse(array)\n    end\n    \n    return\
    \ sort_array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyxkkvmpt.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpyxkkvmpt.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxkkvmpt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxkkvmpt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpyxkkvmpt.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxkkvmpt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxkkvmpt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpyxkkvmpt.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxkkvmpt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxkkvmpt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpyxkkvmpt.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxkkvmpt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxkkvmpt.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    return sorted\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpishmbpj5.jl:23\nin expression starting at\
    \ /tmp/tmpishmbpj5.jl:23\n"
  stdout: ''
  timestamp: 1659749492
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort(array)\n    else\n        sort(array, reverse=true)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749495
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    i = 0\n    j = length(array) - 1\n    while i <= j\n       \
    \ sum = array[i] + array[j]\n        if sum % 2 == 1\n            array[j], array[i]\
    \ = array[i], array[j]\n            i += 1\n            j += 1\n        else\n\
    \            i += 1\n            j += 1\n        end\n    end\n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4s3cdq2e.jl:34\n  Test threw
    exception\n  Expression: candidate([5]) == [5]\n  BoundsError: attempt to access
    1-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp4s3cdq2e.jl:16\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4s3cdq2e.jl:34 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4s3cdq2e.jl:32\ntest set: Error
    During Test at /tmp/tmp4s3cdq2e.jl:35\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  BoundsError: attempt to access 6-element
    Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp4s3cdq2e.jl:16\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4s3cdq2e.jl:35 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4s3cdq2e.jl:32\ntest set: Error
    During Test at /tmp/tmp4s3cdq2e.jl:36\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  BoundsError: attempt to access
    7-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp4s3cdq2e.jl:16\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4s3cdq2e.jl:36 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlin'
  timestamp: 1659749495
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        array = sort_array(reverse(array))\n    end\n    return array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749495
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis does not answer the question.\
    \ OP wants to sort an array of non-negative integers, not an array of integers.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of non-negative integers.\
    \ I answered the question by providing a solution that sorts non-negative integers.\
    \ I do not see how this does not answer the question.\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting an array of non-negative integers. I answered the\
    \ question by providing a solution that sorts non-negative integers. I do not\
    \ see how this does not answer the question.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting an array of non-negative integers. I answered the question\
    \ by providing a solution that sorts non-negative integers. I do not see how this\
    \ does not answer the question.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of non-negative integers. I answered the question by providing a solution\
    \ that sorts non-negative integers. I do not see how this does not answer the\
    \ question.\n<|/ c |>\n<| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1lov00a.jl:21\nin expression starting at\
    \ /tmp/tmpf1lov00a.jl:21\n"
  stdout: ''
  timestamp: 1659749493
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for element in array\n        sum += element\n \
    \   end\n    \n    if sum % 2 != 0\n        sort_array(reverse(array))\n    else\n\
    \        sort_array(array)\n    end\n    \n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749497
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum += x\n    end\n   \
    \ if sum % 2 == 1\n        array = reverse(array)\n    end\n    return array\n\
    end\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgi3e6gt.jl:22\nin expression starting at\
    \ /tmp/tmpzgi3e6gt.jl:22\n"
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum_of_array = zeros(length(array))\n    sum_of_array = array\n\
    \    for i = 1:length(array)\n        sum = sum + array[i]\n    end\n    if sum\
    \ % 2 != 0\n        sum_of_array = reverse(sum_of_array)\n    end\n    return\
    \ sum_of_array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zido9yv.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp_zido9yv.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zido9yv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zido9yv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_zido9yv.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zido9yv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zido9yv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_zido9yv.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zido9yv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zido9yv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_zido9yv.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zido9yv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zido9y"
  timestamp: 1659749495
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = sort(reverse(array))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv9_sja1q.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpv9_sja1q.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv9_sja1q.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv9_sja1q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv9_sja1q.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv9_sja1q.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv9_sja1q.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749495
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum += x\n    end\n   \
    \ if sum % 2 != 0\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo788my2b.jl:23\nin expression starting at\
    \ /tmp/tmpo788my2b.jl:23\n"
  stdout: ''
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    even = 0\n    odd = 0\n    for x in array\n        sum += x\n\
    \        if sum % 2 == 0\n            even += x\n        else\n            odd\
    \ += x\n    end\n    if even > odd\n        array = array[end:-1:1]\n    else\n\
    \        array = array[end:-1:1]\n    end\n    return array\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87lcggbj.jl:29\nin expression starting at\
    \ /tmp/tmp87lcggbj.jl:29\n"
  stdout: ''
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort_array = reverse(array)\n    else\n        sort_array\
    \ = array\n    end\n    \n    return sort_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7_zrjayl.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp7_zrjayl.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_zrjayl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_zrjayl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7_zrjayl.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_zrjayl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_zrjayl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7_zrjayl.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_zrjayl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_zrjayl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7_zrjayl.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_zrjayl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_zrjay"
  timestamp: 1659749496
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for i in array\n        sum += i\n    end\n   \
    \ if sum % 2 == 0\n        sort(array)\n    else\n        sort(array, reverse=true)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749497
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x0usy5s.jl:21\nin expression starting at\
    \ /tmp/tmp4x0usy5s.jl:21\n"
  stdout: ''
  timestamp: 1659749494
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb6gcxoit.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpb6gcxoit.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb6gcxoit.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gcxoit.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gcxoit.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = zeros(Int64,length(array))\n    for i in 1:length(array)\n  \
    \      sum_array[i] = array[i] + sum_array[i-1]\n    end\n    \n    if sum_array[1]\
    \ % 2 != 0\n        sum_array[1] = sum_array[1] - 1\n        sum_array[2] = sum_array[2]\
    \ - 1\n    end\n    \n    if sum_array[2] % 2 != 0\n        sum_array[2] = sum_array[2]\
    \ - 1\n        sum_array[1] = sum_array[1] - 1\n    end\n    \n    return sum_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkh9k_vnq.jl:34\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpkh9k_vnq.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkh9k_vnq.jl:34 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkh9k_vnq.jl:33\ntest set: Error
    During Test at /tmp/tmpkh9k_vnq.jl:35\n  Test threw exception\n  Expression: candidate([5])
    == [5]\n  BoundsError: attempt to access 1-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpkh9k_vnq.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkh9k_vnq.jl:35 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkh9k_vnq.jl:33\ntest set: Error
    During Test at /tmp/tmpkh9k_vnq.jl:36\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  BoundsError: attempt to access 6-element
    Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpkh9k_vnq.jl:14\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkh9k_vnq.jl:36 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   '
  timestamp: 1659749497
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array =\
    \ reverse(array)\n    end\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt7i7i192.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpt7i7i192.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i192.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt7i7i192.jl:31\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt7i7i192.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt7i7i19"
  timestamp: 1659749492
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749497
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lbo9exs.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp1lbo9exs.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lbo9exs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lbo9exs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1lbo9exs.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lbo9exs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lbo9exs.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749496
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse( array )\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppi3pn9s5.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmppi3pn9s5.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppi3pn9s5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppi3pn9s5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppi3pn9s5.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppi3pn9s5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppi3pn9s5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppi3pn9s5.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppi3pn9s5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppi3pn9s5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppi3pn9s5.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppi3pn9s5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppi3pn9s"
  timestamp: 1659749497
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort_array(reverse(array))\n    else\n        array\n    end\nend\n\
    </code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptarbesgo.jl:22\nin expression starting at\
    \ /tmp/tmptarbesgo.jl:22\n"
  stdout: ''
  timestamp: 1659749496
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted = array\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoipqnsw0.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpoipqnsw0.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw"
  timestamp: 1659749483
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    \n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 != 0\n        sorted = sort_array(array[1:end-1])\n\
    \    else\n        sorted = sort_array(array[end-1:end])\n    end\n    \n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjtsq_fk2.jl:31\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmpjtsq_fk2.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjtsq_fk2.jl:31 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjtsq_fk2.jl:30\ntest set: Error
    During Test at /tmp/tmpjtsq_fk2.jl:32\n  Test threw exception\n  Expression: candidate([5])
    == [5]\n  BoundsError: attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmpjtsq_fk2.jl:21\n   [5] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpjtsq_fk2.jl:19\n   [6]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjtsq_fk2.jl:32 [inlined]\n   [8]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjtsq_fk2.jl:30\ntest set: Error
    During Test at /tmp/tmpjtsq_fk2.jl:33\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  BoundsError: attempt to access 1-element
    Vector{Int64} at index [0:1]\n  Stacktrace:\n   '
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for element in array\n        sum = sum + element\n\
    \    end\n    \n    if sum % 2 != 0\n        sorted = sort(array)\n    else\n\
    \        sorted = reverse(sort(array))\n    end\n    \n    return sorted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnwe_40rr.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpnwe_40rr.jl:35\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwe_40rr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwe_40rr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnwe_40rr.jl:38\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwe_40rr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwe_40rr.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcdtzzm23.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpcdtzzm23.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:33\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:35\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:36\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm2"
  timestamp: 1659749498
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd_tonutp.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpd_tonutp.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_tonutp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_tonutp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpd_tonutp.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_tonutp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_tonutp.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqept_j6v.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpqept_j6v.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:33\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:35\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpqept_j6v.jl:36\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqept_j6v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqept_j6"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrufl318.jl:23\nin expression starting at\
    \ /tmp/tmpvrufl318.jl:23\n"
  stdout: ''
  timestamp: 1659749497
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = sort_array(array,\
    \ reverse=true)\n    else\n        array = sort_array(array, reverse=false)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    \n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort(array)\n    else\n        sort(array, by=(x->-x))\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkc0u5i4x.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpkc0u5i4x.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkc0u5i4x.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkc0u5i4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkc0u5i4x.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkc0u5i4x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkc0u5i4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkc0u5i4x.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkc0u5i4x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkc0u5i4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkc0u5i4x.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkc0u5i4x.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkc0u5i4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuvrlw3ot.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpuvrlw3ot.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3o"
  timestamp: 1659749483
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum += x\n    end\n   \
    \ if sum % 2 == 1\n        sorted = sort_array(array.reverse)\n    else\n    \
    \    sorted = array\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpjqsa55es.jl:30\n  Test threw
    exception\n  Expression: candidate([5]) == [5]\n  type Array has no field reverse\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpjqsa55es.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjqsa55es.jl:30 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjqsa55es.jl:28\ntest set: Error
    During Test at /tmp/tmpjqsa55es.jl:31\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field reverse\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpjqsa55es.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjqsa55es.jl:31 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjqsa55es.jl:28\ntest set: Error
    During Test at /tmp/tmpjqsa55es.jl:32\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  type Array has no field reverse\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpjqsa55es.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjqsa55es.jl:32 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjqsa55es.jl:28\ntest set: Error
    During Test at /tmp/tmpjqsa55'
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnbshkuq9.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpnbshkuq9.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbshkuq9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbshkuq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnbshkuq9.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbshkuq9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbshkuq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnbshkuq9.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbshkuq9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbshkuq9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnbshkuq9.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbshkuq9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbshkuq"
  timestamp: 1659749499
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 == 1\n        sort_array(array) \n    else\n  \
    \      sort_array(reverse(array))\n    end\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749500
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuvrlw3ot.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpuvrlw3ot.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3ot.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuvrlw3ot.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvrlw3ot.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvrlw3o"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    i = 0\n    while i < length(array)\n        sum = sum + array[i]\n\
    \        i = i + 1\n    end\n    if sum % 2 != 0\n        sort(array)\n    else\n\
    \        sort(array, reverse=true)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about sorting in descending order when the sum of the first and last\
    \ elements is even.\n<|/ c |>\n<| c |>\nI believe this answer is correct and should\
    \ be accepted. Although I agree with that it is better to use the built-in `sort`\
    \ function rather than writing your own sort function.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhuu0__f.jl:25\nin expression starting at\
    \ /tmp/tmplhuu0__f.jl:25\n"
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 0\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpifpbtmlf.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpifpbtmlf.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpifpbtmlf.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpifpbtmlf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpifpbtmlf.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749493
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6gj_88ye.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6gj_88ye.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88y"
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap3umc5p.jl:23\nin expression starting at\
    \ /tmp/tmpap3umc5p.jl:23\n"
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = sort_array(array.reverse)\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=arrays,julia |>\n<| c |>\n\
    This doesn't sort the array, it just reverses the array and returns the reversed\
    \ array. Also the question asks for descending order if the sum is even.\n<|/\
    \ c |>\n<| c |>\nThe question asks for descending order if the sum is even. That's\
    \ why I wrote \"sort it in descending order if the sum( first index value, last\
    \ index value) is even\"\n<|/ c |>\n<| c |>\nOh, I see now. Sorry for the misunderstanding.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotksnjgb.jl:18\nin expression starting at\
    \ /tmp/tmpotksnjgb.jl:18\n"
  stdout: ''
  timestamp: 1659749498
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array = array[end-1:end]\n\
    \    else\n        sort_array = array[end-1:end]\n    end\n    return sort_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5xtdtb3j.jl:25\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmp5xtdtb3j.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5xtdtb3j.jl:25 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5xtdtb3j.jl:24\ntest set: Error
    During Test at /tmp/tmp5xtdtb3j.jl:26\n  Test threw exception\n  Expression: candidate([5])
    == [5]\n  BoundsError: attempt to access 1-element Vector{Int64} at index [0:1]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n     @ Main
    /tmp/tmp5xtdtb3j.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5xtdtb3j.jl:26 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5xtdtb3j.jl:24\ntest set: Test
    Failed at /tmp/tmp5xtdtb3j.jl:27\n  Expression: candidate([2, 4, 3, 0, 1, 5])
    == [0, 1, 2, 3, 4, 5]\n   Evaluated: [1, 5] == [0, 1, 2, 3, 4, 5]'''
  timestamp: 1659749501
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcdtzzm23.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpcdtzzm23.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:33\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:35\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm23.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdtzzm23.jl:36\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdtzzm23.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdtzzm2"
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrc4kkhi.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpbrc4kkhi.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkh"
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        array = sort_array(array[::-1])\n    end\n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpml9_nes7.jl:18\n\
    in expression starting at /tmp/tmpml9_nes7.jl:18\n"
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\n</code>\n<|/ a tags=arrays,sorting,julia |>\n<| c |>\n\
    I like your solution, but I wonder why you use `Vector{Int64}` instead of `Array{Int64}`?\
    \ I guess it makes no difference, but I wonder why you use `Vector` instead of\
    \ `Array`?\n<|/ c |>\n<| c |>\nI guess it makes no difference, but I wonder why\
    \ you use `Vector` instead of `Array`?\n<|/ c |>\n<| c |>\nI guess it makes no\
    \ difference, but I wonder why you use `Vector` instead of `Array`?\n<|/ c |>\n\
    <| c |>\nI guess it makes no difference, but I wonder why you use `Vector` instead\
    \ of `Array`?\n<|/ c |>\n<| a dscore=4 |>\nI like solutions presented here, but\
    \ I wanted to add my own, which is more efficient and more idiomatic. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4aw9qj_o.jl:23\nin expression starting at\
    \ /tmp/tmp4aw9qj_o.jl:23\n"
  stdout: ''
  timestamp: 1659749499
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort_array(array[2:end-1]) + array[1:end-1]\n    else\n\
    \        sorted = sort_array(array[2:end]) + array[1:end]\n    end\n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749502
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6gj_88ye.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6gj_88ye.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88y"
  timestamp: 1659749499
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort_array(array[2:end])\n        return sorted + [array[1]]\n\
    \    else\n        sorted = sort_array(array[1:end-1])\n        return sorted\
    \ + [array[1]]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749502
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for element in array\n        sum = sum + element\n  \
    \  end\n    \n    if sum % 2 != 0\n        sort_array = array\n    else\n    \
    \    sort_array = reverse(array)\n    end\n    \n    return sort_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppefupki_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmppefupki_.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppefupki_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppefupki_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppefupki_.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppefupki_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppefupki_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppefupki_.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppefupki_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppefupki_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppefupki_.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppefupki_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppefupki_.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749501
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array = array\n\
    \    else\n        sort_array = reverse(array)\n    end\n    return sort_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpad48cxq_.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpad48cxq_.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:29\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpad48cxq_.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpad48cxq_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpad48cxq_.jl:24\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jwumxgv.jl:21\nin expression starting at\
    \ /tmp/tmp6jwumxgv.jl:21\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for element in array\n        sum += element\n \
    \   end\n    \n    if sum % 2 == 1\n        sorted = reverse(array)\n    else\n\
    \        sorted = array\n    end\n    \n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpty9bu1k7.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpty9bu1k7.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9bu1k7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9bu1k7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpty9bu1k7.jl:35\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9bu1k7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9bu1k7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpty9bu1k7.jl:37\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9bu1k7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9bu1k7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpty9bu1k7.jl:38\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9bu1k7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9bu1k"
  timestamp: 1659749501
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    \n    if sum % 2 == 1\n        sort_array = array\n    else\n  \
    \      sort_array = reverse(array)\n    end\n    \n    return sort_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_35bwgot.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp_35bwgot.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_35bwgot.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_35bwgot.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_35bwgot.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749490
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgohza2jt.jl:23\nin expression starting at\
    \ /tmp/tmpgohza2jt.jl:23\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n    sum = 0\n\
    \    sum = 0\n    sum = 0\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyx7eejar.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyx7eejar.jl:1\n\
    in expression starting at /tmp/tmpyx7eejar.jl:1\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort_array = array[end - 1 : 1 : -1]\n    else\n        sort_array\
    \ = array[end - 1 : 1 : 1]\n    end\n    return sort_array\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp69t5r6eb.jl:29\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] getindex(A::Vector{Int64}, I::StepRange{Int64,
    Int64})\n     @ Base ./array.jl:890\n   [3] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmp69t5r6eb.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmp69t5r6eb.jl:29 [inlined]\n   [6]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmp69t5r6eb.jl:28\ntest set: Test
    Failed at /tmp/tmp69t5r6eb.jl:30\n  Expression: candidate([5]) == [5]\n   Evaluated:
    Int64[] == [5]'''
  timestamp: 1659749503
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrc4kkhi.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpbrc4kkhi.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkh"
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum = sum + array[i]\n\
    \    end\n    if sum % 2 != 0\n        sort(array)\n    else\n        sort(array,\
    \ reverse=true)\n    end\n    return array\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzrfroqh.jl:24\nin expression starting at\
    \ /tmp/tmpkzrfroqh.jl:24\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for i in array\n        sum += i\n    end\n    \n\
    \    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array, by=(x->-x));\
    \ \n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the sum of the first and last elements.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj7hax_s.jl:27\nin expression starting at\
    \ /tmp/tmppj7hax_s.jl:27\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort(array)\n    else\n        sort(array, by=(x->-x))\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3dlrfo2u.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3dlrfo2u.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3dlrfo2u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3dlrfo2u.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3dlrfo2u.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3dlrfo2u.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3dlrfo2u.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3dlrfo2u.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3dlrfo2u.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3dlrfo2u.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3dlrfo2u.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3dlrfo2u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3dlrfo2u.jl:30\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749502
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749504
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for element in array\n        sum += element\n    end\n    if\
    \ sum % 2 == 1\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for a in array\n        sum += a\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by = x -> -x)\n    end\n\
    \    return array\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59cq47ye.jl:23\nin expression starting at\
    \ /tmp/tmp59cq47ye.jl:23\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7d6ekxu.jl:21\nin expression starting at\
    \ /tmp/tmpg7d6ekxu.jl:21\n"
  stdout: ''
  timestamp: 1659749481
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum = sum + x\n    end\n\
    \    \n    if sum % 2 != 0\n        sorted = sort(array)\n    else\n        sorted\
    \ = reverse(sort(reverse(array)))\n    end\n    \n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqr4akii.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpvqr4akii.jl:35\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqr4akii.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqr4akii.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvqr4akii.jl:38\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqr4akii.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqr4akii.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749503
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum_of_array = zeros(length(array))\n    sum_of_array[1] = array[1]\n\
    \    for i in 2:length(array)\n        sum += array[i]\n        sum_of_array[i]\
    \ = sum\n    end\n    if sum % 2 != 0\n        sum_of_array = -sum_of_array\n\
    \    end\n    return sum_of_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpz6od121f.jl:29\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpz6od121f.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz6od121f.jl:29 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz6od121f.jl:28\ntest set: Test
    Failed at /tmp/tmpz6od121f.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5])
    == [0, 1, 2, 3, 4, 5]\n   Evaluated: [-2, -4, -7, -7, -8, -13] == [0, 1, 2, 3,
    4, 5]'''
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for i in array\n        sum += i\n    end\n   \
    \ if sum % 2 == 1\n        array = reverse(array)\n    end\n    return array\n\
    end\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65g_x8fd.jl:22\nin expression starting at\
    \ /tmp/tmp65g_x8fd.jl:22\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    i = 0\n    while i < length(array)\n        sum = sum + array[i]\n\
    \        i = i + 1\n    end\n    if sum % 2 == 1\n        sorted = sort_array(reverse(array))\n\
    \    else\n        sorted = array\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvz5okv_t.jl:31\n  Test threw
    exception\n  Expression: candidate([5]) == [5]\n  BoundsError: attempt to access
    1-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpvz5okv_t.jl:15\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvz5okv_t.jl:31 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvz5okv_t.jl:29\ntest set: Error
    During Test at /tmp/tmpvz5okv_t.jl:32\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  BoundsError: attempt to access 6-element
    Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpvz5okv_t.jl:15\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvz5okv_t.jl:32 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvz5okv_t.jl:29\ntest set: Error
    During Test at /tmp/tmpvz5okv_t.jl:33\n  Test threw exception\n  Expression: candidate([2,
    4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  BoundsError: attempt to access
    7-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861
    [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpvz5okv_t.jl:15\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvz5okv_t.jl:33 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlin'
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrc4kkhi.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpbrc4kkhi.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkhi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbrc4kkhi.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrc4kkhi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrc4kkh"
  timestamp: 1659749491
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted = array\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoipqnsw0.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpoipqnsw0.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:34\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpoipqnsw0.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoipqnsw0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoipqnsw"
  timestamp: 1659749483
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by=(x->-x))\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9bn_hlqs.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp9bn_hlqs.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn_hlqs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn_hlqs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9bn_hlqs.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn_hlqs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn_hlqs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9bn_hlqs.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn_hlqs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn_hlqs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9bn_hlqs.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn_hlqs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn_hlqs.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749504
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort(array)\n    else\n        sort(reverse, array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8ezr6deu.jl:31\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:
    no method matching sort(::typeof(reverse), ::Vector{Int64})\n  Stacktrace:\n   [1]
    sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp8ezr6deu.jl:21\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ezr6deu.jl:31 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ezr6deu.jl:30\ntest set: Test
    Failed at /tmp/tmp8ezr6deu.jl:33\n  Expression: candidate([2, 4, 3, 0, 1, 5])
    == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0, 1, 2, 3, 4, 5]'''
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse( array )\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuax11j7b.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpuax11j7b.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuax11j7b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuax11j7b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuax11j7b.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuax11j7b.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuax11j7b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuax11j7b.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuax11j7b.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuax11j7b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpuax11j7b.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuax11j7b.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuax11j7"
  timestamp: 1659749504
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sort_array = array[end - 1 : 1 : -1]\n    else\n        sort_array\
    \ = array[end - 1 : 1 : -1]\n    end\n    return sort_array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvhxnr6qd.jl:29\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:
    attempt to access 0-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] getindex(A::Vector{Int64}, I::StepRange{Int64,
    Int64})\n     @ Base ./array.jl:890\n   [3] sort_array(array::Vector{Int64})\n     @
    Main /tmp/tmpvhxnr6qd.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvhxnr6qd.jl:29 [inlined]\n   [6]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvhxnr6qd.jl:28\ntest set: Test
    Failed at /tmp/tmpvhxnr6qd.jl:30\n  Expression: candidate([5]) == [5]\n   Evaluated:
    Int64[] == [5]'''
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for element in array\n        sum = sum + element\n    end\n\
    \    if sum % 2 != 0\n        sorted = sort_array(array[1...end])\n        return\
    \ sorted + [array[end]...]\n    else\n        sorted = sort_array(array[1...end])\n\
    \        return sorted + [array[1]...]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4b07bs7w.jl:17\n\
    in expression starting at /tmp/tmp4b07bs7w.jl:17\n"
  stdout: ''
  timestamp: 1659749503
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1buq2n81.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp1buq2n81.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1buq2n81.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1buq2n81.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1buq2n81.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1buq2n81.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1buq2n81.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749488
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for element in array\n        sum += element\n    end\n\
    \    if sum % 2 == 1\n        sorted = reverse(array)\n    else\n        sorted\
    \ = array\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfz8mu06y.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpfz8mu06y.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfz8mu06y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfz8mu06y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfz8mu06y.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfz8mu06y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfz8mu06y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfz8mu06y.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfz8mu06y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfz8mu06y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfz8mu06y.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfz8mu06y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfz8mu06"
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse( array )\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqt1y_gt9.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpqt1y_gt9.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt1y_gt9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt1y_gt9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt1y_gt9.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt1y_gt9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt1y_gt9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt1y_gt9.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt1y_gt9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt1y_gt9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt1y_gt9.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt1y_gt9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt1y_gt"
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqhjver1h.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpqhjver1h.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhjver1h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhjver1h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqhjver1h.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhjver1h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhjver1h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqhjver1h.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhjver1h.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhjver1h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqhjver1h.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqhjver1h.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqhjver1"
  timestamp: 1659749505
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort(array)\n    else\n        sort(reverse, array)\n    end\n  \
    \  return array\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27812843)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ an array in descending order if the sum of the first and last elements is odd,\
    \ or in ascending order if the sum of the first and last elements is even. He\
    \ also provided an example input array and expected output array.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27812843)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ an array in descending order if the sum of the first and last elements is odd,\
    \ or in ascending order if the sum of the first and last elements is even. He\
    \ also provided an example input array and expected output array.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27812843)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9javbhb9.jl:23\nin expression starting at\
    \ /tmp/tmp9javbhb9.jl:23\n"
  stdout: ''
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    i = 0\n    j = array.length - 1\n    while i < j\n        sum\
    \ += array[i]\n        if sum % 2 == 1\n            array[i] = array[j]\n    \
    \        array[j] = array[i]\n            i += 1\n            j -= 1\n       \
    \ else\n            array[i] = array[j]\n            array[j] = array[i]\n   \
    \         i += 1\n            j += 1\n        end\n    end\n    return array\n\
    end\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrthn31x.jl:31\nin expression starting at\
    \ /tmp/tmplrthn31x.jl:31\n"
  stdout: ''
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array =\
    \ sort_array(array[1...end])\n    else\n        array = sort_array(array[1...end])\n\
    \    end\n    \n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27598141)\n<|/ c |>\n<| c |>\nI added an answer\
    \ with my solution. Hope it helps.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27598141)\n\
    <|/ c |>\n<| c |>\nI added an answer with my solution. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb80v1jr0.jl:15\n\
    in expression starting at /tmp/tmpb80v1jr0.jl:15\n"
  stdout: ''
  timestamp: 1659749504
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array%2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| c |>\nThis doesn't work if you have a negative number. Try `sort_array([-3,-2,-1,0,1,2,3])`\n\
    <|/ c |>\n<| c |>\nI edited the answer to include a fix for negative numbers.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtnahhji.jl:18\nin expression starting at\
    \ /tmp/tmpbtnahhji.jl:18\n"
  stdout: ''
  timestamp: 1659749504
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        sort!(array)\n    else\n        sort!(array, by=reverse)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n\
    @assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5])\
    \ == Int64[5,4,3,2,1]\n@assert sort_array(Int64[1,2,3,4,5]) == Int64[5,4,3,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshgyclck.jl:26\nin expression starting at\
    \ /tmp/tmpshgyclck.jl:26\n"
  stdout: ''
  timestamp: 1659749505
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = sort_array(reverse(array))\n    end\n    return array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749507
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749508
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqfym712.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprqfym712.jl:25\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:26\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:28\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym712.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprqfym712.jl:29\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqfym712.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqfym71"
  timestamp: 1659749483
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbdf11ynw.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpbdf11ynw.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdf11ynw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdf11ynw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbdf11ynw.jl:34\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdf11ynw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdf11ynw.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749507
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    \n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(array))\n\
    \    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphtbwjv6_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphtbwjv6_.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtbwjv6_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtbwjv6_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphtbwjv6_.jl:37\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtbwjv6_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtbwjv6_.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749507
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for element in array\n        sum = sum + element\n\
    \    end\n    \n    if sum % 2 == 1\n        sort_array = array\n    else\n  \
    \      sort_array = reverse(array)\n    end\n    \n    return sort_array\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl3lmj51r.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpl3lmj51r.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3lmj51r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3lmj51r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3lmj51r.jl:35\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3lmj51r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3lmj51r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3lmj51r.jl:36\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3lmj51r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3lmj51r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3lmj51r.jl:37\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3lmj51r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3lmj51r.jl:31\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749507
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sort(array)\n    else\n        sort(array, by=(x->-x)); \n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00q10lpa.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp00q10lpa.jl:30\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00q10lpa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00q10lpa.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp00q10lpa.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00q10lpa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00q10lpa.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp00q10lpa.jl:32\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00q10lpa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00q10lpa.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp00q10lpa.jl:33\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00q10lpa.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00q10lpa.jl:27\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749507
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 !=\
    \ 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpdi201wo5.jl:28\n  Test threw
    exception\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:
    no method matching sort!(::Vector{Int64}; reverse=true)\n  Closest candidates
    are:\n    sort!(::Vector{Int64}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,
    <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236
    got unsupported keyword argument "reverse"\n    sort!(::AbstractVector; alg, lt,
    by, rev, order) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:707 got
    unsupported keyword argument "reverse"\n    sort!(::AbstractVector, !Matched::Integer,
    !Matched::Integer, !Matched::Base.Sort.InsertionSortAlg, !Matched::Base.Order.Ordering)
    at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:502 got unsupported keyword
    argument "reverse"\n    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:reverse,),
    Tuple{Bool}}, ::Function, ::Vector{Int64})\n     @ Base ./error.jl:163\n   [2]
    sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpdi201wo5.jl:19\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdi201wo5.jl:28 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdi201wo5.jl:27\ntest set: Test
    Failed at /tmp/tmpdi201wo5.jl:31\n  Expression: candidate([2, 4, 3, 0, 1, 5, 6])
    == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5, 6] == [6, 5, 4, 3,
    2, 1, 0]'''
  timestamp: 1659749509
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 != 0\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749509
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 == 1\n        sort_array = array\n    else\n        sort_array\
    \ = reverse(array)\n    end\n    \n    return sort_array\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjtxzltd7.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpjtxzltd7.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjtxzltd7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjtxzltd7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjtxzltd7.jl:35\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjtxzltd7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjtxzltd7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjtxzltd7.jl:36\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjtxzltd7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjtxzltd7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjtxzltd7.jl:37\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjtxzltd7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjtxzltd7.jl:31\ntest set: Test\
    \ Failed at /tmp/tm"
  timestamp: 1659749508
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum = sum + x\n    end\n\
    \    if sum % 2 == 1\n        sorted = sort(array)\n    else\n        sorted =\
    \ reverse(sort(array))\n    end\n    return sorted\nend\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsghe6zxm.jl:24\nin expression starting at\
    \ /tmp/tmpsghe6zxm.jl:24\n"
  stdout: ''
  timestamp: 1659749506
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array = sort_array(array[1...end-1])\
    \ + array[end] + sort_array(array[1:end-1])\n    else\n        array = sort_array(array[1...end-1])\
    \ + array[end]\n    end\n    return array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9xq2riol.jl:14\n\
    in expression starting at /tmp/tmp9xq2riol.jl:14\n"
  stdout: ''
  timestamp: 1659749506
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeiwxldpr.jl:23\nin expression starting at\
    \ /tmp/tmpeiwxldpr.jl:23\n"
  stdout: ''
  timestamp: 1659749507
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 !=\
    \ 0\n        array = reverse( array )\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcyeg5vei.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpcyeg5vei.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyeg5vei.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyeg5vei.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcyeg5vei.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyeg5vei.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyeg5vei.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcyeg5vei.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyeg5vei.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyeg5vei.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcyeg5vei.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcyeg5vei.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcyeg5ve"
  timestamp: 1659749508
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6gj_88ye.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6gj_88ye.jl:31\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:34\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88ye.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gj_88ye.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gj_88ye.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gj_88y"
  timestamp: 1659749499
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array\
    \ = array[end-1:end]\n    else\n        sort_array = array[end-1:end]\n    end\n\
    \    \n    return sort_array\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpma9d3flo.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpma9d3flo.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n \
    \  [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpma9d3flo.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpma9d3flo.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpma9d3flo.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpma9d3flo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0:1]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpma9d3flo.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpma9d3flo.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpma9d3flo.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpma9d3flo.jl:29\n  Expression: candidate([2, 4, 3, 0,\
    \ 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [1, 5] == [0, 1, 2, 3, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpma9d3flo.jl:29 [inlined]\n [3]\
    \ macro expansion\n "
  timestamp: 1659749509
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    sum = 0\n    for x in array\n        sum = sum + x\n    end\n\
    \    if sum % 2 != 0\n        array = sort(array)\n    else\n        array = reverse(sort(array))\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphychkiyz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmphychkiyz.jl:32\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 1, 2, 3, 4, 5,\
    \ 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphychkiyz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphychkiyz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphychkiyz.jl:35\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 14, 21, 23] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphychkiyz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphychkiyz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749508
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort(array)\n    else\n        sorted = reverse(sort(reverse(array)))\n\
    \    end\n    return sorted\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1dq2trx.jl:23\nin expression starting at\
    \ /tmp/tmpr1dq2trx.jl:23\n"
  stdout: ''
  timestamp: 1659749507
- exit_code: -1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749484
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        sorted = sort_array(array, reverse=true)\n    else\n        sorted\
    \ = array\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpzao_o7z5.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpzao_o7z5.jl:29\n  Test threw exception\n\
    \  Expression: candidate([5]) == [5]\n  MethodError: no method matching sort_array(::Vector{Int64};\
    \ reverse=true)\n  Closest candidates are:\n    sort_array(::Vector{Int64}) at\
    \ /tmp/tmpzao_o7z5.jl:11 got unsupported keyword argument \"reverse\"\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpzao_o7z5.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzao_o7z5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzao_o7z5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzao_o7z5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  MethodError: no method\
    \ matching sort_array(::Vector{Int64}; reverse=true)\n  Closest candidates are:\n\
    \    sort_array(::Vector{Int64}) at /tmp/tmpzao_o7z5.jl:11 got unsupported keyword\
    \ argument \"reverse\"\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpzao_o7z5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzao_o7z5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzao_o7z5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzao_o7z5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  MethodError: no\
    \ method matching sort_array(::Vector{Int64}; reverse=true)\n  Closest candidates\
    \ are:\n    sort_array(::Vector{Int64}) at /tmp/tmpzao_o7z5.jl:11 got unsupported\
    \ keyword argument \"reverse\"\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpzao_o7z5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  timestamp: 1659749510
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\n</code>\n\
    <|/ a |>\n<| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh87oggn.jl:21\nin expression starting at\
    \ /tmp/tmpuh87oggn.jl:21\n"
  stdout: ''
  timestamp: 1659749507
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    \n    sum = 0\n    \n    for x in array\n        sum += x\n    end\n    \n\
    \    if sum % 2 != 0\n        sorted = reverse(array)\n    else\n        sorted\
    \ = array\n    end\n    \n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8w09_hqh.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp8w09_hqh.jl:34\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w09_hqh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w09_hqh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8w09_hqh.jl:35\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w09_hqh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w09_hqh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8w09_hqh.jl:37\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w09_hqh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w09_hqh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8w09_hqh.jl:38\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w09_hqh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w09_hq"
  timestamp: 1659749508
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n          \
    \          \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n\
    \    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2 ==\
    \ 1\n        array = reverse(array)\n    end\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndpae2gb.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpndpae2gb.jl:28\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:29\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:31\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2gb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpndpae2gb.jl:32\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndpae2gb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndpae2g"
  timestamp: 1659749485
