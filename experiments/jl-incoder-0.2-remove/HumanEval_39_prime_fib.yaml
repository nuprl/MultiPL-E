name: HumanEval_39_prime_fib
language: jl
prompt: "\"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and\
  \ it's also prime.\n                        \"\"\"\nfunction prime_fib(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = prime_fib;\n\t@test(candidate(1)\
  \ == 2)\n\t@test(candidate(2) == 3)\n\t@test(candidate(3) == 5)\n\t@test(candidate(4)\
  \ == 13)\n\t@test(candidate(5) == 89)\n\t@test(candidate(6) == 233)\n\t@test(candidate(7)\
  \ == 1597)\n\t@test(candidate(8) == 28657)\n\t@test(candidate(9) == 514229)\n\t\
  @test(candidate(10) == 433494437)\nend\n"
completions: ["    if n < 2 \n        then return n\n    else \n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the factorial of a\
    \ given number", "    if n < 2 \n        return n\n    else if n == 2 \n     \
    \   return 3\n    else if n == 3 \n        return 5\n    else \n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype prime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates n-th number that is a Fibonacci number and it's also prime.", " \
    \   if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.0>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 || n == 1 \n        then return 1\n    else \n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else if n == 3 \n        return 5\n    else\
    \ if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n - 2)\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<text>\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.", "    if n == 0 \n        then return\
    \ 1\n    else if n == 1 \n        then return 2\n    else if n % 2 == 0 \n   \
    \     then return prime_fib(n - 1) + prime_fib(n - 2)\n    else return prime_fib(n\
    \ - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.3>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else if n == 3 \n        return 5\n    else\
    \ if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n - 2)\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.0>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n-1) + prime_fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 1 \n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 2\n    else \n        fib_n = prime_fib(n - 1)\n        prime_fib_n = prime_fib(n\
    \ - 2)\n        return fib_n + prime_fib_n\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<text>\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci ", "    if n < 2\n        return n\n    else if n == 2\n    \
    \    return 3\n    else if n == 3\n        return 5\n    else if n % 2 == 0\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n    else\n        return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend", "    if n == 0 || n == 1 \n        then return\
    \ 1\n    else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nprime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number.", "    if n < 2 \n        then return\
    \ n\n    else if n == 2 \n        then return 1\n    else if n == 3 \n       \
    \ then return 2\n    else if n % 2 == 0 \n        then return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n    else \n        then return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2 \n        return n\n    else if n == 2 \n\
    \        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n-1) + prime_fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<text>\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.\nThe function prime_fib returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nThe function prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    The function ", "    if n == 0 \n        then return 1\n    else if n == 1 \n\
    \        then return 2\n    else \n        fib_n = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n        if fib_n % 2 == 0 \n            then return fib_n\n        else\
    \ \n            return fib_n - 1\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 || n == 1 \n        then return\
    \ 1\n    else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nprime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns n-th number that is a Fibonacci number and it's also a prime number.",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    else return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nprime_fib(10)\n</cell>\n<code language=julia-1.3>", " \
    \   if n < 2 \n        return n\n    else \n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        return n\n    else if n ==\
    \ 2 \n        return 3\n    else if n == 3 \n        return 5\n    else \n   \
    \     return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then\
    \ return 1\n    else if n == 1 \n        then return 2\n    else \n        fib_n\
    \ = prime_fib(n - 1)\n        if fib_n % 2 == 0 \n            then return fib_n\n\
    \        else \n            fib_n2 = prime_fib(n - 2)\n            if fib_n %\
    \ 2 == 0 \n                then return fib_n2\n            else \n           \
    \     return fib_n + fib_n2\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(100)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(1000)\n</cell>\n<code language=julia-1.3>\nprime_fib(10000)\n</cell>\n\
    <code language=julia-1.3>\nprime_fib(100000)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(1000000)\n</cell>\n<code language=julia-1.3>\nprime_fib(10000000)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(100000000)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(1000000000)\n</cell>\n<code language=julia-1.3>\nprime_fib(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(1000000000000)\n</cell>\n<code language=julia-1.3>\nprime_fib(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nprime_fib(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10000000000000000)\n</cell>\n<code language=julia-1.3>\nprime_fib(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nprime_fib(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nprime_fib(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nprime_fib(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nprime_fib(", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    if n < 2 \n        then return n\n        else return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "  \
    \  if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.3>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 1 \n    else if n == 3 \n        return 1 \n    else\
    \ if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n - 2) \n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 3) \nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend", "    if n == 0 || n == 1\n        return n\n\
    \    else\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n<code language=julia-1.3>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2\n        error(\"\
    n must be greater than 1\")\n    elseif n == 2\n        return 2\n    else\n \
    \       return prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype prime_fib(10)\n</cell>\n<text>\nThe function\
    \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend", "    if n < 2\n        prime_fib(n) = n\n   \
    \ else\n        prime_fib(n) = prime_fib(n-1) + prime_fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else if n % 2 == 0 \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.0>", "    if n < 2 \n        return n\n    else if n == 2 \n\
    \        return 3\n    else if n == 3 \n        return 5\n    else \n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0\n        1\n\
    \    else\n        prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend", "    if\
    \ n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time prime_fib(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number. \nThe factorial of a number $n$ is defined as:", "    if n ==\
    \ 0 || n == 1 \n        return n\n    else \n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n        else return prime_fib(n - 1) + prime_fib(n - 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n<code language=julia-1.3>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.1>\nprime_fib(10)\n</cell>\n<code language=julia-1.1>",
  "    if n < 2 \n        then return 1\n    else if n == 2 \n        then return\
    \ 2\n    else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 2\n    else \n        fib_n_1 = prime_fib(n - 1)\n        fib_n_2 = prime_fib(n\
    \ - 2)\n        if fib_n_1 + fib_n_2 == n \n            then return n\n      \
    \  else \n            return fib_n_1 + fib_n_2\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0\n        0\n\
    \    else\n        if n == 1\n            1\n        else\n            prime_fib(n-1)\
    \ + prime_fib(n-2)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n        else return prime_fib(n-1) + prime_fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return 1 \n    else if n == 1 \n        return 2 \n   \
    \ else \n        return prime_fib(n - 1) + prime_fib(n - 2) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time prime_fib(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns n-th number that is\
    \ a Fibonacci number and it's also prime.\nHint: Use recursion.", "    if n ==\
    \ 0 then return 1\n    if n == 1 then return 2\n    else if n % 2 == 0 then return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n    else return prime_fib(n / 2) + prime_fib(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    if n == 0\n        0\n    else\n        if n == 1\n\
    \            1\n        else\n            prime_fib(n - 1) + prime_fib(n - 2)\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    if n == 0 || n == 1\n        return n\n    else\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 0 || n == 1\n        return n\n    else\n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns n-th\
    \ number that is a Fibonacci number and it's also prime.\nHint: Use recursion.",
  "    if n == 0 || n == 1 \n        then return 1\n    else \n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.0>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else if n == 3 \n        return 5\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<text>\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.", "    if n == 0 \n        0\n  \
    \  elseif n == 1 \n        1\n    else\n        prime_fib(n-1) + prime_fib(n-2)\n\
    \    end\nend", "    if n == 0\n        1\n    else\n        prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<text>\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.", "    if n == 0 || n == 1 \n   \
    \     return n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0\n        0\n    else\n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return 1\n        else return prime_fib(n - 1) + prime_fib(n - 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else if n == 3 \n        return 5\n    else\
    \ if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n - 2)\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>\nprime_fib(20)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(30)\n</cell>\n<code language=julia-1.5>\nprime_fib(40)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(50)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(60)\n</cell>\n<code language=julia-1.5>\nprime_fib(70)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(80)\n</cell>\n<code language=julia-1.5>\nprime_fib(90)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(110)\n</cell>\n<code language=julia-1.5>\nprime_fib(120)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(130)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(140)\n</cell>\n<code language=julia-1.5>\nprime_fib(150)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(160)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(170)\n</cell>\n<code language=julia-1.5>\nprime_fib(180)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(190)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(200)\n</cell>\n<code language=julia-1.5>\nprime_fib(210)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(220)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(230)\n</cell>\n<code language=julia-1.5>\nprime_fib(240)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(250)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(260)\n</cell>\n<code language=julia-1.5>\nprime_fib(27", "    if n <\
    \ 2 \n        return n\n    else if n == 2 \n        return 3\n    else if n ==\
    \ 3 \n        return 5\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2\n        return n\n    else if n == 2\n\
    \        return 3\n    else if n == 3\n        return 5\n    else\n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.4>", "    if n < 2\n        prime_fib\
    \ = 1\n    else\n        prime_fib = prime_fib(n-1) + prime_fib(n-2)\n    end\n\
    \    return prime_fib\nend", "    if n < 2 \n        return n\n    else \n   \
    \     return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "  \
    \  if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else if n % 2 == 0 \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    if n < 2 \n        return n\n    else if n == 2 \n\
    \        return 1 \n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.3>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "  \
    \  if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        0\n\
    \    else\n        if n == 1 \n            1\n        else\n            if n %\
    \ 2 == 0 \n                prime_fib(n - 1) + prime_fib(n - 2)\n            else\n\
    \                prime_fib(n - 1) + prime_fib(n - 3)\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000000000000000000)\n\
    </cell>\n", "    if n < 2 \n        return n\n    else if n == 2 \n        return\
    \ 3\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 || n == 1 \n        then return 1\n    else \n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code language=julia-1.0>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else if n % 2 == 0 \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 0 \n        then return 1\n    else if n\
    \ == 1 \n        then return 2\n    else \n        fib_n = prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n        return fib_n\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        0\n    elseif n\
    \ == 1 \n        1\n    else\n        prime_fib(n - 1) + prime_fib(n - 2)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        return\
    \ n\n    else if n == 2 \n        return 3\n    else if n == 3 \n        return\
    \ 5\n    else if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code language=julia-1.0>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 1 \n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        return\
    \ n\n    else if n == 2 \n        return 1 \n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 1\n\
    \    else if n == 1 \n        then return 2\n    else \n        fib_n = prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n        if fib_n % 2 == 0 \n            then return\
    \ fib_n\n        else return fib_n + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n        else return prime_fib(n - 1) + prime_fib(n - 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        0\n    elseif n == 1 \n        1\n    elseif n % 2 == 0\
    \ \n        prime_fib(n - 1) + prime_fib(n - 2)\n    else\n        prime_fib(n\
    \ - 1) + prime_fib(n - 3)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.4>", "    if n < 2 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        0\n    else\n        if n == 1\n            1\n        else\n\
    \            if n % 2 == 0\n                prime_fib(n - 1) + prime_fib(n - 2)\n\
    \            else\n                prime_fib(n - 1) + prime_fib(n - 3)\n     \
    \   end\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0 || n == 1 \n\
    \        then return 1\n    else \n        prime_fib(n - 1) + prime_fib(n - 2)\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1\n        return n\n    else\n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 then return 1\n    if n == 1 then return 2\n    else if n % 2 ==\
    \ 0 then return prime_fib(n / 2)\n    else return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        0\n    else\n        if n\
    \ == 1 \n            1\n        else\n            prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.3>", "    if n == 0\n        1\n    else\n   \
    \     prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        0\n\
    \    else if n == 1 \n        1\n    else \n        prime_fib(n-1) + prime_fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2\n        prime_fib = 1\n    else\n        prime_fib = (prime_fib(n\
    \ - 1) + prime_fib(n - 2)) % n\n    end\n    return prime_fib\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return 1\n        else if n == 2 \n            then\
    \ return 2\n            else return prime_fib(n - 1) + prime_fib(n - 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time prime_fib(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number.", "  \
    \  if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2 \n        return n\n    else if n == 2 \n\
    \        return 3\n    else if n == 3 \n        return 5\n    else \n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then\
    \ return 1\n    else if n == 1 \n        then return 2\n    else \n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        0\n    else\n        if n == 1\n            1\n        else\n\
    \            prime_fib(n - 1) + prime_fib(n - 2)\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.4>", "    if n < 2\n        prime_fib = 1\n  \
    \  else\n        prime_fib = prime_fib(n-1) + prime_fib(n-2)\n    end\n    return\
    \ prime_fib\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        return n\n    else if n ==\
    \ 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "    if n == 0\n\
    \        0\n    else\n        if n == 1\n            1\n        else\n       \
    \     if prime_fib(n - 2) == true\n                prime_fib(n - 2)\n        \
    \    else\n                prime_fib(n - 1) + prime_fib(n - 2)\n            end\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 1 \n    else \n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        return n\n    else if n ==\
    \ 2 \n        return 3\n    else if n == 3 \n        return 5\n    else if n %\
    \ 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n - 2)\n    else \n   \
    \     return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        0\n\
    \    else if n == 1 \n        1\n    else \n        prime_fib(n-1) + prime_fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0\n        0\n    else\n   \
    \     if n == 1\n            1\n        else\n            if n % 2 == 0\n    \
    \            prime_fib(n - 1) + prime_fib(n - 2)\n            else\n         \
    \       prime_fib(n - 1) + prime_fib(n - 3)\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number.", "    if n == 0 || n == 1 \n        return n\n    else \n       \
    \ return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns n-th\
    \ number that is a Fibonacci number and it's also a prime number.", "    if n\
    \ == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return n\n \
    \   else if n == 2 \n        then return 1\n    else if n == 3 \n        then\
    \ return 2\n    else \n        fib_n = prime_fib(n - 1) + prime_fib(n - 2)\n \
    \       if fib_n % 2 == 0 \n            then return fib_n\n        else \n   \
    \         prime_fib(n - 1)\n        end\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n        then\
    \ return 1\n        else return prime_fib(n - 1) + prime_fib(n - 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return prime_fib(n / 2) \n        else\
    \ return prime_fib(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n == 0\n        0\n    else\n        if n == 1\n            1\n        else\n\
    \            prime_fib(n - 1) + prime_fib(n - 2)\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 then return 1\n    if n == 1 then return 2\n    if n % 2 == 0 then\
    \ return prime_fib(n / 2)\n    else return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n-1) + prime_fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        then return 1\n    else if n == 1 \n        then return\
    \ 2\n    else \n        fib_nth_prime = prime_fib(n - 1)\n        fib_nth_prime\
    \ + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2\n        return n\n    else if n == 2\n\
    \        return 3\n    else\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\
    end\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns n-th number that is a Fibonacci number and\
    \ it's also prime.\nHint: Use a while loop.\nHint: Use a recursive function.\n\
    Hint: Use a for loop.\nHint: Use a while loop and a recursive function.\nHint:\
    \ Use a for loop and a recursive function.\nHint: Use a while loop and a recursive\
    \ function.\nHint: Use a for loop and a recursive function.\nHint: Use a while\
    \ loop and a recursive function.\nHint: Use a for loop and a recursive function.\n\
    Hint: Use a while loop and a recursive function.\nHint: Use a for loop and a recursive\
    \ function.\nHint: Use a while loop and a recursive function.\nHint: Use a for\
    \ loop and a recursive function.\nHint: Use a while loop and a recursive function.\n\
    Hint: Use a for loop and a recursive function.\nHint: Use a while loop and a recursive\
    \ function.\nHint: Use a for loop and a recursive function.\nHint: Use a while\
    \ loop and a recursive function.\nHint: Use a for loop and a recursive function.\n\
    Hint: Use a while loop and a recursive function.\nHint: Use a for loop and a recursive\
    \ function.\nHint: Use a while loop and a recursive function.\nHint: Use a for\
    \ loop and a recursive function.\nHint: Use a while loop and a recursive function.\n\
    Hint: Use a for loop and a recursive function.\nHint: Use a while loop and a recursive\
    \ function.\nHint: Use a for loop and a recursive function.\nHint: Use a while\
    \ loop and a recursive function.\nHint: Use a for loop and a recursive function.\n\
    Hint: Use a while loop and a recursive function.\nHint: Use a for loop and a recursive\
    \ function.\nHint: Use a while loop and a recursive function.\nHint: Use a for\
    \ loop and a recursive function.\nHint: Use a while loop and a recursive function.\n\
    Hint: Use a for loop and a recursive function.\nHint: Use a while loop and a recursive\
    \ function.\nHint: Use a for loop and a recursive function.\nHint: Use a while\
    \ loop and a recursive function.\nHint: Use a for loop and a recursive function.\n\
    Hint: Use a while loop and a recursive function.\nHint: Use a ", "    if n < 2\
    \ \n        return n\n    else if n == 2 \n        return 3\n    else \n     \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.0>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should return true or false depending on whether the number is prime or not.\
    \ \nThe function should take one argument, the number to check. \nThe function\
    \ should return true if the number is prime and false otherwise. \nThe function\
    \ should use recursion to solve this problem.", "    if n < 2\n        prime_fib\
    \ = 1\n    else\n        prime_fib = prime_fib(n-1) + prime_fib(n-2)\n    end\n\
    \    return prime_fib\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n\
    </cell>\n<text>\nThe function prime_fib returns n-th number that is a Fibonacci\
    \ number and it's also prime.", "    if n == 0\n        1\n    else\n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        then return 1\n    else if prime_fib(n - 2) == 1 \n        then return\
    \ n\n    else \n        return prime_fib(n - 2) + prime_fib(n - 1)\nend\n</cell>\n\
    <code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_fib(100)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype prime_fib(1000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ prime_fib(10000)\n</cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(100000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype prime_fib(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_fib(100000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype prime_fib(1000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ prime_fib(10000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(100000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype prime_fib(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@", "    if n < 2\n        return n\n    else\
    \ if n == 2\n        return 3\n    else\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.3>", "    if n == 0 \n        0\n    elseif n == 1 \n     \
    \   1\n    elseif n % 2 == 0 \n        prime_fib(n - 1) + prime_fib(n - 2)\n \
    \   else\n        prime_fib(n - 1) + prime_fib(n - 3)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that calculates the factorial of a given number. \nThe factorial of\
    \ a number $n$ is defined as:", "    if n == 0 || n == 1 \n        return n\n\
    \    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.4>", "    if n == 0 || n == 1\n\
    \        return n\n    else\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    if n < 2\n        prime_fib(n) = n\n    else\n  \
    \      prime_fib(n) = prime_fib(n-1) + prime_fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time prime_fib(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that calculates n-th number that is a Fibonacci number and it's also\
    \ prime.", "    if n == 0 \n        then return 1\n    else if n == 1 \n     \
    \   then return 2\n    else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else if n % 2 == 0 \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2\n        1\n    else\n        prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n    end\nend", "    if n < 2 \n        then return\
    \ 1\n        else return prime_fib(n-1) + prime_fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_fib(10)\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend", "    if n == 0 \n        0\n    else if n ==\
    \ 1 \n        1\n    else \n        prime_fib(n-1) + prime_fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(2)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(3)\n</cell>\n<code language=julia-1.5>\nprime_fib(4)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(5)\n</cell>\n<code language=julia-1.5>\nprime_fib(6)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(7)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(8)\n</cell>\n<code language=julia-1.5>\nprime_fib(9)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>\nprime_fib(11)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(12)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(13)\n</cell>\n<code language=julia-1.5>\nprime_fib(14)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(15)\n</cell>\n<code language=julia-1.5>\nprime_fib(16)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(17)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(18)\n</cell>\n<code language=julia-1.5>\nprime_fib(19)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(20)\n</cell>\n<code language=julia-1.5>\nprime_fib(21)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(22)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(23)\n</cell>\n<code language=julia-1.5>\nprime_fib(24)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(25)\n</cell>\n<code language=julia-1.5>\nprime_fib(26)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(27)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(28)\n</cell>\n<code language=julia-1.5>\nprime_fib(29)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(30)\n</cell>\n<code language=julia-1.5", "  \
    \  if n < 2 \n        then return 1\n        else return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:\n$$n! = n  (n-1)  (n-2)  ...\
    \  2  1  $$\nWrite a recursive function that calculates factorial of a given number.",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 1 \n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "    if n < 2 \n\
    \        return n\n    else if n == 2 \n        return 3\n    else \n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend", "    if n == 0 then return 1\n    if n == 1 then return 2\n    else\
    \ if n % 2 == 0 then return prime_fib(n / 2)\n    else return prime_fib(3 * n\
    \ + 1) + prime_fib(3 * n - 1)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.3>\nprime_fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that calculates factorial of a number.", "    if n < 2 \n        return\
    \ n\n    else if n == 2 \n        return 1 \n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 1\n\
    \    else if n == 1 \n        then return 2\n    else \n        prime_fib(n -\
    \ 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return n\n \
    \   else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(10)\n</cell>\n<code language=julia-1.5>\n@time prime_fib(100)\n\
    </cell>\n<code language=julia-1.5>\n@time prime_fib(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(10000)\n</cell>\n<code language=julia-1.5>\n@time prime_fib(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time prime_fib(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(10000000)\n</cell>\n<code language=julia-1.5>\n@time prime_fib(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time prime_fib(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time prime_fib(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(100000000000)\n</cell>\n<code language=julia-1.5>\n@time prime_fib(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time prime_fib(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time prime_fib(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time prime_fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time prime_fib(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time prime_fib(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time prime_fib(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time prime_fib(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ prime_fib(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ prime_fib(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ prime_fib(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ prime_fib(1000000000000000000000000)\n</cell>\n<code language=julia-", "   \
    \ if n < 2\n        return n\n    else\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        return n\n    else if n ==\
    \ 2 \n        return 3\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0\n        0\n    else\n        if n == 1\n\
    \            1\n        else\n            if prime_fib(n - 2) == prime_fib(n -\
    \ 1)\n                prime_fib(n - 2)\n            else\n                prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n            end\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nprime_fib(10)\n</cell>\n<code language=julia-1.4>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n\
    \    else\n        prime_fib(n - 1) + prime_fib(n - 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.1>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.1>", "    if n == 0 \n        then return 1\n\
    \    else if n == 1 \n        then return 2\n    else \n        fib_n = prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n        if fib_n % 2 == 0 \n            then return\
    \ fib_n\n        else return fib_n + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.0>", "    if n < 2 \n        return\
    \ n\n    else if n == 2 \n        return 3\n    else if n == 3 \n        return\
    \ 5\n    else if n % 2 == 0 \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n    else \n        return prime_fib(n - 1) + prime_fib(n - 3)\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return n\n    else if n == 2 \n        return 3\n    else\
    \ if n == 3 \n        return 5\n    else \n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.0>\nprime_fib(10)\n</cell>\n<text>\n\
    The function prime_fib returns the n-th number that is a Fibonacci number and\
    \ it's also prime.", "    if n < 2 \n        then return n\n    else \n      \
    \  prime_fib(n - 1) + prime_fib(n - 2)\nend", "    if n == 0 \n        then return\
    \ 1\n    else if n == 1 \n        then return 2\n    else \n        fib_n = prime_fib(n-1)\
    \ + prime_fib(n-2)\n        if fib_n % 2 == 0 \n            then return fib_n\n\
    \            else return fib_n-1\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend", "  \
    \  if n == 0 then return 1\n    if n == 1 then return 1\n    if n % 2 == 0 then\
    \ return prime_fib(n / 2)\n    else return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\n</cell>\n<code language=julia-1.3>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.3>", "    if n == 0 || n == 1 \n        then return 1\n\
    \    else \n        prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.0>", "    if n == 0\n        0\n\
    \    elseif n == 1\n        1\n    else\n        prime_fib(n-1) + prime_fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<text>\nThe function prime_fib returns n-th number that\
    \ is a Fibonacci number and it's also prime.", "    if n == 0 || n == 1\n    \
    \    return n\n    else\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        return n\n    else \n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        return n\n    else\
    \ if n == 2 \n        return 1 \n    else \n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\nprime_fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the n-th number that is a Fibonacci\
    \ number and it's also prime.", "    if n == 0 \n        then return 1\n    else\
    \ if n == 1 \n        then return 2\n    else \n        fib_nth_number = prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n        if fib_nth_number == n \n            then return\
    \ n\n        else return fib_nth_number\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then\
    \ return 1\n    else if n == 1 \n        then return 2\n    else \n        fib_n\
    \ = prime_fib(n - 1) + prime_fib(n - 2)\n        if fib_n == n \n            then\
    \ return n\n        else return fib_n\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>\nprime_fib(100)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(1000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(1000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nprime_fib(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nprime_fib(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nprime_fib(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nprime_fib(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10000000000000000000000000)\n</cell>\n<code language=", "    if n ==\
    \ 0 \n        0\n    else if n == 1 \n        1\n    else \n        prime_fib(n-1)\
    \ + prime_fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\nprime_fib(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return prime_fib(n - 1) + prime_fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_fib(10)\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
