name: HumanEval_94_skjkasdkd
language: jl
prompt: "\"\"\"You are given a list of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n             \
  \               \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x == largestPrime\n            sum\
    \ += largestPrime\n        else\n            sum += findDigit(x, largestPrime)\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    largest = findmax(lst)\n\
    \    sum = 0\n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given number. \nThe function should\
    \ take one argument, an integer $n$, and return an integer.", "    largest = 0\n\
    \    largestPrime = 0\n    for x in lst\n        if isPrime(x)\n            largestPrime\
    \ = x\n        end\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largestPrime + sum(map(Int64, lst))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise\
    \ 2", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n   \
    \ largestPrimeDigits = findDigits(largestPrime)\n    largestPrimeSum = sum(largestPrimeDigits)\n\
    \    return largestPrimeSum\nend", "    largest = Int.(lst[1])\n    largest =\
    \ largest * largest\n    largest = largest * largest\n    largest = largest *\
    \ largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    lar", "    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    sum = 0\n    for x in lst\n        if x % largestPrime\
    \ == 0\n            sum += largestPrime\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype skjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one argument, an\
    \ integer $n$, and return an integer $k$, where $k$ is the number of prime numbers\
    \ less than $n$.", "    largest = Int.(max(lst))\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for el in lst\n        if el == largestPrime\n            sum\
    \ += el\n        end\n    end\n    return sum\nend", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for n in lst\n        if\
    \ n <= largestPrime\n            sum += n\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of its digits.", "    largest = Int.(max(lst))\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if isPrime(x)\n            sum += x\n\
    \        end\n    end\n    return sum + largestPrime\nend", "    largest = maximum(lst)\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n\
    \    largest = largest/10\n    largest = largest*10\n    largest = largest+largest\n",
  "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend", "  \
    \  largest = 0\n    for x in lst\n        if isPrime(x)\n            largest =\
    \ largest+x\n        end\n    end\n    return largest\nend", "    largest = findmax(lst)\n\
    \    largest.digitsum\nend", "    largest = Int64(0)\n    for x in lst\n     \
    \   if isPrime(x)\n            largest = maximum(largest, x)\n        end\n  \
    \  end\n    return largest\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not the right\
    \ way to solve the problem. `isPrime` should return `true` or `false`, not `true`\
    \ or `false` as `Int64`.\n<|/ c |>\n<| c |>\nI agree, `isPrime` should return\
    \ `true` or `false`, not `true` or `false` as `Int64`. But I wanted to keep it\
    \ close to the OP's code. I'll edit my answer to reflect that.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to reflect your suggestion.\n<|/ c |>\n<| a tags=primes,julia |>\n<code>", " \
    \   largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n\
    \    for x in lst\n        if x == largestPrime\n            sum += largestPrime\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that finds the largest prime factor of a\
    \ given integer. \nThe function should return the largest prime factor of the\
    \ integer or 0 if the integer is prime.", "    largest = findmax(lst)\n    sum\
    \ = 0\n    for x in lst\n        if x % largest == 0\n            sum += x\n \
    \       end\n    end\n    return sum\nend", "    largest = 0\n    largestPrime\
    \ = 0\n    for x in lst\n        if isPrime(x)\n            largestPrime = x\n\
    \        else\n            if x > largest\n                largest = x\n     \
    \       end\n        end\n    end\n    return largestPrime + sum(map(Int64, lst))\n\
    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nThanks for your answer. Your\
    \ code works but is too slow for my purposes. I edited my question to include\
    \ my code which I believe is much faster.\n<|/ c |>\n<| c |>\nYour code does not\
    \ work. `isPrime(10)` returns `false`, but `isPrime(11)` returns `true`. So your\
    \ function returns `11` instead of `10`.\n<|/ c |>\n<| c |>\nI fixed the code\
    \ in the answer, thanks for pointing that out. Now it works as expected.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a faster version. Hope it helps.\n\
    <|/ c |>\n<| a tags=julia,primes |>\n<code>", "    largest = Int.max(lst)\n  \
    \  largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n        if\
    \ x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given integer $n$. \nThe function should take one argument,\
    \ the $n$. \nThe function should return one integer, the number of prime numbers\
    \ less than $n$.", "    largest = Int.(max(lst))\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for el in lst\n        if el == largestPrime\n            sum\
    \ += el\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd(",
  "    \n    largest = minimum(lst)\n    largest = largest*largest\n    largest =\
    \ largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    ", "    largest = findmax(lst)\n    sum =\
    \ 0\n    for x in lst\n        if x == largest\n            sum += x\n       \
    \ end\n    end\n    return sum\nend", "    \n    largest = Int.(lst[1])\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for i in lst\n        if i%largestPrime == 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of all even\
    \ numbers in a given list.", "    largest = findmax(lst)\n    sum = 0\n    for\
    \ x in lst\n        if x % largest == 0\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    largest\
    \ = findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest == 0\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the given list.", "    largest = maximum(lst)\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    return sum(map(Int64,\
    \ digits(largest)))\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = maximum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    largest = Int.max(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    largest = 0\n    largestPrime = 0\n    for i in lst\n\
    \        if isPrime(i)\n            largestPrime = i\n        else\n         \
    \   if largest < largestPrime\n                largest = largestPrime\n      \
    \      end\n        end\n    end\n    return largest\nend", "    largest = minimum(lst)\n\
    \    largest = largest * largest\n    largest = largest/largest\n    largest =\
    \ largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest = largest/largest\n    largest = largest/largest\n    largest = largest/largest\n\
    \    largest", "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n  \
    \  largestPrimeIndex = Int64(0)\n    largestPrimeValue = Int64(0)\n    \n    for\
    \ i = 1:length(lst)\n        \n        if isPrime(lst[i])\n            \n    \
    \        if lst[i] > largestPrimeValue\n                largestPrimeValue = lst[i]\n\
    \                largestPrimeIndex = i\n            end\n        end\n    end\n\
    \    \n    largestPrimeValue += largestPrimeIndex\n    \n    return largestPrimeValue\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given integer $n$. \nThe function should work for $n \\in \\mathbb{N}$.",
  "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given integer $n$. \nThe function should take one integer $n$ as\
    \ an argument. \nThe function should return $n$ if $n$ is a prime number, otherwise\
    \ it should return the number of prime numbers less than $n$.", "    largest =\
    \ findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest == 0\n \
    \           sum += x\n        end\n    end\n    return sum\nend", "    largest\
    \ = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n    for\
    \ i in lst\n        if i==largest\n            continue\n        if i==largestPrime\n\
    \            sum += i\n        else\n            sum += largestPrime\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one argument, n,\
    \ which represents the number whose prime numbers are to be counted.", "    largest\
    \ = findmax(lst)\n    sum = 0\n    for x in lst\n        if x == largest\n   \
    \         sum += largest\n        else\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n    for n in\
    \ lst\n        if primes[largestPrime] == n\n            sum += n\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small lists. But when I try it with\
    \ a list with more than 1000 elements, it takes too long to compute. Do you know\
    \ any way to make it faster?\n<|/ c |>\n<| c |>\nI added a solution that should\
    \ work for larger lists.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works perfectly for small lists. But when I try it with a list with more than\
    \ 1000 elements, it takes too long to compute. Do you know any way to make it\
    \ faster?\n<|/ c |>\n<| c |>\nI added a solution that should work for larger lists.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works perfectly for small\
    \ lists. But when I try it with a list with more than 1000 elements, it takes\
    \ too long to compute. Do you know any way to make it faster?\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI wrote a solution that is O(n) time complexity and O(1) space\
    \ complexity. \n<code>", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for x in lst\n        if x % largestPrime == 0\n    \
    \        largestSum += x % largestPrime\n        end\n    end\n    return largestSum\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I didn't know that `primes`\
    \ was a function in Julia. I'll try this out and see if it works.\n<|/ c |>\n\
    <| c |>\nI ran your code, and it didn't work. `largestPrime` was still `0`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the code I used to test it.\n\
    <|/ c |>\n<| c |>\nI ran the code you added and it worked! Thank you so much!\n\
    <|/ c |>\n<| c |>\nI ran the code you added and it worked! Thank you so much!\n\
    <|/ c |>\n<| a |>\nI wrote a Julia package that does this for you:\nhttps://github.com/jrm/primes\n\
    <code>\njulia> using Primes", "    largest = Int.(lst[1])\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    lar", "    largest = maximum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x == largestPrime\n            sum\
    \ += x\n        end\n    end\n    return sum\nend", "    largest = Int.(max(lst))\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for i in lst\n        if\
    \ i%largestPrime == 0\n            sum += i%largestPrime\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your code works but it is very slow. I am looking for a faster solution.\n<|/\
    \ c |>\n<| c |>\nI tested it on a vector of length 10^8 and it took about 5 seconds.\
    \ I guess it depends on the size of the vector and your computer. Maybe you can\
    \ try it on a smaller vector and see if it works faster.\n<|/ c |>\n<| c |>\n\
    I tested it on a vector of length 10^6 and it took about 3 seconds. I guess it\
    \ depends on the size of the vector and your computer. Maybe you can try it on\
    \ a smaller vector and see if it works faster.\n<|/ c |>\n<| c |>\nI tested it\
    \ on a vector of length 10^7 and it took about 2 seconds. I guess it depends on\
    \ the size of the vector and your computer. Maybe you can try it on a smaller\
    \ vector and see if it works faster.\n<|/ c |>\n<| c |>\nI tested it on a vector\
    \ of length 10^8 and it took about 2 seconds. I guess it depends on the size of\
    \ the vector and your computer. Maybe you can try it on a smaller vector and see\
    \ if it works faster.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a solution that is\
    \ O(n) but uses more memory. \n<code>", "    largest = Int.max((x -> x)(lst))\n\
    \    sum = 0\n    for x in lst\n        if x == largest\n            sum += largest\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis code does not work. `largest` should\
    \ be `Int` not `Int64`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ edited the answer to fix it.\n<|/ c |>\n<| a tags=julia |>\nI wrote a Julia\
    \ package that does this for you. \nhttps://github.com/jrwlk/primesum\n<code>\n\
    julia> using primesum", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n  \
    \  sum = 0\n    for el in lst\n        if el == largestPrime\n            sum\
    \ += el\n        end\n    end\n    return sum\nend", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n      \
    \  if x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    largestPrimeDigits = findDigits(largestPrime)\n    largestPrimeDigitSum =\
    \ sum(largestPrimeDigits)\n    return largestPrimeDigitSum\nend", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits =\
    \ digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n \
    \   \n    return largestPrimeDigitSum + sum(lst)\nend", "    largest = minimum(lst)\n\
    \    largestPrime = primesOf(largest)[1]\n    sum = 0\n    for x in lst\n    \
    \    if x % largestPrime == 0\n            sum += x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    largest =\
    \ maximum(lst)\n    largestPrime = findPrime(largest)\n    largestPrimeDigits\
    \ = digits(largestPrime)\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the sum of its digits. \nFor example, if the input is 123, the function\
    \ should return 1 + 2 + 3 = 6.", "    largest = Int.(max(lst))\n    largestPrime\
    \ = Int.(primeFactors(largest)[1])\n    sum = 0\n    for i in lst\n        if\
    \ isPrime(i)\n            sum += i\n        end\n    end\n    return sum + largestPrime\n\
    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n`isPrime` doesn't work for\
    \ `Int64`\n<|/ c |>\n<| c |>\n`isPrime` works for `Int64` just fine. `isPrime(Int64(2))`\
    \ returns `true`.\n<|/ c |>\n<| c |>\n`isPrime(Int64(2))` returns `false`\n<|/\
    \ c |>\n<| c |>\n`isPrime(Int64(2))` returns `true` on my machine.\n<|/ c |>\n\
    <| c |>\n`isPrime(Int64(2))` returns `true` on my machine.\n<|/ c |>\n<| a tags=julia,primes\
    \ |>\n<code>", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    largestPrimeSum = sum(map(x -> x % largestPrime, lst))\n    return largestPrimeSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,", "    largest = Int.(minimum(lst))\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for x in lst\n        if\
    \ x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\n@time skjkasdkd(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of all even numbers in that list.", "    largest = findmax(lst)\n  \
    \  sum = 0\n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.", "    largest = 0\n    largest = lst[1]\n    for i in lst[2:end]\n\
    \        if largest*i > i\n            largest = i\n        end\n    end\n   \
    \ return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take in a single integer\
    \ and return the number of prime numbers less than it.", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for x in lst\n        if\
    \ x % largestPrime == 0\n            sum += largestPrime\n        end\n    end\n\
    \    return sum\nend", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([",
  "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n\
    \    for i in lst\n        if i==largest\n            continue\n        if i==largestPrime\n\
    \            sum += largestPrime\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of its digits.\nThe function should ignore any non-digit characters.",
  "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum\
    \ = 0\n    for el in lst\n        if el == largest\n            largestSum +=\
    \ largestPrime\n        else\n            largestPrime = primes[el]\n        \
    \    largestSum += largestPrime\n        end\n    end\n    return largestSum\n\
    end", "    largest = 0\n    largestPrime = 0\n    for i in lst\n        if isPrime(i)\n\
    \            largestPrime = i\n            largest = i\n        else\n       \
    \     if largestPrime > i\n                largestPrime = i\n                largest\
    \ = i\n            end\n        end\n    end\n    return largestPrime + largest\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    largest = maximum(lst)\n\
    \    largestPrime = findPrime(largest)\n    largestPrimeDigits = digits(largestPrime)\n\
    \    largestPrimeSum = sum(largestPrimeDigits)\n    return largestPrimeSum\nend\n\
    </cell>\n<code language=julia-1.3>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given number.", "    largest = findmax(lst)\n    sum = 0\n    for\
    \ x in lst\n        if x % largest == 0\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nskjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = 0\n    for i in lst\n        if isPrime(i)\n\
    \            largest = i\n        end\n    end\n    return sum(map(x -> mod(x,largest),\
    \ lst))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27845604)\n\
    <|/ c |>\n<| c |>\nThe question was \"How to find the largest prime number in\
    \ O(n) time?\" The answer was \"You can't\". The answer was \"You can't\". The\
    \ answer was \"You can't\". The answer was \"You can't\". The answer was \"You\
    \ can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The answer was \"You can't\". The answer was \"You can't\"\
    . The answer was \"You can't\". The answer was \"You can't\". The answer was \"\
    You can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The answer was \"You can't\". The answer was \"You can't\"\
    . The answer was \"You can't\". The answer was \"You can't\". The answer was \"\
    You can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The answer was \"You can't\". The answer was \"You can't\"\
    . The answer was \"You can't\". The answer was \"You can't\". The answer was \"\
    You can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The answer was \"You can't\". The answer was \"You can't\"\
    . The answer was \"You can't\". The answer was \"You can't\". The answer was \"\
    You can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The answer was \"You can't\". The answer was \"You can't\"\
    . The answer was \"You can't\". The answer was \"You can't\". The answer was \"\
    You can't\". The answer was \"You can't\". The answer was \"You can't\". The answer\
    \ was \"You can't\". The ", "    largest = minimum(lst)\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest", "    largest = findmax(lst)\n  \
    \  sum = 0\n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime numbers less than a given number.", "    largest\
    \ = Int.(max(lst))\n    largestPrime = findPrime(largest)\n    sum = 0\n    for\
    \ x in lst\n        if x % largestPrime == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    largestPrimeDigits = findDigits(largestPrime)\n    largestPrimeSum = sum(largestPrimeDigits)\n\
    \    \n    return largestPrimeSum\nend", "    largest = Int.(max(lst))\n    largestPrime\
    \ = findPrime(largest)\n    sum = 0\n    for x in lst\n        if x == largestPrime\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis code does not work. `findPrime` returns `Int64`\
    \ but `largestPrime` returns `Int`.\n<|/ c |>\n<| c |>\nI edited the answer to\
    \ fix the issue you mentioned.\n<|/ c |>\n<| c |>\nThis code does not work. `findPrime`\
    \ returns `Int64` but `largestPrime` returns `Int`.\n<|/ c |>\n<| c |>\nI edited\
    \ the answer to fix the issue you mentioned.\n<|/ c |>\n<| c |>\nThis code does\
    \ not work. `findPrime` returns `Int64` but `largestPrime` returns `Int`.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "    largest = minimum(lst)\n    largest =\
    \ largest * largest\n    largest = largest * largest\n    largest = largest *\
    \ largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest", "    largest = 0\n    for x in lst\n    \
    \    if isPrime(x)\n            largest = largest+x\n        end\n    end\n  \
    \  return largest\nend", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for el in lst\n        if el == largest\n            sum +=\
    \ largestPrime\n        else\n            sum += el % largestPrime\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x == largest\n            sum += largestPrime\n\
    \        else\n            sum += findPrime(x)\n        end\n    end\n    return\
    \ sum\nend", "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n    \
    \    if x % largest == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the correct solution.\
    \ `findmax` will return the largest number in the list, but `largest` will contain\
    \ the largest number in the list after `findmax` has been called. So `largest`\
    \ will never be equal to `findmax(lst)`.\n<|/ c |>\n<| c |>\nYou are right, I\
    \ missed that. Thanks for pointing it out. I've edited my answer.\n<|/ c |>\n\
    <| a tags=julia,primes |>\n<code>", "    largest = minimum(lst)\n    largestPrime\
    \ = findPrime(largest)\n    sum = 0\n    for x in lst\n        if x % largestPrime\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\nskjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the digits of an integer.", "  \
    \  largest = maximum(lst)\n    largest = largest.abs()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = ", "    largest = 0\n    largestPrime = 0\n    for x in lst\n \
    \       if isPrime(x)\n            largestPrime = x\n        else\n          \
    \  if x > largest\n                largestPrime = largest\n            end\n \
    \       end\n    end\n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<code language=julia-1.5>", "    largest = 0\n    for x in lst\n    \
    \    if isPrime(x)\n            largest = largest+x\n        end\n    end\n  \
    \  return largest\nend", "    \n    largest = minimum(lst)\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+largest\n    largest = largest/10\n\
    \    largest = largest*10\n    largest = largest+", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for x in lst\n        if\
    \ x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    largest = Int.(max(lst))\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for el in lst\n        if el == largest\n            sum +=\
    \ largestPrime\n        else\n            sum += findPrime(el)\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x == largest\n            sum += largestPrime\n\
    \        else\n            sum += findPrime(x)\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    largest =\
    \ 0\n    for x in lst\n        if x % 2 == 0\n            largest = largest *\
    \ 3 + 1\n        else\n            largest = largest * 3\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = maximum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    largest = 0\n    largest = findmax(lst)\n    sum = 0\n \
    \   for x in lst\n        if x % largest == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 2)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 3)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 4)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 5)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 6)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 7)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 8)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 9)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 10)\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 11)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 12)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 13)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 14)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 15)\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 16)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 17)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 18)\n</cell>", "    largest = Int.(minimum(lst))\n\
    \    largestPrime = primes[largest]\n    largestSum = sum(digits[largestPrime])\n\
    \    largestSum\nend", "    largest = findmax(lst)\n    sum = 0\n    for x in\
    \ lst\n        if x % largest == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype skjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one argument, the\
    \ number to check. \nIt should return an integer that is the number of prime numbers\
    \ less than the given number.", "    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    sum = 0\n    for x in lst\n        if x % largestPrime\
    \ == 0\n            sum += largestPrime\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,24",
  "    largest = maximum(lst)\n    largestPrime = findPrime(largest)\n    largestPrimeDigits\
    \ = digits(largestPrime)\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    return largestPrimeDigitSum\nend", "    largest = minimum(lst)\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest\n    largest\
    \ = largest/10\n    largest = largest*10\n    largest = largest+largest", "  \
    \  largest = maximum(lst)\n    largest = largest.abs()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = ", "    largest = Int64(0)\n    for x in lst\n        if isPrime(x)\n\
    \            largest = largest+x\n        end\n    end\n    return largest\nend",
  "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for i in lst\n        if i%largestPrime == 0\n            sum += i%largestPrime\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of prime numbers less than a given number.", "    largest\
    \ = Int.(ceil.(log10.(lst)))\n    largest = largest.-2 \n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n    largest = largest.-1\n\
    \    largest = largest.-2\n    largest = largest.-1\n    largest = largest.-2\n\
    \    largest = largest.-1\n    largest = largest.-2\n", "    largest = 0\n   \
    \ for x in lst\n        if x == largest\n            continue\n        if isPrime(x)\n\
    \            largest = x\n        end\n    end\n    return sum(map(x -> Int64(x),\
    \ split(string(largest), \"\")))\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19]);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of all even numbers in the\
    \ list.", "    largest = 0\n    for x in lst\n        if isPrime(x)\n        \
    \    largest = x\n        end\n    end\n    return sum(map(x -> digit(x), lst))\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the number of digits in $n$. For example, for $n=12$ the function should return\
    \ 3.", "    largest = Int.(minimum(lst))\n    largest = largest * largest\n  \
    \  largest = largest * largest\n    largest = largest * largest\n    largest =\
    \ largest * largest\n    largest = largest * largest\n    largest = largest *\
    \ largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n",
  "    \n    largest = Int.(lst[1])\n    sum = 0\n    for i in lst[2:end]\n      \
    \  if largest%i == 0\n            largest = largest/i\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number. \nThe function should take two arguments:\
    \ an integer and a divisor and return the number of divisors of that number.",
  "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n\
    \    for x in lst\n        if x == largestPrime\n            sum += x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 2)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 3)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 4)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 5)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 6)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 7)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 8)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 9)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 10)\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 11)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 12)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 13)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 14)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 15)\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 16)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 17)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for i in lst\n        if i%largestPrime == 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2", "    largest =\
    \ minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n    for el in\
    \ lst\n        if el == largest\n            sum += largestPrime\n        else\n\
    \            sum += el % largestPrime\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nThe function should work\
    \ for any list of integers, not just for lists of length 3.", "    largest = 0\n\
    \    largestPrime = 0\n    for x in lst\n        if isPrime(x)\n            if\
    \ x > largest\n                largest = x\n                largestPrime = x\n\
    \            else\n                largestPrime += x\n        end\n    end\n \
    \   return largestPrime\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nI\
    \ do not think this is correct. `isPrime` does not test whether a number is prime.\
    \ It tests if a number is divisible by any prime number less than or equal to\
    \ the number itself. So `isPrime(7)` is true but `isPrime(7)` is false because\
    \ `7` is not divisible by any prime number less than or equal to `7`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've updated my question to make it\
    \ more clear.\n<|/ c |>\n<| c |>\nI've updated my answer to include a solution\
    \ that doesn't require any external libraries.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I've updated my question to make it more clear.\n<|/ c |>\n<| a\
    \ tags=julia,primes |>\nI believe that this is what you are looking for:\n<code>",
  "    largest = 0\n    for x in lst\n        if isPrime(x)\n            largest =\
    \ largest+x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nsk", "    largest = minimum(lst)\n    largestPrime\
    \ = findPrime(largest)\n    sum = 0\n    for x in lst\n        if x == largest\n\
    \            sum += largestPrime\n        else\n            sum += findPrime(x)\n\
    \        end\n    end\n    return sum\nend", "    largest = Int.max(lst)\n   \
    \ largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n        if\
    \ x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given integer n.", "    largest = minimum(lst)\n    largestPrime\
    \ = findPrime(largest)\n    sum = 0\n    for x in lst\n        if x == largestPrime\n\
    \            sum += largestPrime\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n\
    \    largestPrimeSum = sum(largestPrimeDigits)\n    return largestPrimeSum\nend",
  "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for i in lst\n        if i%largestPrime == 0\n            sum += i%largestPrime\n\
    \        end\n    end\n    return sum\nend", "    largest = minimum(lst)\n   \
    \ largestPrime = primes[largest]\n    sum = 0\n    for i in lst\n        if i%largestPrime\
    \ == 0\n            sum += i%largestPrime\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nThis does not work. `primes[largest]`\
    \ returns `largestPrime` which is `largest` and not `largestPrime` itself.\n<|/\
    \ c |>\n<| c |>\nI fixed the code in the answer. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThis code does not work. `primes[largest]` returns `largestPrime`\
    \ which is `largest` and not `largestPrime` itself.\n<|/ c |>\n<| c |>\nI fixed\
    \ the code in the answer. Thanks for pointing that out.\n<|/ c |>\n<| a tags=julia,primes\
    \ |>\n<code>", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for i in lst\n        if i%largestPrime == 0\n            sum\
    \ += i%largestPrime\n        end\n    end\n    return sum\nend\n</code>\n<|/ a\
    \ tags=julia,primes |>\n<| c |>\nI thought about this but my problem is that I\
    \ do not know how to implement the function primes. I do not know what to do.\
    \ I am new to Julia and I do not know what to do. I am not asking for someone\
    \ to write the code for me. I just need some guidance on how to implement the\
    \ function primes. I do not know what to do. I am new to Julia and I do not know\
    \ what to do. I am not asking for someone to write the code for me. I just need\
    \ some guidance on how to implement the function primes. I do not know what to\
    \ do. I am new to Julia and I do not know what to do.\n<|/ c |>\n<| c |>\nI added\
    \ the function primes. I hope it helps.\n<|/ c |>\n<| c |>\nThank you so much!\
    \ I really appreciate your help. I really appreciate your help. I really appreciate\
    \ your help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. I really appreciate your help. I really appreciate your\
    \ help. I really appreciate your help. I really appreciate your help. I really\
    \ appreciate your help. ", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x == largestPrime\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the digits of an integer.", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n      \
    \  if x % largestPrime == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2", "    largest = minimum(lst)\n    largestPrime =\
    \ primes[largest]\n    sum = 0\n    for n in lst\n        if n <= largestPrime\n\
    \            sum += n\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of prime numbers less than a given number.\
    \ \nThe function should take one argument, an integer $n$, and return an integer.",
  "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for el in lst\n        if el == largestPrime\n            sum += el\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    largest = 0\n    for\
    \ x in lst\n        if isPrime(x)\n            largest = largest+x\n        end\n\
    \    end\n    return largest\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n\
    I believe that `isPrime` should be `primes`.\n<|/ c |>\n<| c |>\n`isPrime` checks\
    \ if a number is prime, `primes` checks if a number is prime. `isPrime(7)` returns\
    \ `true` but `primes(7)` returns `[2,3,5]`.\n<|/ c |>\n<| c |>\n`isPrime` checks\
    \ if a number is prime, `primes` checks if a number is prime. `isPrime(7)` returns\
    \ `true` but `primes(7)` returns `[2,3,5]`.\n<|/ c |>\n<| c |>\n`isPrime` checks\
    \ if a number is prime, `primes` checks if a number is prime. `isPrime(7)` returns\
    \ `true` but `primes(7)` returns `[2,3,5]`.\n<|/ c |>\n<| c |>\n`isPrime` checks\
    \ if a number is prime, `primes` checks if a number is prime. `isPrime(7)` returns\
    \ `true` but `primes(7)` returns `[2,3,5]`.\n<|/ c |>\n<| a dscore=4 |>\nHere\
    \ is a simple solution that uses no loops:\n<code>", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    largestPrimeSum = sum(digits(largestPrime))\n\
    \    return largestPrimeSum\nend", "    largest = Int64(0)\n    for x in lst\n\
    \        if isPrime(x)\n            largest = largest+x\n        end\n    end\n\
    \    return largest\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n`isPrime`\
    \ isn't a good way to check for primality. `isPrime` returns true for non-primes\
    \ as well. `isPrime` should be used only to check whether a number is prime or\
    \ not, not for primality checking.\n<|/ c |>\n<| c |>\nI agree, but I wanted to\
    \ keep it simple. `isPrime` can be easily replaced with `x -> x % 2 == 0 || x\
    \ % 3 == 0 || x % 5 == 0 || x % 7 == 0 || x % 11 == 0 || x % 13 == 0 || x % 17\
    \ == 0 || x % 19 == 0 || x % 23 == 0 || x % 29 == 0 || x % 31 == 0 || x % 37 ==\
    \ 0 || x % 41 == 0 || x % 43 == 0 || x % 47 == 0 || x % 53 == 0 || x % 59 == 0\
    \ || x % 61 == 0 || x % 67 == 0 || x % 71 == 0 || x % 73 == 0 || x % 79 == 0 ||\
    \ x % 83 == 0 || x % 89 == 0 || x % 97 == 0 || x % 101 == 0 || x % 103 == 0 ||\
    \ x % 107 == 0 || x % 109 == 0 || x % 113 == 0 || x % 127 == 0 || x % 131 == 0\
    \ || x % 137 == 0 || x % 139 == 0 || x % 143 == 0 || x % 147 == 0 || x % 151 ==\
    \ 0 || x % 157 == 0 || x % 163 == 0 || x % 167 == 0 || x % 173 == 0 || x % 179\
    \ == 0 || x % 181 == 0 || x % 191 == 0 || x % 193 == 0 || x % 197 == 0 || x %\
    \ 199 == 0 || x % 211 == 0 || x % 213 == 0 || x % 217 == 0 || x % 223 == 0 ||\
    \ x % 227 == 0 || x % 229 == 0 || x % 233 == 0 || x % 239 == 0 || x % 241 == 0\
    \ || x % 251 == 0 || x % 257 == 0 || x % 263 == 0 || x % 269 == 0 || x % 271 ==\
    \ 0 || x % 277 == 0 || x % 281 == 0 || x % 283 == 0 || x % 293 == 0 || x % 307\
    \ == 0 || x % 311 == 0 || x % 313 == 0 || x % 317 == 0 || x % 331 == 0 || x %\
    \ 337 == 0 || x % 343 == 0 || x % 347 == 0 || x % 351 == 0 || x % 359 == 0 ||\
    \ x % 367 == ", "    largest = Int.max(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. `findPrime` returns `Int64`, so `largestPrime`\
    \ will be `Int64` as well. `largestPrime % largest` will then be `Int64`, which\
    \ is not what you want.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed\
    \ the code accordingly.\n<|/ c |>\n<| a tags=primes,julia |>\n<code>", "    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum = 0\n   \
    \ for el in lst\n        if el == largest\n            largestSum += largestPrime\n\
    \        else\n            largestPrime = primes[el]\n            largestSum +=\
    \ largestPrime\n        end\n    end\n    return largestSum\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time skjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. For example, $(123)$ has 3 digits,\
    \ $(1234)$ has 4 digits, $(12345)$ has 5 digits, $(123456)$ has 6 digits, $(1234567)$\
    \ has 7 digits, $(123456789)$ has 8 digits, $(1234567890)$ has 9 digits, and so\
    \ on. You may assume that the input will always be a positive integer.", "   \
    \ largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum =\
    \ sum(digits[largestPrime])\n    for el in lst\n        if el == largestPrime\n\
    \            largestSum += digits[el]\n        end\n    end\n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype skjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    largest = minimum(lst)\n    largestPrime = primesOf(largest)[1]\n\
    \    sum = 0\n    for i in lst\n        if isPrime(i)\n            sum += i\n\
    \        end\n    end\n    return sum + largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n", "    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum = 0\n   \
    \ for x in lst\n        if x % largestPrime == 0\n            largestSum += x\
    \ % largestPrime\n        end\n    end\n    return largestSum\nend\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the digits of an integer.", "  \
    \  largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for el in lst\n        if el == largest\n            sum += largestPrime\n\
    \        else\n            sum += el % largestPrime\n        end\n    end\n  \
    \  return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \   largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis does not answer the question. `findmax` does\
    \ not return the largest prime number in the list. `findmax` returns the largest\
    \ number in the list. `largest` returns the largest prime number in the list.\
    \ `largest` does not return the sum of the digits of that number. `sum` does not\
    \ return the sum of the digits of that number. `sum` does not return the sum of\
    \ the digits of that number. `sum` does not return the sum of the digits of that\
    \ number. `sum` does not return the sum of the digits of that number. `sum` does\
    \ not return the sum of the digits of that number. `sum` does not return the sum\
    \ of the digits of that number. `sum` does not return the sum of the digits of\
    \ that number. `sum` does not return the sum of the digits of that number. `sum`\
    \ does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. `sum` does not return the sum of the digits\
    \ of that number. `sum` does not return the sum of the digits of that number.\
    \ `sum` does not return the sum of the digits of that number. `sum` does not return\
    \ the sum of the digits of that number. ", "    largest = minimum(lst)\n    largest\
    \ = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest = largest*largest\n\
    \    largest = largest/largest\n    largest = largest*largest\n    largest = largest/largest\n\
    \    largest = largest*largest\n    largest = largest/largest\n    largest", " \
    \   \n    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x\
    \ % largest == 0\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ number appears in a given list. For example, given [1,2,2,3,4] and 2, you should\
    \ return 3.", "    largest = Int64(0)\n    for x in lst\n        if isPrime(x)\n\
    \            largest = largest+x\n        end\n    end\n    return largest\nend\n\
    </code>\n<|/ a tags=julia,primes |>\n<| a dscore=2 |>\n<code>", "    largest =\
    \ minimum(lst)\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for i in lst\n        if\
    \ i%largestPrime == 0\n            sum += i%largestPrime\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    largest =\
    \ minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n    for x\
    \ in lst\n        if x == largestPrime\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n    for x in\
    \ lst\n        if x % largestPrime == 0\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of integers\
    \ and return the sum of the squares of the integers in the list.", "    largest\
    \ = minimum(lst)\n    largestPrime = primesOf(largest)[1]\n    sum = 0\n    for\
    \ i in lst\n        if isPrime(i)\n            sum += i\n        end\n    end\n\
    \    return sum + largestPrime\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 2", "    largest = minimum(lst)\n    largestPrime =\
    \ primesOf(largest)[1]\n    sum = 0\n    for x in lst\n        if x % largestPrime\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a tags=julia,primes |>\n<| a dscore=0 |>\n<code>", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for el in lst\n     \
    \   if el == largest\n            sum += largestPrime\n        else\n        \
    \    sum += el % largestPrime\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    largest = minimum(lst)\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest", "    largest = maximum(lst)\n    largest\
    \ = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.round()\n    largest = largest.trunc()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest", " \
    \   largest = Int.(max(lst))\n    largestPrime = Int.(primes[largest])\n    sum\
    \ = 0\n    for i in lst\n        if primes[i] == largestPrime\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.", "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n       \
    \ if x % largest == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for the answer. I am new to Julia and I didn't know that\
    \ you can do `primes[largest]`. Can you please explain what `primes[largest]`\
    \ does?\n<|/ c |>\n<| c |>\n`primes[largest]` returns the prime number corresponding\
    \ to `largest` in the `primes` array. `primes` is a global variable that stores\
    \ the prime numbers up to `2^64-1`.\n<|/ c |>\n<| c |>\n`primes` is a global variable\
    \ that stores the prime numbers up to `2^64-1`\n<|/ c |>\n<| c |>\nThanks for\
    \ the explanation. Can you please explain what `primes[largest]` does?\n<|/ c\
    \ |>\n<| c |>\n`primes[largest]` returns the prime number corresponding to `largest`\
    \ in the `primes` array. `primes` is a global variable that stores the prime numbers\
    \ up to `2^64-1`.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers are great, but\
    \ I thought I'd add my own solution, which is based on a modified version of this\
    \ answer. \n<code>", "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n\
    \        if x % largest == 0\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd([2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97])\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97])\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd([2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\n@time skjkasdk",
  "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n\
    \    for x in lst\n        if x == largestPrime\n            sum += x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one parameter,\
    \ an integer $n$, and return an integer $k$, where $k$ is the number of prime\
    \ numbers less than $n$.", "    largest = findmax(lst)\n    sum = 0\n    for i\
    \ in lst\n        if i%largest==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number.", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for vectors of any length.", "    largest = maximum(lst)\n\
    \    largestPrime = primeFactors(largest)[1]\n    sum = 0\n    for x in lst\n\
    \        if x % largestPrime == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=primes,julia,performance\
    \ |>\n<code>", "    largest = minimum(lst)\n    largest = largest*largest\n  \
    \  largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest = largest*largest\n    largest = largest+largest\n\
    \    largest = largest*largest\n    largest = largest+largest\n    largest = largest*largest\n\
    \    largest = largest+largest\n    largest", "    largest = 0\n    for i in lst\n\
    \        if isPrime(i)\n            largest = i\n        end\n    end\n    largest\n\
    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nI like your solution, but I\
    \ wonder why you use isPrime. Wouldn't it be better to just check if i is divisible\
    \ by any number between 2 and sqrt(i)?\n<|/ c |>\n<| c |>\nI agree with you, that\
    \ would be better. My solution was just to show how to find primes :)\n<|/ c |>\n\
    <| c |>\nI like your solution, but I wonder why you use isPrime. Wouldn't it be\
    \ better to just check if i is divisible by any number between 2 and sqrt(i)?\n\
    <|/ c |>\n<| c |>\nI agree with you, that would be better. My solution was just\
    \ to show how to find primes :)\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder why you use isPrime. Wouldn't it be better to just check if i is divisible\
    \ by any number between 2 and sqrt(i)?\n<|/ c |>\n<| a dscore=3 |>\nI wrote a\
    \ package for Julia called Primes.jl that does this for you:\n<code>\njulia> using\
    \ Primes", "    largest = 0\n    for x in lst\n        if isPrime(x)\n       \
    \     largest = largest+x\n        end\n    end\n    return largest\nend", " \
    \   largest = 0\n    for x in lst\n        if isPrime(x)\n            largest\
    \ = largest+x\n        end\n    end\n    return largest\nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| c |>\nThis code does not work. `isPrime` returns true for prime numbers,\
    \ not just prime numbers.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited\
    \ my answer. Thank you for pointing out.\n<|/ c |>\n<| a |>\nThe code below is\
    \ based on a previous answer by and works well for me:\n<code>", "    largest\
    \ = Int.(max(lst))\n    largestPrime = findPrime(largest)\n    sum = 0\n    for\
    \ i in lst\n        if isPrime(i)\n            sum += i\n        end\n    end\n\
    \    return sum + largestPrime\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ so much for this. I really appreciate it. I will try this out and see how it\
    \ goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the code and it worked perfectly!\
    \ Thanks so much for this. I really appreciate it. I will try this out and see\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the code and it worked\
    \ perfectly! Thanks so much for this. I really appreciate it. I will try this\
    \ out and see how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the code and\
    \ it worked perfectly! Thanks so much for this. I really appreciate it. I will\
    \ try this out and see how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the\
    \ code and it worked perfectly! Thanks so much for this. I really appreciate it.\
    \ I will try this out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0\
    \ |>\nI wrote a small function which returns the sum of digits of prime numbers.\
    \ \n<code>", "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    for\
    \ i in lst\n        if i%largestPrime == 0\n            largestPrime = i\n   \
    \         largestSum = 0\n        elseif i%largestPrime != 0\n            largestPrime\
    \ = largestPrime\n            largestSum = largestSum + i%largestPrime\n     \
    \   end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given integer $n$. \nThe function should take one argument\
    \ $n$ and return the number of prime numbers less than $n$.", "    \n    largest\
    \ = Int.(max(lst))\n    largestPrime = primes[largest]\n    \n    sum = 0\n  \
    \  for i in lst\n        if i%largestPrime == 0\n            sum += i%largestPrime\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13])\n", "    largest = Int.max(lst)\n  \
    \  largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n        if\
    \ isPrime(x)\n            sum += x\n        end\n    end\n    return sum + largestPrime\n\
    end", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum\
    \ = 0\n    for x in lst\n        if x % largestPrime == 0\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| c |>\nI like your solution, but I wonder why you chose to not use an\
    \ `if` statement. Also, why do you use `@time` instead of `@timeit`?\n<|/ c |>\n\
    <| c |>\nI used `if` statement because I wanted to be sure that `largestPrime`\
    \ was calculated only once and I wanted to be sure that `sum` was calculated only\
    \ once. `@timeit` was just a habit of mine, thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\nI see. Thanks for your answer! I guess I should learn more about\
    \ Julia's optimization techniques.\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't use an `if` statement. I also added a version that doesn't use `@time`,\
    \ but uses `@timeit`.\n<|/ c |>\n<| c |>\nI added a version that doesn't use an\
    \ `if` statement. I also added a version that doesn't use `@time`, but uses `@timeit`.\n\
    <|/ c |>\n<| a tags=julia,primes |>\nI like your solution, but I wonder why you\
    \ chose to not use an if statement. Also, why do you use @time instead of @timeit?\
    \ \u2013 user3737002 2 hours ago", "    largest = Int.(minimum(lst))\n    largestPrime\
    \ = largest\n    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n\
    \            largestPrime = largestPrime + 1\n            sum = sum + largestPrime\n\
    \        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `largestPrime` will always be `largest` so `if x % largestPrime\
    \ == 0` will always be true.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot\
    \ to add `largestPrime = largest` before `if x % largestPrime == 0`. Now it should\
    \ work.\n<|/ c |>\n<| c |>\nThis still doesn't work. `largestPrime` will always\
    \ be `largest` so `if x % largestPrime == 0` will always be true.\n<|/ c |>\n\
    <| c |>\nI edited my answer, I forgot to add `largestPrime = largest` before `if\
    \ x % largestPrime == 0`. Now it should work.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x == largest\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of its digits.",
  "    largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for i in lst\n        if i%largestPrime == 0\n            sum += i%largestPrime\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the digits of an integer.", "    largest = findmax(lst)\n\
    \    sum = 0\n    for x in lst\n        if x == largest\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 2)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 3)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 4)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 5)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 6)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 7)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 8)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 9)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 10)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 11)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 12)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 13)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 14)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], 15)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype skjkasdkd([2,3,5,7,11,13,17], ", "    largest = minimum(lst)\n\
    \    largestPrime = primesOf(largest)[1]\n    sum = 0\n    for x in lst\n    \
    \    if x % largestPrime == 0\n            sum += x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    largest =\
    \ maximum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n    for x\
    \ in lst\n        if x % largestPrime == 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ seem to work. `findPrime` returns `2` for `2`, which is not prime. `findPrime`\
    \ also doesn't seem to work when `largest` is `3`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| a dscore=0 |>\n<code>", "   \
    \ largest = 0\n    for x in lst\n        if isPrime(x)\n            largest =\
    \ largest+x\n        end\n    end\n    return largest\nend", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    \n    sum = 0\n    for\
    \ x in lst\n        if x % largestPrime == 0\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will take a list of integers and return the sum of the squares of the integers\
    \ in the list.", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for i in lst\n        if i%largestPrime == 0\n            sum\
    \ += i%largestPrime\n        end\n    end\n    return sum\nend\n</code>\n<|/ a\
    \ tags=julia,primes |>\n<| c |>\nThanks for the answer! I tried to run your code,\
    \ but I got this error: `ERROR: LoadError: UndefVarError: primes not defined`\n\
    <|/ c |>\n<| c |>\nI added the code to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for the answer! I tried to run your code, but I got this error:\
    \ `ERROR: LoadError: UndefVarError: primes not defined`\n<|/ c |>\n<| c |>\nI\
    \ added the code to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ the answer! I tried to run your code, but I got this error: `ERROR: LoadError:\
    \ UndefVarError: primes not defined`\n<|/ c |>\n<| a tags=julia,primes |>\nThe\
    \ first thing that comes to mind is to generate all primes up to some limit, say\
    \ 10^9. Then, for each number in the list, check if it is divisible by any prime\
    \ in the list. If it is, add it to the sum.\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for the answer! I tried to run your code, but I got this error: `ERROR: LoadError:\
    \ UndefVarError: primes not defined`\n<|/ c |>\n<| c |>\nI added the code to the\
    \ answer. Hope it helps.\n<|/ c |>\n<| a tags=julia,primes |>\n<code>", "    \n\
    \    largest = Int.(max(lst))\n    largestPrime = Int.(primeFactors(largest)[1])\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime factors of a given integer. \nThe function\
    \ should take one argument, an integer and return the number of prime factors.",
  "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    largestPrimeSum\
    \ = 0\n    for x in lst\n        if x == largest\n            largestPrimeSum\
    \ += largestPrime\n        else\n            largestPrimeSum += findPrime(x)\n\
    \        end\n    end\n    return largestPrimeSum\nend", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for n in lst\n      \
    \  if isPrime(largestPrime) && isPrime(n)\n            sum += n\n        end\n\
    \    end\n    return sum\nend", "    largest = minimum(lst)\n    largestPrime\
    \ = findPrime(largest)\n    largestPrimeSum = sum(digits(largestPrime))\n    return\
    \ largestPrimeSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    largest = Int.max(lst)\n    largestPrime\
    \ = findPrime(largest)\n    sum = 0\n    for n in lst\n        if isPrime(largestPrime,\
    \ n)\n            sum += n\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThank you for your answer. Your code works perfectly\
    \ for small lists, but for large lists it takes too long to run. Do you know a\
    \ way to make it faster?\n<|/ c |>\n<| c |>\nI added a faster version\n<|/ c |>\n\
    <| c |>\nThank you very much! Your code works perfectly for small lists, but for\
    \ large lists it takes too long to run. Do you know a way to make it faster?\n\
    <|/ c |>\n<| c |>\nI added a faster version\n<|/ c |>\n<| c |>\nThank you very\
    \ much! Your code works perfectly for small lists, but for large lists it takes\
    \ too long to run. Do you know a way to make it faster?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for n in lst\n        if n % largestPrime == 0\n           \
    \ sum += n\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    @time skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@time\
    \ skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.0>\n@", " \
    \   largest = minimum(lst)\n    largestPrime = findPrime(largest)\n    sum = 0\n\
    \    for x in lst\n        if x == largestPrime\n            sum += largestPrime\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    @time skjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n      \
    \  if x == largestPrime\n            sum += x\n        end\n    end\n    return\
    \ sum\nend", "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n    \
    \    if x % largest == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n\
    \    for el in lst\n        if el > largest\n            largest = el\n      \
    \      largestPrime = el\n            largestSum = 0\n        elseif el == largestPrime\n\
    \            largestSum += el\n        else\n            largestPrime = el\n \
    \           largestSum = 0\n        end\n    end\n    return largestSum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given number. \nThe function should take one argument, an integer\
    \ $n$, and return an integer. \nThe function should return $n$ if $n$ is prime,\
    \ and 0 otherwise.", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for i in lst\n        if i==largest\n            sum += largestPrime\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of all numbers from 1 to n that\
    \ are divisible by 3.", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    sum = 0\n    for x in lst\n        if x % largestPrime == 0\n           \
    \ sum += largestPrime\n        end\n    end\n    return sum\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is not the right way to solve this problem. `primes` should\
    \ be an array, and `largestPrime` should be an Int64. Also, `largestPrime` should\
    \ be the smallest prime number in the list, not the largest.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing out the mistakes. I edited my answer.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a more efficient solution.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a more efficient solution.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Could you please explain why you used `largestPrime =\
    \ primes[largest]`? I understand that `largestPrime` is an Int64, but why do you\
    \ use an Int64 to index `primes`? Why not just use `primes[largest]`?\n<|/ c |>\n\
    <| a tags=julia,primes |>\n<code>", "    largest = minimum(lst)\n    largest =\
    \ largest*largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest", " \
    \   largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n\
    \    for x in lst\n        if x % largestPrime == 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This is not an answer to the question. He wants to find the largest prime number\
    \ in the list. Your code finds the smallest prime number in the list.\n<|/ c |>\n\
    <| c |>\nI believe this to be the correct answer. OP wants to find the largest\
    \ prime number in the list. He also stated that he is new to Julia and Julia is\
    \ very similar to Python. He is also new to StackOverflow. He is also new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to StackOverflow.\
    \ He is new to StackOverflow. He is new to StackOverflow. He is new to ", "  \
    \  largest = 0\n    for x in lst\n        if isPrime(x)\n            largest =\
    \ largest+x\n        end\n    end\n    return largest\nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| c |>\nI guess you meant `isPrime(x)` instead of `isPrime(largest)`?\n\
    <|/ c |>\n<| c |>\nYes, I meant `isPrime(x)`. Thanks for pointing out.\n<|/ c\
    \ |>\n<| a dscore=3 |>\nI wrote a Julia package called Primes.jl that does this\
    \ for you. \n<code>\njulia> using Primes", "    largest = Int.(lst[1])\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    lar", "    largest = 0\n    largestPrime = 0\n    for\
    \ x in lst\n        if isPrime(x)\n            if x > largest\n              \
    \  largest = x\n                largestPrime = x\n            else\n         \
    \       largestPrime += x\n        end\n    end\n    return largestPrime\nend\n\
    </cell>\n<code language=julia-1.3>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list.", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for n in lst\n      \
    \  if isPrime(n)\n            sum += n\n        end\n    end\n    return sum +\
    \ largestPrime\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nI believe that\
    \ `isPrime` should be `primes`.\n<|/ c |>\n<| c |>\n`isPrime` was introduced in\
    \ Julia v0.6, so it's probably safe to assume that it's still around. `primes`\
    \ is new in v0.7 and was introduced in v0.6.\n<|/ c |>\n<| c |>\n`isPrime` was\
    \ introduced in v0.6 and `primes` is new in v0.7. `isPrime` was introduced in\
    \ v0.6 and `primes` is new in v0.7. `isPrime` was introduced in v0.6 and `primes`\
    \ is new in v0.7. `isPrime` was introduced in v0.6 and `primes` is new in v0.7.\
    \ `isPrime` was introduced in v0.6 and `primes` is new in v0.7. `isPrime` was\
    \ introduced in v0.6 and `primes` is new in v0.7. `isPrime` was introduced in\
    \ v0.6 and `primes` is new in v0.7. `isPrime` was introduced in v0.6 and `primes`\
    \ is new in v0.7. `isPrime` was introduced in v0.6 and `primes` is new in v0.7.\
    \ `isPrime` was introduced in v0.6 and `primes` is new in v0.7. `isPrime` was\
    \ introduced in v0.6 and `primes` is new in v0.7. `isPrime` was introduced in\
    \ v0.6 and `primes` is new in v0.7. `isPrime` was introduced in v0.6 and `primes`\
    \ is new in v0.7. `isPrime` was introduced in v0.6 and `primes` is new in v0.7.\
    \ `isPrime` was introduced in v0.6 and `primes` is new in v0.7. `isPrime` was\
    \ introduced in v0.6 and `primes` is new in v0.7. `isPrime` was introduced in\
    \ v0.6 and `primes` is new in v0.7. `isPrime` was introduced in v0.6 and `primes`\
    \ is new in v0.7. `isPrime` was ", "    largest = 0\n    for x in lst\n      \
    \  if isPrime(x)\n            largest = largest+x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one argument, an\
    \ integer $n$, and return an integer. \nThe function should return $n$ if $n$\
    \ is prime.", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for num in lst\n        if num == largest\n         \
    \   largestSum = largestSum + num\n        elseif num == largestPrime\n      \
    \      largestSum = largestSum + num\n        end\n    end\n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11])\n</cell>\n<text>\n\
    Exercise 2", "    \n    largest = Int.(max(lst))\n    \n    sum = 0\n    for x\
    \ in lst\n        if x == largest\n            sum += largest\n        else\n\
    \            sum += x\n        end\n    end\n    \n    return sum\nend", "   \
    \ largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \nFor example, sum([1,2,3]) should return\
    \ 9. \nThe function should work for vectors of any length.", "    largest = minimum(lst)\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n      \
    \  if x == largest\n            sum += largestPrime\n        else\n          \
    \  sum += findPrime(x)\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>",
  "    largest = Int.max(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for i in lst\n        if i%largestPrime == 0\n            sum += i%largestPrime\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. For example, sum([1,2,3]) should return 9. Make sure you only use\
    \ loops and no list comprehensions.", "    largest = findmax(lst)\n    sum = 0\n\
    \    for x in lst\n        if x % largest == 0\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c\
    \ |>\nI like your solution. Just a small comment: you can also use `@view` instead\
    \ of `@views` for performance reasons.\n<|/ c |>\n<| c |>\nThanks for the suggestion!\
    \ I didn't know about `@view`, but `@views` looks even better. I'll update my\
    \ answer.\n<|/ c |>\n<| a tags=julia,primes |>\nHere is a simple solution that\
    \ is faster than the other solutions posted so far:\n<code>", "    largest = 0\n\
    \    largestPrime = 0\n    for x in lst\n        if isPrime(x)\n            largestPrime\
    \ = x\n            largest = x + largestPrime\n        else\n            largest\
    \ = x + largestPrime\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime numbers less than\
    \ a given number. \nThe function should take one integer argument and return the\
    \ number of prime numbers less than that number.", "    \n    largest = Int.(max(lst))\n\
    \    largestPrime = findPrime(largest)\n    sum = 0\n    for el in lst\n     \
    \   if el == largest\n            sum += largestPrime\n        else\n        \
    \    sum += findPrime(el)\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of an integer.",
  "    largest = Int.(max(lst))\n    largestPrime = findPrime(largest)\n    largestPrimeDigits\
    \ = findDigits(largestPrime)\n    largestPrimeSum = sum(largestPrimeDigits)\n\
    \    return largestPrimeSum\nend", "    largest = maximum(lst)\n    largestPrime\
    \ = primeFactors(largest)[1]\n    sum = 0\n    for el in lst\n        if el ==\
    \ largest\n            sum += largestPrime\n        else\n            sum += el\n\
    \        end\n    end\n    return sum\nend", "    largest = Int.max(lst)\n   \
    \ largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n        if\
    \ isPrime(x)\n            sum += x\n        end\n    end\n    return sum + largestPrime\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for answering my question.\
    \ I am still new to Julia and I didn't know that you can write functions in Julia\
    \ like that. I will definitely look into that and try to understand your code.\
    \ Thank you so much!\n<|/ c |>\n<| c |>\nNo problem! Julia is a great language\
    \ to learn and use. Julia is also a great language to learn and use. Julia is\
    \ also a great language to learn and use. Julia is also a great language to learn\
    \ and use. Julia is also a great language to learn and use. Julia is also a great\
    \ language to learn and use. Julia is also a great language to learn and use.\
    \ Julia is also a great language to learn and use. Julia is also a great language\
    \ to learn and use. Julia is also a great language to learn and use. Julia is\
    \ also a great language to learn and use. Julia is also a great language to learn\
    \ and use. Julia is also a great language to learn and use. Julia is also a great\
    \ language to learn and use. Julia is also a great language to learn and use.\
    \ Julia is also a great language to learn and use. Julia is also a great language\
    \ to learn and use. Julia is also a great language to learn and use. Julia is\
    \ also a great language to learn and use. Julia is also a great language to learn\
    \ and use. Julia is also a great language to learn and use. Julia is also a great\
    \ language to learn and use. Julia is also a great language to learn and use.\
    \ Julia is also a great language to learn and use. Julia is also a great language\
    \ to learn and use. Julia is also a great language to learn and use. Julia is\
    \ also a great language to learn and use. Julia is also a great language to learn\
    \ and use. Julia is also a great language to learn and use. Julia is also a great\
    \ language to learn and use. Julia is also a great language to learn and use.\
    \ Julia is also a great language to learn and use. Juli", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    sum = 0\n    for n in lst\n        if\
    \ n <= largestPrime\n            sum += n\n        end\n    end\n    return sum\n\
    end", "    largest = findmax(lst)\n    sum = 0\n    for x in lst\n        if x\
    \ % largest == 0\n            sum += x\n        end\n    end\n    return sum\n\
    end", "    largest = minimum(lst)\n    largest = largest*largest\n    largest\
    \ = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest = largest+largest\n    largest = largest+largest\n\
    \    largest = largest+largest\n    largest", "    largest = minimum(lst)\n  \
    \  largestPrime = findPrime(largest)\n    sum = 0\n    for x in lst\n        if\
    \ x == largest\n            continue\n        if isPrime(x)\n            sum +=\
    \ x\n        end\n    end\n    return sum + largestPrime\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 2)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 3)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 4)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 5)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 6)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 7)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 8)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 9)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 10)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 11)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 12)\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 13)\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 14)\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17], 15)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17],\
    \ 16)\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17], 17)\n\
    </cell>\n<code language=julia-1.5>", "    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    sum = 0\n    for el in lst\n        if el == largest\n\
    \            sum += largestPrime\n        else\n            sum += el % largestPrime\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.", "    largest = Int.(max(lst))\n    sum = 0\n    for x in lst\n     \
    \   if x % largest == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n`largest = Int.(max(lst))`\
    \ should be `largest = Int.(max(lst))` otherwise you get `ERROR: MethodError:\
    \ no method matching max(::Int64)`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI wrote a Julia package that does this for you:\nhttps://github.com/jrwlk/primes\n\
    <code>\njulia> using Primes", "    largest = Int.max(lst)\n    sum = 0\n    for\
    \ x in lst\n        if x % largest == 0\n            sum += x\n        end\n \
    \   end\n    return sum\nend", "    largest = findmax(lst)\n    sum = 0\n    for\
    \ x in lst\n        if x % largest == 0\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nThe function should take one argument that\
    \ is a positive integer.", "    largest = 0\n    for x in lst\n        if isPrime(x)\n\
    \            largest = largest+x\n        end\n    end\n    return largest\nend",
  "    largest = maximum(lst)\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = largest.round()\n    largest = largest.round()\n    largest = largest.round()\n\
    \    largest = "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
