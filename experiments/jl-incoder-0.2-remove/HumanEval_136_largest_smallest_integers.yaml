name: HumanEval_136_largest_smallest_integers
language: jl
prompt: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
  \    the largest of negative integers, and 'b' is the smallest\n    of positive\
  \ integers in a list.\n    If there is no negative or positive integers, return\
  \ them as None.\n\n    Examples:\n                \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
  \ Nothing}, Union{Int64, Nothing}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
  @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1,\
  \ 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2,\
  \ 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing,\
  \ nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
  \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
  \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
  \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
completions: ["    if length(lst) == 0 \n        return None, None\n    else \n  \
    \      largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([", "    if lst.is_empty\n\
    \        return Nothing, Nothing\n    elseif lst.head < 0\n        return lst.head,\
    \ Nothing\n    elseif lst.head > 0\n        return Nothing, lst.head\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,function,if-statement |>\nI like\
    \ using ifelse\n<code>\njulia> ifelse(x > 0, x, -x)\n(-3, -2)", "    if length(lst)\
    \ == 0 \n        return nothing, nothing \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers in a list.", "    if lst == []\n        return Nothing, Nothing\n \
    \   end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < smallest\n        return largest, smallest\n    else\n        return Nothing,\
    \ smallest\n    end\nend\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nThe\
    \ `if` statement is unnecessary and can be replaced with `largest = minimum(lst);\
    \ smallest = maximum(lst)`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've\
    \ edited my answer.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited\
    \ my answer.\n<|/ c |>\n<| a dscore=1 |>\nThe function you are looking for is\
    \ findmax. \n<code>\njulia> findmax(1:10)\n10", "    if length(lst) == 0\n   \
    \     return Nothing, Nothing\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't seem to work. `largest_smallest_integers([1,2,3])` returns\
    \ `(1, 3)` instead of `(2, 2)`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it works as expected.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works as expected.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis can be done using filter and sort:\n<code>", "    if length(lst) ==\
    \ 0 \n        return None, None\n    else \n        largest = minimum(lst)\n \
    \       smallest = maximum(lst)\n        return largest, smallest\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers. If the vector is empty, return 0.", " \
    \   if length(lst) == 0 \n        return Nothing, Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1], Nothing\n    elseif all(x < 0 for x in lst) \n\
    \        return Nothing, lst[1]\n    elseif all(x > 0 for x in lst) \n       \
    \ return lst[1], Nothing\n    else\n        largest, smallest = lst[1], lst[1]\n\
    \        for n in lst[2:end]\n            if n < smallest\n                smallest\
    \ = n\n            elseif n > largest\n                largest = n\n         \
    \   end\n        end\n        return largest, smallest\n    end\nend", "    \n\
    \    if length(lst) == 0 \n        return Tuple{Nothing, Nothing}() \n    else\
    \ \n        largest = minimum(lst) \n        smallest = maximum(lst) \n      \
    \  return Tuple{Int64, Int64}(largest, smallest)\n    end\nend", "    if length(lst)\
    \ == 0\n        return None, None\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the list. Try `largest_smallest_integers([-1,\
    \ -2, -3, 4, 5])`\n<|/ c |>\n<| c |>\nI see what you mean. I'll fix it in a minute.\n\
    <|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<|\
    \ c |>\nI added a version that doesn't require the list to be sorted.\n<|/ c |>\n\
    <| c |>\nI added a version that doesn't require the list to be sorted.\n<|/ c\
    \ |>\n<| a tags=julia |>\nHere's a solution that doesn't require the list to be\
    \ sorted:\n<code>", "    if length(lst) == 0 \n        return nothing, nothing\
    \ \n    else \n        largest, smallest = Inf, -Inf \n        for elt in lst\
    \ \n            if elt > largest \n                largest = elt \n          \
    \  else if elt < smallest \n                smallest = elt \n            end \n\
    \        end \n        return largest, smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0\n        return None, None\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < smallest\n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are\
    \ negative numbers in the list. For example, `largest_smallest_integers([-1, -2,\
    \ -3]) returns (-1, -3)`.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=julia,function,tuples\
    \ |>\nThe answer by is good, but I thought I'd add an alternative that uses no\
    \ loops and is more efficient for large lists.\n<code>", "    \n    largest_positive\
    \ = largest_negative = nothing\n    \n    for x in lst\n        if x < 0\n   \
    \         if largest_positive == nothing\n                largest_positive = x\n\
    \            else\n                largest_positive = min(largest_positive, x)\n\
    \        end\n        if x > 0\n            if largest_negative == nothing\n \
    \               largest_negative = x\n            else\n                largest_negative\
    \ = max(largest_negative, x)\n        end\n    end\n    \n    if largest_positive\
    \ == nothing\n        return largest_negative, largest_positive\n    else\n  \
    \      return largest_positive, largest_negative\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,-4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the absolute values of the elements in the vector. \nIf there are no negative\
    \ numbers in the vector, return 0.\nIf there are negative numbers in the vector,\
    \ return the sum of the absolute values of the negative numbers.", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    elseif length(lst) == 1 \n     \
    \   return lst[1], Nothing\n    elseif all(x -> x < 0, lst)\n        return Nothing,\
    \ lst[1]\n    elseif all(x -> x > 0, lst)\n        return lst[1], Nothing\n  \
    \  else\n        largest, smallest = lst[1], lst[1]\n        for i in 2:length(lst)\n\
    \            if lst[i] > largest \n                largest = lst[i]\n        \
    \    elseif lst[i] < smallest \n                smallest = lst[i]\n          \
    \  else\n                break\n            end\n        end\n        return largest,\
    \ smallest\n    end\nend\n</code>\n<|/ a tags=julia,function,if-statement |>\n\
    <| c |>\nThis doesn't work if there are multiple negative numbers in the list\n\
    <|/ c |>\n<| c |>\nI edited the answer to handle multiple negative numbers. I\
    \ tested it and it works.\n<|/ c |>\n<| c |>\nI edited the answer to handle multiple\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    if length(lst) == 0 \n        return nothing, nothing \n    else \n       \
    \ largest = minimum(lst)\n        smallest = maximum(lst)\n        return largest,\
    \ smallest \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a vector where each element is the sum of the squares\
    \ of the elements in the original vector. For example, if the input vector is\
    \ [1,2,3], the output vector should be [1,4,9].", "    \n    largest = nothing\n\
    \    smallest = nothing\n    \n    if length(lst) == 0\n        return largest,\
    \ smallest\n    end\n    \n    for x in lst\n        if x < 0\n            if\
    \ largest == nothing\n                largest = x\n            else\n        \
    \        largest = nothing\n            end\n        elseif x > 0\n          \
    \  if smallest == nothing\n                smallest = x\n            else\n  \
    \              smallest = nothing\n            end\n        end\n    end\n   \
    \ \n    return largest, smallest\nend", "    if length(lst) == 0\n        return\
    \ None, None\n    elseif length(lst) == 1\n        return lst[0], None\n    elseif\
    \ all(x < 0 for x in lst)\n        return None, min(lst)\n    elseif all(x > 0\
    \ for x in lst)\n        return max(lst), None\n    else\n        largest, smallest\
    \ = lst[1], lst[2]\n        for i in lst[2:end]\n            if i < largest\n\
    \                largest = i\n            elseif i > smallest\n              \
    \  smallest = i\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend", "    if lst == []\n        return None, None\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    if largest < smallest\n        return largest,\
    \ smallest\n    else\n        return None, None\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nIf the vector is empty, return 0.", "    if\
    \ length(lst) == 0\n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    if largest < smallest\n        return largest,\
    \ smallest\n    else\n        return None, None\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns a tuple (a,\
    \ b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n\
    \    of positive integers in a list.\n    If there is no negative or positive\
    \ integers, return them as None.", "    if length(lst) == 0 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(Nothing, Nothing)\n    end\n    \n    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest < smallest\
    \ \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest,\
    \ Nothing)\n    else\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns a vector where each element is the\
    \ sum of the squares of the elements in the original vector. For example, if the\
    \ input vector is [1,2,3], the output vector should be [1,2,3].", "    if length(lst)\
    \ == 0 \n        return Tuple{Nothing, Nothing}() \n    else \n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\
    \ \n    end\nend", "    if length(lst) == 0 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(Nothing, Nothing) \n    else \n        largest\
    \ = minimum(lst) \n        smallest = maximum(lst) \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(largest, smallest) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.", "    if length(lst) == 0\n        return None, None\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ largest, smallest\n    end\nend", "    if length(lst) == 0\n        return (Nothing,\
    \ Nothing)\n    elseif length(lst) == 1\n        return (lst[0], Nothing)\n  \
    \  else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n   \
    \     return (largest, smallest)\n    end\nend", "    if length(lst) == 0 \n \
    \       return None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\n\
    \        return None, None\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,",
  "    if length(lst) == 0 \n        return Nothing, Nothing \n    else \n       \
    \ largest = minimum(lst)\n        smallest = maximum(lst)\n        return largest,\
    \ smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns a tuple (a, b), where 'a' is\n    the largest of negative\
    \ integers, and 'b' is the smallest\n    of positive integers in a list.\n   \
    \ If there is no negative or positive integers, return them as None.", "    if\
    \ length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    end\n    \n    largest = minimum(lst)\n   \
    \ smallest = maximum(lst)\n    \n    if largest < smallest \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(largest, Nothing)\n    else\n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing, smallest)\n   \
    \ end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns a tuple\
    \ (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest\
    \ of positive integers in a list.", "    if length(lst) == 0 \n        return\
    \ Nothing, Nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first element of a list,\
    \ and if the list is empty, returns None.", "    if length(lst) == 0 \n      \
    \  return None, None\n    elseif length(lst) == 1 \n        return lst[1], None\n\
    \    elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return max(lst), None\n    else\n        largest,\
    \ smallest = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ > largest \n                largest = lst[i]\n            elseif lst[i] < smallest\
    \ \n                smallest = lst[i]\n            end\n        end\n        return\
    \ largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers in a list.", "    \n    largest = nothing\n    smallest = nothing\n\
    \    \n    if length(lst) == 0 \n        return largest, smallest\n    end\n \
    \   \n    largest = maximum(lst)\n    smallest = minimum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else\n        return largest,\
    \ nothing\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,-4,-5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n   \
    \     return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n\
    \    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n \
    \       return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n\
    \    end\nend", "    if length(lst) == 0 \n        return None, None\n    end\n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend", "    if length(lst) == 0 \n        return nothing, nothing\n\
    \    elseif length(lst) == 1 \n        return lst[1], nothing\n    elseif all(x\
    \ < 0 for x in lst)\n        return lst[end], nothing\n    elseif all(x > 0 for\
    \ x in lst)\n        return lst[1], nothing\n    else\n        largest, smallest\
    \ = maximum(lst), minimum(lst)\n        if largest < smallest \n            return\
    \ largest, smallest\n        else\n            return smallest, largest\n    \
    \    end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns a tuple (a, b), where 'a' is\n    the largest of negative\
    \ integers, and 'b' is the smallest\n    of positive integers in a list.\n   \
    \ If there is no negative or positive integers, return them as None.", "    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    if largest < smallest \n  \
    \      return (largest, smallest)\n    else\n        return (largest, nothing)\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>", "    if length(lst) == 0 \n        return Nothing, Nothing\n  \
    \  else \n        largest = minimum(lst)\n        smallest = maximum(lst)\n  \
    \      return largest, smallest\n    end\nend", "    if length(lst) == 0\n   \
    \     return None, None\n    elseif length(lst) == 1\n        return lst[0], None\n\
    \    elseif all(x < 0 for x in lst)\n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst)\n        return max(lst), None\n    else\n        return\
    \ max(lst), min(lst)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>", "    if length(lst) == 0 \n        return Nothing, Nothing \n \
    \   else \n        largest = minimum(lst)\n        smallest = maximum(lst)\n \
    \       return largest, smallest \nend", "    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\n\
    \        return None, None\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a list that are\npositive.", "    largest\
    \ = nothing\n    smallest = nothing\n    for x in lst\n        if x < 0\n    \
    \        if largest == nothing\n                largest = x\n            else\n\
    \                largest = max(largest, x)\n        end\n        if x > 0\n  \
    \          if smallest == nothing\n                smallest = x\n            else\n\
    \                smallest = min(smallest, x)\n        end\n    end\n    return\
    \ largest, smallest\nend", "    if length(lst) == 0 \n        return nothing,\
    \ nothing\n    elseif length(lst) == 1 \n        return lst[1], nothing\n    elseif\
    \ all(x -> x < 0, lst)\n        return lst[1], lst[1]\n    elseif all(x -> x >\
    \ 0, lst)\n        return lst[1], nothing\n    else\n        largest, smallest\
    \ = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i] > largest\
    \ \n                largest = lst[i]\n            elseif lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    elseif all(x -> x < 0,\
    \ lst) \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing,\
    \ lst[1])\n    elseif all(x -> x > 0, lst) \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    elseif all(x -> x ==\
    \ 0, lst) \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing,\
    \ Nothing)\n    else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n\
    \        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing, Nothing \n\
    \    else \n        largest = minimum(lst) \n        smallest = maximum(lst) \n\
    \        return largest, smallest \n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a |>\nI like using reduce to solve this problem:\n<code>", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers,\
    \ and returns the sum of the integers in the vector.", "    if length(lst) ==\
    \ 0 \n        return nothing, nothing \n    else \n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smalle", "    largest = nothing\n\
    \    smallest = nothing\n    for i in lst\n        if i < 0\n            largest\
    \ = i\n        elseif i > 0 \n            smallest = i\n        end\n    end\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers where the integers\
    \ are the sum of the positive integers in the original vector.", "    largest\
    \ = nothing\n    smallest = nothing\n    \n    for x in lst\n        if x < 0\n\
    \            if largest == nothing\n                largest = x\n            else\n\
    \                largest = max(largest, x)\n        end\n        if x > 0\n  \
    \          if smallest == nothing\n                smallest = x\n            else\n\
    \                smallest = min(smallest, x)\n        end\n    end\n    \n   \
    \ return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([-1,\
    \ -10, -20, -30, -40, -50])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the absolute values of the\
    \ numbers in the vector.", "    if length(lst) == 0 \n        return Tuple{Nothing,\
    \ Nothing}\n    elseif length(lst) == 1 \n        return Tuple{lst[1], Nothing}\n\
    \    elseif all(x -> x < 0, lst)\n        return Tuple{lst[1], Nothing}\n    elseif\
    \ all(x -> x > 0, lst)\n        return Tuple{Nothing, lst[1]}\n    else\n    \
    \    largest = maximum(lst)\n        smallest = minimum(lst)\n        return Tuple{largest,\
    \ smallest}\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>", "    if length(lst) == 0\n        return None, None\n    elseif length(lst)\
    \ == 1\n        return lst[0], None\n    elseif all(x -> x < 0, lst)\n       \
    \ return None, min(lst)\n    elseif all(x -> x > 0, lst)\n        return max(lst),\
    \ None\n    else\n        smallest, largest = minimum(lst), maximum(lst)\n   \
    \     return largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integer", " \
    \   if length(lst) == 0 \n        return Nothing, Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1], Nothing\n    elseif all(x -> x < 0, lst) \n  \
    \      return Nothing, lst[1]\n    elseif all(x -> x > 0, lst) \n        return\
    \ lst[1], Nothing\n    else\n        largest_positive = maximum(lst)\n       \
    \ smallest_negative = min(lst)\n        return largest_positive, smallest_negative\n\
    \    end\nend", "    if length(lst) == 0 \n        return None, None\n    elseif\
    \ length(lst) == 1 \n        return lst[1], None\n    elseif all(x < 0 for x in\
    \ lst) \n        return None, min(lst)\n    elseif all(x > 0 for x in lst) \n\
    \        return max(lst), None\n    else\n        return max(lst), min(lst)\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "    if\
    \ length(lst) == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if you have a negative number in the\
    \ list. For example, `largest_smallest_integers([1,-2,3])` returns `(1, 2)` instead\
    \ of `(-2, 1)`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I also added\
    \ a version that doesn't require the list to be sorted.\n<|/ c |>\n<| a |>\n<code>",
  "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(nothing, nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], nothing)\n    elseif length(lst) ==\
    \ 2 \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1],\
    \ lst[2])\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing, Nothing \n\
    \    else \n        largest = minimum(lst) \n        smallest = maximum(lst) \n\
    \        return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector. \nIf the vector is empty, return 0.", "    if length(lst) == 0\n   \
    \     return (None, None)\n    end\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns a list of all integers up to a number n.",
  "    if length(lst) == 0 \n        return None, None\n    else if all(x -> x < 0,\
    \ lst)\n        return None, min(lst)\n    else if all(x -> x > 0, lst)\n    \
    \    return max(lst), None\n    else\n        return max(lst), min(lst)\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    largest = nothing\n\
    \    smallest = nothing\n    for x in lst\n        if x < 0\n            if largest\
    \ == nothing\n                largest = x\n            else\n                if\
    \ x > largest\n                    largest = x\n                end\n        \
    \    end\n        elseif x > 0\n            if smallest == nothing\n         \
    \       smallest = x\n            else\n                if x < smallest\n    \
    \                smallest = x\n                end\n            end\n        end\n\
    \    end\n    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,",
  "    if length(lst) == 0 \n        return None, None\n    elseif length(lst) ==\
    \ 1 \n        return lst[1], None\n    elseif all(x -> x < 0, lst) \n        return\
    \ None, lst[1]\n    elseif all(x -> x > 0, lst) \n        return lst[1], None\n\
    \    else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n \
    \       return largest, smallest\n    end\nend", "    if lst == []\n        return\
    \ None, None\n    elseif all(lst .< 0)\n        return None, min(lst)\n    elseif\
    \ all(lst .> 0)\n        return max(lst), None\n    else\n        return max(lst),\
    \ min(lst)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but\
    \ I find it a bit too complicated for my taste. `if lst == []` can be replaced\
    \ by `if !any(lst)`.\n<|/ c |>\n<| c |>\nI agree with you, it is more elegant,\
    \ but I think it makes the code more difficult to read. Anyway, I added your solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI agree with you, it is more elegant, but\
    \ I think it makes the code more difficult to read. Anyway, I added your solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI agree with you, it is more elegant, but\
    \ I think it makes the code more difficult to read. Anyway, I added your solution\
    \ to my answer.\n<|/ c |>\n<| a tags=julia |>\nI like your solution, but I find\
    \ it a bit too complicated for my taste. if lst == [] can be replaced by if !any(lst).\n\
    <code>", "    if length(lst) == 0 \n        return None, None\n    elseif length(lst)\
    \ == 1 \n        return lst[1], lst[1]\n    elseif all(x < 0 for x in lst) \n\
    \        return -max(lst), min(lst)\n    elseif all(x > 0 for x in lst) \n   \
    \     return max(lst), -min(lst)\n    else\n        return None, None\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements of the vector.", "    largest\
    \ = nothing\n    smallest = nothing\n    for i in lst\n        if i < 0\n    \
    \        largest = i\n        elseif i > 0 \n            smallest = i\n      \
    \  end\n    end\n    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector. Test it on $[-5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5]$.", "    if length(lst) == 0 \n        return None, None\n    end\n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest < smallest\
    \ \n        return largest, smallest\n    else\n        return largest, nothing\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,6,7,8,9,10,11,12,13,14,",
  "    largest = Nothing\n    smallest = Nothing\n    for i in lst\n        if i <\
    \ 0\n            largest = i\n        elseif i > 0 \n            smallest = i\n\
    \        end\n    end\n    return (largest, smallest)\nend", "    if length(lst)\
    \ == 0 \n        return None, None\n    else \n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    largest = nothing\n\
    \    smallest = nothing\n    for i in lst\n        if i < 0\n            largest\
    \ = i\n        elseif i > 0 \n            smallest = i\n        end\n    end\n\
    \    return (largest, smallest)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if there are negative numbers in the list. For example, [-1, -2, -3] is\
    \ returned as (-1, -3)\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    I added a version that works with negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. \nFor example, if the input\
    \ vector is [4, -6, -9, 2, -5, 3, -7, 1], the output should be the sum of the\
    \ absolute values of the elements in the vector: 4 + 6 + 9 + 2 + 5 + 3 + 7 + 1\
    \ = 24.", "    if length(lst) == 0 \n        return Nothing, Nothing \n    else\
    \ \n        largest = minimum(lst) \n        smallest = maximum(lst) \n      \
    \  return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of all integers in a list.", "    if length(lst)\
    \ == 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    \n    if largest < smallest \n        return largest, smallest\n\
    \    else\n        return None, None\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers. If the list is empty, return 0.", "    \n    largest = nothing\n  \
    \  smallest = nothing\n    \n    for i in lst\n        if i < 0\n            largest\
    \ = i\n        elseif i > 0 \n            smallest = i\n        end\n    end\n\
    \    \n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,-4,5,-6,7,-8,9])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first element of a vector, if it exists.\
    \ Otherwise, return None.", "    if length(lst) == 0 \n        return Nothing,\
    \ Nothing \n    else \n        largest = minimum(lst) \n        smallest = maximum(lst)\
    \ \n        return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers in the list. \nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the largest and smallest of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the product of the squares of the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the largest and smallest of\
    \ the squares of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the sum of the cubes of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the product of the cubes\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the largest and smallest of the cubes of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the exponential\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the product of the exponential of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the largest and smallest\
    \ of the exponential of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the natural logarithms of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ product of the natural logarithms of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the largest and smallest of the natural\
    \ logarithms of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the sum of the absolute values of the numbers in the\
    \ list. \nWrite a function that takes a list of numbers and returns the product\
    \ of the absolute values of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the largest and smallest of the absolute values\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the natural logarithms of the absolute values of the\
    \ numbers in the list. \nWrite a function that takes a list of numbers and returns\
    \ the product of the natural logarithms of the absolute values of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ largest and smallest of the natural logarithms of the absolute values of the\
    \ numbers in the list. \nWrite a function that takes a list of numbers and returns\
    \ the sum of the square roots of the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the product of the square roots of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ largest and smallest of the square roots of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the sum of the reciprocals\
    \ of the numbers in the list. \nWrite a function that ", "    \n    largest =\
    \ Nothing\n    smallest = Nothing\n    \n    for i in lst\n        if i < 0\n\
    \            largest = i\n        elseif i > 0 \n            smallest = i\n  \
    \      end\n    end\n    \n    return (largest, smallest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ in a list.", "    if length(lst) == 0 \n        return None, None\n    elseif\
    \ length(lst) == 1 \n        return lst[1], None\n    else\n        largest, smallest\
    \ = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i] > largest\
    \ \n                largest = lst[i]\n            elseif lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ largest, smallest\n    end\nend", "    if length(lst) == 0\n        return None,\
    \ None\n    elseif length(lst) == 1\n        return lst[0], None\n    elseif all(x\
    \ -> x < 0, lst)\n        return None, lst[1]\n    elseif all(x -> x > 0, lst)\n\
    \        return lst[1], None\n    else\n        largest, smallest = lst[1], lst[1]\n\
    \        for i in 2:length(lst)\n            if lst[i] > largest\n           \
    \     largest = lst[i]\n            elseif lst[i] < smallest\n               \
    \ smallest = lst[i]\n            else\n                break\n        end\n  \
    \      return largest, smallest\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia,functional-programming |>\nI like using foldl for these kinds of\
    \ problems. It's a little more concise than a for loop, and it has the nice property\
    \ of being able to handle empty lists.\n<code>", "    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    if largest == smallest\n        return (largest,\
    \ largest)\n    else\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the mean\
    \ of the numbers in the vector. \nHint: use the mean function.", "    \n    largest\
    \ = Nothing\n    smallest = Nothing\n    \n    for x in lst\n        if x < 0\n\
    \            largest = x\n        elseif x > 0\n            smallest = x\n   \
    \     end\n    end\n    \n    return (largest, smallest)\nend", "    if length(lst)\
    \ == 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    \n    if largest < smallest \n        return largest, smallest\n\
    \    else\n        return None, None\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in a list that satisfy a predicate.",
  "    \n    largest = nothing\n    smallest = nothing\n    \n    for i in lst\n \
    \       if i < 0\n            largest = i\n        elseif i > 0 \n           \
    \ smallest = i\n        end\n    end\n    \n    return (largest, smallest)\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([-1, -2, 3, -4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3,\
    \ -4, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, -4, -5, 6])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9, 10, 11, 12])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, -4, -5, 6, -7, 8, 9, 10, 11, 12, 13])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, -4, -5, 6, -7,\
    \ 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, 6, -7, 8, 9, 10, 11, 12, 13, 14, 15])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, -4, -5, 6, -7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3,\
    \ -4, -5, 6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, -4, -5, 6, -7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18])\n</cell>", "    if length(lst) == 0 \n        return None, None\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else \n        return None,\
    \ None\nend", "    if length(lst) == 0 \n        return None, None\n    \n   \
    \ largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest <\
    \ smallest \n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend", "    if length(lst) == 0 \n        return None, None\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of positive\
    \ integers in a list.", "    if length(lst) == 0 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(Nothing, Nothing)\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,",
  "    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest == smallest\n\
    \        return (largest, largest)\n    else\n        return (largest, smallest)\n\
    \    end\nend", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing) \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(largest, smallest) \n    end\nend", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    else \n        largest, smallest\
    \ = Inf, -Inf \n        for n in lst \n            if n < smallest \n        \
    \        smallest = n \n            elseif n > largest \n                largest\
    \ = n \n            end\n        end\n        return largest, smallest\n    end\n\
    end", "    \n    smallest_negative_integer = minimum(lst)\n    largest_positive_integer\
    \ = maximum(lst)\n    \n    if smallest_negative_integer == largest_positive_integer\n\
    \        return (smallest_negative_integer, smallest_negative_integer)\n    else\n\
    \        return (largest_positive_integer, largest_positive_integer)\n    end\n\
    end", "    if length(lst) == 0 \n        return None, None\n    end\n    \n  \
    \  largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest <\
    \ smallest \n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 2)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 3)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 4)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 5)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 6)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 7)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 8)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 9)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 10)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 11)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 12)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 13)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 14)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 15)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 16)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 17)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 18)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 19)\n\
    </cell>\n", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing)\n    end\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n   \
    \ else\n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing,\
    \ Nothing)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.", "    if lst.is_empty() \n     \
    \   return Tuple{Nothing, Nothing}() \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example,\
    \ if the input vector is [1,2,3], the function should return 5.", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend", "    if length(lst)\
    \ == 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend", "    \n    largest_negative_integer\
    \ = nothing\n    largest_positive_integer = nothing\n    \n    for x in lst\n\
    \        if x < 0\n            if largest_negative_integer == nothing\n      \
    \          largest_negative_integer = x\n            else\n                largest_negative_integer\
    \ = max(largest_negative_integer, x)\n        end\n        if x > 0\n        \
    \    if largest_positive_integer == nothing\n                largest_positive_integer\
    \ = x\n            else\n                largest_positive_integer = min(largest_positive_integer,\
    \ x)\n        end\n    end\n    \n    return (largest_negative_integer, largest_positive_integer)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([-1, -10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105, -106,\
    \ -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119,\
    \ -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132,\
    \ -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145,\
    \ -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158,\
    \ -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171,\
    \ -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184,\
    \ -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197,\
    \ -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210,\
    \ -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223,\
    \ -224, -226, -227, -228, -229, -230, -231, -232, -233, -234, -234, -235, -236,\
    \ -237, -238, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250,\
    \ -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -26",
  "    if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else \n        return None, None\nend", "    \n    largest\
    \ = nothing\n    smallest = nothing\n    \n    for x in lst\n        if x < 0\n\
    \            if largest == nothing\n                largest = x\n            else\n\
    \                largest = max(largest, x)\n        end\n        if x > 0\n  \
    \          if smallest == nothing\n                smallest = x\n            else\n\
    \                smallest = min(smallest, x)\n        end\n    end\n    \n   \
    \ return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the product of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the maximum of the numbers in the list. \n\
    Write a function that takes in a list of numbers and returns the minimum of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the median of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the mode of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the variance of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the standard deviation of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the variance of the numbers in the list. \n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the variance of the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the standard deviation of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the variance of the numbers in the list. \nWrite a function that takes in a\
    \ list of numbers and returns the standard deviation of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the variance\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the standard deviation of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the variance of the numbers in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the standard\
    \ deviation of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the variance of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the standard deviation of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the variance of the numbers in the list. \nWrite a function that takes in a\
    \ list of numbers and returns the standard deviation of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the variance\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the standard deviation of the numbers in the list. \nWrite a ",
  "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    elseif all(x -> x < 0,\
    \ lst)\n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing,\
    \ lst[1])\n    elseif all(x -> x > 0, lst)\n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of all the numbers\
    \ in a list.", "    largest = Nothing\n    smallest = Nothing\n    for i in lst\n\
    \        if i < 0\n            largest = i\n        elseif i == 0\n          \
    \  smallest = i\n        else\n            if largest < i\n                largest\
    \ = i\n            elseif smallest > i\n                smallest = i\n       \
    \     end\n        end\n    end\n    return (largest, smallest)\nend", "    if\
    \ length(lst) == 0 \n        return None, None\n    elseif length(lst) == 1 \n\
    \        return lst[1], None\n    elseif all(x -> x < 0, lst)\n        return\
    \ None, min(lst)\n    elseif all(x -> x > 0, lst)\n        return max(lst), None\n\
    \    else\n        largest, smallest = lst[1], lst[1]\n        for i in 2:length(lst)\n\
    \            if lst[i] > largest \n                largest = lst[i]\n        \
    \    elseif lst[i] < smallest \n                smallest = lst[i]\n          \
    \  else\n                break\n        end\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,5,6,7,8,9,10,11,12,13,14,15,",
  "    \n    smallest_integer = minimum(lst)\n    largest_integer = maximum(lst)\n\
    \    if smallest_integer == largest_integer\n        return (smallest_integer,\
    \ smallest_integer)\n    else\n        return (largest_integer, smallest_integer)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell", "    if length(lst) == 0 \n        return None, None\n    elseif length(lst)\
    \ == 1 \n        return lst[1], lst[1]\n    elseif all(x -> x < 0, lst) \n   \
    \     return lst[1], lst[1]\n    elseif all(x -> x > 0, lst) \n        return\
    \ lst[1], lst[1]\n    else\n        largest, smallest = lst[1], lst[1]\n     \
    \   for n in lst[2:end]\n            if n < smallest \n                smallest\
    \ = n\n            elseif n > largest \n                largest = n\n        end\n\
    \        return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers in a list.", "    if length(lst)\
    \ == 0 \n        return None, None\n    end\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else\n        return None, None\n    end\nend", "   \
    \ if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else\n        return None, None\nend", "    if length(lst)\
    \ == 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    if largest < smallest \n        return largest, smallest\n\
    \    else \n        return None, None\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers. \nIf there are no integers in the vector, return 0.", "   \
    \ largest = nothing\n    smallest = nothing\n    for i in lst\n        if i <\
    \ 0\n            largest = i\n        elseif i > 0 \n            smallest = i\n\
    \        end\n    end\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,",
  "    if length(lst) == 0 \n        return Nothing, Nothing\n    end\n    \n    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest < smallest\
    \ \n        return largest, smallest\n    else\n        return largest, Nothing\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>", "    if length(lst) == 0 \n        return Tuple{Nothing, Nothing}()\
    \ \n    else \n        largest = minimum(lst) \n        smallest = maximum(lst)\
    \ \n        return Tuple{Int64, Int64}(largest, smallest) \n    end\nend", " \
    \   if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else \n        return None, None\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,",
  "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(nothing, nothing) \n    else \n        largest = minimum(lst) \n \
    \       smallest = maximum(lst) \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(largest, smallest) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers in the list. \nIf there are no numbers in the list, return 0.",
  "    if length(lst) == 0 \n        return Nothing, Nothing \n    else \n       \
    \ largest = minimum(lst) \n        smallest = maximum(lst) \n        return (largest,\
    \ smallest) \n    end\nend", "    if length(lst) == 0 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(nothing, nothing)\n    elseif length(lst) ==\
    \ 1 \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[0],\
    \ nothing)\n    elseif all(x < 0 for x in lst) \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[end], nothing)\n    elseif all(x > 0 for\
    \ x in lst) \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1],\
    \ nothing)\n    else\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst[end], lst[1])\n    end\nend", "    if length(lst) == 0 \n    \
    \    return Tuple{Nothing, Nothing}() \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \nend\n\
    </code>\n<|/ a |>\n<| a |>\nI wrote a function that returns two numbers, one is\
    \ the largest and the other is the smallest number in a vector:\n<code>", "  \
    \  \n    largest = Nothing\n    smallest = Nothing\n    \n    for i in lst\n \
    \       if i < 0\n            largest = i\n        elseif i > 0 \n           \
    \ smallest = i\n        end\n    end\n    \n    return (largest, smallest)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of all\
    \ integers in a list.", "    if length(lst) == 0 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(Nothing, Nothing) \n    else \n        largest\
    \ = minimum(lst) \n        smallest = maximum(lst) \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(largest, smallest) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the mean\
    \ of the numbers in the vector. \nThe mean of a set of numbers is defined as the\
    \ sum of all numbers in the set\ndivided by the number of numbers in the set.\
    \ \nWrite a function that takes a vector and returns the median of the numbers\
    \ in the vector. \nThe median of a set of numbers is defined as the middle number\
    \ in the set. \nWrite a function that takes a vector and returns the mode of the\
    \ numbers in the vector. \nThe mode of a set of numbers is defined as the most\
    \ frequently occurring number in the set. \nWrite a function that takes a vector\
    \ and returns the variance of the numbers in the vector. \nThe variance of a set\
    \ of numbers is defined as the square of the difference between the mean of the\
    \ set and the mean. \nWrite a function that takes a vector and returns the standard\
    \ deviation of the numbers in the vector. \nThe standard deviation of a set of\
    \ numbers is defined as the square root of the variance. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the numbers in the vector.\
    \ \nThe sum of the squares of a set of numbers is defined as the sum of the squares\
    \ of the numbers in the set. \nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the numbers in the vector. \nThe sum of the\
    \ absolute values of a set of numbers is defined as the sum of the absolute values\
    \ of the numbers in the set. \nWrite a function that takes a vector and returns\
    \ the product of the numbers in the vector. \nThe product of a set of numbers\
    \ is defined as the product of the numbers in the set. \nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the squares of\
    \ the numbers in the vector. \nThe sum of the absolute values of the squares of\
    \ a set of numbers is defined as the sum of the squares of the numbers in the\
    \ set. \nWrite a function that takes a vector and returns the sum of the squares\
    \ of the absolute values of the numbers in the vector. \nThe sum of the squares\
    \ of the absolute values of a set of numbers is defined as the sum of the squares\
    \ of the absolute values of the numbers in the set. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the absolute values of the squares\
    \ of the numbers in the vector. \nThe sum of the squares of the absolute values\
    \ of the squares of a set of numbers is defined as the sum of the squares of the\
    \ absolute values of the squares of the numbers in the set. \nWrite a function\
    \ that takes a vector and returns the sum of the squares of the absolute values\
    \ of the squares of the absolute values of the numbers in the vector. \nThe sum\
    \ of the squares of the absolute values of the squares of the absolute values\
    \ of a set of numbers is ", "    \n    largest_positive = Int64[]\n    largest_negative\
    \ = Int64[]\n    \n    for x in lst\n        if x < 0\n            push!(largest_negative,\
    \ x)\n        elseif x > 0\n            push!(largest_positive, x)\n        end\n\
    \    end\n    \n    if length(largest_positive) == 0 && length(largest_negative)\
    \ == 0\n        return (Nothing, Nothing)\n    elseif length(largest_positive)\
    \ == 0\n        return (largest_negative, Nothing)\n    elseif length(largest_negative)\
    \ == 0\n        return (Nothing, largest_positive)\n    else\n        return (largest_positive,\
    \ largest_negative)\n    end\nend", "    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    if largest == smallest\n        return (largest, largest)\n\
    \    else\n        return (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\n\
    Write a function which takes a vector as input and returns the number of elements\
    \ that are not equal to zero.", "    if length(lst) == 0 \n        return nothing,\
    \ nothing \n    else \n        largest = minimum(lst) \n        smallest = maximum(lst)\
    \ \n        return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that returns the number of positive integers in a list.",
  "    if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[0], None)\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a value appears in a list. For example, count_values([1, 1, 2, 3, 3, 3,\
    \ 4, 4, 4, 4], 3) should return 4.", "    if length(lst) == 0 \n        return\
    \ Nothing, Nothing\n    elseif length(lst) == 1 \n        return lst[1], Nothing\n\
    \    elseif all(x < 0 for x in lst) \n        return Nothing, lst[1]\n    elseif\
    \ all(x > 0 for x in lst) \n        return lst[1], Nothing\n    else\n       \
    \ largest, smallest = lst[1], lst[1]\n        for i in 2:length(lst)\n       \
    \     if lst[i] > largest \n                largest = lst[i]\n            elseif\
    \ lst[i] < smallest \n                smallest = lst[i]\n            end\n   \
    \     end\n        return (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    if length(lst) == 0 \n       \
    \ return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing, Nothing)\n\
    \    elseif length(lst) == 1 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst[1], Nothing)\n    elseif all(isnothing(lst[i]) || lst[i] < 0 for\
    \ i in 2:length(lst))\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    elseif all(isnothing(lst[i]) || lst[i] > 0\
    \ for i in 2:length(lst))\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    else\n        largest = minimum(lst)\n    \
    \    smallest = maximum(lst)\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(largest, smallest)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=julia,functional-programming |>\n<code>", "    if length(lst) == 0 \n \
    \       return Nothing, Nothing\n    elseif length(lst) == 1 \n        return\
    \ lst[1], Nothing\n    elseif all(x < 0 for x in lst) \n        return Nothing,\
    \ lst[1]\n    elseif all(x > 0 for x in lst) \n        return lst[1], Nothing\n\
    \    else\n        largest_value = maximum(lst)\n        smallest_value = minimum(lst)\n\
    \        return largest_value, smallest_value\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n   \
    \     return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n\
    \    elseif length(lst) == 2 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst[1], lst[2])\n    elseif length(lst) > 2 \n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(largest, smallest)\n    end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the list.\n<|/ c |>\n\
    <| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are negative numbers in the list.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers\
    \ in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are\
    \ negative numbers in the list. Try it yourself.\n<|/ c |>\n<| a dscore=5 |>\n\
    In Julia 1.2, you can use the function findmax and findmin:\n<code>\njulia> findmax(collect(1:10))\n\
    9", "    if length(lst) == 0 \n        return None, None\n    elseif length(lst)\
    \ == 1 \n        return lst[1], None\n    elseif all(x -> x < 0, lst) \n     \
    \   return None, lst[1]\n    elseif all(x -> x > 0, lst) \n        return lst[1],\
    \ None\n    else\n        largest, smallest = lst[1], lst[1]\n        for i in\
    \ 2:length(lst)\n            if lst[i] > largest \n                largest = lst[i]\n\
    \            elseif lst[i] < smallest \n                smallest = lst[i]\n  \
    \          end\n        end\n        return largest, smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing, Nothing\n    \n    largest =\
    \ minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest < smallest \n\
    \        return largest, smallest\n    else\n        return largest, Nothing\n\
    \    end\nend", "    largest = nothing\n    smallest = nothing\n    \n    for\
    \ x in lst\n        if x < 0\n            largest = x\n        elseif x > 0\n\
    \            smallest = x\n        end\n    end\n    \n    return (largest, smallest)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([-1, -5, -10,\
    \ -15, -20, -25, -30])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7, -8, 9])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7, -8, 9, 10])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7, -8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3, -4, -5, -6, -7,\
    \ -8, 9, 10, 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14,\
    \ 15])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2, 3,\
    \ -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n",
  "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(nothing, nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[0], nothing)\n    elseif all(isnothing(lst[1:end-1]))\n\
    \        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1], nothing)\n\
    \    elseif all(isnothing(lst[2:end]))\n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(lst[1], lst[2])\n    else\n        smallest_negative\
    \ = minimum(lst)\n        largest_positive = maximum(lst)\n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(smallest_negative, largest_positive)\n    end\n\
    end", "    if length(lst) == 0 \n        return None, None\n    elseif length(lst)\
    \ == 1 \n        return lst[1], None\n    elseif all(isnothing(lst[i]) || lst[i]\
    \ < 0 for i in 1:length(lst))\n        return None, lst[1]\n    elseif all(isnothing(lst[i])\
    \ || lst[i] > 0 for i in 1:length(lst))\n        return lst[1], None\n    else\n\
    \        largest = maximum(lst)\n        smallest = minimum(lst)\n        return\
    \ largest, smallest\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns a new vector where each element is the sum of\
    \ the squares of the original elements. For example, if the input vector is [1\
    \ 2 3], the output should be [1 4 9].", "    if length(lst) == 0 \n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(nothing, nothing) \n   \
    \ else \n        largest = minimum(lst) \n        smallest = maximum(lst) \n \
    \       return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([", " \
    \   if length(lst) == 0 \n        return None, None\n    else \n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend", "    if length(lst) == 0 \n        return nothing, nothing \n\
    \    else \n        largest = minimum(lst) \n        smallest = maximum(lst) \n\
    \        return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers in a list.", " \
    \   largest = nothing\n    smallest = nothing\n    for i in lst\n        if i\
    \ < 0\n            largest = i\n        elseif i == 0\n            smallest =\
    \ i\n        else\n            break\n        end\n    end\n    return (largest,\
    \ smallest)\nend", "    if length(lst) == 0 \n        return None, None\n    end\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else\n        return largest,\
    \ Nothing\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,-3,4,5,6,7,8,9,10,",
  "    \n    largest_integer = Int64[]\n    smallest_integer = Int64[]\n    \n   \
    \ for x in lst\n        if x < 0\n            push!(largest_integer, x)\n    \
    \    elseif x > 0\n            push!(smallest_integer, x)\n        end\n    end\n\
    \    \n    if length(largest_integer) == 0\n        return Nothing, Nothing\n\
    \    elseif length(smallest_integer) == 0\n        return largest_integer[1],\
    \ Nothing\n    else\n        return largest_integer[1], smallest_integer[1]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of positive integers in a list.", "    if length(lst) == 0 \n       \
    \ return Nothing, Nothing\n    elseif length(lst) == 1 \n        return lst[1],\
    \ Nothing\n    elseif all(isnothing(lst[i]) for i in 2:length(lst)) \n       \
    \ return Nothing, Nothing\n    elseif all(isnothing(lst[i]) for i in 1:length(lst))\
    \ \n        return Nothing, lst[1]\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question at\
    \ all. OP wants to know how to find the largest and smallest numbers in a vector,\
    \ not how to find the largest and smallest numbers in a list.\n<|/ c |>\n<| c\
    \ |>\nI believe this does answer the question. He wants to find the largest and\
    \ smallest numbers in a vector, not how to find the largest and smallest numbers\
    \ in a list.\n<|/ c |>\n<| c |>\nThe question asks for \"a function that returns\
    \ a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the\
    \ smallest of positive integers in a list.\" The answer gives a function that\
    \ returns a tuple. He wants to know how to find the largest and smallest numbers\
    \ in a vector, not how to find the largest and smallest numbers in a list.\n<|/\
    \ c |>\n<| c |>\nThe question asks for \"a function that returns a tuple (a, b),\
    \ where 'a' is the largest of negative integers, and 'b' is the smallest of positive\
    \ integers in a list.\" The answer gives a function that returns a tuple. He wants\
    \ to know how to find the largest and smallest numbers in a vector, not how to\
    \ find the largest and smallest numbers in a list.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for \"a function that returns a tuple (a, b), where 'a' is the largest\
    \ of negative integers, and 'b' is the smallest of positive integers in a list.\"\
    \ The answer gives a function that returns a tuple. He wants to know how to find\
    \ the largest and smallest numbers in a vector, not how to find the largest and\
    \ smallest numbers in a list.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(lst)\
    \ == 0 \n        return nothing, nothing\n    else \n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end", "    if length(lst) == 0 \n        return Nothing, Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1], Nothing\n    elseif all(x -> x < 0, lst) \n  \
    \      return Nothing, lst[1]\n    elseif all(x -> x > 0, lst) \n        return\
    \ lst[1], Nothing\n    else\n        largest, smallest = lst[1], lst[1]\n    \
    \    for i in 2:length(lst)\n            if lst[i] > largest \n              \
    \  largest = lst[i]\n            elseif lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return largest, smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.", "    if length(lst)\
    \ == 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the largest integer in a list.", "    if length(lst)\
    \ == 0 \n        return None, None\n    else \n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end", "    \n    if lst == []\n        return Nothing, Nothing\n    end", "  \
    \  if length(lst) == 0\n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 0])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, ", "    if length(lst) == 0 \n        return\
    \ Nothing, Nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    elseif length(lst) == 1 \n     \
    \   return lst[1], Nothing\n    elseif all(x -> x < 0, lst) \n        return Nothing,\
    \ lst[1]\n    elseif all(x -> x > 0, lst) \n        return lst[1], Nothing\n \
    \   else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n  \
    \      return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in a list that satisfy a predicate.",
  "    if length(lst) == 0 \n        return Nothing, Nothing\n    else \n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of positive integers in a list.", "    largest = nothing\n    smallest\
    \ = nothing\n    for x in lst\n        if x < 0\n            if largest == nothing\n\
    \                largest = x\n            else\n                largest = largest.max(x)\n\
    \        end\n        if x > 0\n            if smallest == nothing\n         \
    \       smallest = x\n            else\n                smallest = smallest.min(x)\n\
    \        end\n    end\n    return (largest, smallest)\nend", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    elseif length(lst) == 1 \n     \
    \   return lst[1], Nothing\n    elseif all(x < 0 for x in lst) \n        return\
    \ Nothing, lst[1]\n    elseif all(x > 0 for x in lst) \n        return lst[1],\
    \ Nothing\n    else\n        largest, smallest = lst[1], lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] > largest \n                largest\
    \ = lst[i]\n            elseif lst[i] < smallest \n                smallest =\
    \ lst[i]\n            end\n        end\n        return largest, smallest\n   \
    \ end\nend", "    if length(lst) == 0\n        return None, None\n    end\n  \
    \  largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest < smallest\n\
    \        return largest, smallest\n    else\n        return None, None\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 2)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 3)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 4)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 5)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 6)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 7)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 8)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 9)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 10)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 11)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 12)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 13)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 14)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 15)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 16)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 17)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 18)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 19)\n\
    </cell>\n<code language=julia-1.5", "    if length(lst) == 0 \n        return\
    \ Nothing, Nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend", "    if length(lst)\
    \ == 0 \n        return Nothing, Nothing \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given value appears in a given list.", "    if length(lst) == 0 \n \
    \       return None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\n\
    \        return None, None\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(largest, smallest)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,2",
  "    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest == smallest\n\
    \        return (largest, largest)\n    else\n        return (largest, smallest)\n\
    \    end\nend", "    if length(lst) == 0 \n        return None, None\n    \n \
    \   largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 2)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 3)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 4)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 5)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 6)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 7)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 8)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 9)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 10)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 11)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 12)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 13)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 14)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 15)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 16)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 17)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 18)\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,3,5,7,9], 19)\n\
    </cell>\n<code language=juli", "    largest = nothing\n    smallest = nothing\n\
    \    \n    for i in lst\n        if i < 0\n            if largest == nothing\n\
    \                largest = i\n            else\n                largest = largest\n\
    \        end\n        if i > 0\n            if smallest == nothing\n         \
    \       smallest = i\n            else\n                smallest = smallest\n\
    \        end\n    end\n    return largest, smallest\nend", "    \n    if length(lst)\
    \ == 0 \n        return Nothing, Nothing\n    end\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else\n        return largest, Nothing\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first element of\
    \ a list that satisfies a condition. For example, if the list is [1,2,3,4,5,6,7,8,9]\
    \ and you want the first element that is a multiple of 3, the function should\
    \ return 3.", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n   \
    \     return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n\
    \    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n \
    \       return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.", "    if length(lst)\
    \ == 0\n        return None, None\n    elseif length(lst) == 1\n        return\
    \ lst[0], None\n    elseif all(isnothing(el) for el in lst)\n        return None,\
    \ None\n    else\n        largest, smallest = lst[1], lst[1]\n        for el in\
    \ lst[2:end]\n            if el < smallest\n                smallest = el\n  \
    \          elseif el > largest\n                largest = el\n            end\n\
    \        end\n        return largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, 3, 0])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, ", "    if length(lst) == 0 \n        return nothing, nothing \n    else\
    \ \n        largest, smallest = Inf, -Inf \n        for num in lst \n        \
    \    if num < smallest \n                smallest = num \n            elseif num\
    \ > largest \n                largest = num \n            end \n        end \n\
    \        return largest, smallest \n    end \nend ", "    if length(lst) == 0\
    \ \n        return Nothing, Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1], Nothing\n    else \n        largest, smallest = Int64, Int64\n     \
    \   for i in lst\n            if i < largest\n                largest = i\n  \
    \          elseif i > smallest\n                smallest = i\n            end\n\
    \        end\n        return (largest, smallest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,4,5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,",
  "    if length(lst) == 0 \n        return nothing, nothing \n    else \n       \
    \ largest = minimum(lst) \n        smallest = maximum(lst) \n        return largest,\
    \ smallest \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere\
    \ is a simple solution that uses no packages:\n<code>", "    if length(lst) ==\
    \ 0 \n        return None, None\n    else \n        largest = minimum(lst)\n \
    \       smallest = maximum(lst)\n        return largest, smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing, Nothing \n    else \n       \
    \ largest = minimum(lst) \n        smallest = maximum(lst) \n        return largest,\
    \ smallest \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector.",
  "    largest = nothing\n    smallest = nothing\n    for x in lst\n        if x <\
    \ 0\n            largest = x\n        elseif x > 0\n            smallest = x\n\
    \        end\n    end\n    return (largest, smallest)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    largest = nothing\n    smallest = nothing\n\
    \    for i in lst\n        if i < 0\n            largest = i\n        elseif i\
    \ > 0 \n            smallest = i\n        end\n    end\n    return largest, smallest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to know if there is a way to do this without using an if statement or\
    \ ternary operator. Your answer uses `if` statements.\n<|/ c |>\n<| c |>\nI believe\
    \ that my answer does answer the question. OP wants to know if there is a way\
    \ to do this without using an if statement or ternary operator. My answer uses\
    \ `if` statements. I believe that my answer does answer the question. OP wants\
    \ to know if there is a way to do this without using an if statement or ternary\
    \ operator. My answer uses `if` statements. I believe that my answer does answer\
    \ the question. OP wants to know if there is a way to do this without using an\
    \ if statement or ternary operator. My answer uses `if` statements.\n<|/ c |>\n\
    <| c |>\nI believe that my answer does answer the question. OP wants to know if\
    \ there is a way to do this without using an if statement or ternary operator.\
    \ My answer uses `if` statements. I believe that my answer does answer the question.\
    \ OP wants to know if there is a way to do this without using an if statement\
    \ or ternary operator. My answer uses `if` statements. I believe that my answer\
    \ does answer the question. OP wants to know if there is a way to do this without\
    \ using an if statement or ternary operator. My answer uses `if` statements.\n\
    <|/ c |>\n<| c |>\nI believe that my answer does answer the question. OP wants\
    \ to know if there is a way to do this without using an if statement or ternary\
    \ operator. My answer uses `if` statements. I believe that my answer does answer\
    \ the question. OP wants to know if there is a way to do this without using an\
    \ if statement or ternary operator. My answer uses `if` statements. I believe\
    \ that my answer does answer the question. OP wants to know if there is a way\
    \ to do this without using an if statement or ternary operator. My answer uses\
    \ `if` statements.\n<|/ c |>\n<| c |>\nI believe that my answer does answer the\
    \ question. OP wants to know if there is a way to do this without using an if\
    \ statement or ternary operator. My answer uses `if` statements. I believe that ",
  "    if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[0], None)\n    elseif all(x < 0 for x in lst)\n     \
    \   return (None, lst[0])\n    elseif all(x > 0 for x in lst)\n        return\
    \ (lst[-1], None)\n    else\n        largest_value = maximum(lst)\n        smallest_value\
    \ = minimum(lst)\n        return (largest_value, smallest_value)\n    end\nend",
  "    largest = nothing\n    smallest = nothing\n    for i in lst\n        if i <\
    \ 0\n            largest = i\n        elseif i > 0 \n            smallest = i\n\
    \        end\n    end\n    return (largest, smallest)\nend", "    if length(lst)\
    \ == 0 \n        return nothing, nothing \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,",
  "    if length(lst) == 0 \n        return Tuple{Nothing, Nothing}() \n    else \n\
    \        largest = minimum(lst) \n        smallest = maximum(lst) \n        return\
    \ largest, smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first element of\
    \ a list, and a function that returns the last element of a list. \nWrite a function\
    \ that returns the first element of a vector, and a function that returns the\
    \ last element of a vector. \nWrite a function that returns the first element\
    \ of a tuple, and a function that returns the last element of a tuple. \nWrite\
    \ a function that returns the first element of a dictionary, and a function that\
    \ returns the last element of a dictionary. \nWrite a function that returns the\
    \ first element of a set, and a function that returns the last element of a set.\
    \ \nWrite a function that returns the first element of a tuple, and a function\
    \ that returns the last element of a tuple. \nWrite a function that returns the\
    \ first element of a vector, and a function that returns the last element of a\
    \ vector. \nWrite a function that returns the first element of a dictionary, and\
    \ a function that returns the last element of a dictionary. \nWrite a function\
    \ that returns the first element of a set, and a function that returns the last\
    \ element of a set. \nWrite a function that returns the first element of a tuple,\
    \ and a function that returns the last element of a tuple. \nWrite a function\
    \ that returns the first element of a vector, and a function that returns the\
    \ last element of a vector. \nWrite a function that returns the first element\
    \ of a dictionary, and a function that returns the last element of a dictionary.\
    \ \nWrite a function that returns the first element of a set, and a function that\
    \ returns the last element of a set. \nWrite a function that returns the first\
    \ element of a tuple, and a function that returns the last element of a tuple.\
    \ \nWrite a function that returns the first element of a vector, and a function\
    \ that returns the last element of a vector. \nWrite a function that returns the\
    \ first element of a dictionary, and a function that returns the last element\
    \ of a dictionary. \nWrite a function that returns the first element of a set,\
    \ and a function that returns the last element of a set.", "    if length(lst)\
    \ == 0 \n        return None, None\n    elseif length(lst) == 1 \n        return\
    \ lst[1], None\n    elseif all(isnothing(el) for el in lst) \n        return None,\
    \ None\n    elseif all(el < 0 for el in lst) \n        return None, min(lst)\n\
    \    elseif all(el > 0 for el in lst) \n        return max(lst), None\n    else\n\
    \        return max(lst), min(lst)\n    end\nend\n</code>\n<|/ a tags=julia,function,if-statement\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid the\
    \ if-else statement. Maybe some kind of vectorized solution?\n<|/ c |>\n<| c |>\n\
    I added a solution that avoids if-else statements. But I doubt it is more efficient\
    \ than your original solution.\n<|/ c |>\n<| c |>\nI added a solution that avoids\
    \ if-else statements. But I doubt it is more efficient than your original solution.\n\
    <|/ c |>\n<| c |>\nI added a solution that avoids if-else statements. But I doubt\
    \ it is more efficient than your original solution.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that avoids if-else statements. But I doubt it is more efficient\
    \ than your original solution.\n<|/ c |>\n<| a dscore=2 |>\nI like your solution,\
    \ but I wonder if there is a way to avoid the if-else statement. Maybe some kind\
    \ of vectorized solution?", "    largest = nothing\n    smallest = nothing\n \
    \   for x in lst\n        if x < 0\n            if largest == nothing\n      \
    \          largest = x\n            else\n                largest = max(largest,\
    \ x)\n        elseif x > 0\n            if smallest == nothing\n             \
    \   smallest = x\n            else\n                smallest = min(smallest, x)\n\
    \        end\n    end\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([-1, -10, -20, -5, -100, -200])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=", " \
    \   if length(lst) == 0 \n        return Nothing, Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1], Nothing\n    elseif all(x -> x < 0, lst) \n  \
    \      return Nothing, lst[1]\n    elseif all(x -> x > 0, lst) \n        return\
    \ lst[1], Nothing\n    else\n        largest, smallest = maximum(lst), minimum(lst)\n\
    \        return largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,-2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    large", "    largest = nothing\n    smallest = nothing\n    \n    if length(lst)\
    \ == 0 \n        return largest, smallest\n    end\n    \n    for x in lst\n \
    \       if x < 0 \n            largest = x\n        elseif x > 0 \n          \
    \  smallest = x\n        end\n    end\n    \n    return largest, smallest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers in a list.", "    \n    if lst.is_empty\n        return None, None\n\
    \    end\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n\
    \    if largest < smallest\n        return largest, smallest\n    else\n     \
    \   return None, None\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-", "    if\
    \ length(lst) == 0\n        return None, None\n    elseif length(lst) == 1\n \
    \       return lst[0], None\n    else\n        largest, smallest = Int64, Int64\n\
    \        for n in lst\n            if n < smallest\n                smallest =\
    \ n\n            elseif n > largest\n                largest = n\n           \
    \ end\n        end\n        return largest, smallest\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThe `if length(lst) == 0` can be replaced with `if\
    \ !isdefined(lst)`.\n<|/ c |>\n<| c |>\nThanks, I didn't know about isdefined!\n\
    <|/ c |>\n<| a tags=julia |>\nI like using comprehensions for these types of problems:\n\
    <code>\njulia> [x for x in [1,2,3] if x > 0]\n3-element Array{Int64,1}:\n 2\n\
    \ 3\n 1\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution, but I feel\
    \ like it would be more efficient to just use an if statement to check if a value\
    \ is greater than zero. I'm just not sure how to do that in Julia.\n<|/ c |>\n\
    <| c |>\nI agree that `if` is more efficient, but I find comprehensions more readable.\
    \ Also, if you need to do more complex things, you can always use comprehensions\
    \ inside an `if` statement.\n<|/ c |>\n<| c |>\nI agree, comprehensions are more\
    \ readable, but I find them more difficult to read when there are multiple nested\
    \ comprehensions. I prefer `if` statements over comprehensions whenever possible.\n\
    <|/ c |>\n<| c |>\nI agree that `if` is more readable, but I find comprehensions\
    \ more readable. Also, if you need to do more complex things, you can always use\
    \ comprehensions inside an `if` statement.\n<|/ c |>\n<| c |>\nI agree, comprehensions\
    \ are more readable, but I find them more difficult to read when there are multiple\
    \ nested comprehensions. I prefer `if` statements over comprehensions whenever\
    \ possible.\n<|/ c |>\n<| a |>\nI like using comprehensions for these types of\
    \ problems:\n<code>\njulia> [x for x in [1,2,3] if x > 0]\n3-element Array{Int64,1}:\n\
    \ 2\n 3\n 1\n</code>\n<|/ a dscore=3 tags=julia |>\n<| a dscore=3 |>\nI like using\
    \ comprehensions for these types of ", "    largest = nothing\n    smallest =\
    \ nothing\n    for i in lst\n        if i < 0\n            if largest == nothing\n\
    \                largest = i\n            else\n                largest = largest\n\
    \            end\n        elseif i > 0\n            if smallest == nothing\n \
    \               smallest = i\n            else\n                smallest = smallest\n\
    \            end\n        end\n    end\n    return (largest, smallest)\nend",
  "    if length(lst) == 0 \n        return nothing, nothing \n    else \n       \
    \ largest = minimum(lst) \n        smallest = maximum(lst) \n        return largest,\
    \ smallest \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements of\
    \ the vector. \nFor example, if the input vector is [5, -4, 3, -2], the output\
    \ should be 7.", "    if length(lst) == 0 \n        return nothing, nothing \n\
    \    else \n        largest = minimum(lst) \n        smallest = maximum(lst) \n\
    \        return largest, smallest \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector as input and returns a vector where each\
    \ element is the product of all the elements in the original vector. For example,\
    \ if the input vector is [1,2,3], the output vector should be [1,2,3].", "   \
    \ if length(lst) == 0 \n        return Nothing, Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1], Nothing\n    elseif all(x -> x < 0, lst) \n  \
    \      return Nothing, lst[1]\n    elseif all(x -> x > 0, lst) \n        return\
    \ lst[1], Nothing\n    else\n        largest, smallest = lst[1], lst[1]\n    \
    \    for n in lst[2:end]\n            if n < smallest \n                smallest\
    \ = n\n            elseif n > largest \n                largest = n\n        \
    \    end\n        end\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94",
  "    if length(lst) == 0 \n        return None, None\n    else \n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend", "    if lst.is_empty\n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(Nothing, Nothing)\n    elseif lst.head < 0\n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing, lst.head)\n   \
    \ elseif lst.head > 0\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst.head, Nothing)\n    end\nend", "    \n    largest_integer = Int64[]\n\
    \    smallest_integer = Int64[]\n    \n    for element in lst\n        if element\
    \ < 0\n            push!(largest_integer, element)\n        elseif element > 0\n\
    \            push!(smallest_integer, element)\n        end\n    end\n    \n  \
    \  if length(largest_integer) == 0 || length(smallest_integer) == 0\n        return\
    \ Nothing, Nothing\n    else\n        return largest_integer[1], smallest_integer[1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,-6,7,8,-9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the numbers in the list.", "    if length(lst) == 0 \n  \
    \      return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing, Nothing)\n\
    \    elseif length(lst) == 1 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst[1], Nothing)\n    elseif length(lst) == 2 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], lst[2])\n    elseif length(lst) > 2\
    \ \n        largest = maximum(lst)\n        smallest = minimum(lst)\n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function\
    \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.", "    \n    largest\
    \ = nothing\n    smallest = nothing\n    \n    for x in lst\n        if x < 0\n\
    \            largest = x\n        elseif x > 0\n            smallest = x\n   \
    \     end\n    end\n    \n    return (largest, smallest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,-3,5])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,5,-7,8,-9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the absolute values of the numbers in the vector. For example,\
    \ if the vector is [1,2,-3,5,-7,8,-9,10], the function should return 15.", " \
    \   if length(lst) == 0\n        return None, None\n    elseif length(lst) ==\
    \ 1\n        return lst[0], None\n    else\n        largest, smallest = Int64(1),\
    \ Int64(0)\n        for n in lst\n            if n < largest\n               \
    \ largest = n\n            elseif n > smallest\n                smallest = n\n\
    \            end\n        end\n        return largest, smallest\n    end\nend",
  "    if length(lst) == 0 \n        return nothing, nothing \n    else \n       \
    \ largest = minimum(lst)\n        smallest = maximum(lst)\n        return largest,\
    \ smallest \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>",
  "    largest = Nothing\n    smallest = Nothing\n    for x in lst\n        if x <\
    \ 0\n            if largest == Nothing\n                largest = x\n        \
    \    else\n                largest = min(largest, x)\n        elseif x > 0\n \
    \           if smallest == Nothing\n                smallest = x\n           \
    \ else\n                smallest = max(smallest, x)\n        end\n    end\n  \
    \  return largest, smallest\nend\n</code>\n<|/ a tags=julia,function,if-statement\
    \ |>\n<| c |>\nThis doesn't work if there are multiple negative and positive numbers\
    \ in the list. For example, `largest_smallest_integers([-1, -2, -3, 4, 5])` returns\
    \ `(-2, 4)` instead of `(-2, -3)`.\n<|/ c |>\n<| c |>\nYes, I noticed that and\
    \ fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>", "    if length(lst) == 0 \n        return None, None\n    \n  \
    \  largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest < smallest\
    \ \n        return largest, smallest\n    else \n        return None, None\nend",
  "    largest = Nothing\n    smallest = Nothing\n    for x in lst\n        if x <\
    \ 0\n            largest = x\n        elseif x > 0\n            smallest = x\n\
    \        end\n    end\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector as input, and returns the sum of the absolute\
    \ values of the elements in the vector.", "    largest = nothing\n    smallest\
    \ = nothing\n    for i in lst\n        if i < 0\n            largest = i\n   \
    \     elseif i > 0 \n            smallest = i\n        end\n    end\n    return\
    \ (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,2,-3,-5,-7,8,-9,-10,11,-13,-15,17])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.", "    largest = nothing\n    smallest\
    \ = nothing\n    \n    for x in lst\n        if x < 0\n            if largest\
    \ == nothing\n                largest = x\n            else\n                largest\
    \ = max(largest, x)\n        end\n        if x > 0\n            if smallest ==\
    \ nothing\n                smallest = x\n            else\n                smallest\
    \ = min(smallest, x)\n        end\n    end\n    return (largest, smallest)\nend",
  "    if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ largest, smallest\n    else\n        return None, None\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum}(\\vec{x}) = \\sum_{i=1}^n |x_i|\n\\end{align}\n$$\nWrite a function\
    \ that takes a vector and returns the sum of the squares of the elements in the\
    \ vector. \nFor example, \n$$\n\\begin{align}\n\\text{sum}(\\vec{x}) = \\sum_{i=1}^n\
    \ x_i^2\n\\end{align}\n$$\nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum}(\\vec{x}) = \\sum_{i=1}^n x_i^2\n\\end{align}\n$$\nWrite a function\
    \ that takes a vector and returns the sum of the squares of the elements in the\
    \ vector. \nFor example, \n$$\n\\begin{align}\n\\text{sum}(\\vec{x}) = \\sum_{i=1}^n\
    \ x_i^2\n\\end{align}\n$$\nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum}(\\vec{x}) = \\sum_{i=1}^n x_i^2\n\\end{align}\n$$\nWrite a function\
    \ that takes a vector and returns the sum of the squares of the elements in the\
    \ vector. \nFor example, \n$$\n\\begin{align}\n\\text{sum}(\\vec{x}) = \\sum_{i=1}^n\
    \ x_i^2\n\\end{align}\n$$", "    if length(lst) == 0 \n        return nothing,\
    \ nothing \n    else \n        largest, smallest = Inf, -Inf \n        for elt\
    \ in lst \n            if elt < smallest \n                smallest = elt \n \
    \           elseif elt > largest \n                largest = elt \n          \
    \  end \n        end \n        return largest, smallest \n    end \nend ", " \
    \   largest = nothing\n    smallest = nothing\n    for i in lst\n        if i\
    \ < 0\n            if largest == nothing\n                largest = i\n      \
    \      else\n                largest = nothing\n        end\n        if i > 0\n\
    \            if smallest == nothing\n                smallest = i\n          \
    \  else\n                smallest = nothing\n        end\n    end\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([1,\
    \ 2, -3, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the absolute values of the integers in the\
    \ vector.", "    if length(lst) == 0 \n        return Nothing, Nothing \n    else\
    \ \n        largest = minimum(lst) \n        smallest = maximum(lst) \n      \
    \  return largest, smallest \n    end\nend", "    if length(lst) == 0 \n     \
    \   return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing, Nothing)\n\
    \    elseif length(lst) == 1 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(lst[1], Nothing)\n    elseif length(lst) == 2 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], lst[2])\n    elseif length(lst) > 2\
    \ \n        largest = maximum.(lst)\n        smallest = minimum.(lst)\n      \
    \  return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function\
    \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.", "    \n    if lst ==\
    \ []\n        return None, None\n    end\n    \n    largest = minimum(lst)\n \
    \   smallest = maximum(lst)\n    \n    if largest < smallest\n        return largest,\
    \ smallest\n    else\n        return None, None\n    end\nend", "    if length(lst)\
    \ == 0 \n        return None, None\n    else \n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end", "    if length(lst) == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(Nothing, Nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    elseif all(x < 0 for\
    \ x in lst) \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(Nothing,\
    \ lst[1])\n    elseif all(x > 0 for x in lst) \n        return Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}}(lst[1], Nothing)\n    end\n    largest = maximum(lst)\n\
    \    smallest = minimum(lst)\n    return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.", "    if length(lst)\
    \ == 0 \n        return nothing, nothing \n    else \n        largest = minimum(lst)\
    \ \n        smallest = maximum(lst) \n        return largest, smallest \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example,\
    \ \n$$\n\\begin{align}\n\\text{sum}(\\vec{x}) = \n\\begin{cases}\n\\sum{i=1}^{n}\
    \ x{i}, & \\text{if}\\ x{i} \\geq 0 \\\n0, & \\text{otherwise}\n\\end{cases}\n\
    \\end{align}\n$$\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements in the vector. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum}(\\vec{x}) = \n\\begin{cases}\n\\sum{i=1}^{n} x{i}^{2}, & \\text{if}\\\
    \ x{i} \\geq 0 \\\n0, & \\text{otherwise}\n\\end{cases}\n\\end{align}\n$$", " \
    \   if length(lst) == 0 \n        return Nothing, Nothing \n    else \n      \
    \  largest = minimum(lst)\n        smallest = maximum(lst)\n        return largest,\
    \ smallest \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a function\
    \ that does this for you:\n<code>", "    if length(lst) == 0 \n        return\
    \ Nothing, Nothing\n    end\n    \n    largest = minimum(lst)\n    smallest =\
    \ maximum(lst)\n    \n    if largest < smallest \n        return largest, smallest\n\
    \    else\n        return largest, Nothing\n    end\nend", "    if length(lst)\
    \ == 0 \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(nothing,\
    \ nothing)\n    elseif length(lst) == 1 \n        return Tuple{Union{Int64, Nothing},\
    \ Union{Int64, Nothing}}(lst[1], nothing)\n    elseif length(lst) == 2 \n    \
    \    return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(lst[1], lst[2])\n\
    \    elseif length(lst) > 2 \n        largest = maximum(lst)\n        smallest\
    \ = minimum(lst)\n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns the sum of the numbers. If the list is empty,\
    \ return 0.", "    \n    largest = nothing\n    smallest = nothing\n    \n   \
    \ if length(lst) == 0 \n        return largest, smallest\n    end\n    \n    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest == nothing\n\
    \        return largest, smallest\n    end\n    \n    if smallest == nothing\n\
    \        return largest, smallest\n    end\n    \n    return largest, smallest\n\
    end", "    if length(lst) == 0 \n        return None, None\n    else if all(x\
    \ < 0 for x in lst) \n        return -Inf, min(x for x in lst if x > 0)\n    else\
    \ if all(x > 0 for x in lst) \n        return min(x for x in lst if x < 0), -Inf\n\
    \    else \n        return None, None\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None, None\n    else \n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nIf there are\
    \ no integers in the vector, return 0.", "    if length(lst) == 0 \n        return\
    \ Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(nothing, nothing)\n    end\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}}(largest,\
    \ nothing)\n    else\n        return Tuple{Union{Int64, Nothing}, Union{Int64,\
    \ Nothing}}(nothing, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the absolute values of\
    \ the elements of the vector. \nThe function should work for both real and complex\
    \ numbers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
