name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n                    \"\
  \"\"\nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    \n    correct_bracketing = true\n    \n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \">\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        else\n            correct_bracketing =\
    \ correct_bracketing && true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else \n            correct_bracketing = correct_bracketing\
    \ or false\n            \n    return correct_bracketing\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    correct_bracketing =\
    \ false\n    \n    for bracket in brackets\n        if bracket.head == bracket.tail\n\
    \            correct_bracketing = true\n        end\n    end\n    \n    return\
    \ correct_bracketing\nend", "    brackets = brackets.replace(\"<\", \"\")\n  \
    \  brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = bracket",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\
    \"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n \
    \   \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", " \
    \   \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\
    \ \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing || true\n        else \n            correct_bracketing =\
    \ correct_bracketing || false\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    correct_bracketing = false\n\
    \    \n    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = true\n        end\n    end\n    \n    return correct_bracketing\nend\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns true\n</cell>\n\
    <code language=julia-", "    \n    brackets = brackets.replace(\"<\", \"\") \n\
    \    brackets = brackets.replace(\">\", \"\") \n    brackets = brackets.replace(\"\
    (\", \"\") \n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\") \n    brackets = brackets.replace(\"}\", \"\") \n    brackets = brackets.replace(\"\
    [\", \"\") \n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.", "    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n", "    \n    correct_bracketing = false\n    \n    for bracket in\
    \ brackets\n        if bracket == \"<\"\n            correct_bracketing = true\n\
    \        end\n    end\n    \n    return correct_bracketing\nend", "    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n", "    \n    correct_bracketing = True\n\
    \    \n    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing and (open_brackets(brackets) == close_brackets(brackets))\n\
    \        elseif bracket == \">\"\n            correct_bracketing = correct_bracketing\
    \ and (open_brackets(brackets) != close_brackets(brackets))\n        else\n  \
    \          correct_bracketing = correct_bracketing and (open_brackets(brackets)\
    \ == close_brackets(brackets))\n    end\n    \n    return correct_bracketing\n\
    end", "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n", "    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,", "    \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\
    \ \n        if bracket == \"<\" \n            correct_bracketing = true \n   \
    \     else if bracket == \">\" \n            correct_bracketing = false \n   \
    \     else \n            correct_bracketing = false \n    return correct_bracketing\
    \ \n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the string \"hello\" appears in the string. \nFor\
    \ example, if the string were \"hello hello hello hello hello hello\", the function\
    \ should return 5.", "    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"", "    brackets = brackets.replace(\"<\",\
    \ \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n   \
    \ \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n", "    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.", "    \"\"\"\n    correct_bracketing(brackets::String)",
  "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    if brackets == \"\" \n        correct_bracketing = true\n\
    \        return correct_bracketing\n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    ", "    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or is_opening_bracket(bracket))\n        elseif bracket == \">\"\n         \
    \   correct_bracketing = correct_bracketing and not (correct_bracketing or is_closing_bracket(bracket))\n\
    \        else\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or is_opening_bracket(bracket) or is_closing_bracket(bracket))\n    end\n  \
    \  \n    return correct_bracketing\nend", "    \n    correct_bracketing = True\n\
    \    \n    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing && is_opening_bracket(bracket)\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && is_closing_bracket(bracket)\n\
    \        else\n            correct_bracketing = correct_bracketing && is_opening_bracket(bracket)\
    \ && is_closing_bracket(bracket)\n    end\n    \n    return correct_bracketing\n\
    end", "    \"\"\"\n    correct_bracketing - checks if brackets are correctly balanced.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \n    \"\"\"\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n", "    brackets = brackets.replace(\"<\", \"\") \n    brackets =\
    \ brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n\
    \    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = bracket",
  "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"", "    \n    \"\"\"\n    \n   \
    \ \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n \
    \   \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n", " \
    \   \n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks whether brackets are correctly paired.\n    \n    brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.", "    \n    correct_bracketing = false\n   \
    \ \n    for bracket in brackets\n        if bracket==\"<\"\n            correct_bracketing\
    \ = true\n        elseif bracket==\">\"\n            correct_bracketing = false\n\
    \        end\n    end\n    \n    return correct_bracketing\nend", "    \"\"\"\n\
    \    correct_bracketing is a function that checks if brackets are correctly \n\
    \    formed.\n    \n    brackets is a string of \"<\" and \">\".\n    return True\
    \ if every opening bracket has a corresponding closing bracket.", "    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks whether brackets are correctly paired.\n    \n    brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.", "    brackets = brackets |> String.toLower\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[()]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [,]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[;]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[=]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[!]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [~]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[#]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[%]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[&]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [/]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[']\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[\"]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[#]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [%]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[&]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[/]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[']\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\"]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[#]\", \"\")\n \
    \   brackets = brackets |> String.replaceAll(\"[%]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[&]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [/]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[']\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[\"]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[#]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [%]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[&]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[/]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[']\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\"]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[#]", "    brackets\
    \ = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n",
  "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"",
  "    bracket_stack = Stack()\n    bracket_stack.push(brackets)\n    bracket_stack.push(brackets)\n\
    \    \n    correct_bracketing = true\n    while bracket_stack.count > 0\n    \
    \    brackets = bracket_stack.pop()\n        if brackets == \"<\"\n          \
    \  bracket_stack.push(brackets)\n        elseif brackets == \">\"\n          \
    \  bracket_stack.push(brackets)\n        else\n            correct_bracketing\
    \ = false\n        end\n    end\n    return correct_bracketing\nend", "    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that checks if brackets are correctly \n    paired.", " \
    \   \n    correct_bracketing = True\n    for bracket in brackets\n        if bracket\
    \ == \"<\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ && is_opening_bracket(bracket))\n        elseif bracket == \">\"\n         \
    \   correct_bracketing = correct_bracketing and not (correct_bracketing && is_closing_bracket(bracket))\n\
    \        else\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ && is_opening_bracket(bracket) or is_closing_bracket(bracket))\n    end\n  \
    \  return correct_bracketing\nend", "    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    brackets = brackets.replace(\"<\", \"\") \n    brackets\
    \ = brackets.replace(\">\", \"\") \n    brackets = brackets.replace(\"(\", \"\"\
    ) \n    brackets = brackets.replace(\")\", \"\") \n    brackets = brackets.replace(\"\
    [\", \"\") \n    brackets = brackets.replace(\"]\", \"\") \n    brackets = brackets.replace(\"\
    {\", \"\") \n    brackets = brackets.replace(\"}\", \"\") \n    brackets = brackets.replace(\"\
    ,\", \"\") \n    brackets = brackets.replace(\";\", \"\") \n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    @\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    &\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    (\", \"\") \n    brackets = brackets.replace(\")\", \"\") \n    brackets = brackets.replace(\"\
    [\", \"\") \n    brackets = brackets.replace(\"]\", \"\") \n    brackets = brackets.replace(\"\
    {\", \"\") \n    brackets = brackets.replace(\"}\", \"\") \n    brackets = brackets.replace(\"\
    ,\", \"\") \n    brackets = brackets.replace(\";\", \"\") \n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    @\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    &\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    (\", \"\") \n    brackets = brackets.replace(\")\", \"\") \n    brackets = brackets.replace(\"\
    [\", \"\") \n    brackets = brackets.replace(\"]\", \"\") \n    brackets = brackets.replace(\"\
    {\", \"\") \n    brackets = brackets.replace(\"}\", \"\") \n    brackets = brackets.replace(\"\
    ,\", \"\") \n    brackets = brackets.replace(\";\", \"\") \n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    %", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n    \n    Determine\
    \ whether brackets are correctly nested.\n    \n    brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \"\"\"\n    correct_bracketing is a helper function that checks if brackets\
    \ are correctly \n    formed.\n    \n    brackets is a string of \"<\" and \"\
    >\".\n    return True if every opening bracket has a corresponding closing bracket.",
  "    brackets = brackets |> String.toLower\n    brackets = brackets |> String.trim\n\
    \    brackets = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\[\\\\]]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\(\\\\)]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\{]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\}]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[\\\\,]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\:\\\\-]\"\
    , \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\\
    ]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\\
    ]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\", "    \"\"\"\n    correct_bracketing determines\
    \ if brackets are correctly paired.\n    \n    brackets is a string of \"<\" and\
    \ \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    \"\"\"\n    correct_bracketing determines if brackets has correct\
    \ bracketing.\n    brackets is a string of \"<\" and \">\".\n    return True if\
    \ every opening bracket has a corresponding closing bracket.", "    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |>", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n   \
    \ \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n \
    \   \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"", "    \n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n", "    \n    \"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    correct_bracketing\
    \ = true\n    for bracket in brackets\n        if bracket == \"<\"\n         \
    \   correct_bracketing = false\n        end\n    end\n    return correct_bracketing\n\
    end", "    \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\
    \ do \n        if bracket==\"<\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\">\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"{\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"}\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"(\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\")\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"[\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"]\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\",\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\".\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\";\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\":\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"?\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"!\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\":\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\";\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"=\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"!\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\".\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"?\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\",\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\";\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\":\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"<\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\">\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"{\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"}\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"(\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\")\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"[\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"]\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\",\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\".\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\";\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\":\" then \n            correct_bracketing = true\
    \ \n        else if bracket==\"?", "    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n",
  "    \"\"\"\n    correct_bracketing is a helper function that checks whether brackets\
    \ are correctly paired.\n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.", "    \"\
    \"\"\n    correct_bracketing - checks if brackets are correctly formatted.\n \
    \   brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \n    \"\"\"\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    brackets = brackets.replace(\"<\"\
    , \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = ",
  "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \n    \"\"\"\n    \n \
    \   \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n", "    \"\"\"\n    correct_bracketing is a function\
    \ that takes a string and checks if it \n    contains any brackets that are not\
    \ properly closed. \n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.", "    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!", "    \n    \"\"\"\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    brackets = brackets.replace(\"<\"\
    , \"\") \n    brackets = brackets.replace(\">\", \"\") \n    brackets = brackets.replace(\"\
    (\", \"\") \n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\") \n    brackets = brackets.replace(\"}\", \"\") \n    brackets = brackets.replace(\"\
    [\", \"\") \n    brackets = brackets.replace(\"]\", \"\") \n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\") \n    brackets = brackets.replace(\"=\", \"\")\n    brackets = ", " \
    \   \n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    bracket", "    \n    \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    brackets = brackets.replace(\"<\", \"\") \n    brackets\
    \ = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"(\", \"\"\
    )\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")", "    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \"\"\"\n    correct_bracketing\
    \ - checks if brackets are correctly nested\n    brackets is a string of \"<\"\
    \ and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n   \
    \ \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n \
    \   \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \"\"\
    \"\n    correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that checks if brackets are correctly \n    formed.\n \
    \   \"\"\"\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"", "    \n    \"\"\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    brackets = brackets |> String.toLower\n    brackets\
    \ = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^", "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"", "    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     else\n            correct_bracketing = correct_bracketing && true\n    \
    \    end\n    end\n    \n    return correct_bracketing\nend", "    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.", "    \"\"\"\n    correct_bracketing returns\
    \ True if brackets has correct bracketing.\n    \n    \"\"\"\n    brackets = brackets.replace(\"\
    <\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n\
    \    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    bracket", "    \n    correct_bracketing = true\n    \n    for\
    \ bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \">\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        else\n           \
    \ correct_bracketing = correct_bracketing && true\n        end\n    end\n    \n\
    \    return correct_bracketing\nend", "    \n    \"\"\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    correct_bracketing = true\n    \n    for\
    \ bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = false\n        end\n    end\n    \n    return correct_bracketing\nend", " \
    \   bracket_stack = Stack()\n    bracket_stack.push(brackets)\n    correct_bracket\
    \ = bracket_stack.top()\n    bracket_stack.pop()\n    correct_bracket = correct_bracket.strip(\"\
    []\")\n    correct_bracket = correct_bracket.strip(\"()\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}\")\n    correct_bracket = correct_bracket.strip(\"\
    <>\")\n    correct_bracket = correct_bracket.strip(\"()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []<>\")\n    correct_bracket = correct_bracket.strip(\"()[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    [][]<>\")\n    correct_bracket = correct_bracket.strip(\"()()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []()<>\")\n    correct_bracket = correct_bracket.strip(\"(){}<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}{}<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []{}<>\")\n    correct_bracket = correct_bracket.strip(\"()[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    [][]<>\")\n    correct_bracket = correct_bracket.strip(\"()()[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}()[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []()[]<>\")\n    correct_bracket = correct_bracket.strip(\"(){}[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}{}[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []{}[]<>\")\n    correct_bracket = correct_bracket.strip(\"()[][]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}[][]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    [][][]<>\")\n    correct_bracket = correct_bracket.strip(\"()()()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}()()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    []()()<>\")\n    correct_bracket = correct_bracket.strip(\"(){}()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"{}{}()<>\")\n    correct_bracket = correct_bracket.strip(\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"#\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    `\", \"\")\n    brackets = brackets.", "    \n    correct_bracketing::Bool = false\
    \ \n    \n    for bracket in brackets \n        if bracket == \"<\" \n       \
    \     correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \  \n    return correct_bracketing\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n", "    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = ", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks whether brackets are correctly nested.\n    \n    brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.", "    \n    correct_bracketing::Bool = false\
    \ \n    \n    brackets = brackets \n    \n    for bracket in brackets \n     \
    \   \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing || true\n        else \n            correct_bracketing =\
    \ correct_bracketing || false\n            \n    return correct_bracketing\n \
    \   \n    \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n  \
    \  brackets = brackets \n    \n    for bracket in brackets \n        \n      \
    \  if bracket == \"<\" \n            correct_bracketing = correct_bracketing ||\
    \ true\n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \n    \n    \"\"\"\
    \n    \n    correct_bracketing::Bool = false \n    \n    brackets = brackets \n\
    \    \n    for bracket in brackets \n        \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing || true\n        else if\
    \ bracket == \">\" \n            correct_bracketing = correct_bracketing || true\n\
    \        else \n            correct_bracketing = correct_bracketing || false\n\
    \            \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n \
    \   correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n\
    \    for bracket in brackets \n        \n        if bracket == \"<\" \n      \
    \      correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \          \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n   \
    \ correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n  \
    \  for bracket in brackets \n        \n        if bracket == \"<\" \n        \
    \    correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \          \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n   \
    \ correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n  \
    \  for bracket in brackets \n        \n        if bracket == \"<\" \n        \
    \    correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing ", "    \n  \
    \  correct_bracketing::Bool = false \n    \n    for bracket in brackets \n   \
    \     \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing or true\n        else \n            correct_bracketing =\
    \ correct_bracketing or false\n    \n    return correct_bracketing\n    \n   \
    \ \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n    for bracket\
    \ in brackets \n        \n        if bracket == \"<\" \n            correct_bracketing\
    \ = correct_bracketing or true\n        else if bracket == \">\" \n          \
    \  correct_bracketing = correct_bracketing or true\n        else \n          \
    \  correct_bracketing = correct_bracketing or false\n    \n    return correct_bracketing\n\
    \    \n    \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n \
    \   for bracket in brackets \n        \n        if bracket == \"<\" \n       \
    \     correct_bracketing = correct_bracketing or true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing or true\n   \
    \     else \n            correct_bracketing = correct_bracketing or false\n  \
    \  \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else \n            correct_bracketing = correct_bracketing\
    \ or false\n    \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n\
    \    correct_bracketing::Bool = false \n    \n    for bracket in brackets \n \
    \       \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing or true\n        else \n            correct_bracketing =\
    \ correct_bracketing or false\n    \n    return correct_bracketing\n    \n   \
    \ \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n    for bracket\
    \ in brackets \n        \n        if bracket == \"<\" \n            correct_bracketing\
    \ = correct_bracketing or true\n        else if bracket == \">\" \n          \
    \  correct_bracketing = correct_bracketing or true\n        else \n          \
    \  correct_bracketing = correct_bracketing or false\n    \n    return correct_bracketing\n\
    \    \n    \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n \
    \   for bracket in brackets \n", "    \n    correct_bracketing = true\n    \n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = false\n        end\n    end\n    \n    return correct_bracketing\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n", "    bracket_open = brackets.find(\"\
    <\")\n    bracket_close = brackets.find(\">\")\n    if bracket_open < bracket_close\
    \ \n        bracket_open = brackets.find(\"<\", bracket_close)\n        bracket_close\
    \ = brackets.find(\">\", bracket_open)\n        if bracket_open < bracket_close\
    \ \n            bracket_open = brackets.find(\"<\", bracket_close)\n         \
    \   bracket_close = brackets.find(\">\", bracket_open)\n            if bracket_open\
    \ < bracket_close \n                bracket_open = brackets.find(\"<\", bracket_close)\n\
    \                bracket_close = brackets.find(\">\", bracket_open)\n        \
    \        if bracket_open < bracket_close \n                    bracket_open =\
    \ brackets.find(\"<\", bracket_close)\n                    bracket_close = brackets.find(\"\
    >\", bracket_open)\n                    if bracket_open < bracket_close \n   \
    \                     bracket_open = brackets.find(\"<\", bracket_close)\n   \
    \                     bracket_close = brackets.find(\">\", bracket_open)\n   \
    \                     if bracket_open < bracket_close \n                     \
    \       bracket_open = brackets.find(\"<\", bracket_close)\n                 \
    \           bracket_close = brackets.find(\">\", bracket_open)\n             \
    \               if bracket_open < bracket_close \n                           \
    \     return True\n                            else \n                       \
    \         return False\n                        else \n                      \
    \      return False\n                    else \n                        return\
    \ False\n                else \n                    return False\n           \
    \ else \n                return False\n        else \n            return False\n\
    \    else \n        return False\nend\n</cell>\n<code language=julia-1.4>", " \
    \   \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\
    \ \n        if bracket == \"<\" \n            correct_bracketing = true \n   \
    \     else if bracket == \">\" \n            correct_bracketing = true \n    \
    \    else \n            correct_bracketing = false \n    \n    return correct_bracketing\
    \ \n    \n    \n    \"\"\"", "    \n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    correct_bracketing = (brackets == \"<\")\n    \n  \
    \  return correct_bracketing\n    \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets ", "    \n    correct_bracketing = false\n\
    \    \n    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = true\n        end\n    end\n    \n    return correct_bracketing\nend", " \
    \   \"\"\"\n    correct_bracketing is a function that takes a string of \"<\"\
    \ and \">\" and returns True if every opening bracket has a corresponding closing\
    \ bracket.", "    \n    brackets = brackets.replace(\"<\", \"\")\n    brackets\
    \ = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"{\", \"\"\
    )\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n", "    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.replace(\"<\", \"\") |>\
    \ String.replace(\"<\", \"\") |> String.replace(\"<\", \"\") |> String.replace(\"\
    <\", \"\") |> String.replace(\"<\", \"\")\n    brackets = brackets |> String.replace(\"\
    >\", \"\") |> String.replace(\">\", \"\") |> String.replace(\">\", \"\") |> String.replace(\"\
    >\", \"\") |> String.replace(\">\", \"\")\n    brackets = brackets |> String.replace(\"\
    (\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"\
    (\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\")\n   \
    \ brackets = brackets |> String.replace(\")\", \"\") |> String.replace(\")\",\
    \ \"\") |> String.replace(\")\", \"\") |> String.replace(\")\", \"\") |> String.replace(\"\
    )\", \"\")\n    brackets = brackets |> String.replace(\"{\", \"\") |> String.replace(\"\
    {\", \"\") |> String.replace(\"{\", \"\") |> String.replace(\"{\", \"\") |> String.replace(\"\
    {\", \"\") |> String.replace(\"{\", \"\")\n    brackets = brackets |> String.replace(\"\
    }\", \"\") |> String.replace(\"}\", \"\") |> String.replace(\"}\", \"\") |> String.replace(\"\
    }\", \"\") |> String.replace(\"}\", \"\")\n    brackets = brackets |> String.replace(\"\
    [\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"\
    [\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\")\n   \
    \ brackets = brackets |> String.replace(\"]\", \"\") |> String.replace(\"]\",\
    \ \"\") |> String.replace(\"]\", \"\") |> String.replace(\"]\", \"\") |> String.replace(\"\
    ]\", \"\")\n    brackets = brackets |> String.replace(\",\", \"\") |> String.replace(\"\
    ,\", \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\") |> String.replace(\"\
    ,\", \"\")\n    brackets = brackets |> String.replace(\";\", \"\") |> String.replace(\"\
    ;\", \"\") |> String.replace(\";\", \"\") |> String.replace(\";\", \"\") |> String.replace(\"\
    ;\", \"\")\n    brackets = brackets |> String.replace(\":\", \"\") |> String.replace(\"\
    :\", \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\") |> String.replace(\"\
    :\", \"\")\n    brackets = brackets |> String.replace(\"=\", \"\") |> String.replace(\"\
    =\", \"\") |> String.replace(\"=\", \"\") |> String.replace(\"=\"", "    \"\"\"\
    \n    correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    brackets = brackets |> String.toLower\n\
    \    brackets = brackets |> String.trim\n    brackets = brackets |> String.toUpper\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[\\\\[\\\\]]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[\\\\(\\\\)]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\{]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\}]\", \"\
    \")\n    brackets = brackets |> String.replaceAll(\"[\\\\,]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\;]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[\\\\:\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\
    \\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\\
    -\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\
    \\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\
    \\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\
    \\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", " \
    \   \n    brackets = brackets |> String.toLower\n    brackets = brackets |> String.trim\n\
    \    brackets = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]", "    \"\"\"\n    correct_bracketing is a helper\
    \ function that checks if brackets are correctly \n    formatted.\n    \"\"\"\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\",\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n", "    \n    brackets = brackets.replace(\"<\", \"\") \n    brackets\
    \ = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"(\", \"\"\
    )\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")", "    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n", "    \n    brackets = brackets.replace(\"<\", \"\") \n  \
    \  brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.",
  "    brackets = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\"\
    >\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that checks if brackets are correctly \n    formed.\n \
    \   \n    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \"\"\"\n    correct_bracketing\
    \ returns a Boolean indicating whether brackets is \n    correctly formatted.\n\
    \    \n    brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.", "    \"\"\"\n    correct_bracketing(brackets::String)",
  "    \n    correct_bracketing::Bool = brackets == \"<\"\n    \n    return correct_bracketing\n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n", "    brackets = brackets |> String.toLower\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets ", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that checks whether brackets are correctly \n    paired.\n\
    \    \n    brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.", "    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end", "    \"\"\"\n    correct_bracketing is a helper function that checks to\
    \ make sure that the bracketing\n    of the string matches the expected bracketing.",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \"\"\"\n\
    \    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n", "    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    bracket", "    \"\"\"\n    correct_bracketing - checks if brackets\
    \ are correctly formatted.\n    brackets is a string of \"<\" and \">\".\n   \
    \ return True if every opening bracket has a corresponding closing bracket.",
  "    \n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets\n        if bracket == \"<\"\n \
    \           correct_bracketing = true\n        elseif bracket == \">\"\n     \
    \       correct_bracketing = true\n        elseif bracket == \"(\"\n         \
    \   correct_bracketing = true\n        elseif bracket == \")\"\n            correct_bracketing\
    \ = true\n        elseif bracket == \"[\"\n            correct_bracketing = true\n\
    \        elseif bracket == \"]\"\n            correct_bracketing = true\n    \
    \    elseif bracket == \"{\"\n            correct_bracketing = true\n        elseif\
    \ bracket == \"}\"\n            correct_bracketing = true\n        elseif bracket\
    \ == \"(\"\n            correct_bracketing = true\n        elseif bracket == \"\
    )\"\n            correct_bracketing = true\n        elseif bracket == \"[\"\n\
    \            correct_bracketing = true\n        elseif bracket == \"]\"\n    \
    \        correct_bracketing = true\n        elseif bracket == \"{\"\n        \
    \    correct_bracketing = true\n        elseif bracket == \"}\"\n            correct_bracketing\
    \ = true\n        else\n            correct_bracketing = false\n        end\n\
    \    end\n    return correct_bracketing\nend", "    \n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.trim\n    brackets = brackets\
    \ |>", "    brackets = brackets |> String.toLower\n    brackets = brackets |>\
    \ String.replace(\"<\", \"\") |> String.replace(\"<\", \"\") |> String.replace(\"\
    <\", \"\")\n    brackets = brackets |> String.replace(\">\", \"\") |> String.replace(\"\
    >\", \"\") |> String.replace(\">\", \"\")\n    brackets = brackets |> String.replace(\"\
    {\", \"\") |> String.replace(\"{\", \"\") |> String.replace(\"{\", \"\")\n   \
    \ brackets = brackets |> String.replace(\"}\", \"\") |> String.replace(\"}\",\
    \ \"\") |> String.replace(\"}\", \"\")\n    brackets = brackets |> String.replace(\"\
    (\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\")\n   \
    \ brackets = brackets |> String.replace(\")\", \"\") |> String.replace(\")\",\
    \ \"\") |> String.replace(\")\", \"\")\n    brackets = brackets |> String.replace(\"\
    [\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\")\n   \
    \ brackets = brackets |> String.replace(\"]\", \"\") |> String.replace(\"]\",\
    \ \"\") |> String.replace(\"]\", \"\")\n    brackets = brackets |> String.replace(\"\
    ,\", \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n   \
    \ brackets = brackets |> String.replace(\";\", \"\") |> String.replace(\";\",\
    \ \"\") |> String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\"\
    :\", \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\")\n   \
    \ brackets = brackets |> String.replace(\";\", \"\") |> String.replace(\";\",\
    \ \"\") |> String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\"\
    ,\", \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n   \
    \ brackets = brackets |> String.replace(\":\", \"\") |> String.replace(\":\",\
    \ \"\") |> String.replace(\":\", \"\")\n    brackets = brackets |> String.replace(\"\
    ;\", \"\") |> String.replace(\";\", \"\") |> String.replace(\";\", \"\")\n   \
    \ brackets = brackets |> String.replace(\",\", \"\") |> String.replace(\",\",\
    \ \"\") |> String.replace(\",\", \"\")\n    brackets = brackets |> String.replace(\"\
    :\", \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\")\n   \
    \ brackets = brackets |> String.replace(\";\", \"\") |> String.replace(\";\",\
    \ \"\") |> String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\"\
    ,\", \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n   \
    \ brackets = bracket", "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n", "    brackets = brackets.replace(\"<\", \"\")\n    brackets\
    \ = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"{\", \"\"\
    )\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"",
  "    \n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n", "    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing || true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \nend\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    correct_bracketing::Bool\
    \ = brackets == \"<\"\n    \n    return correct_bracketing\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nThanks for the answer! I understand that my code is not very elegant\
    \ and that there are better ways to do it, but I wanted to understand what was\
    \ wrong with my code. Also, I didn't know that you can define functions in Haskell\
    \ like that. Thanks again!\n<|/ c |>\n<| c |>\nYes, you can define functions in\
    \ Haskell like that. Functions are just another kind of data type. `brackets ::\
    \ String` defines a function `brackets` that takes one argument of type `String`\
    \ and returns a value of type `String`. `brackets :: String -> String` defines\
    \ a function `brackets` that takes one argument of type `String` and returns a\
    \ value of type `String`. `brackets :: String -> Bool` defines a function `brackets`\
    \ that takes one argument of type `String` and returns a value of type `Bool`.\
    \ `brackets :: String -> Bool -> Bool` defines a function `brackets` that takes\
    \ one argument of type `String` and returns a value of type `Bool`. `brackets\
    \ :: String -> Bool -> Bool -> Bool` defines a function `brackets` that takes\
    \ one argument of type `String` and returns a value of type `Bool`. `brackets\
    \ :: String -> Bool -> Bool -> Bool -> Bool` defines a function `brackets` that\
    \ takes one argument of type `String` and returns a value of type `Bool`.\n<|/\
    \ c |>\n<| c |>\nI see. So the function brackets takes one argument of type String\
    \ and returns a value of type String. brackets takes one argument of type String\
    \ and returns a value of type Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool. brackets takes one argument of type\
    \ String and returns a value of type Bool -> Bool -> Bool. brackets takes one\
    \ argument of type String and returns a value of type Bool -> Bool -> Bool ->\
    \ Bool. brackets takes one argument of type String and returns a value of type\
    \ Bool -> Bool -> Bool -> Bool -> Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool -> Bool -> Bool -> Bool -> Bool. brackets\
    \ takes one argument of type String and returns a value of type Bool -> Bool ->\
    \ Bool -> Bool -> Bool -> Bool -> Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool -> Bool -> Bool -> Bool -> Bool ->\
    \ Bool -> Bool. brackets takes one argument of type String and returns a value\
    \ of type Bool -> Bool -> Bool", "    \n    \"\"\"\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    correct_bracketing = True\n    \n    for bracket\
    \ in brackets\n        if bracket == \"<\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \">\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        else\n            correct_bracketing =\
    \ correct_bracketing && true\n    end\n    \n    return correct_bracketing\nend\n\
    </cell>\n<code language=julia-1.5>", "    \"\"\"\n    correct_bracketing is a\
    \ helper function that checks if brackets are correctly \n    formed.\n    \n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing or is_opening_bracket(bracket)\
    \ \n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or is_closing_bracket(bracket) \n        else \n            correct_bracketing\
    \ = correct_bracketing \n    endfor \n    return correct_bracketing \nendfunction ",
  "    \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\
    \ \n        \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing || true\n        else \n            correct_bracketing =\
    \ correct_bracketing || false\n            \n    return correct_bracketing\n \
    \   \nend\n</cell>\n<code language=julia-1.5>", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing || true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \n    \n    \"\"\"",
  "    \n    correct_bracketing::Bool = false \n    \n    brackets = brackets \n \
    \   \n    for bracket in brackets \n        \n        if bracket == \"<\" \n \
    \           correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \  \n    return correct_bracketing\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this\
    \ answer helped you, please accept it by clicking the check mark next to the answer.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI did but my reputation is too low for it to show\
    \ publicly. Thanks again!\n<|/ c |>\n<| c |>\nNo worries, glad I could help!\n\
    <|/ c |>\n<| a tags=string,julia,brackets |>\n<code>", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that checks brackets for correctness.\n    \n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n", "    \"\"\"\n\
    \    correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.", "    \n    \"\"\"\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    brackets = brackets |> String.toLower\n\
    \    brackets = brackets |> String.trim\n    brackets = brackets |> String.toUpper\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"^\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    $\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")", "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    bracket_stack\
    \ = Stack()\n    bracket_stack.push(brackets)\n    correct_bracket = bracket_stack.top()\n\
    \    while bracket_stack.top() ~= \"\"\n        bracket_stack.pop()\n        if\
    \ bracket_stack.top() ~= \"\"\n            if bracket_stack.top() ~= correct_bracket\n\
    \                correct_bracket = bracket_stack.top()\n            end\n    \
    \    end\n    end\n    return correct_bracket\nend", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        end \n    end \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>",
  "    brackets = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\"\
    >\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"+\", \"\") \n    brackets = brackets.replace(\"\
    -\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    ~\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    '\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"+\", \"\") \n    brackets = brackets.replace(\"\
    -\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    ~\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    '\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\"", "    brackets = brackets.replace(\"\
    <\",\"\")\n    brackets = brackets.replace(\">\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    brackets = brackets.replace(\"^\",\"\")\n    brackets = brackets.replace(\"\
    &\",\"\")\n    brackets = brackets.replace(\"*\",\"\")\n    brackets = brackets.replace(\"\
    +\",\"\")\n    brackets = brackets.replace(\"/\",\"\")\n    brackets = brackets.replace(\"\
    \\\\\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"+\",\"\")\n    brackets = brackets.replace(\"\
    /\",\"\")\n    brackets = brackets.replace(\"\\\\\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    ", "    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks whether brackets are correctly nested.\n    \n    brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.", "    \n    brackets = brackets.replace(\"<\"\
    , \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")", "    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = bracket",
  "    \n    correct_bracketing::Bool = false \n    \n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            correct_bracketing = true\n        elseif\
    \ bracket == \">\"\n            correct_bracketing = true\n        else\n    \
    \        correct_bracketing = false\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    correct_bracketing::Bool = false \n   \
    \ \n    for bracket in brackets \n        \n        if bracket == \"<\" \n   \
    \         correct_bracketing = correct_bracketing or is_opening_bracket(bracket)\
    \ \n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or is_closing_bracket(bracket) \n        else \n            correct_bracketing\
    \ = correct_bracketing \n        end \n    end \n    \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"<\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"[\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"(\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    )\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"{\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"}\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\":\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    ,\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\";\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"+\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"-\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    *\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"/\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"%\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"^\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    =\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"==\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"!=\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"<=\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    <>\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\u2264\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"\u2265\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"\u2260\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    \u2260=\")\n</cell>\n<code language=julia-", "    \"\"\"\n    correct_bracketing\
    \ is a helper function that returns True if brackets\n    is a string of \"<\"\
    \ and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    brackets = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = bracket", "    \"\"\"\n    correct_bracketing determines\
    \ whether brackets are correctly \n    paired.", "    \"\"\"\n    correct_bracketing\
    \ returns True if brackets contains only \"<\" and \">\".\n    \"\"\"\n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t", "    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     elseif bracket == \"[\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"]\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"(\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \")\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"{\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \"}\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"(\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \")\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \"[\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"]\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \"{\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"}\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \">\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"(\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \")\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"[\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"]\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \"{\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"}\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  else\n            correct_bracketing = correct_bracketing && false\n    end\n\
    \    \n    return correct_bracketing\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        end \n    end \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.5>", "    brackets = brackets.replace(\"\
    <\",\"\")\n    brackets = brackets.replace(\">\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    brackets = brackets.replace(\"^\",\"\")\n    brackets = brackets.replace(\"\
    &\",\"\")\n    brackets = brackets.replace(\"*\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    brackets = brackets.replace(\"^\",\"\")\n    brackets = brackets.replace(\"\
    &\",\"\")\n    brackets = brackets.replace(\"*\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    brackets = brackets.replace(\"^\",\"\")\n    brackets = brackets.replace(\"\
    &\",\"\")\n    brackets = brackets.replace(\"*\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    bracket", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n   \
    \ \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n \
    \   \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n",
  "    \"\"\"\n    correct_bracketing returns a Boolean indicating whether brackets\
    \ is correctly \n    formatted for use with parse_brackets.\n    \"\"\"\n    brackets\
    \ = brackets.replace(\"<\", \" \")\n    brackets = brackets.replace(\">\", \"\
    \ \")\n    brackets = brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\"\
    )\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    <\", \" \")\n    brackets = brackets.replace(\">\", \" \")\n    brackets = brackets.replace(\"\
    (\", \" \")\n    brackets = brackets.replace(\")\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    <\", \" \")\n    brackets = brackets.replace(\">\", \" \")\n    brackets = brackets.replace(\"\
    (\", \" \")\n    brackets = brackets.replace(\")\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    <\", \" \")\n    brackets = brackets.replace(\">\", \" \")\n    brackets = brackets.replace(\"\
    (\", \" \")\n    brackets = brackets.replace(\")\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    ", "    \n    correct_bracketing::Bool = false \n    \n    for\
    \ bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \">\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"(\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \")\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"[\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"]\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"{\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"}\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"(\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \")\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"[\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"]\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"{\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"}\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"<\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \">\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"(\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \")\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"[\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"]\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"{\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"}\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"<\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \">\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"(\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \")\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"[\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"]\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bra", "    \"\"\"\n    correct_bracketing is a helper function that\
    \ checks brackets for correctness.\n    \n    brackets is a string of \"<\" and\
    \ \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n   \
    \ \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n \
    \   \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \n\
    \    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n", "    \n    correct_bracketing::Bool = brackets == \"<\"\n    \n\
    \    return correct_bracketing\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\
    \n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n \
    \   \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"", "    \n    correct_bracketing = True\n \
    \   \n    for bracket in brackets\n        if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \">\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"<=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">=\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"==\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"!=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"<->\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"<->>\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"<->=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">->\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \">->>\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \">->=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"<-\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"<->\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"<-=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">-\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \">->\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \">-=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"->\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracket", "    \n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"",
  "    \"\"\"\n    correct_bracketing(brackets::String)", "    brackets = brackets\
    \ |> String.toLower\n    brackets = brackets |> String.replace \"[\", \"\"\n \
    \   brackets = brackets |> String.replace \"]\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets\
    \ = brackets |> String.replace \"\\\"\", \"'\"\n    brackets = brackets |> String.replace\
    \ \"\\'\", \"'\"\n    brackets = brackets |> String.replace \"-\", \"\"\n    brackets\
    \ = brackets |> String.replace \"*\", \"\"\n    brackets = brackets |> String.replace\
    \ \"=\", \"\"\n    brackets = brackets |> String.replace \",\", \"\"\n    brackets\
    \ = brackets |> String.replace \"#\", \"\"\n    brackets = brackets |> String.replace\
    \ \"!\", \"\"\n    brackets = brackets |> String.replace \"~\", \"\"\n    brackets\
    \ = brackets |> String.replace \"-\", \"\"\n    brackets = brackets |> String.replace\
    \ \"?\", \"\"\n    brackets = brackets |> String.replace \"!\", \"\"\n    brackets\
    \ = brackets |> String.replace \"=\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    brackets\
    \ = brackets |> String.replace \"]\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    brackets\
    \ = brackets |> String.replace \"]\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    ", "   \
    \ \"\"\"\n    correct_bracketing is a function that takes a string and checks\
    \ if it \n    has correct bracketing by checking if every opening bracket has\
    \ a \n    corresponding closing bracket.\n    \n    brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
