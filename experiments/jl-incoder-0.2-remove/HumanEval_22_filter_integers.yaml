name: HumanEval_22_filter_integers
language: jl
prompt: "\"\"\" Filter given list of any python values only for integers\n       \
  \     \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"])\
  \ == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
  end\n"
completions: ["    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x == x)\n    values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> isa(x, Int))\n    values = filter(values, x\
    \ -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test filter_integers\nfilter_integers([1, 2, \"three\", 4])\n</cell>\n<text>\n\
    Filtering out all non-integer values", "    filter(values, x -> isa(x, Int64))\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x == x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Test the filter_integers function\nfilter_integers([1, 2, \"3\", 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters given list of any python values\
    \ only for integers and floats\n\"\"\"", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    \n    integers = Int64[]\n    for value in values\n\
    \        if isa(value,Int64)\n            push!(integers,value)\n        end\n\
    \    end\n    \n    return integers\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values =\
    \ filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int128))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> is",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ filter(values, x -> isa(x, Int64))\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n\
    \    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int128))\n  \
    \  values = filter(values, x -> isa(x, Int16))\n    values = filter(values, x\
    \ -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int128))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int128))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> is", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the filter_integers function\nfilter_integers([1,2,3])\n</cell>\n<text>\n\
    Filtering out all non-integer values", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\n# Test the filter_integers\
    \ function\nfilter_integers([1,2,3])\n</cell>\n<text>\nFiltering out all non-integers",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x ==\
    \ x)\n    values = filter(values, x -> x == x)\n    values = filter(values, x\
    \ -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    values = filter(values, x -> x == x)", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter(values, x -> isa(x, Int64), Inf)\nend",
  "    \n    integers = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integers,value)\n        end\n    end\n    return integers\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa", "    filter(values, x -> isa(x, Int64))\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    return values\nend", "  \
    \  filter(values, x -> isa(x, Int64)) \nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x == x)\n    values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(value", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Test filter_integers\nfilter_integers([1, 2, 3])\n</cell>\n<text>\nFiltering\
    \ out all non-integers", "    filter(values, x -> isa(x, Int64))\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    values = filter(values, x -> x == x)\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    return values\nend", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    filter(values, x -> isa(x, Int64))\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  values = filter(values, x -> !isa(x, Int64))\n    return values\nend", "  \
    \  \n    integer = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integer,value)\n        end\n    end\n    \n    return integer\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0])\n\
    </cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"\
    test\"])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"\
    test\",4.0])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"\
    test\",4.0,5.0])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\n\
    filter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,6.0])\n</cell>\n<code language=julia-1.5>\n\
    # Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,6.0,\"test\"\
    ])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"\
    test\",4.0,5.0,6.0,\"test\",7.0])\n</cell>\n<code language=julia-1.5>\n# Test\
    \ filter_integers\nfilter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,6.0,\"test\"\
    ,7.0,\"test\"])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\n\
    filter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,6.0,\"test\",7.0,\"test\",8.0])\n\
    </cell>\n<code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"\
    test\",4.0,5.0,6.0,\"test\",7.0,\"test\",8.0,\"test\"])\n</cell>\n<code language=julia-1.5>\n\
    # Test filter_integers\nfilter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,6.0,\"test\"\
    ,7.0,\"test\",8.0,\"test\",9.0])\n</cell>\n<code language=julia-1.5>\n# Test filter_integers\n\
    filter_integers([1.0,2.0,3.0,\"test\",4.0,5.0,", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    \n    integer = Int64[]\n\
    \    for value in values\n        if isa(value,Int64)\n            push!(integer,value)\n\
    \        end\n    end\n    integer\nend\n</cell>\n<code language=julia-1.5>",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != NaN)\n    values = filter(values, x -> x != Inf)\n    values = filter(values,\
    \ x -> x != -Inf)\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values =\
    \ filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n\
    \    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the filter_integers function\n\
    filter_integers([1,2,3])\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ any python values only for floats\nHint: use isa", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    filter(values, x -> isa(x, Int64))\nend", "    filter(values, x ->\
    \ isa(x, Int64), Int64[])\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> isa(x, Int))\n    values = filter(values, x\
    \ -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers(values)\n</cell>\n<text>\nFilter out\
    \ all non-integers", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the filter_integers function\nfilter_integers([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nFilter out all non-integer values", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x == x)\n    values = filter(values, x -> x\
    \ == 0)\n    values = filter(values, x -> x == 1)\n    values = filter(values,\
    \ x -> x == -1)\n    values = filter(values, x -> x == -2)\n    values = filter(values,\
    \ x -> x == -3)\n    values = filter(values, x -> x == -4)\n    values = filter(values,\
    \ x -> x == -5)\n    values = filter(values, x -> x == -6)\n    values = filter(values,\
    \ x -> x == -7)\n    values = filter(values, x -> x == -8)\n    values = filter(values,\
    \ x -> x == -9)\n    values = filter(values, x -> x == -10)\n    values = filter(values,\
    \ x -> x == -11)\n    values = filter(values, x -> x == -12)\n    values = filter(values,\
    \ x -> x == -13)\n    values = filter(values, x -> x == -14)\n    values = filter(values,\
    \ x -> x == -15)\n    values = filter(values, x -> x == -16)\n    values = filter(values,\
    \ x -> x == -17)\n    values = filter(values, x -> x == -18)\n    values = filter(values,\
    \ x -> x == -19)\n    values = filter(values, x -> x == -20)\n    values = filter(values,\
    \ x -> x == -21)\n    values = filter(values, x -> x == -22)\n    values = filter(values,\
    \ x -> x == -23)\n    values = filter(values, x -> x == -24)\n    values = filter(values,\
    \ x -> x == -25)\n    values = filter(values, x -> x == -26)\n    values = filter(values,\
    \ x -> x == -27)\n    values = filter(values, x -> x == -28)\n    values = filter(values,\
    \ x -> x == -29)\n    values = filter(values, x -> x == -30)\n    values = filter(values,\
    \ x -> x == -31)\n    values = filter(values, x -> x == -32)\n    values = filter(values,\
    \ x -> x == -33)\n    values = filter(values, x -> x == -34)\n    values = filter(values,\
    \ x -> x == -35)\n    values = filter(values, x -> x == -36)\n    values = filter(values,\
    \ x -> x == -37)\n    values = filter(values, x -> x == -38)\n    values = filter(values,\
    \ x -> x == -39)\n    values = filter(values, x -> x == -40)\n    values = filter(values,\
    \ x -> x == -41)\n    values = filter(values, x -> ", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the filter_integers function\nfilter_integers([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters given list of any python values only for floats\n\
    Hint: use isa(x, Float64)", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    filter(values, x -> isa(x, Int64))\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   \n    integer = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integer,value)\n        end\n    end\n    \n    return integer\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    values = filter(value", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ return values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> !isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ return values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int128))\n  \
    \  values = filter(values, x -> isa(x, Int16))\n    values = filter(values, x\
    \ -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int128))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int128))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> is", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the filter_integers function\nfilter_integers([1,2,3])\n</cell>\n<text>\nFiltering\
    \ out any non-integer values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n\
    \    values = filter(values, x -> x == 0)\n    values = filter(values, x -> x\
    \ == 1)\n    values = filter(values, x -> x == -1)\n    values = filter(values,\
    \ x -> x == -2)\n    values = filter(values, x -> x == -3)\n    values = filter(values,\
    \ x -> x == -4)\n    values = filter(values, x -> x == -5)\n    values = filter(values,\
    \ x -> x == -6)\n    values = filter(values, x -> x == -7)\n    values = filter(values,\
    \ x -> x == -8)\n    values = filter(values, x -> x == -9)\n    values = filter(values,\
    \ x -> x == -10)\n    values = filter(values, x -> x == -11)\n    values = filter(values,\
    \ x -> x == -12)\n    values = filter(values, x -> x == -13)\n    values = filter(values,\
    \ x -> x == -14)\n    values = filter(values, x -> x == -15)\n    values = filter(values,\
    \ x -> x == -16)\n    values = filter(values, x -> x == -17)\n    values = filter(values,\
    \ x -> x == -18)\n    values = filter(values, x -> x == -19)\n    values = filter(values,\
    \ x -> x == -20)\n    values = filter(values, x -> x == -21)\n    values = filter(values,\
    \ x -> x == -22)\n    values = filter(values, x -> x == -23)\n    values = filter(values,\
    \ x -> x == -24)\n    values = filter(values, x -> x == -25)\n    values = filter(values,\
    \ x -> x == -26)\n    values = filter(values, x -> x == -27)\n    values = filter(values,\
    \ x -> x == -28)\n    values = filter(values, x -> x == -29)\n    values = filter(values,\
    \ x -> x == -30)\n    values = filter(values, x -> x == -31)\n    values = filter(values,\
    \ x -> x == -32)\n    values = filter(values, x -> x == -33)\n    values = filter(values,\
    \ x -> x == -34)\n    values = filter(values, x -> x == -35)\n    values = filter(values,\
    \ x -> x == -36)\n    values = filter(values, x -> x == -37)\n    values = filter(values,\
    \ x -> x == -38)\n    values = filter(values, x -> x == -39)\n    values = filter(values,\
    \ x -> x == -40)\n    values = filter(values, x -> x == -41)\n    values = filter(values,\
    \ x -> ", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int128))\n    values = filter(values, x -> isa(x, Int256))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values =\
    \ filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int256))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values\
    \ = filter(values, x -> isa(x, Int256))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int128))\n    values = filter(values, x -> isa(x, Int256))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int128))\n    values = filter(values, x -> isa(x, Int256))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Int8))\n    values = filter", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x == x)\n    values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values =\
    \ filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int128))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values = filter(values,\
    \ x -> isa(x, Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> is",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values\
    \ = filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int256))\n    values = filter(values, x -> isa(x, Float32))\n  \
    \  values = filter(values, x -> isa(x, Float64))\n    values = filter(values,\
    \ x -> isa(x, Float))\n    values = filter(values, x -> isa(x, Complex32))\n \
    \   values = filter(values, x -> isa(x, Complex64))\n    values = filter(values,\
    \ x -> isa(x, Complex128))\n    values = filter(values, x -> isa(x, Complex256))\n\
    \    values = filter(values, x -> isa(x, String))\n    values = filter(values,\
    \ x -> isa(x, Symbol))\n    values = filter(values, x -> isa(x, Array))\n    values\
    \ = filter(values, x -> isa(x, Tuple))\n    values = filter(values, x -> isa(x,\
    \ Dict))\n    values = filter(values, x -> isa(x, Union))\n    values = filter(values,\
    \ x -> isa(x, Unit))\n    values = filter(values, x -> isa(x, Nothing))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x == x)\n    values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    1\", \"2\", \"3\"])\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"1\"\
    , \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell", " \
    \   values = filter(values, x -> isa(x, Int64))\n    return values\nend", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test filter_integers\nfilter_integers([1,2,3])\n\
    </cell>\n<text>\nFilter out all non-integers", "    filter(values, x -> isa(x,\
    \ Int64), Int64[])\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    filter(values, x -> isa(x, Int64))\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\n# Test the filter_integers\
    \ function\n@time filter_integers(rand(10000))\n</cell>\n<text>\nExercise: Write\
    \ a function that filters any python values only for floats\nHint: Use isa(x,\
    \ Float64)", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\n# test filter_integers\nfilter_integers([1,\
    \ 2, \"3\", 4, 5])\n</cell>\n<text>\nFilter out all non-integer values", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ isa(x, Int))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values\
    \ = filter(values, x -> isa(x, Int256))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter(values,\
    \ x -> isa(x, Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int128))\n    values = filter(values, x -> isa(x, Int256))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int128))\n    values = filter(values, x -> isa(x, Int256))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Int8))\n    values = filter(values, x -> isa(x, Int16))\n    values =\
    \ filter(values, x -> isa(x, Int32))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values = filter(values,\
    \ x -> isa(x, Int256))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int128))\n    values\
    \ = filter(values, x -> isa(x, Int256))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Int8))\n    values = filter",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    \n    filter_integers = filter(x -> isa(x, Int64),\
    \ values)\n    \n    return filter_integers\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    filter(values, x -> isa(x, Int64))\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    filter(values, x -> isa(x, Int64))\nend", "    \n    filter_integers\
    \ = filter(x -> isa(x, Int64), values)\n    \n    return filter_integers\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> !isa(x, Int64))\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend\n</cell>\n<code language=julia-1.5>\n# Test the filter_integers\
    \ function\nfilter_integers([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n#\
    \ Test the filter_integers function\nfilter_integers([1, 2, \"a\"])\n</cell>\n\
    <code language=julia-1.5>\n# Test the filter_integers function\nfilter_integers([\"\
    a\", \"b\", 3])\n</cell>\n<code language=julia-1.5>\n# Test the filter_integers\
    \ function\nfilter_integers([\"a\", \"b\", 3, \"c\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and floats\n\
    Write a function that filters any python values only for integers and float",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
