name: HumanEval_156_int_to_mini_roman
language: jl
prompt: "\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\
  \n    Examples:\n                \"\"\"\nfunction int_to_mini_roman(number::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = int_to_mini_roman;\n\t@test(candidate(19)\
  \ == \"xix\")\n\t@test(candidate(152) == \"clii\")\n\t@test(candidate(251) == \"\
  ccli\")\n\t@test(candidate(426) == \"cdxxvi\")\n\t@test(candidate(500) == \"d\"\
  )\n\t@test(candidate(1) == \"i\")\n\t@test(candidate(4) == \"iv\")\n\t@test(candidate(43)\
  \ == \"xliii\")\n\t@test(candidate(90) == \"xc\")\n\t@test(candidate(94) == \"xciv\"\
  )\n\t@test(candidate(532) == \"dxxxii\")\n\t@test(candidate(900) == \"cm\")\n\t\
  @test(candidate(994) == \"cmxciv\")\n\t@test(candidate(1000) == \"m\")\nend\n"
completions: ['    roman_numerals = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII",
    "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX",
    "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX",
    "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII", "XXXVIII", "XXXIX",
    "XL", "L", "LI", "LXI", "LXII", "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII",
    "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII",
    "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI",
    "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI", "CIX", "CX", "CXI", "CXII",
    "CXIII", "CXIV", "CXV", "CXVI", "CXVII", "CXVIII", "CXIX", "CXX", "CXXI", "CXXII",
    "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII", "CXXIX", "CXXX", "CXXXI",
    "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII", "CXXXVIII", "CXXXIX",
    "CXL", "CL", "CLI", "CLX", "CLXI", "CLXII", "CLXIII", "CLXIV", "CLXV", "CLXVI",
    "CLXVII", "CLXVIII", "CLXIX", "CLXX", "CLXXI", "CLXXII", "CLXXIII", "CLXXIV",
    "CLXXV", "CLXXVI", "CLXXVII", "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI", "CLXXXII",
    "CLXXXIII", "CLXXXIV", "CL', "    mini_roman = \"\"\n    \n    if number == 0\n\
    \        mini_roman = \"I\"\n    elseif number == 1\n        mini_roman = \"II\"\
    \n    elseif number == 2\n        mini_roman = \"III\"\n    elseif number == 3\n\
    \        mini_roman = \"IV\"\n    elseif number == 4\n        mini_roman = \"\
    V\"\n    elseif number == 5\n        mini_roman = \"VI\"\n    elseif number ==\
    \ 6\n        mini_roman = \"VII\"\n    elseif number == 7\n        mini_roman\
    \ = \"VIII\"\n    elseif number == 8\n        mini_roman = \"IX\"\n    elseif\
    \ number == 9\n        mini_roman = \"X\"\n    elseif number == 10\n        mini_roman\
    \ = \"XI\"\n    elseif number == 11\n        mini_roman = \"XII\"\n    elseif\
    \ number == 12\n        mini_roman = \"XIII\"\n    elseif number == 13\n     \
    \   mini_roman = \"XIV\"\n    elseif number == 14\n        mini_roman = \"XV\"\
    \n    elseif number == 15\n        mini_roman = \"XVI\"\n    elseif number ==\
    \ 16\n        mini_roman = \"XVII\"\n    elseif number == 17\n        mini_roman\
    \ = \"XVIII\"\n    elseif number == 18\n        mini_roman = \"XIX\"\n    elseif\
    \ number == 19\n        mini_roman = \"XX\"\n    elseif number == 20\n       \
    \ mini_roman = \"XXI\"\n    elseif number == 21\n        mini_roman = \"XXII\"\
    \n    elseif number == 22\n        mini_roman = \"XXIII\"\n    elseif number ==\
    \ 23\n        mini_roman = \"XXIV\"\n    elseif number == 24\n        mini_roman\
    \ = \"XXV\"\n    elseif number == 25\n        mini_roman = \"XXVI\"\n    elseif\
    \ number == 26\n        mini_roman = \"XXVII\"\n    elseif number == 27\n    \
    \    mini_roman = \"XXVIII\"\n    elseif number == 28\n        mini_roman = \"\
    XXIX\"\n    elseif number == 29\n        mini_roman = \"XXX\"\n    elseif number\
    \ == 30\n        mini_roman = \"XXXI\"\n    elseif number == 31\n", "    mini_roman\
    \ = \"\"\n    \n    if number == 0 \n        mini_roman = \"0\"\n        return\
    \ mini_roman\n    \n    if number < 0 \n        mini_roman = \"-\"\n        return\
    \ mini_roman\n    \n    if number < 100\n        mini_roman = int_to_mini_roman(number/10)\n\
    \        mini_roman += int_to_mini_roman(number%10)\n        return mini_roman\n\
    \    \n    if number < 1000\n        mini_roman = int_to_mini_roman(number/100)\n\
    \        mini_roman += int_to_mini_roman(number%100)\n        mini_roman += int_to_mini_roman(number/10)\n\
    \        mini_roman += int_to_mini_roman(number%10)\n        return mini_roman\n\
    \    \n    if number < 10000\n        mini_roman = int_to_mini_roman(number/1000)\n\
    \        mini_roman += int_to_mini_roman(number%1000)\n        mini_roman += int_to_mini_roman(number/100)\n\
    \        mini_roman += int_to_mini_roman(number%100)\n        mini_roman += int_to_mini_roman(number/10)\n\
    \        mini_roman += int_to_mini_roman(number%10)\n        return mini_roman\n\
    \    \n    if number < 100000\n        mini_roman = int_to_mini_roman(number/10000)\n\
    \        mini_roman += int_to_mini_roman(number%10000)\n        mini_roman +=\
    \ int_to_mini_roman(number/1000)\n        mini_roman += int_to_mini_roman(number%1000)\n\
    \        mini_roman += int_to_mini_roman(number/100)\n        mini_roman += int_to_mini_roman(number%100)\n\
    \        mini_roman += int_to_mini_roman(number/10)\n        mini_roman += int_to_mini_roman(number%10)\n\
    \        return mini_roman\n    \n    if number < 1000000\n        mini_roman\
    \ = int_to_mini_roman(number/100000)\n        mini_roman += int_to_mini_roman(number%100000)\n\
    \        mini_roman += int_to_mini_roman(number/10000)\n        mini_roman +=\
    \ int_to_", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(x => x.lower)\n\
    \    return join(roman, \"\")\nend", "    if number == 0 \n        return \"0\"\
    \n    else if number < 0 \n        return \"-\"\n    else if number < 1000 \n\
    \        return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)\n\
    \    else \n        roman = int_to_mini_roman(number / 10)\n        roman = roman.insert(0,\
    \ \"M\") + roman\n        roman = roman.insert(0, \"CM\") + roman\n        roman\
    \ = roman.insert(0, \"D\") + roman\n        roman = roman.insert(0, \"CD\") +\
    \ roman\n        roman = roman.insert(0, \"C\") + roman\n        roman = roman.insert(0,\
    \ \"XC\") + roman\n        roman = roman.insert(0, \"L\") + roman\n        roman\
    \ = roman.insert(0, \"XL\") + roman\n        roman = roman.insert(0, \"X\") +\
    \ roman\n        roman = roman.insert(0, \"IX\") + roman\n        roman = roman.insert(0,\
    \ \"V\") + roman\n        roman = roman.insert(0, \"IV\") + roman\n        roman\
    \ = roman.insert(0, \"I\") + roman\n        return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(9876543210)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(98765432101)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(987654321010)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(9876543210101)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(98765432101010)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(987654321010100)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(987",
  "    mini_roman = \"\"\n    \n    if number == 0\n        mini_roman = \"I\"\n \
    \   else if number == 1\n        mini_roman = \"II\"\n    else if number == 2\n\
    \        mini_roman = \"III\"\n    else if number == 3\n        mini_roman = \"\
    IV\"\n    else if number == 4\n        mini_roman = \"V\"\n    else if number\
    \ == 5\n        mini_roman = \"VI\"\n    else if number == 6\n        mini_roman\
    \ = \"VII\"\n    else if number == 7\n        mini_roman = \"VIII\"\n    else\
    \ if number == 8\n        mini_roman = \"IX\"\n    else if number == 9\n     \
    \   mini_roman = \"X\"\n    else if number == 10\n        mini_roman = \"XI\"\n\
    \    else if number == 11\n        mini_roman = \"XII\"\n    else if number ==\
    \ 12\n        mini_roman = \"XIII\"\n    else if number == 13\n        mini_roman\
    \ = \"XIV\"\n    else if number == 14\n        mini_roman = \"XV\"\n    else if\
    \ number == 15\n        mini_roman = \"XVI\"\n    else if number == 16\n     \
    \   mini_roman = \"XVII\"\n    else if number == 17\n        mini_roman = \"XVIII\"\
    \n    else if number == 18\n        mini_roman = \"XIX\"\n    else if number ==\
    \ 19\n        mini_roman = \"XX\"\n    else if number == 20\n        mini_roman\
    \ = \"XXI\"\n    else if number == 21\n        mini_roman = \"XXII\"\n    else\
    \ if number == 22\n        mini_roman = \"XXIII\"\n    else if number == 23\n\
    \        mini_roman = \"XXIV\"\n    else if number == 24\n        mini_roman =\
    \ \"XXV\"\n    else if number == 25\n        mini_roman = \"XXVI\"\n    else if\
    \ number == 26\n        mini_roman = \"XXVII\"\n    else if number == 27\n   \
    \     mini_roman = \"XXVIII\"\n    else if number == 28\n        mini_roman =\
    \ \"XXIX\"\n    else if number == 29\n        mini", "    if number == 0 \n  \
    \      return \"0\"\n    \n    roman = roman_numerals(number)\n    \n    roman\
    \ = roman.map(&:to_lowercase)\n    \n    return roman.join(\"\")\nend", "    if\
    \ number == 0 \n        return \"0\"\n    else if number < 0 \n        return\
    \ \"-\"\n    else if number < 100\n        return int_to_mini_roman(number/10)*10\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        return int_to_mini_roman(number/100)*100\
    \ + int_to_mini_roman(number%100)\n    else if number < 1000\n        return int_to_mini_roman(number/500)*500\
    \ + int_to_mini_roman(number%500)\n    else\n        return \"ERROR\"\nend", " \
    \   mini_roman = \"\"\n    \n    if number == 0\n        mini_roman = \"0\"\n\
    \        return mini_roman\n    \n    roman_numerals = [\"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LII\", \"LIII\"\
    , \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\", \"LIX\", \"LX\", \"LXI\", \"\
    LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\"\
    , \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"\
    LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\"\
    , \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"\
    XC\", \"C\", \"CI\", \"CII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"\
    CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\"\
    , \"CXVIII\", \"CXIX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\", \"\
    CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CXXX\", \"CXXXI\", \"\
    CXXXII\", \"CXXXIII\", \"CXXXIV\", \"CXXXV\", \"CXXXVI\", \"CXXXVII\", \"CXXXVIII\"\
    , \"CXXXIX\", \"CXL\", \"CL\", \"LI\", \"LII\", \"LIII\", \"LIV\", \"LV\", \"\
    LVI\", \"LVII\", \"LVIII\", \"LIX\", \"LX\", \"LXI\", \"LXII", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ roman_numeral(number)\n    return roman.lower()\nend", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_table(number)\n        roman_numerals_str = roman_numerals.join(\"\
    \")\n        roman_numerals_str = roman_numerals_str.replace(\" \", \"\")\n  \
    \      roman_numerals_str = roman_numerals_str.replace(\"-\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\",\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    '\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\\\"\",\
    \ \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"(\", \"\")\n\
    \        roman_numerals_str = roman_numerals_str.replace(\")\", \"\")\n      \
    \  roman_numerals_str = roman_numerals_str.replace(\"+\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"*\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    %\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"^\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"~\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"=\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"[\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    ]\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"{\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"}\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"<\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\">\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    !\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"?\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\":\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\";\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\",\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    -\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"_\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"\\\"\", \"\")\n \
    \       roman_", "    if number == 0 \n        return \"0\"\n    \n    roman =\
    \ roman_numerals(number)\n    \n    mini_roman = \"\"\n    \n    for roman_char\
    \ in roman \n        mini_roman += roman_char\n        \n    return mini_roman\n\
    end\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(143)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(144)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_", "    if number == 0 \n    \
    \    return \"0\"\n    else \n        roman = roman_numeral(number)\n        roman\
    \ = roman.lower()\n        return roman\nend", "    roman = String.empty\n   \
    \ roman = roman.concat [\n        \"M\" * number/1000,\n        \"C\" * (number/100\
    \ % 10),\n        \"L\" * (number/10 % 10),\n        \"X\" * (number % 10)\n \
    \   ]\n    return roman\nend", "    if number == 0 \n        then return \"0\"\
    \n    else if number < 0 \n        then return \"-\"\n    else if number < 100\n\
    \        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number/10%10) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number/100%10)\
    \ + int_to_mini_roman(number/10%100) + int_to_mini_roman(number%100)\n    else\
    \ return \"?\"\nend", "    if number == 0\n        return \"0\"\n    \n    roman\
    \ = roman_numeral(number)\n    roman = roman.lower()\n    \n    return roman\n\
    end", "    if number == 0\n        return \"0\"\n    \n    roman_numerals = roman_numerals_helper(number)\n\
    \    \n    roman_numerals_str = roman_numerals.join(\"\")\n    \n    return roman_numerals_str\n\
    end", "    roman_numerals = roman_numerals()\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    I\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"V\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"X\"):end]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"L\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    C\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"D\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"M\"):end]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"IV\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    III\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"II\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"I\"):end]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"V\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    X\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"L\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"C\"):end]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"D\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    M\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"IV\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"III\"):end]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"II\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    I\"):end]\n    roman_numerals = roman_numerals[roman_numerals.index(\"V\"):end]\n\
    \    roman_numerals = roman_numerals[roman_numer", "    if number == 0 \n    \
    \    return \"0\"\n    else if number == 1 \n        return \"I\"\n    else if\
    \ number == 2 \n        return \"II\"\n    else if number == 3 \n        return\
    \ \"III\"\n    else if number == 4 \n        return \"IV\"\n    else if number\
    \ == 5 \n        return \"V\"\n    else if number == 6 \n        return \"VI\"\
    \n    else if number == 7 \n        return \"VII\"\n    else if number == 8 \n\
    \        return \"VIII\"\n    else if number == 9 \n        return \"IX\"\n  \
    \  else if number == 10 \n        return \"X\"\n    else if number == 11 \n  \
    \      return \"XI\"\n    else if number == 12 \n        return \"XII\"\n    else\
    \ if number == 13 \n        return \"XIII\"\n    else if number == 14 \n     \
    \   return \"XIV\"\n    else if number == 15 \n        return \"XV\"\n    else\
    \ if number == 16 \n        return \"XVI\"\n    else if number == 17 \n      \
    \  return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\n    else\
    \ if number == 19 \n        return \"XIX\"\n    else if number == 20 \n      \
    \  return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n    else\
    \ if number == 22 \n        return \"XXII\"\n    else if number == 23 \n     \
    \   return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\n   \
    \ else if number == 25 \n        return \"XXV\"\n    else if number == 26 \n \
    \       return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\n\
    \    else if number == 28 \n        return \"XXVIII\"\n    else if number == 29\
    \ \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n        return \"XLI\"\n    else ", "    if number == 0 \n        then\
    \ return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if\
    \ number < 100\n        then return \"I\"\n    else if number < 500\n        then\
    \ return \"II\"\n    else if number < 1000\n        then return \"III\"\n    else\
    \ if number < 5000\n        then return \"IV\"\n    else if number < 10000\n \
    \       then return \"V\"\n    else if number < 50000\n        then return \"\
    VI\"\n    else if number < 100000\n        then return \"VII\"\n    else if number\
    \ < 500000\n        then return \"VIII\"\n    else if number < 1000000\n     \
    \   then return \"IX\"\n    else if number < 5000000\n        then return \"X\"\
    \n    else if number < 10000000\n        then return \"XI\"\n    else if number\
    \ < 50000000\n        then return \"XII\"\n    else if number < 100000000\n  \
    \      then return \"XIII\"\n    else if number < 500000000\n        then return\
    \ \"XIV\"\n    else if number < 1000000000\n        then return \"XV\"\n    else\
    \ if number < 5000000000\n        then return \"XVI\"\n    else if number < 10000000000\n\
    \        then return \"XVII\"\n    else if number < 50000000000\n        then\
    \ return \"XVIII\"\n    else if number < 100000000000\n        then return \"\
    XIX\"\n    else if number < 500000000000\n        then return \"XX\"\n    else\
    \ if number < 1000000000000\n        then return \"XXI\"\n    else if number <\
    \ 5000000000000\n        then return \"XXII\"\n    else if number < 10000000000000\n\
    \        then return \"XXIII\"\n    else if number < 50000000000000\n        then\
    \ return \"XXIV\"\n    else if number < 100000000000000\n        then return \"\
    XXV\"\n    else if number < 500000000000000\n        then return \"XXVI\"\n  \
    \  else if number < 1000000000000000\n        then return \"XXVII\"\n    else\
    \ if number < 5000000000000000\n        then return \"XXVIII\"\n    else if number\
    \ < 10000000000000000\n        then return \"XXIX\"\n    else if number < 5000000000000000\n\
    \        then return \"XXX\"", '    roman_numerals = ["I", "II", "III", "IV",
    "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI",
    "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII",
    "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI",
    "XXXVII", "XXXVIII", "XXXIX", "XL", "L", "LI", "LX", "LXI", "LXII", "LXIII", "LXIV",
    "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV",
    "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII",
    "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI",
    "CX", "CXX", "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII",
    "CXXIX", "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII",
    "CXXXVIII", "CXXXIX", "CXL", "CL", "CLI", "CLX", "CLXI", "CLXII", "CLXIII", "CLXIV",
    "CLXV", "CLXVI", "CLXVII", "CLXVIII", "CLXIX", "CLXX", "CLXXI", "CLXXII", "CLXXIII",
    "CLXXIV", "CLXXV", "CLXXVI", "CLXXVII", "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI",
    "CLXXXII", "CLXXXIII", "CLXXXIV", "CLXXXV", "CLXXXVI", "CLXXXVII", "CLXXXVIII",
    "CLXXXIX", "CLXL", "CLL", "CLI", "CLX', "    if number == 0\n        \"\"\n  \
    \  else\n        roman_numerals(number-1)\n    end\nend", "    if number == 0\n\
    \        return \"0\"\n    \n    roman = roman_numerals(number)\n    \n    mini_roman\
    \ = \"\"\n    \n    for roman_char in roman\n        mini_roman += roman_char\n\
    \    end\n    \n    return mini_roman\nend", "    if number < 1 || number > 1000\
    \ \n        return \"Error\" \n    else \n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals = roman_numerals[1..end]\n        roman_numerals = roman_numerals.join(\"\
    \")\n        return roman_numerals\n    end\nend", "    roman = String.fromCharCode([1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]) \n    roman = roman.take(number).join(\"\
    \") \n    return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456789012345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678898)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456788990)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456788991)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889912)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345", "    mini_roman = \"\
    \"\n    \n    if number == 0\n        mini_roman = \"I\"\n    else if number ==\
    \ 1\n        mini_roman = \"II\"\n    else if number == 2\n        mini_roman\
    \ = \"III\"\n    else if number == 3\n        mini_roman = \"IV\"\n    else if\
    \ number == 4\n        mini_roman = \"V\"\n    else if number == 5\n        mini_roman\
    \ = \"VI\"\n    else if number == 6\n        mini_roman = \"VII\"\n    else if\
    \ number == 7\n        mini_roman = \"VIII\"\n    else if number == 8\n      \
    \  mini_roman = \"IX\"\n    else if number == 9\n        mini_roman = \"X\"\n\
    \    else if number == 10\n        mini_roman = \"XI\"\n    else if number ==\
    \ 11\n        mini_roman = \"XII\"\n    else if number == 12\n        mini_roman\
    \ = \"XIII\"\n    else if number == 13\n        mini_roman = \"XIV\"\n    else\
    \ if number == 14\n        mini_roman = \"XV\"\n    else if number == 15\n   \
    \     mini_roman = \"XVI\"\n    else if number == 16\n        mini_roman = \"\
    XVII\"\n    else if number == 17\n        mini_roman = \"XVIII\"\n    else if\
    \ number == 18\n        mini_roman = \"XIX\"\n    else if number == 19\n     \
    \   mini_roman = \"XX\"\n    else if number == 20\n        mini_roman = \"XXI\"\
    \n    else if number == 21\n        mini_roman = \"XXII\"\n    else if number\
    \ == 22\n        mini_roman = \"XXIII\"\n    else if number == 23\n        mini_roman\
    \ = \"XXIV\"\n    else if number == 24\n        mini_roman = \"XXV\"\n    else\
    \ if number == 25\n        mini_roman = \"XXVI\"\n    else if number == 26\n \
    \       mini_roman = \"XXVII\"\n    else if number == 27\n        mini_roman =\
    \ \"XXVIII\"\n    else if number == 28\n        mini_roman = \"XXIX\"\n    else\
    \ if number == 29\n        mini", '    roman_numerals = ["I", "II", "III", "IV",
    "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI",
    "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII",
    "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI",
    "XXXVII", "XXXVIII", "XXXIX", "XL", "L", "LI", "LXI", "LXII", "LXIII", "LXIV",
    "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV",
    "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII",
    "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI",
    "CXI", "CXII", "CXIII", "CXIV", "CXV", "CXVI", "CXVII", "CXVIII", "CXIX", "CXX",
    "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII", "CXXIX",
    "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII",
    "CXXXVIII", "CXXXIX", "CXL", "CL", "CLI", "CLXI", "CLXII", "CLXIII", "CLXIV",
    "CLXV", "CLXVI", "CLXVII", "CLXVIII", "CLXIX", "CLXX", "CLXXI", "CLXXII", "CLXXIII",
    "CLXXIV", "CLXXV", "CLXXVI", "CLXXVII", "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI",
    "CLXXXII", "CLXXXIII", "CLXXXIV", "CLXXXV", "CLXXXVI", "CL', "    if number ==\
    \ 0 \n        return \"0\"\n    else if number < 0 \n        return \"-\"\n  \
    \  else if number < 1000 \n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 1000)\n    else \n        int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 100) +\
    \ int_to_mini_roman(number % 100)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(124)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(126)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(129)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(132)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(135)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(138)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(141)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n\
    </cell", "    if number == 0 \n        then return \"0\"\n    else if number <\
    \ 0 \n        then return \"-\"\n    else if number < 1000 \n        then return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)\n    else\
    \ \n        roman_numerals = roman_numerals_array()\n        roman_numerals_array()\
    \ = []\n        roman_numerals_array() = roman_numerals[number - 1000]\n     \
    \   return roman_numerals[number - 1000]\nend\n</cell>\n<code language=julia-1.4>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.4>\nint_to_mini_roman(1234)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.4>\n\
    int_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.4>\nint_to_mini_roman(1234567890)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(12345678901)\n</cell>\n\
    <code language=julia-1.4>\nint_to_mini_roman(123456789012)\n</cell>\n<code language=julia-1.4>\n\
    int_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.4>\nint_to_mini_roman(12345678901234)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(123456789012345)\n</cell>\n\
    <code language=julia-1.4>\nint_to_mini_roman(12345678901234567)\n</cell>\n<code\
    \ language=julia-1.4>\nint_to_mini_roman(123456789012345678)\n</cell>\n<code language=julia-1.4>\n\
    int_to_mini_roman(1234567890123456788)\n</cell>\n<code language=julia-1.4>\nint_to_mini_roman(12345678901234567889)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(123456789012345678899)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.4>\nint_to_mini_roman(123456789012345", "    mini_roman\
    \ = \"\"\n    \n    if number == 0 \n        mini_roman = \"I\"\n        return\
    \ mini_roman\n    \n    if number < 0 \n        mini_roman = \"N\"\n        return\
    \ mini_roman\n    \n    if number < 100\n        mini_roman = \"I\"\n        return\
    \ mini_roman\n    \n    if number < 500\n        mini_roman = \"V\"\n        return\
    \ mini_roman\n    \n    if number < 1000\n        mini_roman = \"X\"\n       \
    \ return mini_roman\n    \n    if number < 5000\n        mini_roman = \"L\"\n\
    \        return mini_roman\n    \n    if number < 10000\n        mini_roman =\
    \ \"C\"\n        return mini_roman\n    \n    if number < 50000\n        mini_roman\
    \ = \"D\"\n        return mini_roman\n    \n    if number < 100000\n        mini_roman\
    \ = \"M\"\n        return mini_roman\n    \n    if number < 500000\n        mini_roman\
    \ = \"M\"\n        return mini_roman\n    \n    if number < 1000000\n        mini_roman\
    \ = \"C\"\n        return mini_roman\n    \n    if number < 5000000\n        mini_roman\
    \ = \"L\"\n        return mini_roman\n    \n    if number < 10000000\n       \
    \ mini_roman = \"X\"\n        return mini_roman\n    \n    if number < 50000000\n\
    \        mini_roman = \"V\"\n        return mini_roman\n    \n    if number <\
    \ 100000000\n        mini_roman = \"I\"\n        return mini_roman\n    \n   \
    \ if number < 500000000\n        mini_roman = \"I\"\n        return mini_roman\n\
    \    \n    if number < 1000000000\n        mini_roman = \"I\"\n        return\
    \ mini_roman\n    \n    if number < 5000000000\n        mini_roman = \"I\"\n \
    \       return mini_roman\n    \n    if number < 10000000000\n        mini_roman\
    \ = \"I\"\n        return mini_roman\n    \n    if number < 50000000000\n    \
    \    mini_roman = \"I\"\n        return mini_roman\n    \n    if number < 100000000000\n\
    \        mini_roman = \"I\"\n        return mini_roman\n    \n    if number <\
    \ 500000000000\n        mini_roman = \"I\"\n        return mini_roman\n    \n\
    \    if number ", '    roman_numerals = ["I", "II", "III", "IV", "V", "VI", "VII",
    "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX",
    "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX",
    "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII", "XXXVIII",
    "XXXIX", "XL", "L", "LI", "LII", "LIII", "LIV", "LV", "LVI", "LVII", "LVIII",
    "LIX", "LX", "LXI", "LXII", "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII",
    "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII",
    "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI",
    "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI", "CII", "CIV", "CV", "CVI", "CVII",
    "CVIII", "CIX", "CX", "CXI", "CXII", "CXIII", "CXIV", "CXV", "CXVI", "CXVII",
    "CXVIII", "CXIX", "CXX", "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI",
    "CXXVII", "CXXVIII", "CXXIX", "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV",
    "CXXXV", "CXXXVI", "CXXXVII", "CXXXVIII", "CXXXIX", "CXL", "CL", "LI", "LII",
    "LIII", "LIV", "LV", "LVI", "LVII", "LVIII", "LIX", "LX", "LXI", "LXII", "LXIII",
    "LXIV", "LXV", "LXVI", "LXVII", "LXVIII", "', "    if number == 0\n        return\
    \ \"0\"\n    if number < 0 || number > 1000\n        return \"?\"\n    roman =\
    \ roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n    return roman.join(\"\
    \")\nend", "    mini_roman = String.empty\n    \n    if number == 0\n        mini_roman\
    \ = \"0\"\n        return mini_roman\n    \n    roman_numerals = roman_numerals_of(number)\n\
    \    \n    for roman_numeral in roman_numerals\n        mini_roman += roman_numeral\n\
    \    \n    return mini_roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(143)\n</cell>\n<code language=julia-1.5>\nint_to_mini", "  \
    \  if number == 0 \n        return \"0\"\n    else if number < 0 \n        return\
    \ \"-\"\n    else if number < 1000 \n        return int_to_mini_roman(number /\
    \ 10) + int_to_mini_roman(number % 10)\n    else \n        return int_to_mini_roman((number\
    \ / 100) * 10) + int_to_mini_roman(number % 100)\nend", "    roman = Array.fill(5,\
    \ \"\")\n    roman[1] = roman[2] = \"I\"\n    roman[3] = \"V\"\n    roman[4] =\
    \ \"X\"\n    roman[5] = \"L\"\n    roman[6] = \"C\"\n    roman[7] = \"D\"\n  \
    \  roman[8] = \"M\"\n    roman[9] = \"M\"\n    roman[10] = \"C\"\n    roman[11]\
    \ = \"L\"\n    roman[12] = \"X\"\n    roman[13] = \"V\"\n    roman[14] = \"I\"\
    \n    roman[15] = \"X\"\n    roman[16] = \"L\"\n    roman[17] = \"X\"\n    roman[18]\
    \ = \"V\"\n    roman[19] = \"I\"\n    roman[20] = \"X\"\n    roman[21] = \"L\"\
    \n    roman[22] = \"X\"\n    roman[23] = \"V\"\n    roman[24] = \"I\"\n    roman[25]\
    \ = \"X\"\n    roman[26] = \"L\"\n    roman[27] = \"X\"\n    roman[28] = \"V\"\
    \n    roman[29] = \"I\"\n    roman[30] = \"X\"\n    roman[31] = \"L\"\n    roman[32]\
    \ = \"X\"\n    roman[33] = \"V\"\n    roman[34] = \"I\"\n    roman[35] = \"X\"\
    \n    roman[36] = \"L\"\n    roman[37] = \"X\"\n    roman[38] = \"V\"\n    roman[39]\
    \ = \"I\"\n    roman[40] = \"X\"\n    roman[41] = \"L\"\n    roman[42] = \"X\"\
    \n    roman[43] = \"V\"\n    roman[44] = \"I\"\n    roman[45] = \"X\"\n    roman[46]\
    \ = \"L\"\n    roman[47] = \"X\"\n    roman[48] = \"V\"\n    roman[49] = \"I\"\
    \n    roman[50] = \"X\"\n    roman[51] = \"L\"\n    roman[52] = \"X\"\n    roman[53]\
    \ = \"V\"\n    roman[54] = \"I\"\n    roman[55] = \"X\"\n    roman[56] = \"L\"\
    \n    roman[57] = \"X\"\n    roman[58] = \"", "    roman_numerals = roman_numerals()\n\
    \    roman_numerals_lower = roman_numerals.lower()\n    roman_numerals_lower =\
    \ roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n    roman_numerals_lower\
    \ = roman_numerals_lower[1:roman_numerals_lower.length-1]\n    roman_numerals_lower\
    \ = roman_numerals_lower[roman_numerals_lower.length-1:]\n", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(x -> lowercase(x))\n    return join(roman, \"\")\nend",
  "    if number == 0\n        return \"0\"\n    \n    roman = String.empty\n    \n\
    \    roman = roman + int_to_mini_roman(number / 10)\n    \n    if number % 10\
    \ == 0\n        return roman\n    \n    roman = roman + int_to_mini_roman(number\
    \ % 10)\n    \n    return roman\nend", "    if number == 0\n        return \"\
    0\"\n    \n    roman = String.fromCharCode([\n        1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1, \n        10, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ 1, 4, 9, 5, 3, \n        2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, \n        9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, \n\
    \        5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n      \
    \  1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, \n        9, 5,\
    \ 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5,\
    \ 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, \n        9, 5, 4, 1, 4, 9,\
    \ 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, \n        4, 1, 4, 9, 5, 3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, \n        4, 9, 5, 3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, \n        5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, 3, 2, \n        9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1,\
    \ 4, 9, 5, 3, 2, 9, 5, \n        4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3,\
    \ 2, 9, 5, 4, 1, \n        4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ 1, 4, 9, \n        5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, \n        9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5,\
    \ 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, \n\
    \        9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n      \
    \  3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, \n        9, 5,\
    \ 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, \n        4, 1, 4, 9,\
    \ 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, \n        4, 9, 5, 3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, \n        5, 3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, \n        9, 5, 4, 1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, \n        4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1,\
    \ 4, 9, 5, 3, 2, 9, 5, 4, 1, \n        4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3,\
    \ 2, 9, 5, 4, 1, 4, 9, \n        5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ 1, 4, 9, ", "    \n    if number <= 0\n        error(\"Invalid input\")\n  \
    \  end\n    \n    roman_numerals = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10, \"\
    L\" => 50, \"C\" => 100, \"D\" => 500, \"M\" => 1000)\n    \n    roman_numerals_reverse\
    \ = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10, \"L\" => 50, \"C\" => 100, \"D\"\
    \ => 500, \"M\" => 1000)\n    \n    roman_numerals_reverse[\"I\"] = roman_numerals[\"\
    I\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"V\"]\n    roman_numerals_reverse[\"\
    X\"] = roman_numerals[\"X\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"\
    L\"]\n    roman_numerals_reverse[\"C\"] = roman_numerals[\"C\"]\n    roman_numerals_reverse[\"\
    D\"] = roman_numerals[\"D\"]\n    roman_numerals_reverse[\"M\"] = roman_numerals[\"\
    M\"]\n    \n    roman_numerals_reverse[\"I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"\
    V\"] = roman_numerals[\"V\"]\n    roman_numerals_reverse[\"X\"] = roman_numerals[\"\
    X\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"\
    C\"] = roman_numerals[\"C\"]\n    roman_numerals_reverse[\"D\"] = roman_numerals[\"\
    D\"]\n    roman_numerals_reverse[\"M\"] = roman_numerals[\"M\"]\n    \n    roman_numerals_reverse[\"\
    I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"\
    V\"]\n    roman_numerals_reverse[\"X\"] = roman_numerals[\"X\"]\n    roman_numerals_reverse[\"\
    L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"C\"] = roman_numerals[\"\
    C\"]\n    roman_numerals_reverse[\"D\"] = roman_numerals[\"D\"]\n    roman_numerals_reverse[\"\
    M\"] = roman_numerals[\"M\"]\n    \n    roman_numerals_reverse[\"I\"] = roman_numerals[\"\
    I\"]\n    roman_", "    if number == 0 \n        return \"0\"\n    else if number\
    \ < 0 \n        return \"-\"\n    else if number < 1000 \n        return int_to_mini_roman(number\
    \ / 10) + int_to_mini_roman(number % 10)\n    else \n        roman = int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100)\n        roman = roman.substring(0,1)\
    \ + int_to_mini_roman(number % 10)\n        return roman\nend", "    roman = String.fromCharCodes(\n\
    \        Int64((number / 1000) * 100),\n        Int64((number / 100) % 100),\n\
    \        Int64((number / 10) % 10),\n        Int64(number % 10)\n    )\n    return\
    \ roman.lowercase\nend", "    roman = String.fromCharCode([\n        1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1, \n        10, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5,\
    \ 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n      \
    \  1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5,\
    \ 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5,\
    \ 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9,\
    \ 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9,\
    \ 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n   \
    \     1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9,\
    \ 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n\
    \        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1,\
    \ 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3,\
    \ 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1,\
    \ 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3,\
    \ 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, 9, 5, 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5,\
    \ 4, \n        1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n      \
    \  1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, \n        1, 4, 9, 5,\
    \ 3, 2, 9, 5, 4, ", "    if number == 0 \n        return \"0\"\n    else if number\
    \ < 0 \n        return \"-\"\n    else if number < 10 \n        return int_to_mini_roman(number\
    \ * 100) + int_to_mini_roman(number % 100)\n    else if number < 100 \n      \
    \  return int_to_mini_roman(number / 10) + int_to_mini_roman(number % 10)\n  \
    \  else if number < 1000 \n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number / 1000)\n    else \n        return \"-\"\n\
    end", "    roman_numerals = roman_numerals()\n    roman_numerals = roman_numerals[roman_numerals.findIndex(roman_numerals.contains(number))+1:end]\n\
    \    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numerals = roman_numerals.filter(roman_numeral => roman_numeral !=\
    \ \"\")\n    roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \    roman_numer", "    if number == 0 \n        then return \"0\"\n    else if\
    \ number < 0 \n        then return \"-\"\n    else if number < 10 \n        then\
    \ return \"I\"\n    else if number < 100 \n        then return \"II\"\n    else\
    \ if number < 1000 \n        then return \"III\"\n    else if number < 10000 \n\
    \        then return \"IV\"\n    else if number < 100000 \n        then return\
    \ \"V\"\n    else if number < 1000000 \n        then return \"VI\"\n    else if\
    \ number < 10000000 \n        then return \"VII\"\n    else if number < 100000000\
    \ \n        then return \"VIII\"\n    else if number < 1000000000 \n        then\
    \ return \"IX\"\n    else if number < 10000000000 \n        then return \"X\"\n\
    \    else if number < 100000000000 \n        then return \"XI\"\n    else if number\
    \ < 1000000000000 \n        then return \"XII\"\n    else if number < 10000000000000\
    \ \n        then return \"XIII\"\n    else if number < 100000000000000 \n    \
    \    then return \"XIV\"\n    else if number < 1000000000000000 \n        then\
    \ return \"XV\"\n    else if number < 10000000000000000 \n        then return\
    \ \"XVI\"\n    else if number < 100000000000000000 \n        then return \"XVII\"\
    \n    else if number < 100000000000000000 \n        then return \"XVIII\"\n  \
    \  else if number < 100000000000000000 \n        then return \"XIX\"\n    else\
    \ if number < 100000000000000000 \n        then return \"XX\"\n    else if number\
    \ < 100000000000000000 \n        then return \"XXI\"\n    else if number < 100000000000000000\
    \ \n        then return \"XXII\"\n    else if number < 100000000000000000 \n \
    \       then return \"XXIII\"\n    else if number < 100000000000000000 \n    \
    \    then return \"XXIV\"\n    else if number < 100000000000000000 \n        then\
    \ return \"XXV\"\n    else if number < 100000000000000000 \n        then return\
    \ \"XXVI\"\n    else if number < 100000000000000000 \n        then return \"XXVII\"\
    \n    else if number < 100000000000000000 \n        then return \"XXVIII\"\n \
    \   else if number < ", "    roman = String.fromCharCode((number - 1)%100 + 48)\n\
    \    roman = roman.*(100 - roman.length)\n    roman = roman.*(number - 1)%100\
    \ + 48\n    return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(143)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(144)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(14", "    roman_numerals\
    \ = \n        [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed = \n        [\"\
    M\", \"D\", \"C\", \"X\", \"L\", \"V\", \"I\"]\n    roman_numerals_reversed_lookup\
    \ = \n        Dict(roman_numerals_reversed .=> roman_numerals)\n    roman_numerals_reversed_lookup[number]\n\
    end\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(456)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(789)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a positive integer\
    \ to a binary string.\nRestrict to base 2 digits.", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    else\n        roman_numerals =\
    \ roman_numerals_table()\n        roman_numerals_table = roman_numerals[number]\n\
    \        roman_numerals_table\n    end\nend", "    if number == 0 \n        return\
    \ \"0\"\n    else \n        roman_numerals = roman_numerals_array()\n        roman_numerals_length\
    \ = length(roman_numerals)\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length - 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length - 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length - 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length - 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length - 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length - 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length - 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length - 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length - 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length - 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = ro", "    if number == 0 \n        return\
    \ \"0\"\n    else if number == 1 \n        return \"I\"\n    else if number ==\
    \ 2 \n        return \"II\"\n    else if number == 3 \n        return \"III\"\n\
    \    else if number == 4 \n        return \"IV\"\n    else if number == 5 \n \
    \       return \"V\"\n    else if number == 6 \n        return \"VI\"\n    else\
    \ if number == 7 \n        return \"VII\"\n    else if number == 8 \n        return\
    \ \"VIII\"\n    else if number == 9 \n        return \"IX\"\n    else if number\
    \ == 10 \n        return \"X\"\n    else if number == 11 \n        return \"XI\"\
    \n    else if number == 12 \n        return \"XII\"\n    else if number == 13\
    \ \n        return \"XIII\"\n    else if number == 14 \n        return \"XIV\"\
    \n    else if number == 15 \n        return \"XV\"\n    else if number == 16 \n\
    \        return \"XVI\"\n    else if number == 17 \n        return \"XVII\"\n\
    \    else if number == 18 \n        return \"XVIII\"\n    else if number == 19\
    \ \n        return \"XIX\"\n    else if number == 20 \n        return \"XX\"\n\
    \    else if number == 21 \n        return \"XXI\"\n    else if number == 22 \n\
    \        return \"XXII\"\n    else if number == 23 \n        return \"XXIII\"\n\
    \    else if number == 24 \n        return \"XXIV\"\n    else if number == 25\
    \ \n        return \"XXV\"\n    else if number == 26 \n        return \"XXVI\"\
    \n    else if number == 27 \n        return \"XXVII\"\n    else if number == 28\
    \ \n        return \"XXVIII\"\n    else if number == 29 \n        return \"XXIX\"\
    \n    else if number == 30 \n        return \"XXX\"\n    else if number == 31\
    \ \n        return \"XXXI\"\n    else if number == 32 \n        return \"XXXII\"\
    \n    else if number == 33 \n        return \"XXXIII\"\n    else if number ==\
    \ 34 \n        return \"XXXIV\"\n    else if number == 35 \n        return \"\
    XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\n    else if number\
    \ == 37 \n        return \"XXXVII\"\n    else if number == 38 \n        return\
    \ \"XXXVIII\"\n    else if number == 39 \n        return \"XXXIX\"\n    else if\
    \ number == 40 \n        return \"XL\"\n    else if number == 41 \n        return\
    \ \"XLI\"\n    else ", "    if number == 0\n        \"\"\n    elseif number <\
    \ 0\n        error(\"Invalid input: negative number\")\n    elseif number < 100\n\
    \        error(\"Invalid input: number too small\")\n    elseif number < 500\n\
    \        error(\"Invalid input: number too large\")\n    else\n        roman =\
    \ roman_numeral(number)\n        roman = roman.lower()\n        return roman\n\
    \    end\nend", "    if number == 0 \n        return \"0\"\n    else if number\
    \ < 0 \n        return \"-\"\n    else if number < 10 \n        return int_to_mini_roman(number\
    \ * 100) + int_to_mini_roman(number % 100)\n    else if number < 100 \n      \
    \  return int_to_mini_roman(number / 10) + int_to_mini_roman(number % 10)\n  \
    \  else if number < 1000 \n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ / 10) + int_to_mini_roman(number % 10)\n    else \n        return \"?\"\nend",
  "    mini_roman = String.empty\n    \n    if number == 0\n        mini_roman = \"\
    0\"\n        return mini_roman\n    \n    if number < 0 || number > 1000\n   \
    \     mini_roman = \"Invalid input\"\n        return mini_roman\n    \n    roman_digits\
    \ = roman_digits(number)\n    \n    for roman_digit in roman_digits\n        mini_roman\
    \ += roman_digit\n    end\n    \n    return mini_roman\nend", "    if number ==\
    \ 0\n        return \"0\"\n    if number < 0\n        return \"-\"\n    if number\
    \ < 100\n        return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    if number < 1000\n        return int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%1000)\nend", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:capitalize)\n\
    \    roman = roman.map(&:join)\n    return roman\nend", '    roman_numerals =
    ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII",
    "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV",
    "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV",
    "XXXV", "XXXVI", "XXXVII", "XXXVIII", "XXXIX", "XL", "L", "LI", "LXI", "LXII",
    "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII",
    "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI",
    "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX",
    "XC", "C", "CI", "CIX", "CX", "CXI", "CXII", "CXIII", "CXIV", "CXV", "CXVI", "CXVII",
    "CXVIII", "CXIX", "CXX", "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI",
    "CXXVII", "CXXVIII", "CXXIX", "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV",
    "CXXXV", "CXXXVI", "CXXXVII", "CXXXVIII", "CXXXIX", "CXL", "CL", "CLI", "CLX",
    "CLXI", "CLXII", "CLXIII", "CLXIV", "CLXV", "CLXVI", "CLXVII", "CLXVIII", "CLXIX",
    "CLXX", "CLXXI", "CLXXII", "CLXXIII", "CLXXIV", "CLXXV", "CLXXVI", "CLXXVII",
    "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI", "CLXXXII", "CLXXXIII", "CLXXXIV", "CL',
  "    mini_roman = \"\"\n    if number == 0 \n        mini_roman = \"0\"\n      \
    \  return mini_roman\n    \n    roman_numerals = roman_numerals(number)\n    \n\
    \    for roman_numeral in roman_numerals\n        mini_roman += roman_numeral\n\
    \    end\n    \n    return mini_roman\nend\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345679012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456790123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901234)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345679012345)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789", "    if number == 0 \n\
    \        then return \"0\"\n    else if number < 0 \n        then return \"?\"\
    \n    else if number < 100\n        then return int_to_mini_roman(number/10) +\
    \ int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"?\"\nend", '    roman_numerals = ["I", "II", "III", "IV", "V",
    "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII",
    "XVIII", "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII",
    "XXVIII", "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI",
    "XXXVII", "XXXVIII", "XXXIX", "XL", "L", "LI", "LX", "LXI", "LXII", "LXIII", "LXIV",
    "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV",
    "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII",
    "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI",
    "CX", "CXX", "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII",
    "CXXIX", "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII",
    "CXXXVIII", "CXXXIX", "CC", "CCI", "CCX", "CCXX", "CCXXI", "CCXXII", "CCXXIII",
    "CCXXIV", "CCXXV", "CCXXVI", "CCXXVII", "CCXXVIII", "CCXXIX", "CCXXX", "CCXXXI",
    "CCXXXII", "CCXXXIII", "CCXXXIV", "CCXXXV", "CCXXXVI", "CCXXXVII", "CCXXXVIII",
    "CCXXXIX", "CD", "CD", "CDI", "CDX", "CDXX", "CDXXI", "CDXXII", "CDXXIII", "CDXXIV",
    "CDXXV", "CDXXVI", "CDXXVII", "CDXXVIII", "CDXX', "    if number == 0 \n     \
    \   return \"0\"\n    else if number < 0 \n        return \"-\"\n    else if number\
    \ < 1000 \n        return int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\n\
    \    else \n        roman = int_to_mini_roman(number/10)\n        roman = roman.insert(0,int_to_mini_roman(number%10))\n\
    \        return roman\nend", "    if number == 0 \n        return \"0\"\n    \n\
    \    roman = String.empty\n    \n    if number < 0 \n        error(\"Negative\
    \ number\")\n    \n    if number < 100\n        roman = roman.concat \"M\"\n \
    \       number = number - 100\n    \n    if number < 500\n        roman = roman.concat\
    \ \"D\"\n        number = number - 500\n    \n    if number < 1000\n        roman\
    \ = roman.concat \"C\"\n        number = number - 1000\n    \n    if number <\
    \ 2000\n        roman = roman.concat \"L\"\n        number = number - 2000\n \
    \   \n    if number < 5000\n        roman = roman.concat \"X\"\n        number\
    \ = number - 5000\n    \n    if number < 10000\n        roman = roman.concat \"\
    V\"\n        number = number - 10000\n    \n    if number < 20000\n        roman\
    \ = roman.concat \"I\"\n        number = number - 20000\n    \n    if number <\
    \ 50000\n        roman = roman.concat \"X\"\n        number = number - 50000\n\
    \    \n    if number < 100000\n        roman = roman.concat \"L\"\n        number\
    \ = number - 100000\n    \n    if number < 200000\n        roman = roman.concat\
    \ \"C\"\n        number = number - 200000\n    \n    if number < 500000\n    \
    \    roman = roman.concat \"V\"\n        number = number - 500000\n    \n    if\
    \ number < 1000000\n        roman = roman.concat \"I\"\n        number = number\
    \ - 1000000\n    \n    if number < 2000000\n        roman = roman.concat \"X\"\
    \n        number = number - 2000000\n    \n    if number < 5000000\n        roman\
    \ = roman.concat \"L\"\n        number = number - 5000000\n    \n    if number\
    \ < 10000000\n        roman = roman.concat \"C\"\n        number = number - 10000000\
    \ \n    \n    if number < 20000000\n        roman = roman.concat \"V\"\n     \
    \   number = number - 20000000\n    \n    if number < 50000000\n        roman\
    \ = roman.concat \"I\"\n        number = number - 50000000\n    \n    if number\
    \ < 100000000\n        roman = roman.concat \"X\"\n        number = number ",
  "    if number < 1 || number > 1000\n        return \"Error\"\n    \n    roman_numerals\
    \ = roman_numerals_array\n    \n    roman_numerals_array = []\n    \n    roman_numerals_array.append(roman_numerals_array[0])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[1])\n    \n    roman_numerals_array.append(roman_numerals_array[2])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[3])\n    \n    roman_numerals_array.append(roman_numerals_array[4])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[5])\n    \n    roman_numerals_array.append(roman_numerals_array[6])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[7])\n    \n    roman_numerals_array.append(roman_numerals_array[8])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[9])\n    \n    roman_numerals_array.append(roman_numerals_array[10])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[11])\n    \n    roman_numerals_array.append(roman_numerals_array[12])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[13])\n    \n    roman_numerals_array.append(roman_numerals_array[14])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[15])\n    \n    roman_numerals_array.append(roman_numerals_array[16])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[17])\n    \n    roman_numerals_array.append(roman_numerals_array[18])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[19])\n    \n    roman_numerals_array.append(roman_numerals_array[20])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[21])\n    \n    roman_numerals_array.append(roman_numerals_array[22])\n\
    \    \n    roman_numerals_array.append(roman_numerals_array[23])\n    \n    roman_numerals_array.append(roman_numerals_array[24])\n\
    \    \n    roman_", "    if number < 1 || number > 1000 \n        return \"Invalid\
    \ input\"\n    else \n        roman_numerals = roman_numerals_array(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        roman_numerals_str\
    \ = roman_numerals_str.toLowerCase()\n        return roman_numerals_str\nend\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(125)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(128)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(131)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(134)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(137)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(140)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(143)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(144)\n</cell", "    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_len = length(roman_numerals)\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numer", "    if number == 0\n        \"\"\n    else\n       \
    \ roman_numerals(number-1)\n    end\nend", "    if number == 0 \n        then\
    \ return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if\
    \ number < 1000 \n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000 \n        then return int_to_mini_roman(number/100)\
    \ + int_to_mini_roman(number/10%10) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100000 \n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number/100%10)\
    \ + int_to_mini_roman(number/10%10%10) + int_to_mini_roman(number%10)\n    else\
    \ if number < 1000000 \n        then return int_to_mini_roman(number/10000) +\
    \ int_to_mini_roman(number/1000%10) + int_to_mini_roman(number/100%10%10) + int_to_mini_roman(number/10%10%10%10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000000 \n        then\
    \ return int_to_mini_roman(number/100000) + int_to_mini_roman(number/10000%10)\
    \ + int_to_mini_roman(number/1000%10%10) + int_to_mini_roman(number/100%10%10%10)\
    \ + int_to_mini_roman(number/10%10%10%10%10) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000000 \n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number/10000%10) + int_to_mini_roman(number/1000%10%10)\
    \ + int_to_mini_roman(number/100%10%10%10) + int_to_mini_roman(number/10%10%10%10%10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 1000000000 \n        then\
    \ return int_to_mini_roman(number/1000000) + int_to_mini_roman(number/100000%10)\
    \ + int_to_mini_roman(number/10000%10%10) + int_to_mini_roman(number/1000%10%10%10)\
    \ + int_to_mini_roman(number", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = Array{String}(number)\n    roman[number]\
    \ = \"\"\n    roman[number] = \"I\"\n    roman[number-1] = \"V\"\n    roman[number-2]\
    \ = \"X\"\n    roman[number-3] = \"L\"\n    roman[number-4] = \"C\"\n    roman[number-5]\
    \ = \"D\"\n    roman[number-6] = \"M\"\n    roman[number-7] = \"M\"\n    roman[number-8]\
    \ = \"C\"\n    roman[number-9] = \"L\"\n    roman[number-10] = \"X\"\n    roman[number-11]\
    \ = \"V\"\n    roman[number-12] = \"I\"\n    roman[number-13] = \"V\"\n    roman[number-14]\
    \ = \"X\"\n    roman[number-15] = \"L\"\n    roman[number-16] = \"C\"\n    roman[number-17]\
    \ = \"D\"\n    roman[number-18] = \"M\"\n    roman[number-19] = \"M\"\n    roman[number-20]\
    \ = \"C\"\n    roman[number-21] = \"L\"\n    roman[number-22] = \"X\"\n    roman[number-23]\
    \ = \"V\"\n    roman[number-24] = \"I\"\n    roman[number-25] = \"V\"\n    roman[number-26]\
    \ = \"X\"\n    roman[number-27] = \"L\"\n    roman[number-28] = \"C\"\n    roman[number-29]\
    \ = \"D\"\n    roman[number-30] = \"M\"\n    roman[number-31] = \"M\"\n    roman[number-32]\
    \ = \"C\"\n    roman[number-33] = \"L\"\n    roman[number-34] = \"X\"\n    roman[number-35]\
    \ = \"V\"\n    roman[number-36] = \"I\"\n    roman[number-37] = \"V\"\n    roman[number-38]\
    \ = \"X\"\n    roman[number-39] = \"L\"\n    roman[number-40] = \"C\"\n    roman[number-41]\
    \ = \"D\"\n    roman[number-42] = \"M\"\n    roman[number-43] = \"M\"\n    roman[number-44]\
    \ = \"C\"\n    roman[number", "    if number == 0 \n        then return \"0\"\n\
    \    else if number < 0 \n        then return \"-\"\n    else if number < 10 \n\
    \        then return \"I\"\n    else if number < 100 \n        then return \"\
    II\"\n    else if number < 1000 \n        then return \"III\"\n    else if number\
    \ < 10000 \n        then return \"IV\"\n    else if number < 100000 \n       \
    \ then return \"V\"\n    else if number < 1000000 \n        then return \"VI\"\
    \n    else if number < 10000000 \n        then return \"VII\"\n    else if number\
    \ < 100000000 \n        then return \"VIII\"\n    else if number < 1000000000\
    \ \n        then return \"IX\"\n    else if number < 10000000000 \n        then\
    \ return \"X\"\n    else if number < 100000000000 \n        then return \"XI\"\
    \n    else if number < 1000000000000 \n        then return \"XII\"\n    else if\
    \ number < 10000000000000 \n        then return \"XIII\"\n    else if number <\
    \ 100000000000000 \n        then return \"XIV\"\n    else if number < 1000000000000000\
    \ \n        then return \"XV\"\n    else if number < 10000000000000000 \n    \
    \    then return \"XVI\"\n    else if number < 100000000000000000 \n        then\
    \ return \"XVII\"\n    else if number < 100000000000000000 \n        then return\
    \ \"XVIII\"\n    else if number < 100000000000000000 \n        then return \"\
    XIX\"\n    else if number < 100000000000000000 \n        then return \"XX\"\n\
    \    else if number < 100000000000000000 \n        then return \"XXI\"\n    else\
    \ if number < 100000000000000000 \n        then return \"XXII\"\n    else if number\
    \ < 100000000000000000 \n        then return \"XXIII\"\n    else if number < 100000000000000000\
    \ \n        then return \"XXIV\"\n    else if number < 100000000000000000 \n \
    \       then return \"XXV\"\n    else if number < 100000000000000000 \n      \
    \  then return \"XXVI\"\n    else if number < 100000000000000000 \n        then\
    \ return \"XXVII\"\n    else if number < 100000000000000000 \n        then return\
    \ \"XXVIII\"\n    else if number < ", "    mini_roman = \"\"\n    \n    if number\
    \ == 0 \n        mini_roman = \"I\"\n        return mini_roman\n    \n    roman_numerals\
    \ = roman_numerals(number)\n    \n    for roman_numeral in roman_numerals\n  \
    \      mini_roman += roman_numeral\n    \n    return mini_roman\nend\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\n", "    roman_numerals = roman_numerals()\n    roman_numerals_lowercase\
    \ = roman_numerals.map(&:to_lowercase)\n    roman_numerals_lowercase[number-1]\n\
    end", "    \n    if number == 0 \n        then return \"0\"\n    else if number\
    \ < 0 \n        then return \"-\"\n    else if number < 100\n        then return\
    \ int_to_mini_roman(number/10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\n\
    \    else return \"?\"\nend", "    if number == 0 \n        return \"0\"\n   \
    \ else if number < 0 \n        return \"-\"\n    else if number < 10 \n      \
    \  return int_to_mini_roman(number * 100) + int_to_mini_roman(number % 100)\n\
    \    else \n        return int_to_mini_roman(number / 10) + int_to_mini_roman(number\
    \ % 10)\nend", "    roman = String.empty\n    \n    if number == 0\n        roman\
    \ = \"I\"\n    elseif number < 0\n        roman = \"Invalid input\"\n    elseif\
    \ number < 100\n        roman = int_to_mini_roman(number/10)\n    elseif number\
    \ < 1000\n        roman = int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\n\
    \    else\n        roman = \"Invalid input\"\n    end\n    \n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n", "  \
    \  if number == 0\n        \"\"\n    else\n        int_to_mini_roman(number /\
    \ 10) + int_to_mini_roman(number % 10) + \n        int_to_mini_roman(number %\
    \ 100)\n    end\nend", "    if number == 0 \n        then return \"0\"\n    else\
    \ if number < 0 \n        then return \"-\" \n    else if number < 100\n     \
    \   then return \"I\"\n    else if number < 500\n        then return \"V\"\n \
    \   else if number < 1000\n        then return \"X\"\n    else if number < 5000\n\
    \        then return \"L\"\n    else if number < 10000\n        then return \"\
    C\"\n    else if number < 50000\n        then return \"D\"\n    else if number\
    \ < 100000\n        then return \"M\"\n    else if number < 500000\n        then\
    \ return \"M\"\n    else if number < 1000000\n        then return \"B\"\n    else\
    \ if number < 5000000\n        then return \"B\"\n    else if number < 10000000\n\
    \        then return \"B\"\n    else if number < 50000000\n        then return\
    \ \"B\"\n    else if number < 100000000\n        then return \"B\"\n    else if\
    \ number < 500000000\n        then return \"B\"\n    else if number < 1000000000\n\
    \        then return \"B\"\n    else if number < 5000000000\n        then return\
    \ \"B\"\n    else if number < 10000000000\n        then return \"B\"\n    else\
    \ if number < 50000000000\n        then return \"B\"\n    else if number < 100000000000\n\
    \        then return \"B\"\n    else if number < 500000000000\n        then return\
    \ \"B\"\n    else if number < 1000000000000\n        then return \"B\"\n    else\
    \ if number < 5000000000000\n        then return \"B\"\n    else if number < 10000000000000\n\
    \        then return \"B\"\n    else if number < 50000000000000\n        then\
    \ return \"B\"\n    else if number < 100000000000000\n        then return \"B\"\
    \n    else if number < 500000000000000\n        then return \"B\"\n    else if\
    \ number < 1000000000000000\n        then return \"B\"\n    else if number < 5000000000000000\n\
    \        then return \"B\"\n    else if number < 10000000000000000\n        then\
    \ return \"B\"\n    else if number < 5000000000000000\n        then return \"\
    B\"\n    else if number < 10000000000000000\n        then return \"B\"\n    else\
    \ if number < 5000000000000000\n        then return \"B", "    roman = Array.fill(number,\
    \ \"\")\n    roman[number] = \"I\"\n    roman[number+1] = \"V\"\n    roman[number+2]\
    \ = \"X\"\n    roman[number+3] = \"L\"\n    roman[number+4] = \"C\"\n    roman[number+5]\
    \ = \"D\"\n    roman[number+6] = \"M\"\n    roman[number+7] = \"M\"\n    roman[number+8]\
    \ = \"C\"\n    roman[number+9] = \"L\"\n    roman[number+10] = \"X\"\n    roman[number+11]\
    \ = \"V\"\n    roman[number+12] = \"I\"\n    roman[number+13] = \"X\"\n    roman[number+14]\
    \ = \"L\"\n    roman[number+15] = \"C\"\n    roman[number+16] = \"D\"\n    roman[number+17]\
    \ = \"M\"\n    roman[number+18] = \"C\"\n    roman[number+19] = \"L\"\n    roman[number+20]\
    \ = \"X\"\n    roman[number+21] = \"V\"\n    roman[number+22] = \"I\"\n    roman[number+23]\
    \ = \"X\"\n    roman[number+24] = \"L\"\n    roman[number+25] = \"C\"\n    roman[number+26]\
    \ = \"D\"\n    roman[number+27] = \"M\"\n    roman[number+28] = \"C\"\n    roman[number+29]\
    \ = \"L\"\n    roman[number+30] = \"X\"\n    roman[number+31] = \"V\"\n    roman[number+32]\
    \ = \"I\"\n    roman[number+33] = \"X\"\n    roman[number+34] = \"L\"\n    roman[number+35]\
    \ = \"C\"\n    roman[number+36] = \"D\"\n    roman[number+37] = \"M\"\n    roman[number+38]\
    \ = \"C\"\n    roman[number+39] = \"L\"\n    roman[number+40] = \"X\"\n    roman[number+41]\
    \ = \"V\"\n    roman[number+42] = \"I\"\n    roman[number+43] = \"X\"\n    roman[number+44]\
    \ = \"L\"\n    roman[number+", "    if number == 0 \n        return \"0\"\n  \
    \  if number == 1 \n        return \"I\"\n    if number == 2 \n        return\
    \ \"II\"\n    if number == 3 \n        return \"III\"\n    if number == 4 \n \
    \       return \"IV\"\n    if number == 5 \n        return \"V\"\n    if number\
    \ == 6 \n        return \"VI\"\n    if number == 7 \n        return \"VII\"\n\
    \    if number == 8 \n        return \"VIII\"\n    if number == 9 \n        return\
    \ \"IX\"\n    if number == 10 \n        return \"X\"\n    if number == 11 \n \
    \       return \"XI\"\n    if number == 12 \n        return \"XII\"\n    if number\
    \ == 13 \n        return \"XIII\"\n    if number == 14 \n        return \"XIV\"\
    \n    if number == 15 \n        return \"XV\"\n    if number == 16 \n        return\
    \ \"XVI\"\n    if number == 17 \n        return \"XVII\"\n    if number == 18\
    \ \n        return \"XVIII\"\n    if number == 19 \n        return \"XIX\"\n \
    \   if number == 20 \n        return \"XX\"\n    if number == 21 \n        return\
    \ \"XXI\"\n    if number == 22 \n        return \"XXII\"\n    if number == 23\
    \ \n        return \"XXIII\"\n    if number == 24 \n        return \"XXIV\"\n\
    \    if number == 25 \n        return \"XXV\"\n    if number == 26 \n        return\
    \ \"XXVI\"\n    if number == 27 \n        return \"XXVII\"\n    if number == 28\
    \ \n        return \"XXVIII\"\n    if number == 29 \n        return \"XXIX\"\n\
    \    if number == 30 \n        return \"XXX\"\n    if number == 31 \n        return\
    \ \"XXXI\"\n    if number == 32 \n        return \"XXXII\"\n    if number == 33\
    \ \n        return \"XXXIII\"\n    if number == 34 \n        return \"XXXIV\"\n\
    \    if number == 35 \n        return \"XXXV\"\n    if number == 36 \n       \
    \ return \"XXXVI\"\n    if number == 37 \n        return \"XXXVII\"\n    if number\
    \ == 38 \n        return \"XXXVIII\"\n    if number == 39 \n        return \"\
    XXXIX\"\n    if number == 40 \n        return \"XL\"\n    if number == 41 \n \
    \       return \"XLI\"\n    if number == 42 \n        return \"XLII\"\n    if\
    \ number == 43 \n        return \"XLIII\"\n    if number == 44 \n        return\
    \ \"XLIIII\"\n    if number == 45 \n        return \"XLIIV\"\n    if number ==\
    \ 46 \n        return \"XLIV\"\n    if number == 47 \n        return \"XLIVI\"\
    \n    if number == 48 \n        return \"XLIVII\"", "    roman = String.empty\n\
    \    roman = roman.concat [\n        \"M\" * floor(number/1000),\n        \"C\"\
    \ * floor(number/100),\n        \"L\" * floor(number/10),\n        \"X\" * floor(number/10)\n\
    \    ]\n    return roman\nend", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(&:to_lowercase)\n    return roman.join(\" \")\nend", "    if number\
    \ == 0\n        \"\"\n    else\n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals[number]\n    end\nend", "    if number == 0 \n       \
    \ return \"0\"\n    else if number == 1 \n        return \"I\"\n    else if number\
    \ == 2 \n        return \"II\"\n    else if number == 3 \n        return \"III\"\
    \n    else if number == 4 \n        return \"IV\"\n    else if number == 5 \n\
    \        return \"V\"\n    else if number == 6 \n        return \"VI\"\n    else\
    \ if number == 7 \n        return \"VII\"\n    else if number == 8 \n        return\
    \ \"VIII\"\n    else if number == 9 \n        return \"IX\"\n    else if number\
    \ == 10 \n        return \"X\"\n    else if number == 11 \n        return \"XI\"\
    \n    else if number == 12 \n        return \"XII\"\n    else if number == 13\
    \ \n        return \"XIII\"\n    else if number == 14 \n        return \"XIV\"\
    \n    else if number == 15 \n        return \"XV\"\n    else if number == 16 \n\
    \        return \"XVI\"\n    else if number == 17 \n        return \"XVII\"\n\
    \    else if number == 18 \n        return \"XVIII\"\n    else if number == 19\
    \ \n        return \"XIX\"\n    else if number == 20 \n        return \"XX\"\n\
    \    else if number == 21 \n        return \"XXI\"\n    else if number == 22 \n\
    \        return \"XXII\"\n    else if number == 23 \n        return \"XXIII\"\n\
    \    else if number == 24 \n        return \"XXIV\"\n    else if number == 25\
    \ \n        return \"XXV\"\n    else if number == 26 \n        return \"XXVI\"\
    \n    else if number == 27 \n        return \"XXVII\"\n    else if number == 28\
    \ \n        return \"XXVIII\"\n    else if number == 29 \n        return \"XXIX\"\
    \n    else if number == 30 \n        return \"XXX\"\n    else if number == 31\
    \ \n        return \"XXXI\"\n    else if number == 32 \n        return \"XXXII\"\
    \n    else if number == 33 \n        return \"XXXIII\"\n    else if number ==\
    \ 34 \n        return \"XXXIV\"\n    else if number == 35 \n        return \"\
    XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\n    else if number\
    \ == 37 \n        return \"XXXVII\"\n    else if number == 38 \n        return\
    \ \"XXXVIII\"\n    else if number == 39 \n        return \"XXXIX\"\n    else if\
    \ number == 40 \n        return \"XL\"\n    else if number == 41 \n        return\
    \ \"XLI\"\n    else ", "    roman = String.empty\n    roman = roman.concat [\n\
    \        \"M\" * floor(number/1000),\n        \"C\" * floor(number/100),\n   \
    \     \"L\" * floor(number/10),\n        \"X\" * floor(number/10)\n    ]\n   \
    \ return roman\nend", "    roman = String.fromChars(\n        Int64.(\n      \
    \      roman_to_int(\"I\") + Int64.(\n                roman_to_int(\"V\") + Int64.(\n\
    \                    roman_to_int(\"X\") + Int64.(\n                        roman_to_int(\"\
    L\") + Int64.(\n                            roman_to_int(\"C\") + Int64.(\n  \
    \                              roman_to_int(\"D\") + Int64.(\n               \
    \                     roman_to_int(\"M\") + Int64.(\n                        \
    \                roman_to_int(\"M\") + Int64.(\n                             \
    \               roman_to_int(\"V\") + Int64.(\n                              \
    \                  roman_to_int(\"I\") + Int64.(\n                           \
    \                         roman_to_int(\"I\") + Int64.(\n                    \
    \                                    roman_to_int(\"I\") + Int64.(\n         \
    \                                                   roman_to_int(\"I\") + Int64.(\n\
    \                                                                roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \       roman_to_int(\"I\") + Int64.(\n                                      \
    \                                  roman_to_int(\"I\") + Int64.(\n           \
    \                                                                 roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \                   roman_to_int(\"I\") + Int64.(\n                          \
    \                                                          roman_to_int(\"I\"\
    ) + Int64.(\n                                                                \
    \                        roman_to_int(\"I\") + Int64.(\n                     \
    \                                                                       roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \                                   roman_to_int(\"I\") + Int64.(\n          \
    \                                                                            \
    \              roman_to_int(\"I\") + Int64.(\n                               \
    \                                                                         roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \                                               roman_to_int(\"I\") + Int64.(\n\
    \                                                                            \
    \                                    roman_to_int(\"I\") + Int64.(\n         \
    \                                                                            \
    \                               roman_to_int(\"I\") + Int64.(\n              \
    \                                                                            \
    \                              roman_to_int(\"I\") + Int64.(\n               \
    \                                                                            \
    \                                 roman_to_int(\"I\") + Int64.(\n            \
    \                                                                            \
    \                                        roman_to_int(\"I\") + Int64.(\n     \
    \                                                                            \
    \                                                   roman_to_int(\"I\") + Int64.(\n\
    \                                                                            \
    \                                                            roman_to_int(\"I\"\
    ) + Int64.(\n                                                                \
    \                                                                            roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \                                                                            \
    \       roman_to_int(\"I\") + Int64.(\n                                      \
    \                                                                            \
    \                                  roman_to_int(\"I\") + Int64.(\n           \
    \                                                                            \
    \                                                                 roman_to_int(\"\
    I\") + Int64.(\n                                                             \
    \                                                                   ", "    roman\
    \ = String.fromCharCode([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1])\n\
    \    roman = roman.substring(roman.length-number)\n    return roman\nend", " \
    \   roman = String.fromCharCode([\n        1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1]\n    )\n    roman = roman.substring(roman.indexOf(\"1\") + 1)\n\
    \    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(roman.indexOf(\"0\") + 1)\n    roman = roman.substring(roman.indexOf(\"\
    0\") + 1)\n    roman = roman.substring(roman.indexOf(\"0\") + 1)\n    roman =\
    \ roman.substring(ro", "    roman = String.fromCharCodes(\n        Int64[][\n\
    \            Int64[][\n                Int64[][\n                    Int64[][\n\
    \                        Int64[][\n                            Int64[][\n    \
    \                            Int64[][\n                                    Int64[][\n\
    \                                        Int64[][\n                          \
    \                  Int64[][\n                                                Int64[][\n\
    \                                                    Int64[][\n              \
    \                                          Int64[][\n                        \
    \                                    Int64[][\n                              \
    \                                  Int64[][\n                                \
    \                                    Int64[][\n                              \
    \                                          Int64[][\n                        \
    \                                                    Int64[][\n              \
    \                                                                  Int64[][\n\
    \                                                                            \
    \        Int64[][\n                                                          \
    \                              Int64[][\n                                    \
    \                                                        Int64[][\n          \
    \                                                                            \
    \          Int64[][\n                                                        \
    \                                            Int64[][\n                      \
    \                                                                            \
    \      Int64[][\n                                                            \
    \                                                Int64[][\n                  \
    \                                                                            \
    \                  Int64[][\n                                                \
    \                                                                    Int64[][\n\
    \                                                                            \
    \                                            Int64[][\n                      \
    \                                                                            \
    \                          Int64[][\n                                        \
    \                                                                            \
    \            Int64[][\n                                                      \
    \                                                                            \
    \  Int64[][\n                                                                \
    \                                                                        Int64[][\n\
    \                                                                            \
    \                                                                Int64[][\n  \
    \                                                                            \
    \                                                                  Int64[][\n\
    \                                                                            \
    \                                                                        Int64[][\n\
    \                                                                            \
    \                                                                            Int64[][\n\
    \                                                                            \
    \                                                                            \
    \    Int64[][\n                                                              \
    \                                                                            \
    \                      Int64[][\n                                            \
    \                                                                            \
    \                                            Int64[][\n                      \
    \                                                                            \
    \                                                                      Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                    Int64[][\n                                              \
    \                                                                            \
    \                                                      Int64[][\n            \
    \                                                                            \
    \                                                                            \
    \                Int64[][\n                                                  \
    \                                                                            \
    \                                                          Int64[][\n        \
    \                                                                            \
    \                                                                            \
    \                            Int64[][\n                                      \
    \                                                                            \
    \                                                                            \
    \  Int64[][\n                                                                \
    \                                                                            \
    \                                                        Int64[][\n          \
    \                                                                            \
    \                                                                            \
    \                                      Int64[][\n                            \
    \                                                                            \
    \                                                                            \
    \                        Int64[][\n                                          \
    \                                                                            \
    \                                                                            \
    \              Int64[][\n                                                    \
    \                                                                            \
    \                                                                            \
    \        Int64[][\n                                                          \
    \                                                                            \
    \                                                                            \
    \      Int64[][\n                                                            \
    \                                                                            \
    \                                                                            \
    \        Int64[][\n                                                          \
    \                                                                            \
    \                                                                            \
    \              Int64[][\n                                                    \
    \                                                                            \
    \                                                                            \
    \                        Int64[][\n                                          \
    \                                                                            \
    \                                                                            \
    \                                      Int64[][\n                            \
    \                                                                            \
    \                                                                            \
    \                                                        Int64[][\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  Int64[][\n                                                                \
    \                                                                            \
    \                                                                            \
    \                            Int64[][\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                          Int64[][\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                Int64[][\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                                      Int64[][\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    Int64[][\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                  Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        Int64[][", "    if number == 0 \n   \
    \     return \"0\"\n    else if number == 1 \n        return \"I\"\n    else if\
    \ number == 2 \n        return \"II\"\n    else if number == 3 \n        return\
    \ \"III\"\n    else if number == 4 \n        return \"IV\"\n    else if number\
    \ == 5 \n        return \"V\"\n    else if number == 6 \n        return \"VI\"\
    \n    else if number == 7 \n        return \"VII\"\n    else if number == 8 \n\
    \        return \"VIII\"\n    else if number == 9 \n        return \"IX\"\n  \
    \  else if number == 10 \n        return \"X\"\n    else if number == 11 \n  \
    \      return \"XI\"\n    else if number == 12 \n        return \"XII\"\n    else\
    \ if number == 13 \n        return \"XIII\"\n    else if number == 14 \n     \
    \   return \"XIV\"\n    else if number == 15 \n        return \"XV\"\n    else\
    \ if number == 16 \n        return \"XVI\"\n    else if number == 17 \n      \
    \  return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\n    else\
    \ if number == 19 \n        return \"XIX\"\n    else if number == 20 \n      \
    \  return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n    else\
    \ if number == 22 \n        return \"XXII\"\n    else if number == 23 \n     \
    \   return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\n   \
    \ else if number == 25 \n        return \"XXV\"\n    else if number == 26 \n \
    \       return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\n\
    \    else if number == 28 \n        return \"XXVIII\"\n    else if number == 29\
    \ \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n        return \"XLI\"\n    else ", "    roman = String.empty\n    roman\
    \ = roman.concat \"M\"\n    roman = roman.concat \"CM\"\n    roman = roman.concat\
    \ \"D\"\n    roman = roman.concat \"CD\"\n    roman = roman.concat \"C\"\n   \
    \ roman = roman.concat \"XC\"\n    roman = roman.concat \"L\"\n    roman = roman.concat\
    \ \"XL\"\n    roman = roman.concat \"X\"\n    roman = roman.concat \"IX\"\n  \
    \  roman = roman.concat \"V\"\n    roman = roman.concat \"IV\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat \"IU\"\n    roman = roman.concat \"I\"\n   \
    \ roman = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman\
    \ = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman\
    \ = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman\
    \ = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman\
    \ = roman.concat \"I\"\n    roman = roman.concat \"I\"\n    roman = roman.concat\
    \ \"I\"\n    roman = roman.concat ", "    if number == 0 \n        return \"0\"\
    \n    \n    roman = String.fromCharCode([\n        1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1]\n    )\n    \n    roman_digits = roman[number]\n   \
    \ \n    roman_digits_reversed = roman_digits[::-1]\n    \n    roman_digits_reversed_reversed\
    \ = roman_digits_reversed[::-1]\n    \n    roman_digits_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed[::-1]\n    \n    roman_digits_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed[::-1]\n    \n    roman_digits_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed[::-1]\n    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed[::-1]\n    \n  \
    \  roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = roman_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[::-1]\n\
    \    \n    roman_digits_reversed_reversed_reverse", "    if number == 0 \n   \
    \     return \"0\"\n    \n    roman_numerals = roman_numerals(number)\n    \n\
    \    roman_numerals_sorted = sort(roman_numerals)\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \" \"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \",\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \".\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .!= \"]\"]\n    \n    roman_numerals_sorted\
    \ = roman_numerals_sorted[roman_numerals_sorted .", "    roman = roman_numeral(number)\n\
    \    roman = roman.lower()\n    return roman\nend", "    if number == 0\n    \
    \    return \"0\"\n    \n    roman = String.empty\n    \n    if number < 2\n \
    \       return roman\n    \n    roman = roman.prepend(int_to_mini_roman(number\
    \ / 2))\n    roman = roman.prepend(int_to_mini_roman(number % 2))\n    \n    return\
    \ roman\nend", "    if number == 0\n        \"\"\n    elseif number < 0 || number\
    \ > 1000\n        \"\"\n    else\n        roman_numerals(number).[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(1000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000000001)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000000002)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000000003)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype int_to_mini_roman(10000000000000000000000000000000004)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype ", "    if number == 0\n  \
    \      return \"0\"\n    \n    roman = roman_numerals(number)\n    \n    roman_str\
    \ = roman.map(|x| x.to_string()).collect::<Vec<String>>()\n    \n    roman_str\
    \ = roman_str.map(|x| x.to_lowercase()).collect::<Vec<String>>()\n    \n    roman_str\
    \ = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.chars().collect::<Vec<Char>>()).collect::<Vec<Vec<Char>>>()\n\
    \    \n    roman_str = roman_str.map(|x| x.join(\"\")).collect::<Vec<String>>()\n\
    \    \n    roman_str = roman_str.map(|x| ", "    if number == 0\n        \"\"\n\
    \    elseif number < 0\n        error(\"Invalid input: negative number\")\n  \
    \  else\n        roman = roman_numerals(number)\n        roman = roman[roman.length-1]\n\
    \        roman = roman.substring(0,1)\n        return roman\n    end\nend", " \
    \   if number == 0 \n        then return \"0\"\n    else if number < 0 \n    \
    \    then return \"-\"\n    else if number < 1000 \n        then return int_to_mini_roman(number/10)\n\
    \    else if number < 1000000 \n        then return int_to_mini_roman(number/100)\
    \ + int_to_mini_roman(number%100)\n    else if number < 1000000000 \n        then\
    \ return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\n   \
    \ else if number < 1000000000000 \n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000)\n    else if number < 1000000000000000 \n\
    \        then return int_to_mini_roman(number/1000000000) + int_to_mini_roman(number%1000000000)\n\
    \    else if number < 1000000000000000000 \n        then return int_to_mini_roman(number/1000000000000)\
    \ + int_to_mini_roman(number%1000000000000)\n    else if number < 1000000000000000000000\
    \ \n        then return int_to_mini_roman(number/1000000000000000) + int_to_mini_roman(number%1000000000000000)\n\
    \    else if number < 1000000000000000000000000 \n        then return int_to_mini_roman(number/10000000000000000000)\
    \ + int_to_mini_roman(number%10000000000000000000)\n    else if number < 1000000000000000000000000000\
    \ \n        then return int_to_mini_roman(number/10000000000000000000000) + int_to_mini_roman(number%10000000000000000000000)\n\
    \    else if number < 10000000000000000000000000000000 \n        then return int_to_mini_roman(number/10000000000000000000000000)\
    \ + int_to_mini_roman(number%10000000000000000000000000)\n    else if number <\
    \ 1000000000000000000000000000000000 \n        then return int_to_mini_roman(number/10000000000000000000000000000)\
    \ + int_to_mini_roman(number%10000000000000000000000000000)\n    else if number\
    \ < 1000000000000000000000000000000000\n        then return int_to_mini_roman(number/10000000000000000000000000000000)\
    \ + int_to_mini_roman(number%10000000000000000000000000000000)\n    else if number\
    \ < 1000000000000000000000000000000000 \n        then return int_to_mini_roman(number/1000000000000000000000000000000000)\
    \ + int_to_mini_roman(number%1000000000000000000000000000000000)\n    else if\
    \ number < ", "    if number == 0\n        return \"0\"\n    roman = roman_to_int(number)\n\
    \    roman_str = int_to_roman(roman)\n    roman_str = roman_str.lower()\n    return\
    \ roman_str\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1245)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12456)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124567)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1245678)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12456789)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(124567890)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1245678901)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12456789012)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(124567890123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1245678901234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1245678901234567)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(124567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1245678901234567889)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1245678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12", "    if number == 0\
    \ \n        then return \"0\"\n    else if number < 0 \n        then return \"\
    -\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"?\"\nend", "    if number == 0 \n        then return \"0\"\n\
    \    else if number < 0 \n        then return \"-\" \n    else if number < 1000\
    \ \n        then return int_to_mini_roman(number/10)*10 + int_to_mini_roman(number%10)\n\
    \    else \n        roman_digits = \"\"\n        roman_digits = int_to_mini_roman(number/1000)*1000\
    \ + int_to_mini_roman(number%1000)\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = ro", "   \
    \ roman = String.fromCharCode([\n        1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1]\n    )\n    roman = roman.take(number)\n    roman = roman.map(&:to_s)\n\
    \    roman = roman.join\n    roman = roman.downcase\n    return roman\nend", " \
    \   if number == 0\n        \"\"\n    elseif number < 0\n        \"\"\n    else\n\
    \        roman_numerals(number).[1]\n    end\nend", "    if number == 0\n    \
    \    \"\"\n    elseif number < 0\n        \"\"\n    elseif number < 100\n    \
    \    \"\"\n    elseif number < 500\n        \"\"\n    elseif number < 1000\n \
    \       \"\"\n    else\n        int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 1000)\n    end\nend", "    roman = String.empty\n\
    \    roman = roman.concat [\n        String.fromCharCode((number % 100) * 4),\n\
    \        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 5),\n        String.fromCharCode((number % 100) * 1),\n        String.fromCharCode((number\
    \ % 100) * 9),\n        String.fromCharCode((number % 100) * 4),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 5),\n        String.fromCharCode((number\
    \ % 100) * 1),\n        String.fromCharCode((number % 100) * 9),\n        String.fromCharCode((number\
    \ % 100) * 4),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 5),\n        String.fromCharCode((number % 100) * 1),\n        String.fromCharCode((number\
    \ % 100) * 9),\n        String.fromCharCode((number % 100) * 4),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 5),\n        String.fromCharCode((number\
    \ % 100) * 1),\n        String.fromCharCode((number % 100) * 9),\n        String.fromCharCode((number\
    \ % 100) * 4),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 5),\n        String.fromCharCode((number % 100) * 1),\n        String.fromCharCode((number\
    \ % 100) * 9),\n        String.fromCharCode((number % 100) * 4),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 5),\n        String.fromCharCode((number\
    \ % 100) * 1),\n        String.fromCharCode((number % 100) * 9),\n        String.fromCharCode((number\
    \ % 100) * 4),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 5),\n        String.fromCharCode((number % 100) * 1),\n        String.fromCharCode((number\
    \ % 100) * 9),\n        String.fromCharCode((number % 100) * 4),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 5),\n        String.fromCharCode((number\
    \ % 100) * 1),\n        String.fromCharCode((number % 100) * 9),\n        String.fromCharCode((",
  "    roman = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n   \
    \ return roman.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456789012345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567889999999)\n</cell>\n",
  "    if number == 0 \n        return \"0\"\n    else if number == 1 \n        return\
    \ \"I\"\n    else if number == 2 \n        return \"II\"\n    else if number ==\
    \ 3 \n        return \"III\"\n    else if number == 4 \n        return \"IV\"\n\
    \    else if number == 5 \n        return \"V\"\n    else if number == 6 \n  \
    \      return \"VI\"\n    else if number == 7 \n        return \"VII\"\n    else\
    \ if number == 8 \n        return \"VIII\"\n    else if number == 9 \n       \
    \ return \"IX\"\n    else if number == 10 \n        return \"X\"\n    else if\
    \ number == 11 \n        return \"XI\"\n    else if number == 12 \n        return\
    \ \"XII\"\n    else if number == 13 \n        return \"XIII\"\n    else if number\
    \ == 14 \n        return \"XIV\"\n    else if number == 15 \n        return \"\
    XV\"\n    else if number == 16 \n        return \"XVI\"\n    else if number ==\
    \ 17 \n        return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\
    \n    else if number == 19 \n        return \"XIX\"\n    else if number == 20\
    \ \n        return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n\
    \    else if number == 22 \n        return \"XXII\"\n    else if number == 23\
    \ \n        return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\
    \n    else if number == 25 \n        return \"XXV\"\n    else if number == 26\
    \ \n        return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\
    \n    else if number == 28 \n        return \"XXVIII\"\n    else if number ==\
    \ 29 \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n        return \"XLI\"\n    else ", "    mini_roman = \"\"\n    \n \
    \   if number == 0\n        mini_roman = \"I\"\n        return mini_roman\n  \
    \  \n    if number < 0\n        mini_roman = \"-\"\n        number = -number\n\
    \    \n    if number < 100\n        mini_roman = \"IV\"\n        return mini_roman\n\
    \    \n    if number < 1000\n        mini_roman = \"V\"\n        return mini_roman\n\
    \    \n    if number < 10000\n        mini_roman = \"IX\"\n        return mini_roman\n\
    \    \n    if number < 100000\n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number < 1000000\n        mini_roman = \"XL\"\n        return mini_roman\n\
    \    \n    if number < 10000000\n        mini_roman = \"L\"\n        return mini_roman\n\
    \    \n    if number < 100000000\n        mini_roman = \"XC\"\n        return\
    \ mini_roman\n    \n    if number < 1000000000\n        mini_roman = \"C\"\n \
    \       return mini_roman\n    \n    if number < 10000000000\n        mini_roman\
    \ = \"CD\"\n        return mini_roman\n    \n    if number < 100000000000\n  \
    \      mini_roman = \"D\"\n        return mini_roman\n    \n    if number < 1000000000000\n\
    \        mini_roman = \"CM\"\n        return mini_roman\n    \n    if number <\
    \ 10000000000000\n        mini_roman = \"M\"\n        return mini_roman\n    \n\
    \    if number < 100000000000000\n        mini_roman = \"M\"\n        return mini_roman\n\
    \    \n    if number < 1000000000000000\n        mini_roman = \"MM\"\n       \
    \ return mini_roman\n    \n    if number < 10000000000000000\n        mini_roman\
    \ = \"MMM\"\n        return mini_roman\n    \n    if number < 100000000000000000\n\
    \        mini_roman = \"MMMM\"\n        return mini_roman\n    \n    if number\
    \ < 1000000000000000000\n        mini_roman = \"MMMMM\"\n        return mini_roman\n\
    \    \n    if number < 10000000000000000000\n        mini_roman = \"MMMMMMM\"\n\
    \        return mini_roman\n    \n    if number < 100000000000000000000\n    \
    \    mini_roman = \"MMMMMMMM\"\n        return mini_roman\n    \n    if number\
    \ < 1000000000000000000000\n        mini_roman = \"MMMMMMMMM", "    if number\
    \ == 0 \n        return \"0\"\n    else if number < 0 \n        return \"-\"\n\
    \    else if number < 1000 \n        return int_to_mini_roman(number//10)*10 +\
    \ int_to_mini_roman(number%10)\n    else \n        roman_numerals = \n       \
    \     [[\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"\
    ],\n             [\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"\
    CM\"],\n             [\"M\",\"MM\",\"MMM\",\"MMMM\"],\n             [\"L\",\"\
    XL\",\"LX\",\"LXX\",\"LXXX\",\"X\",\"XX\",\"XXX\",\"XLX\",\"LXXX\"],\n       \
    \      [\"XC\",\"XCC\",\"XCCC\",\"XCD\",\"XD\",\"XDC\",\"XDCC\",\"XDCCC\",\"XCM\"\
    ],\n             [\"XM\",\"XMM\",\"XMMM\",\"XMMMM\"],\n             [\"LX\",\"\
    LXL\",\"LX\",\"LXX\",\"LXXX\",\"X\",\"XX\",\"XXX\",\"XLX\",\"LXXX\"],\n      \
    \       [\"XCX\",\"XCXX\",\"XCXXX\",\"XCD\",\"XD\",\"XDC\",\"XDCC\",\"XDCCC\"\
    ,\"XCM\"],\n             [\"XMX\",\"XMMX\",\"XMMMX\",\"XMMMM\"],\n           \
    \  [\"LXX\",\"LXLX\",\"LXX\",\"LXXX\",\"X\",\"XX\",\"XXX\",\"XLX\",\"LXXX\"],\n\
    \             [\"XCXC\",\"XCXXC\",\"XCXXXC\",\"XCD\",\"XD\",\"XDC\",\"XDCC\",\"\
    XDCCC\",\"XCM\"],\n             [\"XMXC\",\"XMMXC\",\"XMMMXC\",\"XMMMM\"],\n \
    \            [\"LXXX\",\"LXLXX\",\"LXXX\",\"LXXX\"],\n             [\"XCXCC\"\
    ,\"XCXXCC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\"\
    ,\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\"\
    ,\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"XCXXXC\"\
    ,\"XCXXXC\",\"XCXXXC\",\"XCXXXC\",\"X", "    if number == 0 \n        return \"\
    0\"\n    else if number == 1 \n        return \"I\"\n    else if number == 2 \n\
    \        return \"II\"\n    else if number == 3 \n        return \"III\"\n   \
    \ else if number == 4 \n        return \"IV\"\n    else if number == 5 \n    \
    \    return \"V\"\n    else if number == 6 \n        return \"VI\"\n    else if\
    \ number == 7 \n        return \"VII\"\n    else if number == 8 \n        return\
    \ \"VIII\"\n    else if number == 9 \n        return \"IX\"\n    else if number\
    \ == 10 \n        return \"X\"\n    else if number == 11 \n        return \"XI\"\
    \n    else if number == 12 \n        return \"XII\"\n    else if number == 13\
    \ \n        return \"XIII\"\n    else if number == 14 \n        return \"XIV\"\
    \n    else if number == 15 \n        return \"XV\"\n    else if number == 16 \n\
    \        return \"XVI\"\n    else if number == 17 \n        return \"XVII\"\n\
    \    else if number == 18 \n        return \"XVIII\"\n    else if number == 19\
    \ \n        return \"XIX\"\n    else if number == 20 \n        return \"XX\"\n\
    \    else if number == 21 \n        return \"XXI\"\n    else if number == 22 \n\
    \        return \"XXII\"\n    else if number == 23 \n        return \"XXIII\"\n\
    \    else if number == 24 \n        return \"XXIV\"\n    else if number == 25\
    \ \n        return \"XXV\"\n    else if number == 26 \n        return \"XXVI\"\
    \n    else if number == 27 \n        return \"XXVII\"\n    else if number == 28\
    \ \n        return \"XXVIII\"\n    else if number == 29 \n        return \"XXIX\"\
    \n    else if number == 30 \n        return \"XXX\"\n    else if number == 31\
    \ \n        return \"XXXI\"\n    else if number == 32 \n        return \"XXXII\"\
    \n    else if number == 33 \n        return \"XXXIII\"\n    else if number ==\
    \ 34 \n        return \"XXXIV\"\n    else if number == 35 \n        return \"\
    XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\n    else if number\
    \ == 37 \n        return \"XXXVII\"\n    else if number == 38 \n        return\
    \ \"XXXVIII\"\n    else if number == 39 \n        return \"XXXIX\"\n    else if\
    \ number == 40 \n        return \"XL\"\n    else if number == 41 \n        return\
    \ \"XLI\"\n    else ", "    if number == 0\n        return \"0\"\n    \n    roman\
    \ = roman_numerals(number)\n    roman = roman.filter(!_.isPrefixOf(\"I\"))\n \
    \   roman = roman.filter(!_.isPrefixOf(\"V\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    X\"))\n    roman = roman.filter(!_.isPrefixOf(\"L\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    C\"))\n    roman = roman.filter(!_.isPrefixOf(\"D\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    M\"))\n    roman = roman.filter(!_.isPrefixOf(\"MCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    MMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMCMXCIX\"))\n    roman\
    \ = roman.filter(!_.isPrefixOf(\"MMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    MMMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMCMXCIX\"))\n\
    \    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    MMMMMMMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMCMXCIX\"\
    ))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMCMXCIX\"))\n    roman\
    \ = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"\
    MMMMMMMMMMMMMMMMCMXCIX\"))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMMMMMCMXCIX\"\
    ))\n    roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMMMMMMCMXCIX\"))\n \
    \   roman = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMMMMMMMCMXCIX\"))\n    roman\
    \ = roman.filter(!_.isPrefixOf(\"MMMMMMMMMMMMMMMMMMMMMMCMXCIX\"))\n    ", "  \
    \  if number == 0\n        return \"0\"\n    \n    roman = roman_numerals(number)\n\
    \    \n    roman = roman.map(&lowercase)\n    \n    return roman.join()\nend",
  "    if number == 0\n        return \"0\"\n    \n    roman_numerals = roman_numerals_table(number)\n\
    \    \n    roman_numeral_string = \"\"\n    \n    for roman_numeral in roman_numerals\n\
    \        roman_numeral_string += roman_numeral\n    end\n    \n    return roman_numeral_string.lower()\n\
    end", "    if number < 1 || number > 1000 \n        return \"Invalid input\"\n\
    \    else \n        roman_numerals = roman_numerals_table()\n        roman_numerals_table\
    \ = roman_numerals[number]\n        roman_numerals_table = roman_numerals_table.split(\"\
    \\n\")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"\\r\")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n        roman_numerals_table\
    \ = roman_numerals_table.split(\"\\t\")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"  \")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n        roman_numerals_table\
    \ = roman_numerals_table.split(\"  \")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"  \")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n        roman_numerals_table\
    \ = roman_numerals_table.split(\"  \")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"  \")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n        roman_numerals_table\
    \ = roman_numerals_table.split(\"  \")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"  \")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n        roman_numerals_table\
    \ = roman_numerals_table.split(\"  \")\n        roman_numerals_table = roman_numerals_table[roman_numerals_table.length-1]\n\
    \        roman_numerals_table = roman_numerals_table.split(\"  \")\n        roman_numerals_table\
    \ = roman_numerals_table[roman_numerals_table.length-1]\n", "    if number ==\
    \ 0 \n        return \"0\"\n    else if number == 1 \n        return \"I\"\n \
    \   else if number == 2 \n        return \"II\"\n    else if number == 3 \n  \
    \      return \"III\"\n    else if number == 4 \n        return \"IV\"\n    else\
    \ if number == 5 \n        return \"V\"\n    else if number == 6 \n        return\
    \ \"VI\"\n    else if number == 7 \n        return \"VII\"\n    else if number\
    \ == 8 \n        return \"VIII\"\n    else if number == 9 \n        return \"\
    IX\"\n    else if number == 10 \n        return \"X\"\n    else if number == 11\
    \ \n        return \"XI\"\n    else if number == 12 \n        return \"XII\"\n\
    \    else if number == 13 \n        return \"XIII\"\n    else if number == 14\
    \ \n        return \"XIV\"\n    else if number == 15 \n        return \"XV\"\n\
    \    else if number == 16 \n        return \"XVI\"\n    else if number == 17 \n\
    \        return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\n\
    \    else if number == 19 \n        return \"XIX\"\n    else if number == 20 \n\
    \        return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n  \
    \  else if number == 22 \n        return \"XXII\"\n    else if number == 23 \n\
    \        return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\n\
    \    else if number == 25 \n        return \"XXV\"\n    else if number == 26 \n\
    \        return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\n\
    \    else if number == 28 \n        return \"XXVIII\"\n    else if number == 29\
    \ \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n        return \"XLI\"\n    else ", "    roman = String.empty\n    roman\
    \ = roman + roman_numerals[number]\n    roman = roman + roman_numerals[number\
    \ % 1000]\n    roman = roman + roman_numerals[number % 100]\n    roman = roman\
    \ + roman_numerals[number % 10]\n    roman = roman + roman_numerals[number % 1]\n\
    \    return roman\nend", '    roman_numerals = ["I", "II", "III", "IV", "V", "VI",
    "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII",
    "XIX", "XX", "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII",
    "XXIX", "XXX", "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII",
    "XXXVIII", "XXXIX", "XL", "L", "LI", "LX", "LXI", "LXII", "LXIII", "LXIV", "LXV",
    "LXVI", "LXVII", "LXVIII", "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV",
    "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII",
    "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI",
    "CX", "CXI", "CXII", "CXIII", "CXIV", "CXV", "CXVI", "CXVII", "CXVIII", "CXIX",
    "CXX", "CXXI", "CXXII", "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII",
    "CXXIX", "CXXX", "CXXXI", "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII",
    "CXXXVIII", "CXXXIX", "CXL", "CL", "CLI", "CLX", "CLXI", "CLXII", "CLXIII", "CLXIV",
    "CLXV", "CLXVI", "CLXVII", "CLXVIII", "CLXIX", "CLXX", "CLXXI", "CLXXII", "CLXXIII",
    "CLXXIV", "CLXXV", "CLXXVI", "CLXXVII", "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI",
    "CLXXXII", "CLXXXIII", "CLXXXIV", "CLXXX', "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:capitalize)\n\
    \    roman = roman.join\n    return roman\nend", "    if number == 0 \n      \
    \  return \"0\"\n    if number == 1 \n        return \"I\"\n    if number == 2\
    \ \n        return \"II\"\n    if number == 3 \n        return \"III\"\n    if\
    \ number == 4 \n        return \"IV\"\n    if number == 5 \n        return \"\
    V\"\n    if number == 6 \n        return \"VI\"\n    if number == 7 \n       \
    \ return \"VII\"\n    if number == 8 \n        return \"VIII\"\n    if number\
    \ == 9 \n        return \"IX\"\n    if number == 10 \n        return \"X\"\n \
    \   if number == 11 \n        return \"XI\"\n    if number == 12 \n        return\
    \ \"XII\"\n    if number == 13 \n        return \"XIII\"\n    if number == 14\
    \ \n        return \"XIV\"\n    if number == 15 \n        return \"XV\"\n    if\
    \ number == 16 \n        return \"XVI\"\n    if number == 17 \n        return\
    \ \"XVII\"\n    if number == 18 \n        return \"XVIII\"\n    if number == 19\
    \ \n        return \"XIX\"\n    if number == 20 \n        return \"XX\"\n    if\
    \ number == 21 \n        return \"XXI\"\n    if number == 22 \n        return\
    \ \"XXII\"\n    if number == 23 \n        return \"XXIII\"\n    if number == 24\
    \ \n        return \"XXIV\"\n    if number == 25 \n        return \"XXV\"\n  \
    \  if number == 26 \n        return \"XXVI\"\n    if number == 27 \n        return\
    \ \"XXVII\"\n    if number == 28 \n        return \"XXVIII\"\n    if number ==\
    \ 29 \n        return \"XXIX\"\n    if number == 30 \n        return \"XXX\"\n\
    \    if number == 31 \n        return \"XXXI\"\n    if number == 32 \n       \
    \ return \"XXXII\"\n    if number == 33 \n        return \"XXXIII\"\n    if number\
    \ == 34 \n        return \"XXXIV\"\n    if number == 35 \n        return \"XXXV\"\
    \n    if number == 36 \n        return \"XXXVI\"\n    if number == 37 \n     \
    \   return \"XXXVII\"\n    if number == 38 \n        return \"XXXVIII\"\n    if\
    \ number == 39 \n        return \"XXXIX\"\n    if number == 40 \n        return\
    \ \"XL\"\n    if number == 41 \n        return \"XLI\"\n    if number == 42 \n\
    \        return \"XLII\"\n    if number == 43 \n        return \"XLIII\"\n   \
    \ if number == 44 \n        return \"XLIIII\"\n    if number == 45 \n        return\
    \ \"XLIIV\"\n    if number == 46 \n        return \"XLIV\"\n    if number == 47\
    \ \n        return \"XLIVI\"\n    if number == 48 \n        return \"XLIVII\"",
  "    roman = String.empty\n    roman = roman.concat [\n        \"M\" * ceil(number/1000),\n\
    \        \"C\" * ceil(number/100),\n        \"L\" * ceil(number/10),\n       \
    \ \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n        \"I\" *\
    \ ceil(number/10)\n    ]\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456789012345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567890)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678901)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890123456789012)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567890123)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890", "    if number == 0\n  \
    \      \"\"\n    else\n        int_to_mini_roman(number/10)*10 + int_to_mini_roman(number%10)\n\
    \    end\nend", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(x => x.to_lowercase)\n\
    \    return roman.join(\"\")\nend", "    roman = String.fromCharCode([1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]) \n    roman = roman.substring(roman.length-number)\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(143)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(144)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(145)\n</cell>\n<code language=julia-1.5>",
  "    roman = roman_numerals(number)\n    roman = roman.map(&:capitalize).join(\"\
    \ \")\n    return roman\nend", "    if number == 0 \n        return \"0\"\n  \
    \  else if number == 1 \n        return \"I\"\n    else if number == 2 \n    \
    \    return \"II\"\n    else if number == 3 \n        return \"III\"\n    else\
    \ if number == 4 \n        return \"IV\"\n    else if number == 5 \n        return\
    \ \"V\"\n    else if number == 6 \n        return \"VI\"\n    else if number ==\
    \ 7 \n        return \"VII\"\n    else if number == 8 \n        return \"VIII\"\
    \n    else if number == 9 \n        return \"IX\"\n    else if number == 10 \n\
    \        return \"X\"\n    else if number == 11 \n        return \"XI\"\n    else\
    \ if number == 12 \n        return \"XII\"\n    else if number == 13 \n      \
    \  return \"XIII\"\n    else if number == 14 \n        return \"XIV\"\n    else\
    \ if number == 15 \n        return \"XV\"\n    else if number == 16 \n       \
    \ return \"XVI\"\n    else if number == 17 \n        return \"XVII\"\n    else\
    \ if number == 18 \n        return \"XVIII\"\n    else if number == 19 \n    \
    \    return \"XIX\"\n    else if number == 20 \n        return \"XX\"\n    else\
    \ if number == 21 \n        return \"XXI\"\n    else if number == 22 \n      \
    \  return \"XXII\"\n    else if number == 23 \n        return \"XXIII\"\n    else\
    \ if number == 24 \n        return \"XXIV\"\n    else if number == 25 \n     \
    \   return \"XXV\"\n    else if number == 26 \n        return \"XXVI\"\n    else\
    \ if number == 27 \n        return \"XXVII\"\n    else if number == 28 \n    \
    \    return \"XXVIII\"\n    else if number == 29 \n        return \"XXIX\"\n \
    \   else if number == 30 \n        return \"XXX\"\n    else if number == 31 \n\
    \        return \"XXXI\"\n    else if number == 32 \n        return \"XXXII\"\n\
    \    else if number == 33 \n        return \"XXXIII\"\n    else if number == 34\
    \ \n        return \"XXXIV\"\n    else if number == 35 \n        return \"XXXV\"\
    \n    else if number == 36 \n        return \"XXXVI\"\n    else if number == 37\
    \ \n        return \"XXXVII\"\n    else if number == 38 \n        return \"XXXVIII\"\
    \n    else if number == 39 \n        return \"XXXIX\"\n    else if number == 40\
    \ \n        return \"XL\"\n    else if number == 41 \n        return \"XLI\"\n\
    \    else ", "    mini_roman = \"\"\n    \n    if number == 0\n        mini_roman\
    \ = \"I\"\n        return mini_roman\n    \n    if number < 0 || number > 1000\n\
    \        mini_roman = \"ERROR\"\n        return mini_roman\n    \n    if number\
    \ < 100\n        mini_roman = \"I\"\n        return mini_roman\n    \n    if number\
    \ < 500\n        mini_roman = \"V\"\n        return mini_roman\n    \n    if number\
    \ < 1000\n        mini_roman = \"X\"\n        return mini_roman\n    \n    if\
    \ number < 5000\n        mini_roman = \"L\"\n        return mini_roman\n    \n\
    \    if number < 10000\n        mini_roman = \"C\"\n        return mini_roman\n\
    \    \n    if number < 50000\n        mini_roman = \"D\"\n        return mini_roman\n\
    \    \n    if number < 100000\n        mini_roman = \"M\"\n        return mini_roman\n\
    \    \n    if number < 500000\n        mini_roman = \"M\"\n        return mini_roman\n\
    \    \n    if number < 1000000\n        mini_roman = \"C\"\n        return mini_roman\n\
    \    \n    if number < 5000000\n        mini_roman = \"L\"\n        return mini_roman\n\
    \    \n    if number < 10000000\n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number < 50000000\n        mini_roman = \"V\"\n        return mini_roman\n\
    \    \n    if number < 100000000\n        mini_roman = \"I\"\n        return mini_roman\n\
    \    \n    if number < 500000000\n        mini_roman = \"I\"\n        return mini_roman\n\
    \    \n    if number < 1000000000\n        mini_roman = \"X\"\n        return\
    \ mini_roman\n    \n    if number < 5000000000\n        mini_roman = \"V\"\n \
    \       return mini_roman\n    \n    if number < 10000000000\n        mini_roman\
    \ = \"I\"\n        return mini_roman\n    \n    if number < 50000000000\n    \
    \    mini_roman = \"I\"\n        return mini_roman\n    \n    if number < 100000000000\n\
    \        mini_roman = \"X\"\n        return mini_roman\n    \n    if number <\
    \ 500000000000\n        mini_roman = \"V\"\n        return mini_roman\n    ",
  "    roman = String.fromCharCode([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1]) \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman\
    \ = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join.to_s \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s\
    \ \n    roman = roman.chars.map{|x| x.to_i}.sort.join.to_s \n    roman = roman.char",
  '    roman_numerals = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X",
    "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX", "XXI",
    "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX", "XXXI",
    "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII", "XXXVIII", "XXXIX", "XL",
    "L", "LI", "LX", "LXI", "LXII", "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII",
    "LXIX", "LXX", "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII",
    "LXXVIII", "LXXIX", "LXXX", "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI",
    "LXXXVII", "LXXXVIII", "LXXXIX", "XC", "C", "CI", "CX", "CXX", "CXXI", "CXXII",
    "CXXIII", "CXXIV", "CXXV", "CXXVI", "CXXVII", "CXXVIII", "CXXIX", "CXXX", "CXXXI",
    "CXXXII", "CXXXIII", "CXXXIV", "CXXXV", "CXXXVI", "CXXXVII", "CXXXVIII", "CXXXIX",
    "CXL", "CL", "CLI", "CLX", "CLXI", "CLXII", "CLXIII", "CLXIV", "CLXV", "CLXVI",
    "CLXVII", "CLXVIII", "CLXIX", "CLXX", "CLXXI", "CLXXII", "CLXXIII", "CLXXIV",
    "CLXXV", "CLXXVI", "CLXXVII", "CLXXVIII", "CLXXIX", "CLXXX", "CLXXXI", "CLXXXII",
    "CLXXXIII", "CLXXXIV", "CLXXXV", "CLXXXVI", "CLXXXVII", "CLXXXVIII", "CLXXXIX",
    "CLXL", "CLL", "CLI", "CLX', "    if number == 0 \n        return \"0\"\n    else\
    \ if number < 0 \n        return \"-\"\n    else if number < 1000 \n        return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ % 1000)\n    else \n        int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 1000)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123456)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890123456789)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567890)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678901)\n\
    </cell>\n<code language=julia-", "    if number < 1 || number > 1000\n       \
    \ error(\"Invalid input\")\n    end\n    roman_numerals = roman_numerals(number)\n\
    \    roman_numerals = roman_numerals[roman_numerals.first:end]\n    roman_numerals\
    \ = roman_numerals.map(roman_numeral -> roman_numeral.to_lowercase)\n    return\
    \ roman_numerals.join(\"\")\nend", "    if number == 0 \n        return \"0\"\n\
    \    else \n        roman_numerals = roman_numerals_helper(number)\n        roman_numerals_string\
    \ = roman_numerals.join(\"\")\n        return roman_numerals_string\nend", " \
    \   if number == 0\n        return \"0\"\n    \n    roman_numerals = roman_numerals_table()\n\
    \    \n    roman_numerals_table = [\n        \"M\", \"CM\", \"D\", \"CD\", \"\
    C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n\
    \    roman_numerals_table = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table = [\n\
    \        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"\
    IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table = [\n      \
    \  \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\",\
    \ \"V\", \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table = [\n        \"\
    M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table = [\n        \"M\", \"\
    CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n    ]\n    \n    roman_numerals_table = [\n        \"M\", \"CM\", \"\
    D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\
    \n    ]\n    \n    roman_numerals_table = [\n        \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n\
    \    \n    roman_numerals_table = [\n        \"M\", \"CM\", \"D\", \"CD\", \"\
    C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n\
    \    roman_numerals_table = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n    roman_numerals_table\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L", "    roman =\
    \ String.fromCharCodes(\n        Int64[][\n            Int64[][\n            \
    \    Int64[][\n                    Int64[][\n                        Int64[][\n\
    \                            Int64[][\n                                Int64[][\n\
    \                                    Int64[][\n                              \
    \          Int64[][\n                                            Int64[][\n  \
    \                                              Int64[][\n                    \
    \                                Int64[][\n                                  \
    \                      Int64[][\n                                            \
    \                Int64[][\n                                                  \
    \              Int64[][\n                                                    \
    \                Int64[][\n                                                  \
    \                      Int64[][\n                                            \
    \                                Int64[][\n                                  \
    \                                              Int64[][\n                    \
    \                                                                Int64[][\n  \
    \                                                                            \
    \          Int64[][\n                                                        \
    \                                    Int64[][\n                              \
    \                                                                  Int64[][\n\
    \                                                                            \
    \                        Int64[][\n                                          \
    \                                                              Int64[][\n    \
    \                                                                            \
    \                            Int64[][\n                                      \
    \                                                                          Int64[][\n\
    \                                                                            \
    \                                        Int64[][\n                          \
    \                                                                            \
    \                  Int64[][\n                                                \
    \                                                                            Int64[][\n\
    \                                                                            \
    \                                                    Int64[][\n              \
    \                                                                            \
    \                                          Int64[][\n                        \
    \                                                                            \
    \                                    Int64[][\n                              \
    \                                                                            \
    \                                  Int64[][\n                                \
    \                                                                            \
    \                                    Int64[][\n                              \
    \                                                                            \
    \                                          Int64[][\n                        \
    \                                                                            \
    \                                                    Int64[][\n              \
    \                                                                            \
    \                                                                  Int64[][\n\
    \                                                                            \
    \                                                                            \
    \        Int64[][\n                                                          \
    \                                                                            \
    \                              Int64[][\n                                    \
    \                                                                            \
    \                                                        Int64[][\n          \
    \                                                                            \
    \                                                                            \
    \          Int64[][\n                                                        \
    \                                                                            \
    \                                            Int64[][\n                      \
    \                                                                            \
    \                                                                            \
    \      Int64[][\n                                                            \
    \                                                                            \
    \                                                Int64[][\n                  \
    \                                                                            \
    \                                                                            \
    \                  Int64[][\n                                                \
    \                                                                            \
    \                                                                    Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                            Int64[][\n                      \
    \                                                                            \
    \                                                                            \
    \                          Int64[][\n                                        \
    \                                                                            \
    \                                                                            \
    \            Int64[][\n                                                      \
    \                                                                            \
    \                                                                            \
    \  Int64[][\n                                                                \
    \                                                                            \
    \                                                                        Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                Int64[][\n  \
    \                                                                            \
    \                                                                            \
    \                                                                  Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                        Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                            Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    Int64[][\n                                                              \
    \                                                                            \
    \                                                                            \
    \                      Int64[][\n                                            \
    \                                                                            \
    \                                                                            \
    \                                            Int64[][\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                      Int64[][\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    Int64[][\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                      Int64[][\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                Int64[][\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                                          Int64[][\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            Int64[][\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  Int64[][", "    if number == 0 \n        return \"0\"\n    if number == 1 \n\
    \        return \"I\"\n    if number == 2 \n        return \"II\"\n    if number\
    \ == 3 \n        return \"III\"\n    if number == 4 \n        return \"IV\"\n\
    \    if number == 5 \n        return \"V\"\n    if number == 6 \n        return\
    \ \"VI\"\n    if number == 7 \n        return \"VII\"\n    if number == 8 \n \
    \       return \"VIII\"\n    if number == 9 \n        return \"IX\"\n    if number\
    \ == 10 \n        return \"X\"\n    if number == 11 \n        return \"XI\"\n\
    \    if number == 12 \n        return \"XII\"\n    if number == 13 \n        return\
    \ \"XIII\"\n    if number == 14 \n        return \"XIV\"\n    if number == 15\
    \ \n        return \"XV\"\n    if number == 16 \n        return \"XVI\"\n    if\
    \ number == 17 \n        return \"XVII\"\n    if number == 18 \n        return\
    \ \"XVIII\"\n    if number == 19 \n        return \"XIX\"\n    if number == 20\
    \ \n        return \"XX\"\n    if number == 21 \n        return \"XXI\"\n    if\
    \ number == 22 \n        return \"XXII\"\n    if number == 23 \n        return\
    \ \"XXIII\"\n    if number == 24 \n        return \"XXIV\"\n    if number == 25\
    \ \n        return \"XXV\"\n    if number == 26 \n        return \"XXVI\"\n  \
    \  if number == 27 \n        return \"XXVII\"\n    if number == 28 \n        return\
    \ \"XXVIII\"\n    if number == 29 \n        return \"XXIX\"\n    if number ==\
    \ 30 \n        return \"XXX\"\n    if number == 31 \n        return \"XXXI\"\n\
    \    if number == 32 \n        return \"XXXII\"\n    if number == 33 \n      \
    \  return \"XXXIII\"\n    if number == 34 \n        return \"XXXIV\"\n    if number\
    \ == 35 \n        return \"XXXV\"\n    if number == 36 \n        return \"XXXVI\"\
    \n    if number == 37 \n        return \"XXXVII\"\n    if number == 38 \n    \
    \    return \"XXXVIII\"\n    if number == 39 \n        return \"XXXIX\"\n    if\
    \ number == 40 \n        return \"XL\"\n    if number == 41 \n        return \"\
    XLI\"\n    if number == 42 \n        return \"XLII\"\n    if number == 43 \n \
    \       return \"XLIII\"\n    if number == 44 \n        return \"XLIIII\"\n  \
    \  if number == 45 \n        return \"XLIIV\"\n    if number == 46 \n        return\
    \ \"XLIV\"\n    if number == 47 \n        return \"XLIVI\"\n    if number == 48\
    \ \n        return \"XLIVII\"", "    if number == 0 \n        then return \"0\"\
    \n    else if number < 0 \n        then return \"-\"\n    else if number < 100\n\
    \        then return int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number//100)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number//1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number//100) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n    else return\
    \ \"?\"\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n</cell>", "    roman\
    \ = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n    return\
    \ roman.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1000)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1000000000000)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1000000000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000001)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000002)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000003)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000004)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000005)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000006)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000007)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(10000000000000000000000000000000008)",
  "    \n    if number == 0\n        return \"0\"\n    \n    roman_numerals = roman_numerals_table()\n\
    \    \n    roman_numeral_string = \"\"\n    \n    for roman_numeral in roman_numerals\n\
    \        if roman_numerals[roman_numeral] > number\n            break\n      \
    \  \n        roman_numeral_string += roman_numeral\n    \n    return roman_numeral_string\n\
    end", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman = roman_numerals(number)\n    roman = roman.map(x -> String.lowercase(x))\n\
    \    roman = roman.map(x -> String.uppercase(x))\n    roman = roman.map(x -> String.capitalize(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x -> String.reverse(x))\n\
    \    roman = roman.map(x -> String.reverse(x))\n    roman = roman.map(x ", " \
    \   if number == 0\n        return \"0\"\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:capitalize)\n\
    \    return roman.join\nend", "    \n    roman = String.empty\n    \n    if number\
    \ == 0\n        roman = \"I\"\n    else if number < 0 || number > 1000\n     \
    \   roman = \"?\"\n    else\n        roman = roman_numerals(number)\n    end\n\
    \    \n    return roman\nend", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\") \n    else \n        roman_numerals = roman_numerals(number)\
    \ \n        roman_numerals = roman_numerals.map(&lowercase) \n        roman_numerals\
    \ = roman_numerals.map(&char.method(:ord)) \n        roman_numerals = roman_numerals.map(&char.method(:chr))\
    \ \n        roman_numerals = roman_numerals.map(&char.method(:upcase)) \n    \
    \    roman_numerals = roman_numerals.join(\"\") \n        roman_numerals = roman_numerals.gsub(\"\
    X\", \"IV\") \n        roman_numerals = roman_numerals.gsub(\"L\", \"IX\") \n\
    \        roman_numerals = roman_numerals.gsub(\"C\", \"II\") \n        roman_numerals\
    \ = roman_numerals.gsub(\"D\", \"III\") \n        roman_numerals = roman_numerals.gsub(\"\
    M\", \"IIII\") \n        roman_numerals = roman_numerals.gsub(\"V\", \"IV\") \n\
    \        roman_numerals = roman_numerals.gsub(\"I\", \"V\") \n        roman_numerals\
    \ = roman_numerals.gsub(\"9\", \"IX\") \n        roman_numerals = roman_numerals.gsub(\"\
    8\", \"V\") \n        roman_numerals = roman_numerals.gsub(\"7\", \"VI\") \n \
    \       roman_numerals = roman_numerals.gsub(\"6\", \"VII\") \n        roman_numerals\
    \ = roman_numerals.gsub(\"5\", \"VIII\") \n        roman_numerals = roman_numerals.gsub(\"\
    4\", \"VIIII\") \n        roman_numerals = roman_numerals.gsub(\"3\", \"VIIIII\"\
    ) \n        roman_numerals = roman_numerals.gsub(\"2\", \"VIIIIII\") \n      \
    \  roman_numerals = roman_numerals.gsub(\"1\", \"X\") \n        roman_numerals\
    \ = roman_numerals.gsub(\"0\", \"I\") \n        roman_numerals = roman_numerals.gsub(\"\
    -1\", \"I\") \n        roman_numerals = roman_numerals.gsub(\"-2\", \"I\") \n\
    \        roman_numerals = roman_numerals.gsub(\"-3\", \"I\") \n", "    if number\
    \ == 0 \n        return \"0\"\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(124)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(125)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(126)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(127)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(128)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(129)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(130)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(131)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(132)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(133)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(134)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(135)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(136)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(137)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(138)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(139)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(140)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(141)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(142)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(143)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(144)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(145)\n</", "    roman =\
    \ String.fromCharCode([\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1, \n        10, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n  \
    \      3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1,\
    \ 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n\
    \        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1,\
    \ 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3,\
    \ 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4,\
    \ 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3,\
    \ 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4,\
    \ 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5,\
    \ 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5,\
    \ 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9,\
    \ 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n      \
    \  3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5,\
    \ 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9,\
    \ 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n   \
    \     3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9,\
    \ 5, 4, 1, 4, 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4,\
    \ 9, 5, 3, 2, 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, 5, 3, 2,\
    \ 9, 5, 4, 1, 4, 9, 5, \n        3, 2, 9, 5, 4, 1, 4, 9, ", "    mini_roman =\
    \ \"\"\n    if number <= 0\n        mini_roman = \"0\"\n    else\n        mini_roman\
    \ = int_to_mini_roman(number / 10)\n        mini_roman += int_to_mini_roman(number\
    \ % 10)\n    end\n    return mini_roman\nend", "    mini_roman = \"\"\n    \n\
    \    if number == 0\n        mini_roman = \"0\"\n    elseif number == 1\n    \
    \    mini_roman = \"I\"\n    elseif number == 2\n        mini_roman = \"II\"\n\
    \    elseif number == 3\n        mini_roman = \"III\"\n    elseif number == 4\n\
    \        mini_roman = \"IV\"\n    elseif number == 5\n        mini_roman = \"\
    V\"\n    elseif number == 6\n        mini_roman = \"VI\"\n    elseif number ==\
    \ 7\n        mini_roman = \"VII\"\n    elseif number == 8\n        mini_roman\
    \ = \"VIII\"\n    elseif number == 9\n        mini_roman = \"IX\"\n    elseif\
    \ number == 10\n        mini_roman = \"X\"\n    elseif number == 11\n        mini_roman\
    \ = \"XI\"\n    elseif number == 12\n        mini_roman = \"XII\"\n    elseif\
    \ number == 13\n        mini_roman = \"XIII\"\n    elseif number == 14\n     \
    \   mini_roman = \"XIV\"\n    elseif number == 15\n        mini_roman = \"XV\"\
    \n    elseif number == 16\n        mini_roman = \"XVI\"\n    elseif number ==\
    \ 17\n        mini_roman = \"XVII\"\n    elseif number == 18\n        mini_roman\
    \ = \"XVIII\"\n    elseif number == 19\n        mini_roman = \"XIX\"\n    elseif\
    \ number == 20\n        mini_roman = \"XX\"\n    elseif number == 21\n       \
    \ mini_roman = \"XXI\"\n    elseif number == 22\n        mini_roman = \"XXII\"\
    \n    elseif number == 23\n        mini_roman = \"XXIII\"\n    elseif number ==\
    \ 24\n        mini_roman = \"XXIV\"\n    elseif number == 25\n        mini_roman\
    \ = \"XXV\"\n    elseif number == 26\n        mini_roman = \"XXVI\"\n    elseif\
    \ number == 27\n        mini_roman = \"XXVII\"\n    elseif number == 28\n    \
    \    mini_roman = \"XXVIII\"\n    elseif number == 29\n        mini_roman = \"\
    XXIX\"\n    elseif number == 30\n        mini_roman = \"XXX\"\n    elseif number\
    \ == 31\n        mini", "    if number == 0\n        then return \"0\"\n    else\
    \ if number < 0 || number > 1000\n        then return \"?\"\n    else\n      \
    \  roman_numerals = roman_numerals_table()\n        roman_numerals_length = length(roman_numerals)\n\
    \        roman_numeral_length = roman_numerals_length\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n        roman_numeral_length = roman_numeral_length\
    \ - 1\n        roman_numeral_length = roman_numeral_length - 1\n        roman_numeral_length\
    \ = roman_numeral_length - 1\n", "    if number < 1 || number > 1000\n       \
    \ error(\"Invalid input\")\n    end\n    roman_numerals = [\"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LII\", \"LIII\"\
    , \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\", \"LIX\", \"LX\", \"LXI\", \"\
    LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\"\
    , \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"\
    LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\"\
    , \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"\
    XC\", \"C\", \"CI\", \"CII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"\
    CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\"\
    , \"CXVIII\", \"CXIX\", \"CC\", \"CCI\", \"CCII\", \"CCIII\", \"CIV\", \"CV\"\
    , \"CVI\", \"CVII\", \"CVIII\", \"CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\"\
    , \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\", \"CXIX\", \"CC\", \"CCI\"\
    , \"CCII\", \"CCIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"CIX\"\
    , \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\"\
    , \"CXVIII\", \"C", "    mini_roman = \"\"\n    \n    if number == 0 \n      \
    \  mini_roman = \"I\"\n        return mini_roman\n    \n    if number < 0 \n \
    \       mini_roman = \"-\"\n        return mini_roman\n    \n    if number < 100\n\
    \        mini_roman = \"I\"\n        return mini_roman\n    \n    if number <\
    \ 500\n        mini_roman = \"II\"\n        return mini_roman\n    \n    if number\
    \ < 1000\n        mini_roman = \"III\"\n        return mini_roman\n    \n    if\
    \ number < 2000\n        mini_roman = \"IV\"\n        return mini_roman\n    \n\
    \    if number < 4000\n        mini_roman = \"V\"\n        return mini_roman\n\
    \    \n    if number < 5000\n        mini_roman = \"VI\"\n        return mini_roman\n\
    \    \n    if number < 6000\n        mini_roman = \"VII\"\n        return mini_roman\n\
    \    \n    if number < 8000\n        mini_roman = \"VIII\"\n        return mini_roman\n\
    \    \n    if number < 10000\n        mini_roman = \"IX\"\n        return mini_roman\n\
    \    \n    if number < 12000\n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number < 14000\n        mini_roman = \"XI\"\n        return mini_roman\n\
    \    \n    if number < 16000\n        mini_roman = \"XII\"\n        return mini_roman\n\
    \    \n    if number < 18000\n        mini_roman = \"XIII\"\n        return mini_roman\n\
    \    \n    if number < 20000\n        mini_roman = \"XIV\"\n        return mini_roman\n\
    \    \n    if number < 24000\n        mini_roman = \"XV\"\n        return mini_roman\n\
    \    \n    if number < 26000\n        mini_roman = \"XVI\"\n        return mini_roman\n\
    \    \n    if number < 28000\n        mini_roman = \"XVII\"\n        return mini_roman\n\
    \    \n    if number < 30000\n        mini_roman = \"XVIII\"\n        return mini_roman\n\
    \    \n    if number < 32000\n        mini_roman = \"XIX\"\n        return mini_roman\n\
    \    \n    if number < 34000\n        mini_roman = \"XX\"\n", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10, \"L\" => 50,\n                 \
    \        \"C\" => 100, \"D\" => 500, \"M\" => 1000)\n    roman_numerals_reverse\
    \ = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10,\n                              \
    \   \"L\" => 50, \"C\" => 100, \"D\" => 500,\n                               \
    \  \"M\" => 1000)\n    roman_numerals_reverse[\"XII\"] = 5\n    roman_numerals_reverse[\"\
    III\"] = 5\n    roman_numerals_reverse[\"IV\"] = 4\n    roman_numerals_reverse[\"\
    V\"] = 4\n    roman_numerals_reverse[\"IX\"] = 10\n    roman_numerals_reverse[\"\
    X\"] = 10\n    roman_numerals_reverse[\"XL\"] = 50\n    roman_numerals_reverse[\"\
    L\"] = 50\n    roman_numerals_reverse[\"XC\"] = 100\n    roman_numerals_reverse[\"\
    C\"] = 100\n    roman_numerals_reverse[\"CD\"] = 500\n    roman_numerals_reverse[\"\
    D\"] = 500\n    roman_numerals_reverse[\"CM\"] = 1000\n    roman_numerals_reverse[\"\
    M\"] = 1000\n    roman_numerals_reverse[\"MN\"] = 1000\n    roman_numerals_reverse[\"\
    MMM\"] = 1000\n    roman_numerals_reverse[\"MMMN\"] = 1000\n    roman_numerals_reverse[\"\
    MMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMN\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMN\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMM\"] = 1000\n   \
    \ roman_numerals_reverse[\"MMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMMMMN\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMMMM\"] = 1000\n\
    \    roman_numerals_reverse[\"MMMMMMMMMMMMMM\"] = 1000\n    roman_numerals_",
  "    if number == 0 \n        return \"0\"\n    else if number < 0 \n        return\
    \ \"-\"\n    else if number < 1000 \n        return int_to_mini_roman(number /\
    \ 100) + int_to_mini_roman(number % 100)\n    else \n        roman_numerals =\
    \ roman_numerals(number)\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse",
  "    if number == 0\n        return \"0\"\n    \n    roman = String.empty\n    \n\
    \    if number < 1000\n        roman = roman.concat \"M\"\n        number -= 1000\n\
    \    end\n    \n    if number < 5000\n        roman = roman.concat \"D\"\n   \
    \     number -= 5000\n    end\n    \n    if number < 10000\n        roman = roman.concat\
    \ \"C\"\n        number -= 10000\n    end\n    \n    if number < 100000\n    \
    \    roman = roman.concat \"L\"\n        number -= 100000\n    end\n    \n   \
    \ if number < 1000000\n        roman = roman.concat \"X\"\n        number -= 1000000\n\
    \    end\n    \n    if number < 10000000\n        roman = roman.concat \"V\"\n\
    \        number -= 10000000\n    end\n    \n    if number < 100000000\n      \
    \  roman = roman.concat \"I\"\n        number -= 100000000\n    end\n    \n  \
    \  if number < 1000000000\n        roman = roman.concat \"X\"\n        number\
    \ -= 1000000000\n    end\n    \n    if number < 10000000000\n        roman = roman.concat\
    \ \"C\"\n        number -= 10000000000\n    end\n    \n    if number < 100000000000\n\
    \        roman = roman.concat \"L\"\n        number -= 100000000000\n    end\n\
    \    \n    if number < 1000000000000\n        roman = roman.concat \"X\"\n   \
    \     number -= 1000000000000\n    end\n    \n    if number < 10000000000000\n\
    \        roman = roman.concat \"V\"\n        number -= 10000000000000\n    end\n\
    \    \n    if number < 100000000000000\n        roman = roman.concat \"I\"\n \
    \       number -= 100000000000000\n    end\n    \n    if number < 1000000000000000\n\
    \        roman = roman.concat \"X\"\n        number -= 1000000000000000\n    end\n\
    \    \n    if number < 10000000000000000\n        roman = roman.concat \"V\"\n\
    \        number -= 10000000000000000\n    end\n    \n    if number < 100000000000000000\n\
    \        roman = roman.concat \"I\"\n        number -= 100000000000000000\n  \
    \  end\n    \n    if number < 1000000000000000000\n        roman = roman.concat\
    \ \"X\"\n        number -= 1000000000000000000\n", "    if number == 0 \n    \
    \    return \"0\"\n    else if number < 0 \n        return \"-\"\n    else if\
    \ number < 1000 \n        return int_to_mini_roman(number/10)*10 + int_to_mini_roman(number%10)\n\
    \    else \n        roman = int_to_mini_roman(number/100)*100 + int_to_mini_roman(number%100)\n\
    \        return roman\nend", "    mini_roman = \"\"\n    \n    if number == 0\n\
    \        mini_roman = \"I\"\n    else if number == 1\n        mini_roman = \"\
    II\"\n    else if number == 2\n        mini_roman = \"III\"\n    else if number\
    \ == 3\n        mini_roman = \"IV\"\n    else if number == 4\n        mini_roman\
    \ = \"V\"\n    else if number == 5\n        mini_roman = \"VI\"\n    else if number\
    \ == 6\n        mini_roman = \"VII\"\n    else if number == 7\n        mini_roman\
    \ = \"VIII\"\n    else if number == 8\n        mini_roman = \"IX\"\n    else if\
    \ number == 9\n        mini_roman = \"X\"\n    else if number == 10\n        mini_roman\
    \ = \"XI\"\n    else if number == 11\n        mini_roman = \"XII\"\n    else if\
    \ number == 12\n        mini_roman = \"XIII\"\n    else if number == 13\n    \
    \    mini_roman = \"XIV\"\n    else if number == 14\n        mini_roman = \"XV\"\
    \n    else if number == 15\n        mini_roman = \"XVI\"\n    else if number ==\
    \ 16\n        mini_roman = \"XVII\"\n    else if number == 17\n        mini_roman\
    \ = \"XVIII\"\n    else if number == 18\n        mini_roman = \"XIX\"\n    else\
    \ if number == 19\n        mini_roman = \"XX\"\n    else if number == 20\n   \
    \     mini_roman = \"XXI\"\n    else if number == 21\n        mini_roman = \"\
    XXII\"\n    else if number == 22\n        mini_roman = \"XXIII\"\n    else if\
    \ number == 23\n        mini_roman = \"XXIV\"\n    else if number == 24\n    \
    \    mini_roman = \"XXV\"\n    else if number == 25\n        mini_roman = \"XXVI\"\
    \n    else if number == 26\n        mini_roman = \"XXVII\"\n    else if number\
    \ == 27\n        mini_roman = \"XXVIII\"\n    else if number == 28\n        mini_roman\
    \ = \"XXIX\"\n    else if number == 29\n        mini", "    roman = String.fromCharCodes(\n\
    \        Array.fill(number, 0){|i| \n            if(i == 0 || i == 1)\n      \
    \          0\n            elsif (i == 2)\n                1\n            elsif\
    \ (i == 3)\n                2\n            elsif (i == 4)\n                3\n\
    \            elsif (i == 5)\n                4\n            elsif (i == 6)\n \
    \               5\n            elsif (i == 7)\n                6\n           \
    \ elsif (i == 8)\n                7\n            elsif (i == 9)\n            \
    \    8\n            elsif (i == 10)\n                9\n            elsif (i ==\
    \ 11)\n                10\n            elsif (i == 12)\n                11\n \
    \           elsif (i == 13)\n                12\n            elsif (i == 14)\n\
    \                13\n            elsif (i == 15)\n                14\n       \
    \     elsif (i == 16)\n                15\n            elsif (i == 17)\n     \
    \           16\n            elsif (i == 18)\n                17\n            elsif\
    \ (i == 19)\n                18\n            elsif (i == 20)\n               \
    \ 19\n            elsif (i == 21)\n                20\n            elsif (i ==\
    \ 22)\n                21\n            elsif (i == 23)\n                22\n \
    \           elsif (i == 24)\n                23\n            elsif (i == 25)\n\
    \                24\n            elsif (i == 26)\n                25\n       \
    \     elsif (i == 27)\n                26\n            elsif (i == 28)\n     \
    \           27\n            elsif (i == 29)\n                28\n            elsif\
    \ (i == 30)\n                29\n            elsif (i == 31)\n               \
    \ 30\n            elsif (i == 32)\n                31\n            elsif (i ==\
    \ 33)\n                32\n            elsif (i == 34)\n                33\n \
    \           elsif (i == 35)\n                34\n            elsif (i == 36)\n\
    \                35\n            elsif (i == 37)\n                36\n       \
    \     elsif (i == 38)\n                37\n            elsif (i == 39)\n     \
    \           38\n            elsif (i == 40)\n                39\n            elsif\
    \ (i == 41)\n                40\n            elsif (i == 42)\n               \
    \ 41\n            elsif (i == 43)\n                42\n            elsif (i ==\
    \ 44)\n                43", "    roman = Array.fill(5, \"\")\n    roman[1] = roman[2]\
    \ = \"I\"\n    roman[3] = \"II\"\n    roman[4] = \"III\"\n    roman[5] = \"IV\"\
    \n    roman[6] = \"V\"\n    roman[7] = \"VI\"\n    roman[8] = \"VII\"\n    roman[9]\
    \ = \"VIII\"\n    roman[10] = \"IX\"\n    roman[11] = \"X\"\n    roman[12] = \"\
    XI\"\n    roman[13] = \"XII\"\n    roman[14] = \"XIII\"\n    roman[15] = \"XIV\"\
    \n    roman[16] = \"XV\"\n    roman[17] = \"XVI\"\n    roman[18] = \"XVII\"\n\
    \    roman[19] = \"XVIII\"\n    roman[20] = \"XIX\"\n    roman[21] = \"XX\"\n\
    \    roman[22] = \"XXI\"\n    roman[23] = \"XXII\"\n    roman[24] = \"XXIII\"\n\
    \    roman[25] = \"XXIV\"\n    roman[26] = \"XXV\"\n    roman[27] = \"XXVI\"\n\
    \    roman[28] = \"XXVII\"\n    roman[29] = \"XXVIII\"\n    roman[30] = \"XXIX\"\
    \n    roman[31] = \"XXX\"\n    roman[32] = \"XXXI\"\n    roman[33] = \"XXXII\"\
    \n    roman[34] = \"XXXIII\"\n    roman[35] = \"XXXIV\"\n    roman[36] = \"XXXV\"\
    \n    roman[37] = \"XXXVI\"\n    roman[38] = \"XXXVII\"\n    roman[39] = \"XXXVIII\"\
    \n    roman[40] = \"XXXIX\"\n    roman[41] = \"XL\"\n    roman[42] = \"L\"\n \
    \   roman[43] = \"LX\"\n    roman[44] = \"LXC\"\n    roman[45] = \"LXCC\"\n  \
    \  roman[46] = \"LXCCC\"\n    roman[47] = \"LXCCCC\"\n    roman[48] = \"LXCCCCC\"\
    \n    roman[49] = \"LXCCCCCC\"\n    roman[50] = \"LXCCCCCCC\"", "    if number\
    \ == 0\n        return \"0\"\n    if number < 0\n        return \"-\"\n    if\
    \ number < 100\n        return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    if number < 1000\n        return int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%1000)\nend\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code language=julia-",
  "    roman = String.empty\n    roman = roman.concat [\n        roman.concat [\n\
    \            roman.concat [\n                roman.concat [\n                \
    \    roman.concat [\n                        roman.concat [\n                \
    \            roman.concat [\n                                roman.concat [\n\
    \                                    roman.concat [\n                        \
    \                roman.concat [\n                                            roman.concat\
    \ [\n                                                roman.concat [\n        \
    \                                            roman.concat [\n                \
    \                                        roman.concat [\n                    \
    \                                        roman.concat [\n                    \
    \                                            roman.concat [\n                \
    \                                                    roman.concat [\n        \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \    roman.concat [\n                                                        \
    \                        roman.concat [\n                                    \
    \                                                roman.concat [\n            \
    \                                                                            roman.concat\
    \ [\n                                                                        \
    \                    roman.concat [\n                                        \
    \                                                        roman.concat [\n    \
    \                                                                            \
    \                    roman.concat [\n                                        \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \            roman.concat [\n                                                \
    \                                                                    roman.concat\
    \ [\n                                                                        \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                                                            \
    \        roman.concat [\n                                                    \
    \                                                                            \
    \                                roman.concat [\n                            \
    \                                                                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                                            \
    \                                                    roman.concat [\n        \
    \                                                                            \
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                                                                            \
    \                                roman.concat [\n                            \
    \                                                                            \
    \                                                                            \
    \        roman.concat [\n                                                    \
    \                                                                            \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                                                            \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                                                            \
    \                                    ", "    roman = String.fromCharCode([1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]) \n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman\
    \ = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n\
    \    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman\
    \ = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n\
    \    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman\
    \ = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n\
    \    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman\
    \ = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n\
    \    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman = roman.chars.map{|x|\
    \ x.to_i}.sort.join\n    roman = roman.chars.map{|x| x.to_i}.sort.join\n    roman\
    \ = ", "    mini_roman = \"\"\n    \n    if number == 0 \n        mini_roman =\
    \ \"0\"\n    else \n        mini_roman = int_to_mini_roman(number / 10)\n    \
    \    mini_roman += int_to_mini_roman(number % 10)\n    end\n    \n    return mini_roman\n\
    end", "    mini_roman = String.empty\n    \n    if number == 0\n        mini_roman\
    \ = \"0\"\n    elseif number == 1\n        mini_roman = \"I\"\n    elseif number\
    \ == 2\n        mini_roman = \"II\"\n    elseif number == 3\n        mini_roman\
    \ = \"III\"\n    elseif number == 4\n        mini_roman = \"IV\"\n    elseif number\
    \ == 5\n        mini_roman = \"V\"\n    elseif number == 6\n        mini_roman\
    \ = \"VI\"\n    elseif number == 7\n        mini_roman = \"VII\"\n    elseif number\
    \ == 8\n        mini_roman = \"VIII\"\n    elseif number == 9\n        mini_roman\
    \ = \"IX\"\n    elseif number == 10\n        mini_roman = \"X\"\n    elseif number\
    \ == 11\n        mini_roman = \"XI\"\n    elseif number == 12\n        mini_roman\
    \ = \"XII\"\n    elseif number == 13\n        mini_roman = \"XIII\"\n    elseif\
    \ number == 14\n        mini_roman = \"XIV\"\n    elseif number == 15\n      \
    \  mini_roman = \"XV\"\n    elseif number == 16\n        mini_roman = \"XVI\"\n\
    \    elseif number == 17\n        mini_roman = \"XVII\"\n    elseif number ==\
    \ 18\n        mini_roman = \"XVIII\"\n    elseif number == 19\n        mini_roman\
    \ = \"XIX\"\n    elseif number == 20\n        mini_roman = \"XX\"\n    elseif\
    \ number == 21\n        mini_roman = \"XXI\"\n    elseif number == 22\n      \
    \  mini_roman = \"XXII\"\n    elseif number == 23\n        mini_roman = \"XXIII\"\
    \n    elseif number == 24\n        mini_roman = \"XXIV\"\n    elseif number ==\
    \ 25\n        mini_roman = \"XXV\"\n    elseif number == 26\n        mini_roman\
    \ = \"XXVI\"\n    elseif number == 27\n        mini_roman = \"XXVII\"\n    elseif\
    \ number == 28\n        mini_roman = \"XXVIII\"\n    elseif number == 29\n   \
    \     mini_roman = \"XXIX\"\n    elseif number == 30\n        mini_roman = \"\
    XXX\"\n    elseif number == 31\n", "    if number == 0 \n        then return \"\
    0\"\n    else if number < 0 \n        then return \"-\"\n    else if number <\
    \ 1000 \n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000 \n        then return int_to_mini_roman(number/100)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%1000)\n    else if\
    \ number < 100000 \n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%10000)\n    else if number < 1000000 \n        then\
    \ return int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%100000)\n\
    \    else if number < 10000000 \n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%100000)\n    else\
    \ if number < 100000000 \n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%10000000)\n \
    \   else if number < 1000000000 \n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%100000000)\n\
    \    else if number < 10000000000 \n        then return int_to_mini_roman(number/100000000)\
    \ + int_to_mini_roman(number%100000000) + int_to_mini_roman(number%1000000000)\n\
    \    else if number < 100000000000 \n        then return int_to_mini_roman(number/1000000000)\
    \ + int_to_mini_roman(number%1000000000) + int_to_mini_roman(number%10000000000)\n\
    \    else if number < 1000000000000 \n        then return int_to_mini_roman(number/100000000000)\
    \ + int_to_mini_roman(number%100000000000) + int_to_mini_roman(number%1000000000000)\n\
    \    else if number < 10000000000000 \n        then return int_to_mini_roman(number/1000000000000)\
    \ + int_to_mini_roman(number%100", "    roman = String.fromCharCode([1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1][number])\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend", "    roman = String.fromCharCodes(\n        Int64[][\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int64[]\n\
    \            Int64[]\n            Int64[]\n            Int64[]\n            Int",
  "    roman = String.empty\n    roman = roman.concat [\n        \"M\" * ceil(number/1000),\n\
    \        \"CM\" * ceil(number/100),\n        \"D\" * ceil(number/10),\n      \
    \  \"CD\" * ceil(number/10),\n        \"C\" * ceil(number/10),\n        \"XC\"\
    \ * ceil(number/100),\n        \"L\" * ceil(number/10),\n        \"XL\" * ceil(number/10),\n\
    \        \"X\" * ceil(number/10),\n        \"IX\" * ceil(number/100),\n      \
    \  \"V\" * ceil(number/10),\n        \"IV\" * ceil(number/100),\n        \"I\"\
    \ * ceil(number/10)\n    ]\n    roman = roman.concat [\n        \"I\" * ceil(number/1),\n\
    \        \"II\" * ceil(number/2),\n        \"III\" * ceil(number/3),\n       \
    \ \"IV\" * ceil(number/4),\n        \"V\" * ceil(number/5),\n        \"VI\" *\
    \ ceil(number/6),\n        \"VII\" * ceil(number/7),\n        \"VIII\" * ceil(number/8),\n\
    \        \"IX\" * ceil(number/9),\n        \"X\" * ceil(number/10)\n    ]\n  \
    \  roman = roman.concat [\n        \"I\" * ceil(number/10),\n        \"II\" *\
    \ ceil(number/100),\n        \"III\" * ceil(number/1000),\n        \"IV\" * ceil(number/10000),\n\
    \        \"V\" * ceil(number/100000),\n        \"VI\" * ceil(number/1000000),\n\
    \        \"VII\" * ceil(number/10000000),\n        \"VIII\" * ceil(number/100000000),\n\
    \        \"IX\" * ceil(number/1000000000),\n        \"X\" * ceil(number/1000000000)\n\
    \    ]\n    roman = roman.concat [\n        \"I\" * ceil(number/1000000000),\n\
    \        \"II\" * ceil(number/10000000000),\n        \"III\" * ceil(number/100000000000),\n\
    \        \"IV\" * ceil(number/1000000000000),\n        \"V\" * ceil(number/10000000000000),\n\
    \        \"VI\" * ceil(number/100000000000000),\n        \"VII\" * ceil(number/1000000000000000),\n\
    \        \"VIII\" * ceil(number/10000000000000000),\n        \"IX\" * ceil(number/100000000000000000),\n\
    \        \"X\" * ceil(number/100000000000000000)\n    ]\n    roman = ", "    if\
    \ number < 1 || number > 1000\n        error(\"Invalid input\")\n    else\n  \
    \      roman_nums = roman_nums_helper(number)\n        roman_nums = roman_nums[1..end]\n\
    \        roman_nums = roman_nums.join(\"\")\n        return roman_nums\n    end\n\
    end", "    if number == 0\n        return \"0\"\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    return roman.join\nend", "    if number\
    \ == 0 \n        then return \"0\"\n    else if number < 0 \n        then return\
    \ \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100)\n    else if number < 1000\n        then return\
    \ int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\n    else if\
    \ number < 10000\n        then return int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000)\n    else if number < 1000000\n        then\
    \ return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\n\
    \    else if number < 10000000\n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000)\n    else if number < 100000000\n     \
    \   then return int_to_mini_roman(number/100000000) + int_to_mini_roman(number%100000000)\n\
    \    else if number < 1000000000\n        then return int_to_mini_roman(number/1000000000)\
    \ + int_to_mini_roman(number%1000000000)\n    else if number < 10000000000\n \
    \       then return int_to_mini_roman(number/10000000000) + int_to_mini_roman(number%10000000000)\n\
    \    else if number < 100000000000\n        then return int_to_mini_roman(number/100000000000)\
    \ + int_to_mini_roman(number%100000000000)\n    else if number < 1000000000000\n\
    \        then return int_to_mini_roman(number/1000000000000) + int_to_mini_roman(number%1000000000000)\n\
    \    else if number < 10000000000000\n        then return int_to_mini_roman(number/10000000000000)\
    \ + int_to_mini_roman(number%10000000000000)\n    else if number < 100000000000000\n\
    \        then return int_to_mini_roman(number/100000000000000) + int_to_mini_roman(number%100000000000000)\n\
    \    else if number < 1000000000000000\n", "    mini_roman = \"\"\n    \n    if\
    \ number == 0 \n        mini_roman = \"I\"\n        return mini_roman\n    \n\
    \    if number == 1 \n        mini_roman = \"II\"\n        return mini_roman\n\
    \    \n    if number == 2 \n        mini_roman = \"III\"\n        return mini_roman\n\
    \    \n    if number == 3 \n        mini_roman = \"IV\"\n        return mini_roman\n\
    \    \n    if number == 4 \n        mini_roman = \"V\"\n        return mini_roman\n\
    \    \n    if number == 5 \n        mini_roman = \"VI\"\n        return mini_roman\n\
    \    \n    if number == 6 \n        mini_roman = \"VII\"\n        return mini_roman\n\
    \    \n    if number == 7 \n        mini_roman = \"VIII\"\n        return mini_roman\n\
    \    \n    if number == 8 \n        mini_roman = \"IX\"\n        return mini_roman\n\
    \    \n    if number == 9 \n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number == 10 \n        mini_roman = \"XI\"\n        return mini_roman\n\
    \    \n    if number == 11 \n        mini_roman = \"XII\"\n        return mini_roman\n\
    \    \n    if number == 12 \n        mini_roman = \"XIII\"\n        return mini_roman\n\
    \    \n    if number == 13 \n        mini_roman = \"XIV\"\n        return mini_roman\n\
    \    \n    if number == 14 \n        mini_roman = \"XV\"\n        return mini_roman\n\
    \    \n    if number == 15 \n        mini_roman = \"XVI\"\n        return mini_roman\n\
    \    \n    if number == 16 \n        mini_roman = \"XVII\"\n        return mini_roman\n\
    \    \n    if number == 17 \n        mini_roman = \"XVIII\"\n        return mini_roman\n\
    \    \n    if number == 18 \n        mini_roman = \"XIX\"\n        return mini_roman\n\
    \    \n    if number == 19 \n        mini_roman = \"XX\"\n        return mini_roman\n\
    \    \n    if number == 20 \n        mini_roman = \"XXI\"\n        return mini_roman\n\
    \    \n    if number == 21 \n        mini_roman = \"XXII\"\n        return mini_roman\n\
    \    ", "    mini_roman = \"\"\n    \n    if number == 0\n        mini_roman =\
    \ \"I\"\n    elseif number == 1\n        mini_roman = \"II\"\n    elseif number\
    \ == 2\n        mini_roman = \"III\"\n    elseif number == 3\n        mini_roman\
    \ = \"IV\"\n    elseif number == 4\n        mini_roman = \"V\"\n    elseif number\
    \ == 5\n        mini_roman = \"VI\"\n    elseif number == 6\n        mini_roman\
    \ = \"VII\"\n    elseif number == 7\n        mini_roman = \"VIII\"\n    elseif\
    \ number == 8\n        mini_roman = \"IX\"\n    elseif number == 9\n        mini_roman\
    \ = \"X\"\n    elseif number == 10\n        mini_roman = \"XI\"\n    elseif number\
    \ == 11\n        mini_roman = \"XII\"\n    elseif number == 12\n        mini_roman\
    \ = \"XIII\"\n    elseif number == 13\n        mini_roman = \"XIV\"\n    elseif\
    \ number == 14\n        mini_roman = \"XV\"\n    elseif number == 15\n       \
    \ mini_roman = \"XVI\"\n    elseif number == 16\n        mini_roman = \"XVII\"\
    \n    elseif number == 17\n        mini_roman = \"XVIII\"\n    elseif number ==\
    \ 18\n        mini_roman = \"XIX\"\n    elseif number == 19\n        mini_roman\
    \ = \"XX\"\n    elseif number == 20\n        mini_roman = \"XXI\"\n    elseif\
    \ number == 21\n        mini_roman = \"XXII\"\n    elseif number == 22\n     \
    \   mini_roman = \"XXIII\"\n    elseif number == 23\n        mini_roman = \"XXIV\"\
    \n    elseif number == 24\n        mini_roman = \"XXV\"\n    elseif number ==\
    \ 25\n        mini_roman = \"XXVI\"\n    elseif number == 26\n        mini_roman\
    \ = \"XXVII\"\n    elseif number == 27\n        mini_roman = \"XXVIII\"\n    elseif\
    \ number == 28\n        mini_roman = \"XXIX\"\n    elseif number == 29\n     \
    \   mini_roman = \"XXX\"\n    elseif number == 30\n        mini_roman = \"XXXI\"\
    \n    elseif number == 31\n", "    if number == 0 \n        return \"0\"\n   \
    \ else if number == 1 \n        return \"I\"\n    else if number == 2 \n     \
    \   return \"II\"\n    else if number == 3 \n        return \"III\"\n    else\
    \ if number == 4 \n        return \"IV\"\n    else if number == 5 \n        return\
    \ \"V\"\n    else if number == 6 \n        return \"VI\"\n    else if number ==\
    \ 7 \n        return \"VII\"\n    else if number == 8 \n        return \"VIII\"\
    \n    else if number == 9 \n        return \"IX\"\n    else if number == 10 \n\
    \        return \"X\"\n    else if number == 11 \n        return \"XI\"\n    else\
    \ if number == 12 \n        return \"XII\"\n    else if number == 13 \n      \
    \  return \"XIII\"\n    else if number == 14 \n        return \"XIV\"\n    else\
    \ if number == 15 \n        return \"XV\"\n    else if number == 16 \n       \
    \ return \"XVI\"\n    else if number == 17 \n        return \"XVII\"\n    else\
    \ if number == 18 \n        return \"XVIII\"\n    else if number == 19 \n    \
    \    return \"XIX\"\n    else if number == 20 \n        return \"XX\"\n    else\
    \ if number == 21 \n        return \"XXI\"\n    else if number == 22 \n      \
    \  return \"XXII\"\n    else if number == 23 \n        return \"XXIII\"\n    else\
    \ if number == 24 \n        return \"XXIV\"\n    else if number == 25 \n     \
    \   return \"XXV\"\n    else if number == 26 \n        return \"XXVI\"\n    else\
    \ if number == 27 \n        return \"XXVII\"\n    else if number == 28 \n    \
    \    return \"XXVIII\"\n    else if number == 29 \n        return \"XXIX\"\n \
    \   else if number == 30 \n        return \"XXX\"\n    else if number == 31 \n\
    \        return \"XXXI\"\n    else if number == 32 \n        return \"XXXII\"\n\
    \    else if number == 33 \n        return \"XXXIII\"\n    else if number == 34\
    \ \n        return \"XXXIV\"\n    else if number == 35 \n        return \"XXXV\"\
    \n    else if number == 36 \n        return \"XXXVI\"\n    else if number == 37\
    \ \n        return \"XXXVII\"\n    else if number == 38 \n        return \"XXXVIII\"\
    \n    else if number == 39 \n        return \"XXXIX\"\n    else if number == 40\
    \ \n        return \"XL\"\n    else if number == 41 \n        return \"XLI\"\n\
    \    else ", "    if number < 1 || number > 1000\n        return \"Invalid input\"\
    \n    \n    roman_numerals = Array{String}(number, \"\")\n    roman_numerals[1]\
    \ = \"I\"\n    roman_numerals[2] = \"II\"\n    roman_numerals[3] = \"III\"\n \
    \   roman_numerals[4] = \"IV\"\n    roman_numerals[5] = \"V\"\n    roman_numerals[6]\
    \ = \"VI\"\n    roman_numerals[7] = \"VII\"\n    roman_numerals[8] = \"VIII\"\n\
    \    roman_numerals[9] = \"IX\"\n    roman_numerals[10] = \"X\"\n    roman_numerals[11]\
    \ = \"XI\"\n    roman_numerals[12] = \"XII\"\n    roman_numerals[13] = \"XIII\"\
    \n    roman_numerals[14] = \"XIV\"\n    roman_numerals[15] = \"XV\"\n    roman_numerals[16]\
    \ = \"XVI\"\n    roman_numerals[17] = \"XVII\"\n    roman_numerals[18] = \"XVIII\"\
    \n    roman_numerals[19] = \"XIX\"\n    roman_numerals[20] = \"XX\"\n    roman_numerals[21]\
    \ = \"XXI\"\n    roman_numerals[22] = \"XXII\"\n    roman_numerals[23] = \"XXIII\"\
    \n    roman_numerals[24] = \"XXIV\"\n    roman_numerals[25] = \"XXV\"\n    roman_numerals[26]\
    \ = \"XXVI\"\n    roman_numerals[27] = \"XXVII\"\n    roman_numerals[28] = \"\
    XXVIII\"\n    roman_numerals[29] = \"XXIX\"\n    roman_numerals[30] = \"XXX\"\n\
    \    roman_numerals[31] = \"XXXI\"\n    roman_numerals[32] = \"XXXII\"\n    roman_numerals[33]\
    \ = \"XXXIII\"\n    roman_numerals[34] = \"XXXIV\"\n    roman_numerals[35] = \"\
    XXXV\"\n    roman_numerals[36] = \"XXXVI\"\n    roman_numerals[37] = \"XXXVII\"\
    \n    roman_numerals[38] = \"XXXVIII\"\n    roman_numerals[39] = \"XXXIX\"\n \
    \   roman_numerals[40] = \"XL", "    roman = String.fromCharCodes(\n        Int64[](\n\
    \            1000,\n            900,\n            500,\n            400,\n   \
    \         100,\n            90,\n            50,\n            40,\n          \
    \  10,\n            9,\n            5,\n            4,\n            1,\n     \
    \       0,\n            0,\n            0,\n            0,\n            0,\n \
    \           0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            0,\n            0,\n            0,\n\
    \            0,\n            0,\n            ", "    if number == 0 \n       \
    \ then return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else\
    \ if number < 1000 \n        then return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 10)\n    else \n        roman_digits = \"\
    \"\n        roman_digits = int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 10)\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        roman_digits = roman_digits[2:end]\n        roman_digits = roman_digits[2:end]\n\
    \        ", "    mini_roman = \"\"\n    \n    if number == 0 \n        mini_roman\
    \ = \"0\"\n        return mini_roman\n    \n    if number < 0 \n        mini_roman\
    \ = \"-\"\n        return mini_roman\n    \n    if number < 100\n        mini_roman\
    \ = \"I\"\n        return mini_roman\n    \n    if number < 500\n        mini_roman\
    \ = \"V\"\n        return mini_roman\n    \n    if number < 1000\n        mini_roman\
    \ = \"X\"\n        return mini_roman\n    \n    if number < 5000\n        mini_roman\
    \ = \"L\"\n        return mini_roman\n    \n    if number < 10000\n        mini_roman\
    \ = \"C\"\n        return mini_roman\n    \n    if number < 50000\n        mini_roman\
    \ = \"D\"\n        return mini_roman\n    \n    if number < 100000\n        mini_roman\
    \ = \"M\"\n        return mini_roman\n    \n    if number < 500000\n        mini_roman\
    \ = \"M\"\n        return mini_roman\n    \n    if number < 1000000\n        mini_roman\
    \ = \"C\"\n        return mini_roman\n    \n    if number < 5000000\n        mini_roman\
    \ = \"C\"\n        return mini_roman\n    \n    if number < 10000000\n       \
    \ mini_roman = \"L\"\n        return mini_roman\n    \n    if number < 50000000\n\
    \        mini_roman = \"L\"\n        return mini_roman\n    \n    if number <\
    \ 100000000\n        mini_roman = \"X\"\n        return mini_roman\n    \n   \
    \ if number < 500000000\n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number < 1000000000\n        mini_roman = \"V\"\n        return\
    \ mini_roman\n    \n    if number < 5000000000\n        mini_roman = \"V\"\n \
    \       return mini_roman\n    \n    if number < 10000000000\n        mini_roman\
    \ = \"I\"\n        return mini_roman\n    \n    if number < 50000000000\n    \
    \    mini_roman = \"I\"\n        return mini_roman\n    \n    if number < 100000000000\n\
    \        mini_roman = \"X\"\n        return mini_roman\n    \n    if number <\
    \ 500000000000\n        mini_roman = \"X\"\n        return mini_roman\n    \n\
    \    if number < 100", "    if number == 0 \n        return \"0\"\n    else if\
    \ number < 0 \n        return \"-\"\n    else if number < 1000 \n        return\
    \ int_to_mini_roman(number/10)*10 + int_to_mini_roman(number%10)\n    else \n\
    \        roman_numerals = roman_numerals_table()\n        roman_numerals_length\
    \ = length(roman_numerals)\n        roman_numerals_length = roman_numerals_length\
    \ - 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numerals_length + 1\n        roman_numerals_length\
    \ = roman_numerals_length + 1\n        roman_numerals_length = roman_numerals_length\
    \ + 1\n        roman_numerals_length = roman_numeral", "    if number == 0 \n\
    \        then return \"0\"\n    else if number < 0 \n        then return \"-\"\
    \n    else if number < 1000 \n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000 \n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number/10%10) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000 \n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number/100%10) + int_to_mini_roman(number/10%10%10) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000 \n        then return int_to_mini_roman(number/10000)\
    \ + int_to_mini_roman(number/1000%10) + int_to_mini_roman(number/100%10%10) +\
    \ int_to_mini_roman(number/10%10%10%10) + int_to_mini_roman(number%10)\n    else\
    \ if number < 10000000 \n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number/10000%10) + int_to_mini_roman(number/1000%10%10)\
    \ + int_to_mini_roman(number/100%10%10%10) + int_to_mini_roman(number/10%10%10%10%10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000 \n        then\
    \ return int_to_mini_roman(number/100000) + int_to_mini_roman(number/10000%10)\
    \ + int_to_mini_roman(number/1000%10%10) + int_to_mini_roman(number/100%10%10%10)\
    \ + int_to_mini_roman(number/10%10%10%10%10) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000000 \n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number/100000%10) + int_to_mini_roman(number/10000%10%10)\
    \ + int_to_mini_roman(number/1000%10%10%10) + int_to_mini_roman(number", "   \
    \ if number == 0\n        return \"0\"\n    roman = roman_numerals(number)\n \
    \   roman = roman.map(&lowercase)\n    return roman.join(\"\")\nend", "    if\
    \ number == 0 \n        return \"0\"\n    else if number == 1 \n        return\
    \ \"I\"\n    else if number == 2 \n        return \"II\"\n    else if number ==\
    \ 3 \n        return \"III\"\n    else if number == 4 \n        return \"IV\"\n\
    \    else if number == 5 \n        return \"V\"\n    else if number == 6 \n  \
    \      return \"VI\"\n    else if number == 7 \n        return \"VII\"\n    else\
    \ if number == 8 \n        return \"VIII\"\n    else if number == 9 \n       \
    \ return \"IX\"\n    else if number == 10 \n        return \"X\"\n    else if\
    \ number == 11 \n        return \"XI\"\n    else if number == 12 \n        return\
    \ \"XII\"\n    else if number == 13 \n        return \"XIII\"\n    else if number\
    \ == 14 \n        return \"XIV\"\n    else if number == 15 \n        return \"\
    XV\"\n    else if number == 16 \n        return \"XVI\"\n    else if number ==\
    \ 17 \n        return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\
    \n    else if number == 19 \n        return \"XIX\"\n    else if number == 20\
    \ \n        return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n\
    \    else if number == 22 \n        return \"XXII\"\n    else if number == 23\
    \ \n        return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\
    \n    else if number == 25 \n        return \"XXV\"\n    else if number == 26\
    \ \n        return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\
    \n    else if number == 28 \n        return \"XXVIII\"\n    else if number ==\
    \ 29 \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n        return \"XLI\"\n    else ", "    if number == 0\n        return\
    \ \"0\"\n    if number < 0\n        return \"-1\"\n    if number < 100\n     \
    \   return int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n    if\
    \ number < 1000\n        return int_to_mini_roman(number//100) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%1000)\nend\n</cell>\n<code language=julia-1.3>\n\
    int_to_mini_roman(123)\n</cell>\n<code language=julia-1.3>\nint_to_mini_roman(1234)\n\
    </cell>\n<code language=julia-1.3>\nint_to_mini_roman(1234567)\n</cell>\n<code\
    \ language=julia-1.3>\nint_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.3>\n\
    int_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.3>\nint_to_mini_roman(12345678901)\n\
    </cell>\n<code language=julia-1.3>\nint_to_mini_roman(123456789012)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.3>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.3>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.3>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(12345678901234567801)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(123456789012345678012)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(1234567890123456780123)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(12345678901234567801234)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(12345678901234567801234567)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(123456789012345678012345678)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(1234567890123456780123456781)\n</cell>\n\
    <code language=julia-1.3>\nint_to_mini_roman(", "    if number < 1 || number >\
    \ 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(x -> lowercase(x))\n    return join(roman, \"\")\nend",
  "    roman = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n   \
    \ return roman.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345679012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901234)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901234567)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345679012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456790123456790)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456790123456791)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567901234567912)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123456790123456791234)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123456790123456791234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567901234567912345678)\n\
    </cell", "    mini_roman = \"\"\n    \n    if number == 0\n        mini_roman\
    \ = \"0\"\n    else if number == 1\n        mini_roman = \"I\"\n    else if number\
    \ == 2\n        mini_roman = \"II\"\n    else if number == 3\n        mini_roman\
    \ = \"III\"\n    else if number == 4\n        mini_roman = \"IV\"\n    else if\
    \ number == 5\n        mini_roman = \"V\"\n    else if number == 6\n        mini_roman\
    \ = \"VI\"\n    else if number == 7\n        mini_roman = \"VII\"\n    else if\
    \ number == 8\n        mini_roman = \"VIII\"\n    else if number == 9\n      \
    \  mini_roman = \"IX\"\n    else if number == 10\n        mini_roman = \"X\"\n\
    \    else if number == 11\n        mini_roman = \"XI\"\n    else if number ==\
    \ 12\n        mini_roman = \"XII\"\n    else if number == 13\n        mini_roman\
    \ = \"XIII\"\n    else if number == 14\n        mini_roman = \"XIV\"\n    else\
    \ if number == 15\n        mini_roman = \"XV\"\n    else if number == 16\n   \
    \     mini_roman = \"XVI\"\n    else if number == 17\n        mini_roman = \"\
    XVII\"\n    else if number == 18\n        mini_roman = \"XVIII\"\n    else if\
    \ number == 19\n        mini_roman = \"XIX\"\n    else if number == 20\n     \
    \   mini_roman = \"XX\"\n    else if number == 21\n        mini_roman = \"XXI\"\
    \n    else if number == 22\n        mini_roman = \"XXII\"\n    else if number\
    \ == 23\n        mini_roman = \"XXIII\"\n    else if number == 24\n        mini_roman\
    \ = \"XXIV\"\n    else if number == 25\n        mini_roman = \"XXV\"\n    else\
    \ if number == 26\n        mini_roman = \"XXVI\"\n    else if number == 27\n \
    \       mini_roman = \"XXVII\"\n    else if number == 28\n        mini_roman =\
    \ \"XXVIII\"\n    else if number == 29\n        mini_ro", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\") \n    else \n        roman_numerals\
    \ = roman_numerals(number)\n        roman_numerals = roman_numerals.map(x => x.to_lowercase)\n\
    \        roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n  \
    \      roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n    \
    \    roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n      \
    \  roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals\
    \ = roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals =\
    \ roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x\
    \ => x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x =>\
    \ x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\"\
    \ \", \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\" \"\
    , \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\
    \"))\n        roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n\
    \        roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n  \
    \      roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n    \
    \    roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n      \
    \  roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals\
    \ = roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals =\
    \ roman_numerals.map(x => x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x\
    \ => x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x =>\
    \ x.replace(\" \", \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\"\
    \ \", \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\" \"\
    , \"\"))\n        roman_numerals = roman_numerals.map(x => x.replace(\" \", \"\
    \"))\n        roman_", "    if number == 0 \n        return \"0\"\n    else if\
    \ number < 0 \n        return \"-\"\n    else if number < 10 \n        return\
    \ int_to_mini_roman(number * 100) + \"M\"\n    else if number < 100 \n       \
    \ return int_to_mini_roman(number/10) + \"D\"\n    else if number < 1000 \n  \
    \      return int_to_mini_roman(number/100) + \"C\"\n    else if number < 10000\
    \ \n        return int_to_mini_roman(number/1000) + \"L\"\n    else if number\
    \ < 100000 \n        return int_to_mini_roman(number/10000) + \"X\"\n    else\
    \ if number < 1000000 \n        return int_to_mini_roman(number/100000) + \"V\"\
    \n    else if number < 10000000 \n        return int_to_mini_roman(number/1000000)\
    \ + \"I\"\n    else if number < 100000000 \n        return int_to_mini_roman(number/10000000)\
    \ + \"N\"\n    else if number < 1000000000 \n        return int_to_mini_roman(number/100000000)\
    \ + \"J\"\n    else if number < 10000000000 \n        return int_to_mini_roman(number/1000000000)\
    \ + \"Q\"\n    else if number < 100000000000 \n        return int_to_mini_roman(number/10000000000)\
    \ + \"S\"\n    else if number < 1000000000000 \n        return int_to_mini_roman(number/100000000000)\
    \ + \"T\"\n    else if number < 10000000000000 \n        return int_to_mini_roman(number/1000000000000)\
    \ + \"G\"\n    else if number < 100000000000000 \n        return int_to_mini_roman(number/10000000000000)\
    \ + \"P\"\n    else if number < 1000000000000000 \n        return int_to_mini_roman(number/100000000000000)\
    \ + \"O\"\n    else if number < 10000000000000000 \n        return int_to_mini_roman(number/1000000000000000)\
    \ + \"N\"\n    else if number < 100000000000000000 \n        return int_to_mini_roman(number/10000000000000000)\
    \ + \"J\"\n    else if number < 1000000000000000000 \n        return int_to_mini_roman(number/100000000000000000)\
    \ + \"Q\"\n    else if number < 10000000000000000000 \n        return int_to_mini_roman(number/1000000000000000000)\
    \ + \"S\"\n    else if number < 100000000000000000000 \n        return int_to_mini_roman(number/10000000000000000000)\
    \ + \"T\"\n", "    roman_numerals = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10,\
    \ \"L\" => 50,\n                         \"C\" => 100, \"D\" => 500, \"M\" =>\
    \ 1000)\n    roman_numerals_reverse = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10,\n\
    \                                 \"L\" => 50, \"C\" => 100, \"D\" => 100,\n \
    \                                \"M\" => 100)\n    roman_numerals_reverse[\"\
    I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"\
    V\"]\n    roman_numerals_reverse[\"X\"] = roman_numerals[\"X\"]\n    roman_numerals_reverse[\"\
    L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"C\"] = roman_numerals[\"\
    C\"]\n    roman_numerals_reverse[\"D\"] = roman_numerals[\"D\"]\n    roman_numerals_reverse[\"\
    M\"] = roman_numerals[\"M\"]\n    roman_numerals_reverse[\"I\"] = roman_numerals[\"\
    I\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"V\"]\n    roman_numerals_reverse[\"\
    X\"] = roman_numerals[\"X\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"\
    L\"]\n    roman_numerals_reverse[\"C\"] = roman_numerals[\"C\"]\n    roman_numerals_reverse[\"\
    D\"] = roman_numerals[\"D\"]\n    roman_numerals_reverse[\"M\"] = roman_numerals[\"\
    M\"]\n    roman_numerals_reverse[\"I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"\
    V\"] = roman_numerals[\"V\"]\n    roman_numerals_reverse[\"X\"] = roman_numerals[\"\
    X\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"\
    C\"] = roman_numerals[\"C\"]\n    roman_numerals_reverse[\"D\"] = roman_numerals[\"\
    D\"]\n    roman_numerals_reverse[\"M\"] = roman_numerals[\"M\"]\n    roman_numerals_reverse[\"\
    I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"\
    V\"]\n    roman_numerals_reverse[\"X", "    mini_roman = \"\"\n    \n    if number\
    \ == 0 \n        mini_roman = \"I\"\n        return mini_roman\n    \n    if number\
    \ < 0 \n        mini_roman = \"-\"\n        return mini_roman\n    \n    if number\
    \ < 100\n        mini_roman = \"I\"\n        return mini_roman\n    \n    if number\
    \ < 500\n        mini_roman = \"V\"\n        return mini_roman\n    \n    if number\
    \ < 1000\n        mini_roman = \"X\"\n        return mini_roman\n    \n    if\
    \ number < 5000\n        mini_roman = \"L\"\n        return mini_roman\n    \n\
    \    if number < 10000\n        mini_roman = \"C\"\n        return mini_roman\n\
    \    \n    if number < 50000\n        mini_roman = \"D\"\n        return mini_roman\n\
    \    \n    if number < 100000\n        mini_roman = \"M\"\n        return mini_roman\n\
    \    \n    if number < 500000\n        mini_roman = \"M\"\n        return mini_roman\n\
    \    \n    if number < 1000000\n        mini_roman = \"C\"\n        return mini_roman\n\
    \    \n    if number < 5000000\n        mini_roman = \"L\"\n        return mini_roman\n\
    \    \n    if number < 10000000\n        mini_roman = \"X\"\n        return mini_roman\n\
    \    \n    if number < 50000000\n        mini_roman = \"V\"\n        return mini_roman\n\
    \    \n    if number < 100000000\n        mini_roman = \"I\"\n        return mini_roman\n\
    \    \n    if number < 500000000\n        mini_roman = \"I\"\n        return mini_roman\n\
    \    \n    if number < 1000000000\n        mini_roman = \"X\"\n        return\
    \ mini_roman\n    \n    if number < 5000000000\n        mini_roman = \"V\"\n \
    \       return mini_roman\n    \n    if number < 10000000000\n        mini_roman\
    \ = \"V\"\n        return mini_roman\n    \n    if number < 50000000000\n    \
    \    mini_roman = \"X\"\n        return mini_roman\n    \n    if number < 100000000000\n\
    \        mini_roman = \"L\"\n        return mini_roman\n    \n    if number <\
    \ 500000000000\n        mini_roman = \"C\"\n        return mini_roman\n    \n\
    \    if number < ", "    roman = String.fromCharCode([1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]) \n    roman = roman.substring(roman.length-number).replace(/\\\
    d/, \"\")\n    return roman\nend", "    if number == 0\n        return \"0\"\n\
    \    \n    roman = roman_numerals(number)\n    \n    roman = roman.map(x => x.to_lowercase)\n\
    \    \n    return roman.join(\"\")\nend", "    if number == 0 \n        return\
    \ \"0\"\n    \n    roman_numerals = roman_numerals_table()\n    \n    roman_numerals_table\
    \ = roman_numerals_table()\n    \n    roman_numerals_table[\"M\"] = 1000\n   \
    \ roman_numerals_table[\"D\"] = 500\n    roman_numerals_table[\"C\"] = 100\n \
    \   roman_numerals_table[\"L\"] = 50\n    roman_numerals_table[\"XC\"] = 10\n\
    \    roman_numerals_table[\"XL\"] = 5\n    roman_numerals_table[\"X\"] = 10\n\
    \    roman_numerals_table[\"V\"] = 5\n    roman_numerals_table[\"IV\"] = 4\n \
    \   roman_numerals_table[\"I\"] = 10\n    roman_numerals_table[\"I\"]\n    \n\
    \    roman_numerals_table[\"I\"]\n    \n    roman_numerals_table[\"X\"]\n    \n\
    \    roman_numerals_table[\"V\"]\n    \n    roman_numerals_table[\"X\"]\n    \n\
    \    roman_numerals_table[\"I\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]\n    \n\
    \    roman_numerals_table[\"X\"]\n    \n    roman_numerals_table[\"V\"]", "  \
    \  if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = Array{String}(undef, 1000)\n    roman_numerals[1] = \"I\"\
    \n    roman_numerals[2] = \"II\"\n    roman_numerals[3] = \"III\"\n    roman_numerals[4]\
    \ = \"IV\"\n    roman_numerals[5] = \"V\"\n    roman_numerals[6] = \"VI\"\n  \
    \  roman_numerals[7] = \"VII\"\n    roman_numerals[8] = \"VIII\"\n    roman_numerals[9]\
    \ = \"IX\"\n    roman_numerals[10] = \"X\"\n    roman_numerals[11] = \"XI\"\n\
    \    roman_numerals[12] = \"XII\"\n    roman_numerals[13] = \"XIII\"\n    roman_numerals[14]\
    \ = \"XIV\"\n    roman_numerals[15] = \"XV\"\n    roman_numerals[16] = \"XVI\"\
    \n    roman_numerals[17] = \"XVII\"\n    roman_numerals[18] = \"XVIII\"\n    roman_numerals[19]\
    \ = \"XIX\"\n    roman_numerals[20] = \"XX\"\n    roman_numerals[21] = \"XXI\"\
    \n    roman_numerals[22] = \"XXII\"\n    roman_numerals[23] = \"XXIII\"\n    roman_numerals[24]\
    \ = \"XXIV\"\n    roman_numerals[25] = \"XXV\"\n    roman_numerals[26] = \"XXVI\"\
    \n    roman_numerals[27] = \"XXVII\"\n    roman_numerals[28] = \"XXVIII\"\n  \
    \  roman_numerals[29] = \"XXIX\"\n    roman_numerals[30] = \"XXX\"\n    roman_numerals[31]\
    \ = \"XXXI\"\n    roman_numerals[32] = \"XXXII\"\n    roman_numerals[33] = \"\
    XXXIII\"\n    roman_numerals[34] = \"XXXIV\"\n    roman_numerals[35] = \"XXXV\"\
    \n    roman_numerals[36] = \"XXXVI\"\n    roman_numerals[37] = \"XXXVII\"\n  \
    \  roman_numerals[38] = \"XXXVIII\"\n    roman_numerals[39] = \"XXXIX\"\n    roman_numerals[4",
  "    roman = roman_numerals(number)\n    roman = roman.map(|x| x.to_lowercase)\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_string)\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.join()\n    return\
    \ roman\nend", "    roman = String.fromChars(\n        Int64(\"I\") + Int64(\"\
    V\") + Int64(\"X\") + Int64(\"L\") + Int64(\"C\") + Int64(\"D\") + Int64(\"M\"\
    )\n    )\n    roman = roman.substring(roman.indexOf(\"I\") + 1, roman.indexOf(\"\
    M\"))\n    roman = roman.substring(roman.indexOf(\"V\") + 1, roman.indexOf(\"\
    X\"))\n    roman = roman.substring(roman.indexOf(\"L\") + 1, roman.indexOf(\"\
    C\"))\n    roman = roman.substring(roman.indexOf(\"D\") + 1, roman.indexOf(\"\
    M\"))\n    roman = roman.substring(roman.indexOf(\"M\") + 1, roman.length)\n \
    \   return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5", "    if number == 0\n        \"\"\n    else\n        roman_numerals(number-1)\n\
    \    end\nend", "    if number == 0 \n        return \"0\"\n    else if number\
    \ == 1 \n        return \"I\"\n    else if number == 2 \n        return \"II\"\
    \n    else if number == 3 \n        return \"III\"\n    else if number == 4 \n\
    \        return \"IV\"\n    else if number == 5 \n        return \"V\"\n    else\
    \ if number == 6 \n        return \"VI\"\n    else if number == 7 \n        return\
    \ \"VII\"\n    else if number == 8 \n        return \"VIII\"\n    else if number\
    \ == 9 \n        return \"IX\"\n    else if number == 10 \n        return \"X\"\
    \n    else if number == 11 \n        return \"XI\"\n    else if number == 12 \n\
    \        return \"XII\"\n    else if number == 13 \n        return \"XIII\"\n\
    \    else if number == 14 \n        return \"XIV\"\n    else if number == 15 \n\
    \        return \"XV\"\n    else if number == 16 \n        return \"XVI\"\n  \
    \  else if number == 17 \n        return \"XVII\"\n    else if number == 18 \n\
    \        return \"XVIII\"\n    else if number == 19 \n        return \"XIX\"\n\
    \    else if number == 20 \n        return \"XX\"\n    else if number == 21 \n\
    \        return \"XXI\"\n    else if number == 22 \n        return \"XXII\"\n\
    \    else if number == 23 \n        return \"XXIII\"\n    else if number == 24\
    \ \n        return \"XXIV\"\n    else if number == 25 \n        return \"XXV\"\
    \n    else if number == 26 \n        return \"XXVI\"\n    else if number == 27\
    \ \n        return \"XXVII\"\n    else if number == 28 \n        return \"XXVIII\"\
    \n    else if number == 29 \n        return \"XXIX\"\n    else if number == 30\
    \ \n        return \"XXX\"\n    else if number == 31 \n        return \"XXXI\"\
    \n    else if number == 32 \n        return \"XXXII\"\n    else if number == 33\
    \ \n        return \"XXXIII\"\n    else if number == 34 \n        return \"XXXIV\"\
    \n    else if number == 35 \n        return \"XXXV\"\n    else if number == 36\
    \ \n        return \"XXXVI\"\n    else if number == 37 \n        return \"XXXVII\"\
    \n    else if number == 38 \n        return \"XXXVIII\"\n    else if number ==\
    \ 39 \n        return \"XXXIX\"\n    else if number == 40 \n        return \"\
    XL\"\n    else if number == 41 \n        return \"XLI\"\n    else ", "    roman\
    \ = roman_to_int()\n    mini_roman = \"\"\n    \n    for n in roman\n        if\
    \ number == n\n            mini_roman += roman[n]\n        else\n            mini_roman\
    \ += roman[n]\n            mini_roman += roman[number]\n        end\n    end\n\
    \    return mini_roman\nend", "    roman = String.fromCharCodes(\n        Int64.(\n\
    \            roman_to_int(\"I\")..roman_to_int(\"V\")..roman_to_int(\"X\")..roman_to_int(\"\
    L\")..roman_to_int(\"C\")..roman_to_int(\"D\")..roman_to_int(\"M\")\n        )\n\
    \    )\n    roman = roman[roman.index(\"I\"):]\n    roman = roman.insert(0, \"\
    I\")\n    roman = roman.insert(roman.index(\"I\") + 1, \"V\")\n    roman = roman.insert(roman.index(\"\
    I\") + 2, \"X\")\n    roman = roman.insert(roman.index(\"I\") + 3, \"L\")\n  \
    \  roman = roman.insert(roman.index(\"I\") + 4, \"C\")\n    roman = roman.insert(roman.index(\"\
    I\") + 5, \"D\")\n    roman = roman.insert(roman.index(\"I\") + 6, \"M\")\n  \
    \  roman = roman.insert(roman.index(\"I\") + 7, \"I\")\n    roman = roman.insert(roman.index(\"\
    I\") + 8, \"V\")\n    roman = roman.insert(roman.index(\"I\") + 9, \"X\")\n  \
    \  roman = roman.insert(roman.index(\"I\") + 10, \"L\")\n    roman = roman.insert(roman.index(\"\
    I\") + 11, \"C\")\n    roman = roman.insert(roman.index(\"I\") + 12, \"D\")\n\
    \    roman = roman.insert(roman.index(\"I\") + 13, \"M\")\n    roman = roman.insert(roman.index(\"\
    I\") + 14, \"I\")\n    roman = roman.insert(roman.index(\"I\") + 15, \"V\")\n\
    \    roman = roman.insert(roman.index(\"I\") + 16, \"X\")\n    roman = roman.insert(roman.index(\"\
    I\") + 17, \"L\")\n    roman = roman.insert(roman.index(\"I\") + 18, \"C\")\n\
    \    roman = roman.insert(roman.index(\"I\") + 19, \"D\")\n    roman = roman.insert(roman.index(\"\
    I", "    if number == 0 \n        return \"0\"\n    else if number < 0 \n    \
    \    return \"-\"\n    else if number < 1000 \n        return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else \n        roman_numbers = Array{String,1}()\n\
    \        for i = 1:1000\n            roman_numbers[i] = int_to_mini_roman(i*10+number%10)\n\
    \            number = number/10\n        end\n        return roman_numbers[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nint_to_mini_roman(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(12345678901234567)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567889)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345678899)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(123456789012345678899999)\n</cell>\n\
    <code language=julia-", "    if number == 0\n        \"\"\n    else\n        roman_numerals(number-1)\n\
    \    end\nend", "    roman = String.empty\n    roman = roman.concat [\n      \
    \  \"M\" * ceil(number/1000),\n        \"C\" * ceil(number/100),\n        \"L\"\
    \ * ceil(number/10),\n        \"X\" * ceil(number/1),\n        \"V\" * ceil(number/10),\n\
    \        \"I\" * ceil(number/100),\n        \"D\" * ceil(number/10),\n       \
    \ \"M\" * ceil(number/1),\n        \"C\" * ceil(number/10),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/100),\n        \"M\"\
    \ * ceil(number/100),\n        \"C\" * ceil(number/100),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/10),\n        \"M\" *\
    \ ceil(number/1),\n        \"C\" * ceil(number/10),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/100),\n        \"M\"\
    \ * ceil(number/100),\n        \"C\" * ceil(number/100),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/10),\n        \"M\" *\
    \ ceil(number/1),\n        \"C\" * ceil(number/10),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/100),\n        \"M\"\
    \ * ceil(number/100),\n        \"C\" * ceil(number/100),\n        \"L\" * ceil(number/100),\n\
    \        \"X\" * ceil(number/100),\n        \"V\" * ceil(number/10),\n       \
    \ \"I\" * ceil(number/100),\n        \"D\" * ceil(number/10),\n        \"M\" *\
    \ ceil(number/1),\n        \"C\" * ceil(number/10),\n        \"L\" * ceil(", " \
    \   if number == 0\n        return \"0\"\n    \n    roman = roman_numerals(number)\n\
    \    \n    roman = roman.map(x => x.toLowercase())\n    \n    return roman.join(\"\
    \")\nend", "    roman = String.empty\n    roman = roman.concat [\n        \"M\"\
    \n        if number >= 1000\n        else if number >= 900\n            \"CM\"\
    \n        else if number >= 500\n            \"D\"\n        else if number >=\
    \ 400\n            \"CD\"\n        else if number >= 100\n            \"C\"\n\
    \        else if number >= 90\n            \"XC\"\n        else if number >= 50\n\
    \            \"L\"\n        else if number >= 40\n            \"XL\"\n       \
    \ else if number >= 10\n            \"X\"\n        else if number >= 9\n     \
    \       \"IX\"\n        else if number >= 5\n            \"V\"\n        else if\
    \ number >= 4\n            \"IV\"\n        else if number >= 1\n            \"\
    I\"\n        else if number >= 0.5\n            \"I\"\n        else if number\
    \ >= 0.25\n            \"II\"\n        else if number >= 0.125\n            \"\
    III\"\n        else if number >= 0.0625\n            \"IV\"\n        else if number\
    \ >= 0.03125 \n            \"V\"\n        else if number >= 0.015625\n       \
    \     \"VI\"\n        else if number >= 0.0125 \n            \"VII\"\n       \
    \ else if number >= 0.09375\n            \"VIII\"\n        else if number >= 0.0625\
    \ \n            \"IX\"\n        else if number >= 0.03125\n            \"X\"\n\
    \        else if number >= 0.015625\n            \"XI\"\n        else if number\
    \ >= 0.0125 \n            \"XII\"\n        else if number >= 0.09375\n       \
    \     \"XIII\"\n        else if number >= 0.0625 \n            \"XIII\"\n    \
    \    else if number >= 0.03125 \n            \"XIV\"\n        else if number >=\
    \ 0.015625 \n            \"XV\"\n        else if number >= 0.0125 \n         \
    \   \"XVI\"\n        else if number >= 0.09375\n            \"XVII\"\n       \
    \ else if number >= 0.0625 \n            \"XVIII\"\n        else if number >=\
    \ 0.03125 \n            \"XIX\"\n        else if number >= 0.015625 \n       \
    \     \"XX\"\n        else if number >= 0.0125 \n            \"XXI\"\n       \
    \ else if number >= 0.09375\n            \"XXII\"\n        else if number >= 0.0625\
    \ \n            \"XXIII\"\n        else if number >= 0.03125 \n            \"\
    XXIV\"\n        else if number >= 0.015625 \n            \"XXV\"\n        else\
    \ if number >= 0.0125 \n            \"XXVI\"\n        else if number >= 0.09375\n\
    \            \"XXVII\"\n        else if number >= "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
