name: HumanEval_113_odd_count
language: jl
prompt: "\"\"\"Given a list of strings, where each string consists of only digits,\
  \ return a list.\n    Each element i of the output should be \"the number of odd\
  \ elements in the\n    string i of the input.\" where all the i's should be replaced\
  \ by the number\n    of odd digits in the i'th string of the input.\n\n        \
  \    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
  1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
  \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
  \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
  \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n\
  \ the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of\
  \ the 2nput.\"])\nend\n"
completions: ["    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, i)\n    end\n    return odd_digits\nend", "    \n\
    \    odd_count_list = []\n    for str in lst\n        odd_count_list += count_odd_digits(str)\n\
    \    end\n    return odd_count_list\nend", "    odd_count_vec =  Vector{String}(undef,length(lst))\n\
    \    for i in 1:length(lst)\n        odd_count_vec[i] = length(findall(string(i),lst[i]))\n\
    \    end\n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    \n    odd_count_list = Vector{String}(undef,0)\n\
    \    for str in lst\n        odd_count_list = append!(odd_count_list,findall(str->str==\"\
    1\",str))\n    end\n    return odd_count_list\nend", "    \n    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    return odd_counts\nend", "    \n    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"\
    2\",\"3\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"\
    4\",\"5\",\"6\",\"7\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"",
  "    odd_count_str = Vector{String}(undef,0)\n    for str in lst\n        odd_count_str\
    \ .= findall(str->str[end-1]=='1',str)\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.4>\nodd_count([\"11\",\"22\",\"33\",\"44\",\"\
    55\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"11\",\"22\",\"33\",\"\
    44\",\"55\",\"66\",\"77\",\"88\",\"99\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector where each element\
    \ is the sum of the lengths of the strings in the input vector. For example, [\"\
    11\",\"22\",\"33\",\"44\",\"55\"] should return [5,5,5,5,5].", "    \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = sum(strsplit(lst[i],\"\
    \\d\")[end].==1)\n    end\n    return odd_counts\nend", "    \n    odd_count_list\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_count_list\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are digits.", "    \n    odd_count_list = Vector{String}(undef,0)\n   \
    \ \n    for i in lst\n        odd_count_list[i] = length(filter(x -> x == \"1\"\
    , i))\n    end\n    \n    return odd_count_list\nend", "    \n    odd_count_vec=Vector{String}(undef,length(lst))\n\
    \    for i=1:length(lst)\n        odd_count_vec[i]=length(findall(string(i),lst[i]))\n\
    \    end\n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    odd_count_list = Vector{String}(undef,\
    \ length(lst))\n    \n    for i in 1:length(lst)\n        odd_count_list[i] =\
    \ length(findall(i .== \"0\", lst[i]))\n    end\n    \n    return odd_count_list\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"10\", \"20\", \"30\", \"\
    40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes as input a vector of strings and returns a vector\
    \ of strings where each element of the output is the string that starts with the\
    \ same number of odd characters as that of the corresponding element of the input\
    \ vector. For example, if the input vector is [\"10\", \"20\", \"30\", \"40\"\
    , \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"], then the output vector should\
    \ be [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\",\
    \ \"100\"].", "    \n    odds = Vector{String}(undef,0)\n    for str in lst\n\
    \        odds = append(odds,sum(map(x -> x % 2 != 0,str)))\n    end\n    return\
    \ odds\nend", "    \n    odd_count_str = zeros(length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_str[i] = length(findall(string(i), lst))\n    end\n    return\
    \ odd_count_str\nend", "    odd_count_list = Vector{String}(undef,0)\n    for\
    \ str in lst\n        odd_count_list = append(odd_count_list,length(findall(str,\"\
    [0-9]\"))) \n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nFor example, if the input string is\
    \ \"abc\", the output should be 3.", "    \n    odd_count_list = Vector{String}(undef,0)\n\
    \    \n    for i in lst\n        odd_count_list = append!(odd_count_list,count(i))\
    \ \n    end\n    \n    return odd_count_list\nend", "    \n    odds = zeros(Int,\
    \ length(lst))\n    for i = 1:length(lst)\n        odds[i] = length(findall(string(i),\
    \ lst))\n    end\n    return vec(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11", " \
    \   odds = Vector{Int}()\n    for i in lst\n        odds = append(odds, sum(map(x\
    \ -> x % 2 != 0, i)))\n    end\n    return odds\nend", "    odd_count_list = Vector{String}(undef,0)\n\
    \    for str in lst\n        odd_count_list = append(odd_count_list,length(findall(str,\"\
    [0-9]\"))) \n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.", "    \n   \
    \ odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = sum(isodd(lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the input string. For example,\
    \ if the input string is \"abcabc\", the output should be \"3abc3\".", "    \n\
    \    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of the number of odd characters in each string. For example, [\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] should return [3, 5,\
    \ 7, 9, 11, 13, 15, 17, 19].", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for str in lst\n        odd_counts[findall(str) .== 1] .+= 1\n    end\n \
    \   return odd_counts\nend", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x mod\
    \ 2 != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are vowels.", "    \n    odd_digits\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_digits[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_digits\n\
    end", "    \n    odd_count_vector = Vector{String}(undef, length(lst))\n    for\
    \ i in 1:length(lst)\n        odd_count_vector[i] = length(findall(i .== \"0\"\
    , lst[i]))\n    end\n    return odd_count_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"\
    0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"", "    \n    odd_count_list = Vector{String}(undef,0)\n\
    \    \n    for str in lst\n        odd_count_list = append!(odd_count_list,count_odd_digits(str))\n\
    \    end\n    \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"10\",\"20\",\"30\",\"40\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns a string where each character is replaced\
    \ by the number of times it appears in the string.", "    odds = Vector{String}(undef,0)\n\
    \    for i in lst\n        odds = append!(odds,count(i)) \n    end\n    return\
    \ odds\nend", "    \n    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend", "    \n    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x == '1',\
    \ lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector where each element is the length of the longest string in the input\
    \ vector. \nFor example, [\"abc\",\"def\",\"ghi\"] should return [3,3,3]", " \
    \   \n    odd_count_vec = []\n    for str in lst\n        odd_count_vec += count_odd_digits(str)\n\
    \    end\n    \n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11", " \
    \   \n    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n       \
    \ odd_counts[i] = length(findall(string(i), lst))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of strings as input and returns a list of strings where each\
    \ string consists of only digits.", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    return odd_counts\nend", "    \n    odd_counts\
    \ = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x == '1', lst[i]))\n    end\n    \n    return odd_counts\nend", "    \n \
    \   odds = Vector{String}()\n    for str in lst\n        odds = append(odds, length(findall(str,\
    \ \"[0-9]\")))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are less than 10.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are digits and are less than or equal\
    \ to 10.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are greater than 10.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are greater than or equal to 10.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are digits and are between\
    \ 10 and 20.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 10 and 20.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 20 and 30.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 20 and\
    \ 30.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 30 and 40.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 30 and 40.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 40 and\
    \ 50.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 40 and 50.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 50 and 60.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 50 and\
    \ 60.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 60 and 70.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 60 and 70.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 70 and\
    \ 80.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits and are between 70 and 80.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits\
    \ and are between 80 and 90.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits and are between 80 and\
    \ 90.\nWrite ", "    \n    odd_count_vec =  Vector{String}(undef,0)\n    for i\
    \ in lst\n        odd_count_vec[findall(i .== \"d\")] .= length(findall(i .==\
    \ \"d\"))\n    end\n    odd_count_vec\nend", "    \n    odd_count_vec =  Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count_vec[i] = length(findall(string(i),lst))\n\
    \    end\n    return odd_count_vec\nend", "    \n    odds = zeros(Int, length(lst))\n\
    \    for i in 1:length(lst)\n        odds[i] = length(findall(x -> x % 2 != 0,\
    \ lst[i]))\n    end\n    return odds\nend", "    odd_digits = Vector{String}(undef,0)\n\
    \    for s in lst\n        odd_digits = union(odd_digits,findall(isdigit,s))\n\
    \    end\n    return odd_digits\nend", "    \n    odd_count_list = Vector{String}(undef,0)\n\
    \    for str in lst\n        odd_count_list = vcat(odd_count_list,findall(str->str==\"\
    1\",str->str==\"1\",init=true))\n    end\n    odd_count_list\nend", "    odd_digits\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_digits[i]\
    \ = count(lst[i])\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings where each string consists of only digits.", " \
    \   \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings as an argument and\
    \ returns a vector where each element is the length of the longest string in the\
    \ input vector. For example, [\"a\", \"b\", \"c\", \"d\"] -> [4, 3, 2]", "   \
    \ odd_count_vec =  Vector{String}(undef,0)\n    for str in lst\n        odd_count_vec[findall(str->isdigit(str))]\
    \ =  length(findall(str->isdigit(str))) \n    end\n    return odd_count_vec\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nFor example, if the input is \"abc\"\
    , the function should return 3.", "    \n    odds = zeros(length(lst))\n    for\
    \ i in 1:length(lst)\n        odds[i] = length(findall(string(i) .== \"1\"))\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"", "    \n    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    odd_counts = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    return odd_counts\nend", "    \n    odd_counts\
    \ = zeros(length(lst))\n    for i=1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 != 0, lst[i]))\n    end\n    \n    return odd_counts\nend", "    \n\
    \    odd_digits = Vector{String}()\n    \n    for i in lst\n        odd_digits\
    \ = append!(odd_digits, count(digits(i)))\n    end\n    \n    return odd_digits\n\
    end", "    \n    odd_counts = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_counts[i] = length(findall(string(i),lst))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings where\
    \ each string consists of only digits.", "    odd_count = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_count[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector where each element is the length of\
    \ the longest string in the input.", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(string(i),lst))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers where the ith element is the number of times the ith string appears\
    \ in the vector of strings.", "    \n    odd_counts = zeros(length(lst))\n   \
    \ for i = 1:length(lst)\n        odd_counts[i] = sum(strsplit(lst[i], \"\")[end-1]\
    \ == 1)\n    end\n    return odd_counts\nend", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 != 0, lst[i]))\n    end\n    \n    return odd_counts\nend", "    odd_counts\
    \ = Dict()\n    for str in lst\n        odd_counts[str] = sum(str == \"1\" ? 1\
    \ : 0 for str in str)\n    end\n    return collect(values(odd_counts))\nend\n\
    </cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"\
    1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"",
  "    \n    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n      \
    \  odd_digits += findall(i .== \"0\") \n    end\n    \n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"\
    4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"\
    7\",\"8\",\"9\",\"0\",\"1\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"\
    1\",\"2\",\"3\",\"4\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"2\"\
    ,\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"", "    odd_counts = Dict{String,Int}()\n\
    \    for i in lst\n        odd_counts[i] = sum(isodd(i)) \n    end\n    odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\"\
    , \"230\", \"231\", \"232\", \"", "    \n    odds = Vector{String}()\n    for\
    \ i in lst\n        odds = append(odds, count(i, digits=true))\n    end\n    return\
    \ odds\nend", "    \n    odd_count_vec = []\n    for str in lst\n        odd_count_vec\
    \ += findall(str) do i\n            if str[i] == '1'\n                1\n    \
    \        else\n                0\n            end\n        end\n    end\n    odd_count_vec\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"", "    \n    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x -> x ==\
    \ '1', lst[i]))\n    end\n    \n    return odd_counts\nend", "    odds = Vector{String}(undef,0)\n\
    \    for i in lst\n        odds = odds + findall(i -> i == '1', i)\n    end\n\
    \    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"228\", \"229\", \"230\", \"231\", \"232\", \"233", "    odds = zeros(length(lst))\n\
    \    for i in 1:length(lst)\n        odds[i] = sum(isodd(lst[i]))\n    end\n \
    \   return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15", "    \n\
    \    odds = zeros(length(lst))\n    for i in 1:length(lst)\n        odds[i] =\
    \ length(findall(i, isodd, lst))\n    end\n    return odds\nend", "    \n    odd_digits\
    \ = Vector{String}(undef,0)\n    \n    for i in lst\n        odd_digits = union(odd_digits,findall(i\
    \ .== \"1\",digits))\n    end\n    \n    return odd_digits\nend", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end", "    odd_count_list = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(String(i),lst))\n    end\n    return\
    \ odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"", "    \n    odd_count_list = Vector{String}(undef,0)\n   \
    \ for str in lst\n        odd_count_list = append!(odd_count_list,count_odd_digits(str))\n\
    \    end\n    odd_count_list\nend", "    \n    odds = zeros(length(lst))\n   \
    \ for i in 1:length(lst)\n        odds[i] = sum(strsplit(lst[i],\"-\")[end].isdigit())\n\
    \    end\n    return odds\nend", "    odd_count = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count[i] = length(findall(x -> x == '1',\
    \ lst[i]))\n    end\n    return odd_count\nend", "    \n    odds = Vector{String}()\n\
    \    for i in lst\n        odds = append(odds, count(i, \"^\"))\n    end\n   \
    \ odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string where all the characters\
    \ are capitalized.", "    \n    odd_count_list = Vector{String}(undef,0)\n   \
    \ \n    for str in lst\n        odd_count_list = append(odd_count_list,length(findall(str,\"\
    \\d\")))\n    end\n    \n    return odd_count_list\nend", "    odd_count_str =\
    \ @view lst |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\".\"\
    )) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"-\"\
    )) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"\
    -\")) |> map(x->x[2]) |> map(x->split(x,\".\")) |> map(x->x[1])\n    odd_count_str\
    \ = odd_count_str |> map(x->split(x,\"-\")) |> map(x->x[2]) |> map(x->split(x,\"\
    .\")) |> map(x->x[1])\n    odd_count_str = odd_count_str |> map(x->split(x,\"",
  "    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits += count(i,\
    \ digits)\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    odd_digits = Vector{String}(undef,0)\n\
    \    for str in lst\n        odd_digits += findall(str->isdigit(str),str)\n  \
    \  end\n    return odd_digits\nend", "    \n    odds = Vector{String}()\n    for\
    \ i in lst\n        odds = append(odds, count(i, \"odd\"))\n    end\n    return\
    \ odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"\
    14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\",\
    \ \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\"\
    , \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\"\
    , \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\"\
    , \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\"\
    , \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\"\
    , \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\"\
    , \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\"\
    , \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"\
    103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\"\
    , \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\"\
    , \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\"\
    , \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\"\
    , \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\"\
    , \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\"\
    , \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\"\
    , \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\"\
    , \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\"\
    , \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\"\
    , \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\"\
    , \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\"\
    , \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\"\
    , \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\"\
    , \"229\", \"230\", \"231\", \"232\", \"233\", \"234", "    \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    \n    for str in lst\n        odd_count_list\
    \ = append!(odd_count_list,count(str,\"0\"))\n    end\n    \n    return odd_count_list\n\
    end", "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(i, digits)) \n    end\n    \n    return odd_count_str\n\
    end", "    \n    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n\
    \        odd_digits = union(odd_digits,findall(i .== \"1\",digits))\n    end\n\
    \    \n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as input and returns a vector\
    \ where each element is the length of the longest string in the input vector.\
    \ \nFor example, if the input vector is [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"\
    7\",\"8\",\"9\"], then the output vector should be [5,4,3,2,1,6,5,4,3,2].", " \
    \   \n    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n       \
    \ odd_counts[i] = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of strings and returns a list of strings\
    \ where each string consists of only digits.", "    \n    odds = Vector{String}()\n\
    \    for i in lst\n        odds = append(odds, count(i, \"odd\"))\n    end\n \
    \   return odds\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given a list of\
    \ strings, where each string consists of only digits, return a list.\n    Each\
    \ element i of the output should be \"the number of even elements in the\n   \
    \ string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.", "    \n    odd_counts =\
    \ Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x == '1',lst[i]))\n    end\n    return odd_counts\nend",
  "    \n    odd_count_list = Vector{String}(undef,0)\n    \n    for str in lst\n\
    \        odd_count_list = append!(odd_count_list,length(findall(str,\"\\d\")))\n\
    \    end\n    \n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the input string.", "    \n    odd_count = zeros(length(lst))\n \
    \   for i = 1:length(lst)\n        odd_count[i] = length(findall(x -> x == '1',\
    \ lst[i]))\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    odds = zeros(Int, length(lst))\n    for\
    \ i = 1:length(lst)\n        odds[i] = sum(map(x -> x % 2 == 1, lst[i]))\n   \
    \ end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    return odd_counts\nend", "    odd_counts = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x == \"\
    1\", lst[i]))\n    end\n    return odd_counts\nend", "    \n    odd_count_vec\
    \ = []\n    for i in lst\n        odd_count_vec += count(i)\n    end\n    odd_count_vec\n\
    end", "    odd_count = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_count[i] = length(findall(x -> x == '1', lst[i]))\n    end\n    return\
    \ odd_count\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"\
    3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"0\",\"0\",\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"\
    ,\"0\",\"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"\
    3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"\
    0\",\"0\",\"0\",\"0\",\"0\",\"0", "    odds = Vector{String}(undef,0)\n    for\
    \ i in lst\n        odds = append!(odds,count(i)) \n    end\n    return odds\n\
    end", "    \n    odd_digits = Vector{String}(undef,0)\n    \n    for i in lst\n\
    \        odd_digits += count(digits(i))\n    end\n    \n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \n    For example, if the input string is \"abc\", the output should be 3.",
  "    \n    odd_count = zeros(length(lst))\n    for i in 1:length(lst)\n        odd_count[i]\
    \ = length(findall(i, lst)) - length(findall(i, lst)%2)\n    end\n    \n    return\
    \ odd_count\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",\
    \ \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"", "    \n    odd_count_str = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_count_str[i] = length(findall(strsplit(lst[i],\"\\\\D+\"),\"odd\"\
    ))\n    end\n    return odd_count_str\nend", "    \n    odds = Vector{String}(undef,0)\n\
    \    for s in lst\n        odds = append!(odds,findall(isodd,s))\n    end\n  \
    \  \n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a list of strings, and returns a list\
    \ of strings where each string consists of only digits.", "    \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list[] = length(findall(str,\
    \ \"[0-9]\"))\n    end\n    return odd_count_list\nend", "    \n    odd_counts\
    \ = Vector{Int}()\n    \n    for i in lst\n        odd_counts[i] = length(findall(i\
    \ .== \"0\"))\n    end\n    \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings where each string consists of only digits.", " \
    \   odds = Vector{String}(undef, 0)\n    for str in lst\n        odds = strcat(odds,\
    \ findall(str -> str == '1', str))\n    end\n    return odds\nend", "    \n  \
    \  odd_count_list = []\n    for i in lst\n        odd_count_list += count(i)\n\
    \    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\"\
    , \"236", "    \n    odd_digits = Vector{String}(undef, length(lst))\n    \n \
    \   for i in 1:length(lst)\n        odd_digits[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    \n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where each character is replaced by the number of times that character appears\
    \ in the string.", "    \n    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5", "    odd_digits = Vector{String}()\n    for i\
    \ in lst\n        odd_digits += count(i, '[O]')\n    end\n    return odd_digits\n\
    end", "    \n    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits\
    \ = append(odd_digits, count(digits(i)))\n    end\n    return odd_digits\nend",
  "    \n    odd_count_list = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(String(i),lst))\n    end\n    return\
    \ odd_count_list\nend", "    \n    odd_count_vec = []\n    for i in lst\n    \
    \    odd_count_vec[i] = length(findall(i, digits(i)))\n    end\n    return odd_count_vec\n\
    end", "    odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, s)\n    end\n    return odd_digits\nend", "    \n\
    \    odd_count_list = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"", "    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8", "    odd_count_vec = []\n    for str in lst\n        odd_count_vec\
    \ += findall(str.isdigit, str)\n    end\n    return odd_count_vec\nend", "   \
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = sum(isodd(lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228", "   \
    \ \n    odd_count_vec = []\n    for str in lst\n        odd_count_vec += findall(str)\
    \ do i\n            sum(str[i] == '1') for i in 1:length(str)\n        end\n \
    \   end\n    odd_count_vec\nend", "    odd_counts = Dict()\n    for i in lst\n\
    \        odd_counts[i] = sum(map(x -> x % 2 != 0, i))\n    end\n    return collect(values(odd_counts))\n\
    end", "    odd_count = zeros(length(lst))\n    for i = 1:length(lst)\n       \
    \ odd_count[i] = length(findall(string(i), lst))\n    end\n    return odd_count\n\
    end", "    odd_counts = Vector{String}(undef,length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(String(i) .== \"0\"))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"0\", \"0\"\
    , \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"\
    , \"0\", \"0\", \"", "    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == \"1\", lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"", "    \n    odds = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odds[i] = sum(map(x -> isodd(x),\
    \ lst[i]))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"", "    \n    odd_count_list\
    \ = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(string(i),lst[i]))\n    end\n    return odd_count_list\nend",
  "    odd_count_str = @view [odd_count(i) for i in lst]\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\"\
    , \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\"\
    , \"239", "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(i, \"\\d\"))\n    end\n    odd_count_str =\
    \ odd_count_str[2:end]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    odd_count_list = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i] = length(findall(i,\
    \ lst[i]) .== 1)\n    end\n    return odd_count_list\nend", "    \n    odd_count_list\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i]\
    \ = length(findall(i .== \"0\", lst[i]))\n    end\n    return odd_count_list\n\
    end", "    \n    odds = Vector{String}()\n    for i in lst\n        odds = append(odds,\
    \ count(i).^2)\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    odds = odd_count(digits)\n</cell>\n<code language=julia-1.5>\nodds\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where all the characters are capitalized.", "    odds = Vector{String}()\n \
    \   for s in lst\n        odds = append!(odds, count(digits(s)))\n    end\n  \
    \  return odds\nend", "    \n    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as an argument\
    \ and returns a vector of the number of odd characters in each string. For example,\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] should return\
    \ [3, 5, 7, 9, 11, 13, 15, 17, 19].", "    \n    odd_count_str = Vector{String}(undef,0)\n\
    \    \n    for str in lst\n        odd_count_str = [strcat(odd_count_str,str)]\n\
    \    end\n    \n    return odd_count_str\nend", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for str in lst\n        odd_counts[findall(str .== \"0\")]\
    \ = length(findall(str .== \"0\"))\n    end\n    return odd_counts\nend", "  \
    \  odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"", "    odd_count_list = Vector{String}(undef,0)\n    for str in lst\n   \
    \     odd_count_list = append!(odd_count_list,count(str))\n    end\n    return\
    \ odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given a list\
    \ of strings, where each string consists of only digits, return a list.\n    Each\
    \ element i of the output should be \"the number of even elements in the\n   \
    \ string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.", "    \n    odd_count_vec\
    \ =  Vector{String}(undef,0)\n    for str in lst\n        odd_count_vec =  append(odd_count_vec,length(findall(str,\"\
    [0-9]\"))) \n    end\n    \n    return odd_count_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a list of strings, where each string consists of only digits, return\
    \ a list.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    \n  \
    \  odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i, strsplit(lst[i], \"\")))\n    end\n\
    \    \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of integers\
    \ where the ith element of the output is the number of times the ith string appears\
    \ in the input vector. For example, if the input vector is [\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\"], the output should be [1, 1, 2, 1, 1, 2].", "    odd_count_list\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_count_list .= findall(x\
    \ -> x % 2 != 0, str)\n    end\n    return odd_count_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string where all the characters are capitalized.", " \
    \   \n    odd_counts = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n\
    \        odd_counts[i] = length(findall(string(i),lst))\n    end\n    return odd_counts\n\
    end", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \",\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"(\", \"\")\n    odd_count_str = replace(odd_count_str, \")\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"[\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"]\", \"\")\n    odd_count_str = replace(odd_count_str, \"{\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"}\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"{\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"}\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"[\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"]\", \"\")\n    odd_count_str = replace(odd_count_str, \"{\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"}\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"{\", \"\")\n    odd_count_str = replace(odd_count_str, \"}\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"[\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"]\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"{\", \"\")\n    odd_count_str = replace(odd_count_str, \"}\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = ", "    odd_count_list = Vector{String}(undef, length(lst))\n    for i in\
    \ 1:length(lst)\n        odd_count_list[i] = length(findall(x -> x % 2 != 0, lst[i]))\n\
    \    end\n    return odd_count_list\nend", "    odd_count_str = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_count_str[i] = length(findall(i,\
    \ lst)) - length(findall(i, lst[findall(i, lst)])\n    end\n    return odd_count_str\n\
    end", "    \n    odd_count_vec = []\n    for str in lst\n        odd_count_vec\
    \ += findall(x -> x % 2 != 0, str)\n    end\n    odd_count_vec\nend", "    \n\
    \    odd_count_vec = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_count_vec[i] = length(findall(i .== \"0\", lst[i]))\n    end\n  \
    \  return odd_count_vec\nend", "    \n    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(i, digits(lst[i])))\n\
    \    end\n    return odd_counts\nend", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x == '1',\
    \ lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7", "    \n    odd_count_list = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_count_list[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_count_list\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings where each string consists\
    \ of only digits.\nFor example, [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"] should return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"].", "    odd_digits = Vector{String}(undef,0)\n    for i in\
    \ lst\n        odd_digits += findall(i -> i == '1', i)\n    end\n    return odd_digits\n\
    end", "    odd_digits = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_digits[findall(str .== \"0\")] = length(findall(str .== \"0\"))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"", "    \n    odd_counts = Vector{String}(undef,length(lst))\n    for i =\
    \ 1:length(lst)\n        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n\
    \    end\n    return odd_counts\nend", "    odd_count_list = Vector{String}(undef,0)\n\
    \    for i in lst\n        odd_count_list[i] = length(findall(i .== \"0\"))\n\
    \    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend", "    odd_counts\
    \ = Vector{String}(undef,length(lst))\n    for i=1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end", "    odd_digits = Vector{String}(undef,0)\n    for i in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, i)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"23",
  "    \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   \n    return odd_counts\nend", "    odd_counts = Vector{String}(undef,length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(string(i) .==\
    \ \"0\"))\n    end\n    return odd_counts\nend", "    \n    odd_count_list = Vector{String}(undef,\
    \ 0)\n    for i in lst\n        odd_count_list = append(odd_count_list, length(findall(i,\
    \ digits_only)))\n    end\n    return odd_count_list\nend", "    odd_count_list\
    \ = Vector{String}(undef,0)\n    for i in lst\n        odd_count_list = append(odd_count_list,length(findall(i,\
    \ digits_only)))\n    end\n    return odd_count_list\nend", "    \n    odd_count\
    \ = zeros(length(lst))\n    for i in 1:length(lst)\n        odd_count[i] = length(findall(x\
    \ -> x == '1', lst[i]))\n    end\n    return odd_count\nend", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(map(x -> isodd(x), lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.", "  \
    \  \n    odd_digits = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend", "    odd_count_vec = []\n    for i in lst\n     \
    \   odd_count_vec += findall(i -> i == '1', i)\n    end\n    return odd_count_vec\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of strings as an argument and returns a list of strings where\
    \ each string consists of only digits.", "    \n    odds = Vector{String}(undef,0)\n\
    \    for i in lst\n        odds = append!(odds,count(i)) \n    end\n    return\
    \ odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\
    \ \nFor example, if the input string is \"abc\", the output should be 3.", " \
    \   odd_digits = Vector{String}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"0\", i).length\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns a string\
    \ where all the characters that are not digits have been replaced by \"#\".",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n     \
    \   odd_counts[str2double(str)]=sum(str==\"1\") for str in str\n    end\n    return\
    \ odd_counts\nend", "    \n    odd_count_list = Vector{String}(undef,0)\n    for\
    \ i in lst\n        odd_count_list[i] = length(filter(x -> x % 2 == 1, i))\n \
    \   end\n    return odd_count_list\nend", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = sum(map(x ->\
    \ isodd(x), lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of strings as input and\
    \ returns a list where each element is the sum of the lengths of the strings in\
    \ the input list. For example, [\"a\", \"b\", \"c\"] should return [3, 3, 4].",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend", "    \n    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    ])\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = sum(isodd(lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8", "    \n    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += findall(i -> i == '1', i)\n    end\n\
    \    odd_digits\nend", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227", "    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n  \
    \      odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n   \
    \ return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are uppercase letters.", "    odd_digits = Vector{String}()\n\
    \    for i in lst\n        odd_digits += findall(i .== \"0\", i) == 0 ? [] : findall(i\
    \ == 0, i)\n    end\n    return odd_digits\nend", "    \n    odd_count_list =\
    \ []\n    for i in lst\n        odd_count_list.append(count(i, \"^\"))\n    end\n\
    \    return odd_count_list\nend", "    odds = Vector{String}()\n    for i in lst\n\
    \        odds = append(odds, count(i, \"^[0-9]+$\"))\n    end\n    return odds\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    odd_count = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count[i] = length(findall(string(i) .==\
    \ \"0\"))\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    odd_counts = zeros(length(lst))\n    for\
    \ i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings as input and returns\
    \ a vector of strings as output.\nEach element of the output should be \"the number\
    \ of even elements in the string of the input.\" where all the strings in the\
    \ input should be replaced by the number of even elements in the string of the\
    \ input.", "    \n    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = sum(strsplit(lst[i], \"\")[[1]] .== \"0\")\n    end\n\
    \    return odd_counts\nend", "    odd_digits = Vector{String}()\n    for str\
    \ in lst\n        odd_digits += findall(str) do i\n            digit = digits(i)\n\
    \            digit.count(digit.last)\n        end\n    end\n    return odd_digits\n\
    end", "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str -> str == \"1\", str))\n    end\n    return odd_count_str\n\
    end", "    \n    odds = Vector{String}()\n    \n    for i in lst\n        odds\
    \ = append!(odds, count(i, \"0\"))\n    end\n    \n    return odds\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ digits.", "    \n    odd_count_list = []\n    for str in lst\n        odd_count_list.append(length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_count_list\nend", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[findall(str\
    \ .== \"0\")] = length(findall(str .== \"0\"))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    ])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6",
  "    odd_digits = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend", "    \n    odd_count_list = Vector{String}(undef,0)\n\
    \    \n    for i in lst\n        odd_count_list = append(odd_count_list,length(filter(x\
    \ -> x==1, i)))\n    end\n    \n    return odd_count_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"", "    \n\
    \    odd_counts = zeros(length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = sum(map(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of integers where the ith element is\
    \ the length of the longest string in the vector that begins with the ith element\
    \ of the vector.", "    odd_digits = Vector{String}()\n    for s in lst\n    \
    \    odd_digits = union(odd_digits, findall(x -> x % 2 != 0, s))\n    end\n  \
    \  return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"228\", \"229", "    \n    odd_count_str = \"\"\n    for str in lst\n     \
    \   odd_count_str = strcat(odd_count_str, strcat(count_odd_digits(str), \" \"\
    ))\n    end\n    odd_count_str = odd_count_str[1:end]\n    return split(odd_count_str,\
    \ \" \")\nend", "    odd_counts = Vector{String}(undef, length(lst))\n    for\
    \ i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n\
    \    end\n    return odd_counts\nend", "    \n    odd_counts = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(string(i) .==\
    \ \"0\"))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    \n    odd_count = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count[i] = sum(map(x -> x % 2 != 0, lst[i]))\n\
    \    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of strings as input and returns\
    \ a list of strings where each string consists of only digits.", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end", "    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6", "    odd_count_str = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_count_str[i] = length(findall(i,\
    \ lst)) - length(findall(i, lst)%2)\n    end\n    return odd_count_str\nend",
  "    \n    odd_count_list = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_count_list[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n\
    \    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5", "    odd_count_list = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_count_list[i] = length(findall(i .==\
    \ \"0\", lst[i]))\n    end\n    return odd_count_list\nend", "    odds = zeros(Int,\
    \ length(lst))\n    for i = 1:length(lst)\n        odds[i] = sum(isodd(lst[i]))\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given\
    \ a list of strings, where each string consists of only digits, return a list.\n\
    \    Each element i of the output should be \"the number of even elements in the\n\
    \    string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.", "    \n    odd_count_list\
    \ = Vector{String}(undef,0)\n    for str in lst\n        odd_count_list = append!(odd_count_list,length(findall(str,\"\
    [0-9]\"))) \n    end\n    return odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    odd_count_list = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_count_list[i] = length(findall(string(i)\
    \ .== \"0\"))\n    end\n    odd_count_list\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6", "    \n    odd_count = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count[i] = sum(strsplit(lst[i], \"\")[end].chars.filter(x\
    \ -> x == '1'))\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\",\"2\",\"3\",\"4\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ length of the longest string in the input vector.", "    \n    odds = Vector{String}()\n\
    \    for str in lst\n        odds = append(odds, count_odd_digits(str))\n    end\n\
    \    return odds\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\"\
    , \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"228\", \"229\", \"230\", \"231\", \"232", "    odd_count = zeros(length(lst))\n\
    \    for i = 1:length(lst)\n        odd_count[i] = length(findall(x -> x % 2 !=\
    \ 0, lst[i]))\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a vector of strings,\
    \ and returns a vector of the number of characters in each string in the input.",
  "    \n    odd_digits = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_digits[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_digits\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where each element is the string formed by concatenating the first\
    \ character of each string in the input vector. For example, [\"a\", \"b\", \"\
    c\"] -> [\"a\", \"b\", \"c\"].", "    \n    odd_digits = Vector{String}()\n  \
    \  for i in lst\n        odd_digits = union(odd_digits, count(digits(i)))\n  \
    \  end\n    \n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"", "    \n    odds = Vector{String}()\n    for i in lst\n       \
    \ odds = append(odds, count(i, \"odd\"))\n    end\n    return odds\nend", "  \
    \  \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of strings and returns a list of\
    \ strings where each string consists of only digits."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
