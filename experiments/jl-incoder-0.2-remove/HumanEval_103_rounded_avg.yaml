name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n                    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n) * n\n    end\n    return rounded_avg\nend\nrounded_avg(5,5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two integers n and m and returns\
    \ the product of the integers from n through m. \nRound the answer to the nearest\
    \ integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\
    \ \nrounded_prod(5,5)", "    if m>n \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))\nend", "    if n < m \n        return -1\n    else\
    \ \n        return round(Int64(n+m)/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n                    factorial(5)\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120", "    if\
    \ n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n)\
    \ * n\n    end\n    return rounded_avg\nend", "    if m>n \n        return -1\n\
    \    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,6)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in m that are less than\
    \ or equal to n.", "    if n < m \n        return -1\n    else\n        return\
    \ round(Int64(n)/Int64(m))\n    end\nend", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m + 0.5)*m\n    end\n    return rounded_avg\nend\nrounded_avg(5,3)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"You are given two positive integers\
    \ n and m, and your task is to compute the\n    average of the integers from n\
    \ through m (including n and m). \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n\
    \                    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</code>\n\
    <|/ a tags=julia,rounding |>\n<| a dscore=0 |>\n<code>", "    if n > m \n    \
    \    rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \                  factorial(5)\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    ", "    if\
    \ n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n/m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n < m\
    \ \n        return -1\n    else \n        return round(m/n) * n\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in two integers and returns their sum.", "    if m>n then\
    \ return -1\n    else return round(Int64(n)/Int64(m))\nend", "    if n == m \n\
    \        rounded_avg = -1\n    else\n        rounded_avg = round(n / m) * m\n\
    \    end\n    return rounded_avg\nend", "    if n > m \n        rounded_avg =\
    \ -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n    end\n\
    \    return rounded_avg\nend", "    if m>n \n        return -1\n    elseif m==0\n\
    \        return n\n    elseif n==0\n        return m\n    else\n        return\
    \ round(m/n)*n \n    end\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 7\n\
    Write a function that takes in two integers n and m and returns true if n is divisible\
    \ by m and false otherwise. \nExample: \nn = 4, m = 5\nn = 4, m = 4\nn = 5, m\
    \ = 3\nn = 5, m = 5\nn = 6, m = 5\nn = 6, m = 6\nn = 7, m = 5\nn = 7, m = 7\n\
    n = 8, m = 5\nn = 8, m = 8\nn = 9, m = 5\nn = 9, m = 9\nn = 10, m = 5\nn = 10,\
    \ m = 10\nn = 11, m = 5\nn = 11, m = 11\nn = 12, m = 5\nn = 12, m = 12\nn = 13,\
    \ m = 5\nn = 13, m = 13\nn = 14, m = 5\nn = 14, m = 14\nn = 15, m = 5\nn = 15,\
    \ m = 15\nn = 16, m = 5\nn = 16, m = 16\nn = 17, m = 5\nn = 17, m = 17\nn = 18,\
    \ m = 5\nn = 18, m = 18\nn = 19, m = 5\nn = 19, m = 19\nn = 20, m = 5\nn = 20,\
    \ m = 20\nn = 21, m = 5\nn = 21, m = 21\nn = 22, m = 5\nn = 22, m = 22\nn = 23,\
    \ m = 5\nn = 23, m = 23\nn = 24, m = 5\nn = 24, m = 24\nn = 25, m = 5\nn = 25,\
    \ m = 25\nn = 26, m = 5\nn = 26, m = 26\nn = 27, m = 5\nn = 27, m = 27\nn = 28,\
    \ m = 5\nn = 28, m = 28\nn = 29, m = 5\nn = 29, m = 29\nn = 30, m = 5\nn = 30,\
    \ m = 30\nn = 31, m = 5\nn = 31, m = 31\nn = 32, m = 5\nn = 32, m = 32\nn = 33,\
    \ m = 5\nn = 33, m = 33\nn = 34, m = 5\nn = 34, m = 34\nn = 35, m = 5\nn = 35,\
    \ m = 35\nn = 36, m = 5\nn = 36, m = 36\nn = 37, m = 5\nn = 37, m = 37\nn = 38,\
    \ m = 5\nn = 38, m = 38\nn = 39, m = 5\nn = 39, m = 39\nn = 40, m = 5\nn = 40,\
    \ m = 40\nn = 41, m = 5\nn = 41, m = 41\nn = 42, m = 5\nn = 42, m = 42\nn = 43,\
    \ m = 5\nn = 43, m = 43\nn = 44, m = 5\nn = 44, m = 44\nn = 45, m = 5\nn = 45,\
    \ m = 45", "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n) * n\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,26)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,27)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,28)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,29)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,30)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if m > n \n        return -1\n    else \n        return round(Float64(n)/Float64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns the number\
    \ of digits in m that are not a multiple of n. \nExample: \nn = 4, m = 10\nReturn\
    \ 3", "    if n <= m \n        rounded_avg = round(n/m)\n        return rounded_avg\n\
    \    else\n        rounded_avg = -1\n        return rounded_avg\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(5,3)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,26)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,27)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,28)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,29)\n</cell>\n\
    <code language=julia-1.5>", "    if n < m \n        return -1\n    else\n    \
    \    avg = ((n+m)/2)\n        return round(avg)\n    end\nend\nrounded_avg(4,5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes in two integers n and\
    \ m and returns the sum of the\n    integers from n through m (including n and\
    \ m).\n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    rounded_sum(4,5)\n                    rounded_sum(5,4)\n\
    \                    rounded_sum(6,5)\n                    rounded_sum(7,6)\n\
    \                    rounded_sum(8,7)\n                    rounded_sum(9,8)\n\
    \                    rounded_sum(10,9)\n                    rounded_sum(11,10)\n\
    \                    rounded_sum(12,11)\n                    rounded_sum(13,12)\n\
    \                    rounded_sum(14,13)\n                    rounded_sum(15,14)\n\
    \                    rounded_sum(16,15)\n                    rounded_sum(17,16)\n\
    \                    rounded_sum(18,17)\n                    rounded_sum(19,18)\n\
    \                    rounded_sum(20,19)\n                    rounded_sum(21,20)\n\
    \                    rounded_sum(22,21)\n                    rounded_sum(23,22)\n\
    \                    rounded_sum(24,23)\n                    rounded_sum(25,24)\n\
    \                    rounded_sum(26,25)\n                    rounded_sum(27,26)\n\
    \                    rounded_sum(28,27)\n                    rounded_sum(29,28)\n\
    \                    rounded_sum(30,29)\n                    rounded_sum(31,30)\n\
    \                    rounded_sum(32,31)\n                    rounded_sum(33,32)\n\
    \                    rounded_sum(34,33)\n                    rounded_sum(35,34)\n\
    \                    rounded_sum(36,35)\n                    rounded_sum(37,36)\n\
    \                    rounded_sum(38,37)\n                    rounded_sum(39,38)\n\
    \                    rounded_sum(40,39)\n                    rounded_sum(41,40)\n\
    \                    rounded_sum(42,41)\n                    rounded_sum(43,42)\n\
    \                    rounded_sum(44,43)\n                    rounded_sum(45,44)\n\
    \                    rounded_sum(46,45)\n                    rounded_sum(47,46)\n\
    \                    rounded_sum(48,47)\n                    rounded_sum(49,48)\n\
    \                    rounded_sum(50,49)\n                    rounded_sum(51,50)\n\
    \                    rounded_sum(52,51)\n                    rounded_sum(53,52)\n\
    \                    rounded_sum(54,53)\n                    rounded_sum(55,54)\n\
    \                    rounded_sum(56,55)\n                    rounded_sum(57",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m\
    \ + 0.5)*m\n    end\n    return rounded_avg\nend", "    if n <= m \n        return\
    \ n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in two integers n and m and returns true\
    \ if n is divisible by m and false otherwise.", "    if m>n \n        return -1\n\
    \    else \n        return round(m/n::Int64)*n\nend\nrounded_avg(4,5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the sum of its digits. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    n = 3\n                 \
    \   sum = 3\n                    rounded_sum = 3\n                    rounded_sum\
    \ = 3\n                    rounded_sum = 3\n                    rounded_sum =\
    \ 3\n                    rounded_sum = 3\n                    rounded_sum = 3\n\
    \                    rounded_sum = 3\n                    rounded_sum = 3\n  \
    \                  rounded_sum = 3\n                    rounded_sum = 3\n    \
    \                rounded_sum = 3\n                    rounded_sum = 3\n      \
    \              rounded_sum = 3\n                    rounded_sum = 3\n        \
    \            rounded_sum = 3\n                    rounded_sum = 3\n          \
    \          rounded_sum = 3\n                    rounded_sum = 3\n            \
    \        rounded_sum = 3\n                    rounded_sum = 3\n              \
    \      rounded_sum = 3\n                    rounded_sum = 3\n                \
    \    rounded_sum = 3\n                    rounded_sum = 3\n                  \
    \  rounded_sum = 3\n                    rounded_sum = 3\n                    rounded_sum\
    \ = 3\n                    rounded_sum = 3\n                    rounded_sum =\
    \ 3\n                    rounded_sum = 3\n                    rounded_sum = 3\n\
    \                    rounded_sum = 3\n                    rounded_sum = 3\n  \
    \                  rounded_sum = 3\n                    rounded_sum = 3\n    \
    \                rounded_sum = 3\n                    rounded_sum = 3\n      \
    \              rounded_sum = 3\n                    rounded_sum = 3\n        \
    \            rounded_sum = 3\n                    rounded_sum = 3\n          \
    \          rounded_sum = 3\n                    rounded_sum = 3\n            \
    \        rounded_sum = 3\n                    rounded_sum = 3\n              \
    \      rounded_sum = 3\n                    rounded_sum = 3\n                \
    \    rounded_sum = 3\n                    rounded_sum = 3\n                  \
    \  rounded_sum = 3\n                    rounded_sum = 3\n                    rounded_sum\
    \ = 3\n                    rounded_sum = 3\n                    rounded_sum =\
    \ 3\n                    rounded_sum = 3\n                    rounded_sum = 3\n\
    \                    rounded_sum = 3\n                    rounded_sum = 3\n  \
    \                  rounded_sum = 3\n                    rounded_sum = 3\n    \
    \                rounded_sum = 3\n                    rounded_sum = 3\n      \
    \              rounded_sum = 3\n                    rounded_sum = 3\n        \
    \            rounded_sum = 3\n                    rounded_sum = 3\n          \
    \          rounded_sum = 3\n                    rounded_sum = 3\n            \
    \        rounded_sum = 3\n                    rounded_sum = 3\n              \
    \      rounded_sum = 3\n                    rounded_sum = 3\n", "    if n <= m\
    \ \n        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n   \
    \ end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns the sum of\
    \ the integers from n through m. Round the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample: \nn = 10, m =\
    \ 15\nsum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 +\
    \ 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2\
    \ + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10\
    \ + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 +\
    \ 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum\
    \ = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum\
    \ = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum\
    \ = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum\
    \ = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 +\
    \ 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum\
    \ = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\nrounded_sum = 10 + 9 + 8 + 7 + 6 + ",
  "    if n <= m \n        return -1\n    else\n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\nrounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in two integers n and m and returns the sum of the integers from\
    \ n through m. \nRound the answer to the nearest integer and convert that to binary.\n\
    If n is greater than m, return -1.\nExample: \nn = 10, m = 15\nsum = 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10", "    if n > m \n        return -1\n    else \n  \
    \      return round(Int64(n)/Int64(m))\nend", "    if n > m \n        return -1\n\
    \    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,3)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,30)\n</cell>\n<code language=julia-", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.1>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(5,10)\n</cell>", "    if n <= m \n    \
    \    rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n    end\n \
    \   return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a number. \n    Round the answer to\
    \ the nearest integer and convert that to binary.\n    Example:\n            \
    \        factorial(5)\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120", "    if n < m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m) + n\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    factorial(5)\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    ", "    if n == m \n        rounded_avg =\
    \ -1\n    else\n        rounded_avg = (n+m)/2\n    end\n    return rounded_avg\n\
    end\nrounded_avg(5,6)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the factorial of n. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n         \
    \           factorial(5)\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    ", "    if n\
    \ > m \n        return -1\n    else \n        return round(m+(n-m)/2)\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,26)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,27)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,28)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,29)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,30)\n</cell>\n<code language=julia-1.0>",
  "    if n == m \n        return m\n    else if n < m \n        return -1\n    else\n\
    \        avg = ((n+m)/2)\n        return round(avg)\n    end\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ and returns the sum of its digits. \nExample: \n    \n    digits(123) = 1 +\
    \ 2 + 3 = 6\n    digits(-5) = -1 + -2 = -1\n    digits(0) = 0\n    digits(12)\
    \ = 1 + 2 = 3\n    digits(-12) = 1 + -2 = 3\n    digits(123) = 1 + 2 + 3 + 3 +\
    \ 4 = 10\n    digits(-123) = 1 + -2 + -3 = -6\n    digits(-123) = 1 + -2 + -3\
    \ = -6\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0)\
    \ = 0\n    digits(0) = 0\n    digits(0) = 0\n    digits(0) = 0\n", "    if n >\
    \ m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n) * n\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,6)\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,4)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,3)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,2)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,1)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,0)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-1)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-2)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-3)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-4)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-6)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-7)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-8)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-9)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-10)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-11)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-12)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-13)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-14)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-15)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-16)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-17)\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,-18)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(4,-19)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(4,-20)\n</", "    if n > m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Float64(n)/Float64(m))\n    end\n    return rounded_avg\n\
    end\nrounded_avg(5,5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n                    factorial(5)\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    ", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(m/n) * n\n    end\n    return rounded_avg\n\
    end\nrounded_avg(5,5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a number. \n    Round the answer to the nearest integer and\
    \ convert that to binary.\n    Example:\n                    factorial(5)\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120", "    if n\
    \ <= m \n        return n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes in two integers n and\
    \ m and returns the number of digits in n and m.\nExample: \nn = 1234, m = 5678\n\
    n = 1234, m = 1234\nn = 1234, m = 1235\nn = 1234, m = 1236\nn = 1234, m = 1237\n\
    n = 1234, m = 1238\nn = 1234, m = 1239\nn = 1234, m = 1240\nn = 1234, m = 1241\n\
    n = 1234, m = 1242\nn = 1234, m = 1243\nn = 1234, m = 1244\nn = 1234, m = 1245\n\
    n = 1234, m = 1246\nn = 1234, m = 1247\nn = 1234, m = 1248\nn = 1234, m = 1249\n\
    n = 1234, m = 1250\nn = 1234, m = 1251\nn = 1234, m = 1252\nn = 1234, m = 1253\n\
    n = 1234, m = 1254\nn = 1234, m = 1255\nn = 1234, m = 1256\nn = 1234, m = 1257\n\
    n = 1234, m = 1258\nn = 1234, m = 1259\nn = 1234, m = 1260\nn = 1234, m = 1261\n\
    n = 1234, m = 1262\nn = 1234, m = 1263\nn = 1234, m = 1264\nn = 1234, m = 1265\n\
    n = 1234, m = 1266\nn = 1234, m = 1267\nn = 1234, m = 1268\nn = 1234, m = 1269\n\
    n = 1234, m = 1270\nn = 1234, m = 1271\nn = 1234, m = 1272\nn = 1234, m = 1273\n\
    n = 1234, m = 1274\nn = 1234, m = 1275\nn = 1234, m = 1276\nn = 1234, m = 1277\n\
    n = 1234, m = 1278\nn = 1234, m = 1279\nn = 1234, m = 1280\nn = 1234, m = 1281\n\
    n = 1234, m = 1282\nn = 1234, m = 1283\nn = 1234, m = 1284\nn = 1234, m = 1285\n\
    n = 1234, m = 1286\nn = 1234, m = 1287\nn = 1234, m = 1288\nn = 1234, m = 1289\n\
    n = 1234, m = 1290\nn = 1234, m = 1291\nn = 1234, m = 1292\nn = 1234, m = 1293\n\
    n = 1234, m = 1294\nn = 1234, m = 1295\nn = 1234, m = 1296\nn = 1234, m = 1297\n\
    n = 1234, m = 1298\nn = 1234", "    if m > n \n        error(\"m must be less\
    \ than n\")\n    elseif n == m \n        return -1\n    elseif n == 0\n      \
    \  return \"0\"\n    elseif m == 0\n        return \"0\"\n    else\n        return\
    \ round(m*(n+1)/2+n)/2\n    end\nend\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"You are given two positive integers n and m, and your task is to compute\
    \ the\n    average of the integers from n through m (including n and m). \n  \
    \  Round the answer to the nearest integer and convert that to binary.\n    If\
    \ n is greater than m, return -1.\n    Example:\n                    \"\"\"",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns the sum of\
    \ the integers from n through m (including n and m). \nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample:\nrounded_sum(5,4)\nrounded_sum(5,5)\nrounded_sum(5,6)\nrounded_sum(5,7)\n\
    rounded_sum(5,8)\nrounded_sum(5,9)\nrounded_sum(5,10)\nrounded_sum(5,11)\nrounded_sum(5,12)\n\
    rounded_sum(5,13)\nrounded_sum(5,14)\nrounded_sum(5,15)\nrounded_sum(5,16)\nrounded_sum(5,17)\n\
    rounded_sum(5,18)\nrounded_sum(5,19)\nrounded_sum(5,20)\nrounded_sum(5,21)\nrounded_sum(5,22)\n\
    rounded_sum(5,23)\nrounded_sum(5,24)\nrounded_sum(5,25)\nrounded_sum(5,26)\nrounded_sum(5,27)\n\
    rounded_sum(5,28)\nrounded_sum(5,29)\nrounded_sum(5,30)\nrounded_sum(5,31)\nrounded_sum(5,32)\n\
    rounded_sum(5,33)\nrounded_sum(5,34)\nrounded_sum(5,35)\nrounded_sum(5,36)\nrounded_sum(5,37)\n\
    rounded_sum(5,38)\nrounded_sum(5,39)\nrounded_sum(5,40)\nrounded_sum(5,41)\nrounded_sum(5,42)\n\
    rounded_sum(5,43)\nrounded_sum(5,44)\nrounded_sum(5,45)\nrounded_sum(5,46)\nrounded_sum(5,47)\n\
    rounded_sum(5,48)\nrounded_sum(5,49)\nrounded_sum(5,50)\nrounded_sum(5,51)\nrounded_sum(5,52)\n\
    rounded_sum(5,53)\nrounded_sum(5,54)\nrounded_sum(5,55)\nrounded_sum(5,56)\nrounded_sum(5,57)\n\
    rounded_sum(5,58)\nrounded_sum(5,59)\nrounded_sum(5,60)\nrounded_sum(5,61)\nrounded_sum(5,62)\n\
    rounded_sum(5,63)\nrounded_sum(5,64)\nrounded_sum(5,65)\n", "    if n > m \n \
    \       rounded_avg = -1\n    else\n        rounded_avg = round(n/m + 0.5)*m\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,2)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(5,3)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,26)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,27)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,28)\n</cell>\n<code language=julia-1.3>\nrounded_avg", "    if n\
    \ <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if n > m \n        return -1\n    else \n        return round(Float64(n)/Float64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a positive integer n and returns the factorial\
    \ of n. \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    n! = n*(n-1)*(n-2)*...*1\n                \
    \    n! = factorial(n)\n                    n! = round(Float64(n!))\n        \
    \            n! = convert(Int64, n!)\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n           \
    \         n! = convert(Int64, round(n!))\n                    n! = convert(Int64,\
    \ round(n!))\n                    n! = convert(Int64, round(n!))\n", "    if n\
    \ < m \n        return -1\n    else \n        return round(m*(n+1)/2+n)/2\nend\n\
    </code>\n<|/ a tags=julia,function |>\n<| a dscore=0 |>\n<code>", "    if n ==\
    \ m \n        return \"-1\"\n    else \n        return round(m*(n+1)/2+n)/2\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if n > m \n \
    \       rounded_avg = -1\n    else\n        rounded_avg = round(m/n) * n\n   \
    \ end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of integers and returns the sum of\
    \ the integers. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n                    \"\"\"", "    if n <= m \n   \
    \     rounded_avg = round(n/m) \n        rounded_avg = rounded_avg * 2 \n    \
    \    rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg % 2 \n\
    \        rounded_avg = rounded_avg \n    else \n        rounded_avg = -1 \n  \
    \  end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.3>", "    if n >= m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(n/m + 0.5)*m\n    end\n    return rounded_avg\nend\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,30)\n</cell>\n", "    if n < m \n        return -1\n    else \n\
    \        return round(m*(n+1)/2+n)/2\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n                    factorial(5)\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n", "    if m>n then return -1\n \
    \   else return round(Float64(n)/Float64(m))\nend\nrounded_avg(5,6)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in two integers and returns their\
    \ sum.\nExample:\nrounded_sum(1,2)\nrounded_sum(2,3)\nrounded_sum(3,4)\nrounded_sum(4,5)\n\
    rounded_sum(5,6)\nrounded_sum(6,7)\nrounded_sum(7,8)\nrounded_sum(8,9)\nrounded_sum(9,10)\n\
    rounded_sum(10,11)\nrounded_sum(11,12)\nrounded_sum(12,13)\nrounded_sum(13,14)\n\
    rounded_sum(14,15)\nrounded_sum(15,16)\nrounded_sum(16,17)\nrounded_sum(17,18)\n\
    rounded_sum(18,19)\nrounded_sum(19,20)\nrounded_sum(20,21)\nrounded_sum(21,22)\n\
    rounded_sum(22,23)\nrounded_sum(23,24)\nrounded_sum(24,25)\nrounded_sum(25,26)\n\
    rounded_sum(26,27)\nrounded_sum(27,28)\nrounded_sum(28,29)\nrounded_sum(29,30)\n\
    rounded_sum(30,31)\nrounded_sum(31,32)\nrounded_sum(32,33)\nrounded_sum(33,34)\n\
    rounded_sum(34,35)\nrounded_sum(35,36)\nrounded_sum(36,37)\nrounded_sum(37,38)\n\
    rounded_sum(38,39)\nrounded_sum(39,40)\nrounded_sum(40,41)\nrounded_sum(41,42)\n\
    rounded_sum(42,43)\nrounded_sum(43,44)\nrounded_sum(44,45)\nrounded_sum(45,46)\n\
    rounded_sum(46,47)\nrounded_sum(47,48)\nrounded_sum(48,49)\nrounded_sum(49,50)\n\
    rounded_sum(50,51)\nrounded_sum(51,52)\nrounded_sum(52,53)\nrounded_sum(53,54)\n\
    rounded_sum(54,55)\nrounded_sum(55,56)\nrounded_sum(56,57)\nrounded_sum(57,58)\n\
    rounded_sum(58,59)\nrounded_sum(59,60)\nrounded_sum(60,61)\nrounded_sum(61,62)\n\
    rounded_sum(62,63)\nrounded_sum(63,64)\nrounded_sum(64,65)\nrounded_sum(65,66)\n\
    rounded_sum(66,67)\n", "    if n < m \n        rounded_avg = round(n/m)\n    else\n\
    \        rounded_avg = -1\n    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    binary_to_decimal(n::Int64)::Int64\n\
    \    Convert binary to decimal.\n    Example:\n                    binary_to_decimal(10)\n\
    \                    10\n    \"\"\"", "    if n > m \n        return -1\n    elseif\
    \ n == m \n        return n\n    else\n        return round(m/n) * n\n    end\n\
    end\nrounded_avg(5,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns True if n is divisible by m and False otherwise.\
    \ \nExample: \nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 15\nn = 10, m = 20\n\
    n = 10, m = 25\nn = 10, m = 30\nn = 10, m = 40\nn = 10, m = 50\nn = 10, m = 60\n\
    n = 10, m = 70\nn = 10, m = 80\nn = 10, m = 90\nn = 10, m = 100\nn = 10, m = 110\n\
    n = 10, m = 120\nn = 10, m = 130\nn = 10, m = 140\nn = 10, m = 150\nn = 10, m\
    \ = 160\nn = 10, m = 170\nn = 10, m = 180\nn = 10, m = 190\nn = 10, m = 200\n\
    n = 10, m = 210\nn = 10, m = 220\nn = 10, m = 230\nn = 10, m = 320\nn = 10, m\
    \ = 330\nn = 10, m = 340\nn = 10, m = 350\nn = 10, m = 360\nn = 10, m = 370\n\
    n = 10, m = 380\nn = 10, m = 390\nn = 10, m = 400\nn = 10, m = 410\nn = 10, m\
    \ = 420\nn = 10, m = 430\nn = 10, m = 440\nn = 10, m = 450\nn = 10, m = 460\n\
    n = 10, m = 470\nn = 10, m = 480\nn = 10, m = 490\nn = 10, m = 500\nn = 10, m\
    \ = 510\nn = 10, m = 520\nn = 10, m = 530\nn = 10, m = 540\nn = 10, m = 550\n\
    n = 10, m = 560\nn = 10, m = 570\nn = 10, m = 580\nn = 10, m = 590\nn = 10, m\
    \ = 600\nn = 10, m = 610\nn = 10, m = 620\nn = 10, m = 630\nn = 10, m = 640\n\
    n = 10, m = 650\nn = 10, m = 660\nn = 10, m = 670\nn = 10, m = 680\nn = 10, m\
    \ = 690\nn = 10, m = 700\nn = 10, m = 710\nn = 10, m = 720\nn = 10, m = 730\n\
    n = 10, m = 740\nn = 10, m = 750\nn = 10, m = 760\nn = 10, m = 770\nn = 10, m\
    \ = 780\nn = 10, m = 790\nn = 10, m = 800\nn = 10, m = 810\nn = 10, m = 820\n\
    n = 10, m = 830\nn = 10, m = 840\nn = 10, m = 850\nn = 10, m = 860\nn = 10, m\
    \ = 870\n", "    if m>n \n        error(\"m must be less than n\")\n    elseif\
    \ m==0\n        error(\"m must be greater than 0\")\n    elseif n==0\n       \
    \ error(\"n must be greater than 0\")\n    elseif m==n\n        return -1\n  \
    \  else\n        rounded_avg = (n+m)/2\n        rounded_avg = round(rounded_avg)\n\
    \        rounded_avg = rounded_avg*2\n        rounded_avg = rounded_avg+1\n  \
    \      return rounded_avg\n    end\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise:\
    \ Write a function that computes the factorial of a number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n         \
    \           factorial(5)\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n", "    if n == m \n\
    \        return \"-1\"\n    elseif n < m \n        return rounded_avg(m, n)\n\
    \    else\n        avg = ((m+n)/2)\n        return round(avg)\n    end\nend\n\
    rounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns true if n is divisible by m, false otherwise.\
    \ \nExample: \nn = 10, m = 5\nn = 10, m = 10\nn = 5, m = 10\nn = 10, m = 5\nn\
    \ = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\n\
    n = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\nn = 10, m = 10\nn = 10, m = 5\n\
    n = 10, m = 10\nn = 10, ", "    if n < m \n        return -1\n    else \n    \
    \    return round(m/n) * n\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(4,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given integer. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n                    factorial(5)\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m*(n+1)/2\
    \ + n/2)\n    end\n    return rounded_avg\nend", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(m/n) * n\n    end\n    return rounded_avg\n\
    end", "    if m>n \n        return -1\n    else\n        return round(Int64(n+m)/2)\n\
    \    end\nend\nrounded_avg(10,20)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a positive integer n and returns the factorial of n. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \                    n! = n*(n-1)*(n-2)*...*2*1\n                    n! = n x\
    \ n x n x ...\n                    n! = n x n x n x ...\n                    n!\
    \ = n x n x n x ...\n                    n! = n x n x n x ...\n              \
    \      n! = n x n x n x ...\n                    n! = n x n x n x ...\n      \
    \              n! = n x n x n x ...\n                    n! = n x n x n x ...\n\
    \                    n! = n x n x n x ...\n                    n! = n x n x n\
    \ x ...\n                    n! = n x n x n x ...\n                    n! = n\
    \ x n x n x ...\n                    n! = n x n x n x ...\n                  \
    \  n! = n x n x n x ...\n                    n! = n x n x n x ...\n          \
    \          n! = n x n x n x ...\n                    n! = n x n x n x ...\n  \
    \                  n! = n x n x n x ...\n                    n! = n x n x n x\
    \ ...\n                    n! = n x n x n x ...\n                    n! = n x\
    \ n x n x ...\n                    n! = n x n x n x ...\n                    n!\
    \ = n x n x n x ...\n                    n! = n x n x n x ...\n              \
    \      n! = n x n x n x ...\n                    n! = n x n x n x ...\n      \
    \              n! = n x n x n x ...\n                    n! = n x n x n x ...\n\
    \                    n! = n x n x n x ...\n                    n! = n x n x n\
    \ x ...\n                    n! = n x n x n x ...\n                    n! = n\
    \ x n x n x ...\n                    n! = n x n x n x ...\n                  \
    \  n! = n x n x n x ...\n                    n! = n x n x n x ...\n          \
    \          n", "    if n < m \n        return -1\n    else \n        return round(Int64(n+m)/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of integers and returns the sum of\
    \ the integers in the list. \n    Round the answer to the nearest integer and\
    \ convert that to binary.\n    Example:\n                    [42,43,44,45,46,47]\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45 + 46 + 47\n\
    \                    = 42 + 43 + 44 + 45 + 46 + 47\n                    = 42 +\
    \ 43 + 44 + 45 + 46 + 47\n                    = 42 + 43 + 44 + 45", "    if n\
    \ > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    binary_to_decimal(binary::String)::Int64\n    \n    Convert binary\
    \ to decimal.\n    \n    Arguments:\n        binary - a binary string representing\
    \ a decimal number\n    \n    Returns:\n        decimal - a decimal number represented\
    \ by a binary string\n    \n    Examples:\n        binary_to_decimal(\"10\")\n\
    \        binary_to_decimal(\"11\")\n        binary_to_decimal(\"100\")\n     \
    \   binary_to_decimal(\"101\")\n        binary_to_decimal(\"111\")\n        binary_to_decimal(\"\
    1000\")\n        binary_to_decimal(\"1001\")\n        binary_to_decimal(\"1011\"\
    )\n        binary_to_decimal(\"1100\")\n        binary_to_decimal(\"1101\")\n\
    \        binary_to_decimal(\"1110\")\n        binary_to_decimal(\"1111\")\n  \
    \      binary_to_decimal(\"10010\")\n        binary_to_decimal(\"10011\")\n  \
    \      binary_to_decimal(\"10100\")\n        binary_to_decimal(\"101011\")\n \
    \       binary_to_decimal(\"101101\")\n        binary_to_decimal(\"101110\")\n\
    \        binary_to_decimal(\"101111\")\n        binary_to_decimal(\"111010\")\n\
    \        binary_to_decimal(\"111011\")\n        binary_to_decimal(\"111101\")\n\
    \        binary_to_decimal(\"111110\")\n        binary_to_decimal(\"111111\")\n\
    \        binary_to_decimal(\"100100\")\n        binary_to_decimal(\"1001011\"\
    )\n        binary_to_decimal(\"1001101\")\n        binary_to_decimal(\"1001110\"\
    )\n        binary_to_decimal(\"1001111\")\n        binary_to_decimal(\"1010010\"\
    )\n        binary_to_decimal(\"1010011\")\n        binary_to_decimal(\"1010100\"\
    )\n        binary_to_decimal(\"10101011\")\n        binary_to_decimal(\"101011011\"\
    )\n        binary_to_decimal(\"10101110\")\n        binary_to_decimal(\"10101111\"\
    )\n        binary_to_decimal(\"10111010\")\n        binary_to_decimal(\"10111011\"\
    )\n        binary_to_decimal(\"10111101\")\n        binary_to_decimal(\"10111110\"\
    )\n        binary_to_decimal(\"10111111\")\n        binary_to_decimal(\"11100100\"\
    )\n        binary_to_decimal(\"111001011\")\n        binary_to_decimal(\"111001101\"\
    )\n        binary_to_", "    if n == m \n        rounded_avg = round(n,digits=0)\n\
    \        return rounded_avg\n    else \n        rounded_avg = round(n+m,digits=0)\n\
    \        return rounded_avg\n    end\nend\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    binary_to_decimal(binary::String)::Int64\n    \n    Converts a binary\
    \ string into an integer. \n    \n    Arguments:\n        binary {String} -- Binary\
    \ string to be converted\n    \n    Returns:\n        Int64 -- Integer equivalent\
    \ of binary string\n    \n    Raises:\n        TypeError -- If the input is not\
    \ a string\n        ValueError -- If the input string is not of length 2\n   \
    \ \"\"\"", "    if m > n \n        return -1\n    else \n        return round(Float64(n)/Float64(m))\n\
    end", "    if n <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend", "    if n == m \n        rounded_avg\
    \ = round(n) \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. \n\
    The factorial of a non-negative integer n, denoted by n!, is the product of all\
    \ positive integers less than or equal to n. \nFor example, the factorial of 5\
    \ is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function that computes the factorial of\
    \ a given number. \nThe factorial of a non-negative integer n, denoted by n!,\
    \ is the product of all positive integers less than or equal to n. \nFor example,\
    \ the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer n,\
    \ denoted by n!, is the product of all positive integers less than or equal to\
    \ n. \nFor example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function\
    \ that computes the factorial of a given number. \nThe factorial of a non-negative\
    \ integer n, denoted by n!, is the product of all positive integers less than\
    \ or equal to n. \nFor example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120.\
    \ \nWrite a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer n, denoted by n!, is the product of all positive integers\
    \ less than or equal to n. \nFor example, the factorial of 5 is 5 * 4 * 3 * 2\
    \ * 1 = 120. \nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer n, denoted by n!, is the product of\
    \ all positive integers less than or equal to n. \nFor example, the factorial\
    \ of 5 is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function that computes the factorial\
    \ of a given number. \nThe factorial of a non-negative integer n, denoted by n!,\
    \ is the product of all positive integers less than or equal to n. \nFor example,\
    \ the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer n,\
    \ denoted by n!, is the product of all positive integers less than or equal to\
    \ n. \nFor example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. \nWrite a function\
    \ that computes the factorial of a given number. \nThe factorial of a non-negative\
    \ integer n, denoted by n!, is the product of all positive integers less than\
    \ or equal to n. \n", "    if n > m \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,3)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(5,4)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,26)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,27)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,28)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,29)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,30)\n</cell>\n\
    <code language=julia-", "    if n <= m \n        return n\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two integers and returns the\
    \ sum of the integers. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    \"\"\"", "    if n < m \n\
    \        return -1\n    elseif n == m\n        return n\n    else\n        return\
    \ round(m/n) * n\n    end\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number. \nExamples:\n$$\\begin{array}{c|c}\n\
    \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:}\
    \ & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:}\
    \ & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output}\
    \ \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\
    \\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:}\
    \ & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:}\
    \ & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output}\
    \ \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\
    \\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:}\
    \ & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:}\
    \ & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output}\
    \ \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\
    \\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:}\
    \ & \\text{Input:} & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:}\
    \ & \\text{Output} \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output}\
    \ \\\\ \\hline\n\\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n\
    \\text{Input:} & \\text{Input:} & \\text{Output} \\\\ \\hline\n", "    if n ==\
    \ m \n        rounded_avg = -1\n    elseif n < m \n        rounded_avg = (n+m)/2\n\
    \    else\n        rounded_avg = (n+m)/2\n    end\n    return rounded_avg\nend\n\
    rounded_avg(5,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the numbers in the list.\nExample:\
    \ \n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n\
    [1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,3]\
    \ returns 6\n[1,2,3] returns 6\n[1,2,3] returns 6\n[1,2,", "    if n > m \n  \
    \      rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n                    factorial(5)\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120",
  "    if n <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \        return rounded_avg\n    else\n        rounded_avg = -1\n        return\
    \ rounded_avg\n    end\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers and returns their sum. \nThe function\
    \ should return an error if the sum is negative.\nExample:\n    \n    sum_of_two_numbers(1,2)\n\
    \    sum_of_two_numbers(-1,2)\n    sum_of_two_numbers(1,-2)\n    sum_of_two_numbers(-1,-2)\n\
    \    sum_of_two_numbers(1,0)\n    sum_of_two_numbers(0,1)\n    sum_of_two_numbers(0,-1)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(1,1)\n    sum_of_two_numbers(1,2)\n\
    \    sum_of_two_numbers(2,1)\n    sum_of_two_numbers(2,2)\n    sum_of_two_numbers(0,2)\n\
    \    sum_of_two_numbers(2,0)\n    sum_of_two_numbers(2,2)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n    sum_of_two_numbers(0,0)\n\
    \    sum_of_two_numbers(0,0)\n    sum_of_two_", "    if m > n \n        return\
    \ -1\n    else \n        return round(m+(n-m)/2)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    if n > m \n        rounded_avg = -1\n  \
    \  else\n        rounded_avg = round(m/n) * n\n    end\n    return rounded_avg\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a number. \n    Round the answer to the nearest integer and\
    \ convert that to binary.\n    Example:\n                    factorial(5)\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120", "    if n\
    \ < m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.0>\n\"\"\"You are given\
    \ two positive integers n and m, and your task is to compute the\n    average\
    \ of the integers from n through m (including n and m). \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    If n is greater than\
    \ m, return -1.\n    Example:\n                    \"\"\"", "    if n <= m \n\
    \        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n    end\n\
    \    return rounded_avg\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n)\
    \ * n\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers n and m and returns the sum of the integers from n through\
    \ m (including n and m). \nRound the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample: \nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\nrounded_sum(5,3)\n\
    rounded_sum(", "    if n > m \n        return -1\n    else \n        return round(m/n)\
    \ * n\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in two integers n and m and returns the number of digits in m that are\
    \ less than or equal to n.", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in two integers n and\
    \ m and returns their sum.\n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    \"\"\"", "    if n > m \n\
    \        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in two integers n and m and returns the sum of\
    \ the integers from n through m. \nIf n is greater than m, return -1.\nExample:\
    \ \nn = 10, m = 5\nOutput: 15\nn = 5, m = 10\nOutput: -1", "    if m > n \n  \
    \      rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that computes the factorial of a number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \                  factorial(5)\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n        return rounded_avg\n    else\n        return -1\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers and returns the sum of the integers\
    \ \n    between them inclusive.\n    Example:\n                    Input: 5 and\
    \ 10\n                    Output: 15\n                    \n                 \
    \   Input: 3 and 7\n                    Output: 12\n                    \n   \
    \                 Input: 4 and 8\n                    Output: -1\n           \
    \         \n                    Input: 1 and -1\n                    Output: -1\n\
    \                    \n                    Input: 1 and 0\n                  \
    \  Output: 0\n                    \n                    Input: 0 and 0\n     \
    \               Output: 0\n                    \n                    Input: 0\
    \ and -1\n                    Output: -1\n                    \n             \
    \       Input: -1 and -1\n                    Output: -1\n                   \
    \ \n                    Input: -1 and 0\n                    Output: 0\n     \
    \               \n                    Input: -1 and 1\n                    Output:\
    \ 1\n                    \n                    Input: 0 and 1\n              \
    \      Output: 1\n                    \n                    Input: 1 and 1\n \
    \                   Output: 2\n                    \n                    Input:\
    \ 1 and 2\n                    Output: 3\n                    \n             \
    \       Input: 2 and 2\n                    Output: 4\n                    \n\
    \                    Input: 2 and 3\n                    Output: 5\n         \
    \           \n                    Input: 3 and 3\n                    Output:\
    \ 6\n                    \n                    Input: 3 and 4\n              \
    \      Output: 7\n                    \n                    Input: 4 and 4\n \
    \                   Output: 8\n                    \n                    Input:\
    \ 4 and 5\n                    Output: 9\n                    \n             \
    \       Input: 5 and 5\n                    Output: 10\n                    \n\
    \                    Input: 5 and 6\n                    Output: 11\n        \
    \            \n                    Input: 6 and 6\n                    Output:\
    \ 12\n                    \n                    Input: 6 and 7\n             \
    \       Output: 13\n                    \n                    Input: 7 and 7\n\
    \                    Output: 14\n                    \n                    Input:\
    \ 7 and 8\n                    Output: 15\n                    \n            \
    \        Input: 8 and 8\n                    Output: 16\n                    \n\
    \                    Input: 8 and 9\n                    Output: 17\n        \
    \            \n                    Input: 9 and 9\n                    Output:\
    \ 18\n                    \n                    Input: 9 and 10\n            \
    \        Output: 19\n                    \n                    Input: 10 and 10\n\
    \                    Output: 20\n                    \n                    Input:\
    \ 10 and 11\n                    Output: 21\n                    \n          \
    \          Input: 11 and 11\n                    Output: 22\n                \
    \    \n                    Input: ", "    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(m*(n-m)+n/2)/2\n    end\n    return rounded_avg\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns the sum of all the integers from n through\
    \ m. \nRound the answer to the nearest integer and convert that to binary.\nIf\
    \ n is greater than m, return -1.\nExample: \nn = 10, m = 5\nOutput: 25\nn = 10,\
    \ m = 10\nOutput: -1", "    if n <= m \n        return n\n    else \n        return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>", "    if n <= m \n    \
    \    rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n    end\n \
    \   return rounded_avg\nend", "    if n > m \n        return -1\n    else \n \
    \       return round(Int64(n)/Int64(m))\nend\nrounded_avg(5,6)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the numbers in the list. \nIf the list is empty, return 0.\nIf the list has\
    \ one element, return that element.\nIf the list has more than one element, return\
    \ the sum of the elements in the list.\nExample: \n    list1 = [1,2,3]\n    list2\
    \ = [4,5,6]\n    list3 = [7,8,9]\n    list4 = []\n    list5 = [10]\n    list6\
    \ = [1]\n    list7 = [1,2]\n    list8 = [1,2,3]\n    list9 = [1,2,3,4,5]\n   \
    \ list10 = [1,2,3,4,5,6,7,8,9,10]\n    list11 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \    list12 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n\
    \    list13 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \    list14 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to round the average to the nearest integer, not\
    \ just round the average to the nearest integer.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I will edit my answer to include a solution that rounds to the nearest\
    \ integer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n  \
    \  return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \n    Factorial of\
    \ a number is the number of times a number multiplied by itself is \n    repeated.\
    \ \n    Example:\n                    factorial(5)\n                    120\n\
    \    \"\"\"", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,30)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,40)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,50)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,60)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,70)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,80)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,90)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,100)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,1000)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(10,10000)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,100000)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,1000000)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(10,10000000)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,100000000)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,1000000000)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(10,10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(10,100000000000)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,1000000000000)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(10,1000000000002)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(10,1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,1000000000004)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,1000000000005)\n\
    </cell>", "    if n < m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n) * n\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,4)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,3)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,2)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,1)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,0)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-1)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-2)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-3)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-4)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-6)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-7)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-8)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-9)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-11)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-12)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-13)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-14)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-15)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-16)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-17)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,-18)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,-19)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,-20)\n</cell>\n<code language=julia-1.5>\nroun", "    if n > m \n\
    \        rounded_avg = -1\n    else\n        rounded_avg = round(m*(n+1)/2 + n/2)\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the sum of its\
    \ digits. \n    For example, sumdigits(123) = 1 + 2 + 3 = 6\n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n         \
    \           sumdigits(123) = 6\n    \"\"\"", "    if m > n then return -1\n  \
    \  else return round(Int64(n)/Int64(m))\nend\nrounded_avg(4,5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two integers and returns the sum of\
    \ the integers \n    between them inclusive.\n    Round the answer to the nearest\
    \ integer and convert that to binary.\n    Example:\n                    \"\"\"",
  "    if n <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in two integers n and m and returns their\
    \ sum.\n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    \"\"\"", "    if n > m \n        return -1\n\
    \    else \n        return round(m/n) * n\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m>n \n        return -1\n    else\n\
    \        return round(m/n) * n\n    end\nend\nrounded_avg(4,5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \                    factorial(5)\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120", "    if n <= m \n        return\
    \ n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two integers n and m and returns their\
    \ sum.\nExample: \nn = 5, m = 6\nsum = 5 + 6\nn = 6, m = 5\nsum = 1 + 6\nn = 7,\
    \ m = 7\nsum = 1 + 7\nn = 8, m = 8\nsum = 1 + 8\nn = 9, m = 9\nsum = 1 + 9\nn\
    \ = 10, m = 10\nsum = 1 + 10\nn = 11, m = 11\nsum = 1 + 11\nn = 12, m = 12\nsum\
    \ = 1 + 12\nn = 13, m = 13\nsum = 1 + 13\nn = 14, m = 14\nsum = 1 + 14\nn = 15,\
    \ m = 15\nsum = 1 + 15\nn = 16, m = 16\nsum = 1 + 16\nn = 17, m = 17\nsum = 1\
    \ + 17\nn = 18, m = 18\nsum = 1 + 18\nn = 19, m = 19\nsum = 1 + 19\nn = 20, m\
    \ = 20\nsum = 1 + 20\nn = 21, m = 21\nsum = 1 + 21\nn = 22, m = 22\nsum = 1 +\
    \ 22\nn = 23, m = 23\nsum = 1 + 23\nn = 24, m = 24\nsum = 1 + 24\nn = 25, m =\
    \ 25\nsum = 1 + 25\nn = 26, m = 26\nsum = 1 + 26\nn = 27, m = 27\nsum = 1 + 27\n\
    n = 28, m = 28\nsum = 1 + 28\nn = 29, m = 29\nsum = 1 + 29\nn = 30, m = 30\nsum\
    \ = 1 + 30\nn = 31, m = 31\nsum = 1 + 31\nn = 32, m = 32\nsum = 1 + 32\nn = 33,\
    \ m = 33\nsum = 1 + 33\nn = 34, m = 34\nsum = 1 + 34\nn = 35, m = 35\nsum = 1\
    \ + 35\nn = 36, m = 36\nsum = 1 + 36\nn = 37, m = 37\nsum = 1 + 37\nn = 38, m\
    \ = 38\nsum = 1 + 38\nn = 39, m = 39\nsum = 1 + 39\nn = 40, m = 40\nsum = 1 +\
    \ 40\nn = 41, m = 41\nsum = 1 + 41\nn = 42, m = 42\nsum = 1 + 42\nn = 43, m =\
    \ 43\nsum = 1 + 43\nn = 44, m = 44\nsum = 1 + 44\nn = 45, m = 45\nsum = 1 + 45\n\
    n = 46, m = 46\nsum = 1 + 46\nn = 47, m = 47\nsum = 1 + 47\nn = 48, m = 48\nsum\
    \ = 1 + 48\nn = 49, m = 49\nsum = 1 + 49\nn = 50, m = 50\nsum = 1 + 50\nn = 51,\
    \ m = 51\nsum = 1 + 51\nn = 52, m = 52\nsum = 1 + 52\nn = 53, m = 53\nsum = 1\
    \ + 53\n", "    if n <= m \n        return n\n    else\n        return -1\n  \
    \  end\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two integers n and m and returns True if n is divisible by m and False\
    \ otherwise. \nExample: \nn = 10, m = 5\nn = 10, m = 7\nn = 10, m = 9\nn = 10,\
    \ m = 11\nn = 10, m = 13\nn = 10, m = 17\nn = 10, m = 19\nn = 10, m = 23\nn =\
    \ 10, m = 29\nn = 10, m = 31\nn = 10, m = 43\nn = 10, m = 47\nn = 10, m = 53\n\
    n = 10, m = 59\nn = 10, m = 61\nn = 10, m = 67\nn = 10, m = 71\nn = 10, m = 73\n\
    n = 10, m = 79\nn = 10, m = 83\nn = 10, m = 89\nn = 10, m = 93\nn = 10, m = 97\n\
    n = 10, m = 101\nn = 10, m = 107\nn = 10, m = 113\nn = 10, m = 119\nn = 10, m\
    \ = 123\nn = 10, m = 127\nn = 10, m = 131\nn = 10, m = 137\nn = 10, m = 141\n\
    n = 10, m = 147\nn = 10, m = 151\nn = 10, m = 157\nn = 10, m = 161\nn = 10, m\
    \ = 167\nn = 10, m = 173\nn = 10, m = 179\nn = 10, m = 183\nn = 10, m = 189\n\
    n = 10, m = 193\nn = 10, m = 199\nn = 10, m = 203\nn = 10, m = 209\nn = 10, m\
    \ = 213\nn = 10, m = 217\nn = 10, m = 221\nn = 10, m = 227\nn = 10, m = 231\n\
    n = 10, m = 237\nn = 10, m = 241\nn = 10, m = 247\nn = 10, m = 251\nn = 10, m\
    \ = 257\nn = 10, m = 263\nn = 10, m = 269\nn = 10, m = 273\nn = 10, m = 279\n\
    n = 10, m = 283\nn = 10, m = 289\nn = 10, m = 293\nn = 10, m = 299\nn = 10, m\
    \ = 303\nn = 10, m = 309\nn = 10, m = 313\nn = 10, m = 317\nn = 10, m = 321\n\
    n = 10, m = 325\nn = 10, m = 329\nn = 10, m = 333\nn = 10, m = 339\nn = 10, m\
    \ = 343\nn = 10, m = 349\nn = 10, m = 353\nn = 10, m = 359\nn = 10, m = 363\n\
    n = 10, m = 369\nn = 10, m = 373\nn = 10, m = 379\nn = 10, m = 383\nn = 10, m\
    \ = 389\nn = 10, m = 3", "    if n <= m \n        return n\n    else \n      \
    \  return -1\n    end\nend\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"You are given two positive integers n and m, and your task is to compute\
    \ the\n    average of the integers from n through m (including n and m). \n  \
    \  Round the answer to the nearest integer and convert that to binary.\n    If\
    \ n is greater than m, return -1.\n    Example:\n                    \"\"\"",
  "    if n <= m \n        return n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in two integers and returns\
    \ the sum of the integers. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    \"\"\"", "    if n < m \n\
    \        return -1\n    else \n        return round(m/n::Int64)\n    end\nend\n\
    rounded_avg(5,3)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a number. \n    Round the answer to the nearest integer and\
    \ convert that to binary.\n    Example:\n                    factorial(5)\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          ", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n) * n\n    end\n    return rounded_avg\nend", "    if n > m \n  \
    \      return -1\n    else \n        return round(Float64(n)/Float64(m))\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if n == m \n        rounded_avg = round(n,digits=0) \n    \
    \    return rounded_avg \n    else \n        rounded_avg = round(n,digits=0) \n\
    \        rounded_avg += round(m,digits=0) \n        return rounded_avg \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers and returns the sum of the integers\
    \ \n    between those two numbers. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n",
  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,3)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,2)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,1)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,0)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-1)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-2)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-3)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-4)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-6)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-7)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-8)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-9)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-10)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-11)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-12)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-13)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-14)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-15)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-16)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-17)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(5,-18)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(5,-19)\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,-20)\n</cell>\n\
    <code language=julia-1.3>\nroun", "    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\nend", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\nrounded_avg(5,4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m, and returns the sum of all integers from n through\
    \ m (including n and m). \nRound the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_sum(5,4)\n\
    rounded_sum(5,5)\nrounded_sum(5,6)\nrounded_sum(5,7)\nrounded_sum(5,8)\nrounded_sum(5,9)\n\
    rounded_sum(5,10)\nrounded_sum(5,11)\nrounded_sum(5,12)\nrounded_sum(5,13)\nrounded_sum(5,14)\n\
    rounded_sum(5,15)\nrounded_sum(5,16)\nrounded_sum(5,17)\nrounded_sum(5,18)\nrounded_sum(5,19)\n\
    rounded_sum(5,20)\nrounded_sum(5,21)\nrounded_sum(5,22)\nrounded_sum(5,23)\nrounded_sum(5,24)\n\
    rounded_sum(5,25)\nrounded_sum(5,26)\nrounded_sum(5,27)\nrounded_sum(5,28)\nrounded_sum(5,29)\n\
    rounded_sum(5,30)\nrounded_sum(5,31)\nrounded_sum(5,32)\nrounded_sum(5,33)\nrounded_sum(5,34)\n\
    rounded_sum(5,35)\nrounded_sum(5,36)\nrounded_sum(5,37)\nrounded_sum(5,38)\nrounded_sum(5,39)\n\
    rounded_sum(5,40)\nrounded_sum(5,41)\nrounded_sum(5,42)\nrounded_sum(5,43)\nrounded_sum(5,44)\n\
    rounded_sum(5,45)\nrounded_sum(5,46)\nrounded_sum(5,47)\nrounded_sum(5,48)\nrounded_sum(5,49)\n\
    rounded_sum(5,50)\nrounded_sum(5,51)\nrounded_sum(5,52)\nrounded_sum(5,53)\nrounded_sum(5,54)\n\
    rounded_sum(5,55)\nrounded_sum(5,56)\nrounded_sum(5,57)\nrounded_sum(5,58)\nrounded_sum(5,59)\n\
    rounded_sum(5,60)\nrounded_sum(5,61)\nrounded_sum(5,62)\nrounded_sum(5,63)\nrounded_sum(5,64)\n\
    rounded_sum(5,65)\nrounded_sum(5,", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,30)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,31)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg", "    if n <= m \n        return n\n \
    \   else \n        return -1\n    end\nend\nrounded_avg(5,10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two integers n and m and returns their\
    \ sum, rounded to\nthe nearest integer. Round the answer to the nearest integer\
    \ and convert that to binary.\nIf n is greater than m, return -1.\nExample:\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\nrounded_sum(5,10)\n\
    rounded_sum(5,10)\nrounded_sum(5,10)", "    if m == 0 \n        return -1\n  \
    \  else if n == m \n        return n\n    else \n        return round(n + (m -\
    \ n)/2)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,0)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,1)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,2)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,3)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,4)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,6)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,7)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,8)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,9)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,11)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,12)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,13)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,14)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,15)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,16)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,17)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,18)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,19)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,21)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,22)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,23)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,24)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,25)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,26)\n</cell",
  "    if n < m \n        return -1\n    else \n        return round(m*(n+1)/2+n)/2\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of characters in a string.\n\
    Example:\n    my_string = \"Hello World\"\n    length(my_string)\n    should return\
    \ 11.\nHint: Use the function length() from the string package.", "    if n >\
    \ m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n) * n\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,26)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,27)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,28)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,29)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,30)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,31)\n</cell>\n<code language=juli", " \
    \   if m > n \n        return -1\n    else \n        return round(m+(n-m)/2)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to round the average to the nearest integer, not just round the average\
    \ to the nearest integer.\n<|/ c |>\n<| a |>\n<code>", "    if n <= m \n     \
    \   rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n    end\n  \
    \  return rounded_avg\nend\nrounded_avg(4,6)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    binary_to_decimal(binary::String)\n    Convert a binary string to\
    \ a decimal integer.\n    Example:\n                    binary_to_decimal(\"1100\"\
    )\n    \"\"\"", "    if n <= m \n        return n\n    else\n        return -1\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if n is\
    \ greater than m.\n<|/ c |>\n<| c |>\nIt does work. Try it out. `n` is greater\
    \ than `m` so `n <= m` is true.\n<|/ c |>\n<| c |>\nI see what you mean. My bad.\n\
    <|/ c |>\n<| a |>\n<code>", "    if n == m \n        rounded_avg = -1\n    elseif\
    \ n < m \n        rounded_avg = (m+n)/2\n    else\n        rounded_avg = (n+m)/2\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(4,6)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,7)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,8)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,9)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,11)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,12)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,13)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,14)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,15)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,16)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,17)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,18)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,19)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,21)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,22)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,23)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,24)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,25)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,26)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,27)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,28)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,29)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,30)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,", "    if n <= m \n        return n\n    else\n        return -1\n\
    \    end\nend\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,6)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,26)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,27)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,28)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,29)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,30)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,31)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,32)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,33)\n</cell>\n",
  "    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg = rounded_avg\
    \ * m\n        rounded_avg = rounded_avg + n\n        rounded_avg = rounded_avg\
    \ / m\n        return rounded_avg\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,6)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,7)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,8)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,9)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,11)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,12)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,13)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,14)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,15)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,16)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,17)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,18)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,19)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,21)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,22)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,23)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,24)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,25)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,26)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,27)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,28)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,29)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,30)\n</cell", "    if n < m \n        return -1\n    else \n   \
    \     return round(Int64(n+m)/2)\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,20)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,0)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,-20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-30)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-100)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-10000)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-100000)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-10000000)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-100000000)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(10,-10000000000)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-100000000000)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000001)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,-1000000000002)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-1000000000003)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000004)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000005)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,-1000000000006)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10,-1000000000007)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000008)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(10,-1000000000009", "    if n\
    \ <= m \n        return -1\n    else \n        return round(m*(m/n+1)/2) \n  \
    \  end\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two integers n and m and returns their sum, rounded to\nthe nearest\
    \ integer.", "    if n < m \n        return -1\n    else \n        return round(m/n)\
    \ * n\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,2)\n</cell>\n<code\
    \ language=julia-1.4>\nrounded_avg(5,3)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,26)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,27)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,28)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,29)\n</cell>\n\
    <code language=julia-1.4>\nroun", "    if n > m \n        rounded_avg = -1\n \
    \   else\n        rounded_avg = round(m/n) * n\n    end\n    return rounded_avg\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to round the average to the nearest integer, not just round the average\
    \ to nearest integer.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I edited\
    \ my answer to reflect that.\n<|/ c |>\n<| a tags=julia |>\nI came up with a solution\
    \ that is similar to what was suggested by but uses no loops and is more efficient\
    \ than my original solution:\n<code>", "    if m > n \n        return -1\n   \
    \ else \n        return round(Float64(n)/Float64(m))\nend\nrounded_avg(4,5)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nYou are given two positive integers\
    \ n and m, and your task is to compute the\naverage of the integers from n through\
    \ m (including n and m). \nRound the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample: \n\"\"\"", " \
    \   if n <= m \n        return n\n    else \n        return -1\n    end\nend\n\
    rounded_avg(5,5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a number. \n    Round the answer to the nearest integer and\
    \ convert that to binary.\n    Example:\n                    factorial(5)\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two numbers and returns the sum of the numbers. \n    Round the answer to\
    \ the nearest integer and convert that to binary.\n    Example:\n            \
    \        \"\"\"", "    if m>n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n         \
    \           \n                    \n                    \n                   \
    \ \n                    \n                    \n                    \n       \
    \             \n                    \n                    \n                 \
    \   \n                    \n                    \n                    \n     \
    \               \n                    \n                    \n               \
    \     \n                    \n                    \n                    \n   \
    \                 \n                    \n                    \n             \
    \       \n                    \n                    \n                    \n \
    \                   \n                    \n                    \n           \
    \         \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n          \
    \          \n                    \n                    \n                    \n\
    \                    \n                    \n                    \n", "    if\
    \ n > m \n        return -1\n    else \n        return round(m/n) * n\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers n and m and returns their sum.\nIf n is\
    \ greater than m, return -1.\nExample: \nn = 10, m = 5\nOutput: 15", "    if n\
    \ > m \n        return -1\n    else \n        return round(m*(n+m)/2)\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,0)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,1)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,2)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,3)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,4)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.0>\n\
    rounded_", "    if m > n \n        return -1\n    elseif m == n\n        return\
    \ m\n    else\n        return round(m/n)\n    end\nend\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    binary_to_decimal(n::Int64)::Int64", " \
    \   if n <= m \n        return n\n    else\n        return -1\n    end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't answer the question. He wants to round\
    \ the average to nearest integer, not round to nearest integer.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a solution that rounds to nearest integer.\n\
    <|/ c |>\n<| c |>\nI see you edited your answer to include a solution that rounds\
    \ to nearest integer. That's great, but you still haven't answered the question.\
    \ He wants to round the average to nearest integer, not round to nearest integer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that rounds to nearest\
    \ integer.\n<|/ c |>\n<| c |>\nI see you edited your answer to include a solution\
    \ that rounds to nearest integer. That's great, but you still haven't answered\
    \ the question. He wants to round the average to nearest integer, not round to\
    \ nearest integer.\n<|/ c |>\n<| a |>\nThis is not an answer, but a comment on\
    \ another answer. \nThe question asks how to round the average to nearest integer,\
    \ not round to nearest integer. \nThe answer by is correct for rounding to the\
    \ nearest integer, but does not answer the question. \nThe question asks how to\
    \ round the average to nearest integer, not round to nearest integer. \nThe answer\
    \ by is correct for rounding to the nearest integer, but does not answer the question.\
    \ \nThe question asks how to round the average to nearest integer, not round to\
    \ nearest integer. \nThe answer by is correct for rounding to the nearest integer,\
    \ but does not answer the question. \nThe question asks how to round the average\
    \ to nearest integer, not round to nearest integer. \nThe answer by is correct\
    \ for rounding to the nearest integer, but does not answer the question. \nThe\
    \ question asks how to round the average to nearest integer, not round to nearest\
    \ integer. \nThe answer by is correct for rounding to the nearest integer, but\
    \ does not answer the question. \nThe question asks how to round the average to\
    \ nearest integer, not round to nearest integer. \nThe answer by is correct for\
    \ rounding to the nearest integer, but does not answer the question. \nThe question\
    \ asks how to round the average to nearest integer, not round to nearest integer.\
    \ \nThe answer by is correct for rounding to the nearest integer, but does not\
    \ answer the question. \nThe question asks how to round the average to nearest\
    \ integer, not round to nearest integer. \nThe answer by is correct for rounding\
    \ to the nearest integer, but does not answer the question. \n", "    if n > m\
    \ \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m + 0.5)*m\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \                    factorial(5)\n                    120\n    \"\"\"", "   \
    \ if n > m \n        return -1\n    else\n        return round(m+(n-m)/2)\n  \
    \  end\nend\nrounded_avg(5,3)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \n    Round the answer to the nearest\
    \ integer and convert that to binary.\n    Example:\n                    factorial(5)\n\
    \                    120\n    \"\"\"", "    if m > n \n        error(\"m must\
    \ be less than n\")\n    elseif m == n\n        return m\n    else\n        avg\
    \ = (n + m) / 2\n        return round(avg)\n    end\nend\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    binary_to_decimal(s::String)::Int64\n \
    \   Convert binary string to decimal integer.\n    Example:\n    binary_to_decimal(\"\
    10\")\n    returns 10\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(m/n) * n\n    end\n    return rounded_avg\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a number. \n    For example, factorial(5) = 5 x 4 x 3 x 2 x\
    \ 1 = 120\n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n  \
    \                  rounded_fac = round(120/5)*5\n                    rounded_fac\
    \ = 120/5\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n                    rounded_fac\
    \ = 120\n                    rounded_fac = 120\n", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end", "    if n == m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end", "    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg =\
    \ rounded_avg * m\n        rounded_avg = rounded_avg + n\n        rounded_avg\
    \ = rounded_avg / m\n        return rounded_avg\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,0)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,1)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,2)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,3)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n<code language=juli", " \
    \   if n <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\nrounded_avg(5,3)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    \    Round the answer to the nearest integer and convert that to binary.\n   \
    \ Example:\n                    factorial(5)\n                    120\n    \"\"\
    \"", "    if n <= m \n        rounded_avg = round(n/m) \n        rounded_avg =\
    \ rounded_avg * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg\
    \ = rounded_avg % 2 \n        rounded_avg = rounded_avg \n    else \n        rounded_avg\
    \ = -1 \n    return rounded_avg \nend\n</code>\n<|/ a tags=julia,rounding |>\n\
    <| a |>\n<code>", "    if n <= m \n        return n\n    else \n        return\
    \ -1\nend", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n) * n\n    end\n    return rounded_avg\nend\nrounded_avg(5,3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the numbers. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    \"\"\"", "    if n <= m \n\
    \        return n\n    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell",
  "    if n <= m \n        return n\n    else\n        return -1\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if n < m \n        return\
    \ -1\n    else \n        return round(Int64(n)/Int64(m))\n    end\nend\nrounded_avg(5,4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns true if n is divisible by m and false otherwise. \nExample: \n\
    rounded_avg(5,4)\nrounded_avg(5,5)\nrounded_avg(5,6)\nrounded_avg(5,7)\nrounded_avg(5,8)\n\
    rounded_avg(5,9)\nrounded_avg(5,10)\nrounded_avg(5,11)\nrounded_avg(5,12)\nrounded_avg(5,13)\n\
    rounded_avg(5,14)\nrounded_avg(5,15)\nrounded_avg(5,16)\nrounded_avg(5,17)\nrounded_avg(5,18)\n\
    rounded_avg(5,19)\nrounded_avg(5,20)\nrounded_avg(5,21)\nrounded_avg(5,22)\nrounded_avg(5,23)\n\
    rounded_avg(5,24)\nrounded_avg(5,25)\nrounded_avg(5,26)\nrounded_avg(5,27)\nrounded_avg(5,28)\n\
    rounded_avg(5,29)\nrounded_avg(5,30)\nrounded_avg(5,31)\nrounded_avg(5,32)\nrounded_avg(5,33)\n\
    rounded_avg(5,34)\nrounded_avg(5,35)\nrounded_avg(5,36)\nrounded_avg(5,37)\nrounded_avg(5,38)\n\
    rounded_avg(5,39)\nrounded_avg(5,40)\nrounded_avg(5,41)\nrounded_avg(5,42)\nrounded_avg(5,43)\n\
    rounded_avg(5,44)\nrounded_avg(5,45)\nrounded_avg(5,46)\nrounded_avg(5,47)\nrounded_avg(5,48)\n\
    rounded_avg(5,49)\nrounded_avg(5,50)\nrounded_avg(5,51)\nrounded_avg(5,52)\nrounded_avg(5,53)\n\
    rounded_avg(5,54)\nrounded_avg(5,55)\nrounded_avg(5,56)\nrounded_avg(5,57)\nrounded_avg(5,58)\n\
    rounded_avg(5,59)\nrounded_avg(5,60)\nrounded_avg(5,61)\nrounded_avg(5,", "  \
    \  if n < m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n)\
    \ * n\n    end\n    return rounded_avg\nend", "    if n <= m \n        return\
    \ n\n    else\n        return -1\n    end\nend\nrounded_avg(5,10)\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    binary_to_decimal(s::String)", "    if n <=\
    \ m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n \
    \   end\n    return rounded_avg\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>", "    if n <= m \n        rounded_avg = round(n/m)\n    else\n \
    \       rounded_avg = -1\n    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that computes the factorial of a\
    \ number. \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    factorial(5)\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n  \
    \  return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in two integers n and m and returns the product of the\
    \ integers from n through m. \nRound the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample: \nrounded_prod(4,5)\n\
    rounded_prod(5,4)\nrounded_prod(4,4)\nrounded_prod(4,3)\nrounded_prod(4,2)\nrounded_prod(4,1)\n\
    rounded_prod(4,0)\nrounded_prod(0,4)\nrounded_prod(0,5)\nrounded_prod(0,0)\nrounded_prod(-1,4)\n\
    rounded_prod(-1,5)\nrounded_prod(-1,0)\nrounded_prod(-2,4)\nrounded_prod(-2,5)\n\
    rounded_prod(-2,0)\nrounded_prod(-3,4)\nrounded_prod(-3,5)\nrounded_prod(-3,0)\n\
    rounded_prod(-4,4)\nrounded_prod(-4,5)\nrounded_prod(-4,0)\nrounded_prod(-5,4)\n\
    rounded_prod(-5,5)\nrounded_prod(-5,0)\nrounded_prod(-6,4)\nrounded_prod(-6,5)\n\
    rounded_prod(-6,0)\nrounded_prod(-7,4)\nrounded_prod(-7,5)\nrounded_prod(-7,0)\n\
    rounded_prod(-8,4)\nrounded_prod(-8,5)\nrounded_prod(-8,0)\nrounded_prod(-9,4)\n\
    rounded_prod(-9,5)\nrounded_prod(-9,0)\nrounded_prod(-10,4)\nrounded_prod(-10,5)\n\
    rounded_prod(-10,0)\nrounded_prod(-11,4)\nrounded_prod(-11,5)\nrounded_prod(-11,0)\n\
    rounded_prod(-12,4)\nrounded_prod(-12,5)\nrounded_prod(-12,0)\nrounded_prod(-13,4)\n\
    rounded_prod(-13,5)\nrounded_prod(-13,0)\nrounded_prod(-14,4)\nrounded_prod(-14,5)\n\
    rounded_prod(-14,0)\nrounded_prod(-15,4)\nrounded_prod(-15,5)\nrounded_prod(-15,0)\n\
    rounded_prod(-16,4)\nrounded_prod(-16,5)\nrounded_prod(-16,0)\nrounded_prod(-17,4)\n\
    rounded_prod(-17,5)\nrounded_prod(-17,0)\n", "    if m == 0 \n        return \"\
    -1\"\n    else if n == m \n        return n\n    else \n        return round(m/n)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(5,0)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,1)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,2)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,3)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,4)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,26)\n</cell>",
  "    if n < m \n        return -1\n    else \n        return round(m*(n+1)/2+n)/2\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \n    Factorial\
    \ of a number is defined as the product of all the integers up to and including\
    \ that number.\n    Example:\n                    5! = 1*2*3*4*5 = 120\n     \
    \               5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5 = 120\n\
    \                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*5 = 120\n                    5! = 1*2*3*4*5\
    \ = 120\n                    5! = 1*2*3*4*", "    if n < m \n        return -1\n\
    \    else \n        return round(m/n) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,3)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(5,30)\n</cell>\n<code language=julia-1.4>\nroun", "    if n > m \n\
    \        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend", "    if n == m \n        rounded_avg =\
    \ -1\n    else\n        rounded_avg = round(n / m) * m\n    end\n    return rounded_avg\n\
    end", "    if n < m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m) + n\n    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a number.\
    \ \nThe factorial of a number $n$ is defined as:\n$$n! = n \\times n-1 \\times\
    \ n-2 \\times .... 1 \\times 0$$\nWrite a recursive function that computes the\
    \ factorial of a number.", "    if n > m \n        return -1\n    else \n    \
    \    return round(Int64(n)/Int64(m))\nend", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n  \
    \  return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns the number of digits in m that are less than or equal to n.",
  "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n)\
    \ * n\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    binary_to_decimal(binary::String)", "    if\
    \ n > m \n        return -1\n    else \n        return round(m/n) * n\nend", " \
    \   if n <= m \n        rounded_avg = round(n/m)*m \n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\nrounded_avg(5,10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number. \nThe factorial\
    \ of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2 \\times ....\
    \ \\times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120\nWrite a function that computes the factorial of a number using\
    \ recursion.\nThe factorial of a number $n$ is defined as:\n$$\nn! = n \\times\
    \ n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\nFor example, 5! = 5 \\\
    times 4 \\times 3 \\times 2 \\times 1 = 120\nWrite a function that computes the\
    \ factorial of a number using recursion.\nThe factorial of a number $n$ is defined\
    \ as:\n$$\nn! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\n\
    For example, 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\nWrite a function\
    \ that computes the factorial of a number using recursion.\nThe factorial of a\
    \ number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2 \\times .... \\\
    times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3 \\times 2 \\times\
    \ 1 = 120\nWrite a function that computes the factorial of a number using recursion.\n\
    The factorial of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2\
    \ \\times .... \\times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times\
    \ 3 \\times 2 \\times 1 = 120\nWrite a function that computes the factorial of\
    \ a number using recursion.\nThe factorial of a number $n$ is defined as:\n$$\n\
    n! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\nFor example,\
    \ 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\nWrite a function that\
    \ computes the factorial of a number using recursion.\nThe factorial of a number\
    \ $n$ is defined as:\n$$\nn! = n \\times n-1 \\", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n  \
    \  return rounded_avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,0)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,1)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,2)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,3)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,4)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.0>\nrounded_avg(", "    if\
    \ n > m \n        return -1\n    else \n        return round(Float64(n)/Float64(m))\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two positive integers n and m, and returns\
    \ the sum of the integers from n through m. \n    Round the answer to the nearest\
    \ integer and convert that to binary.\n    Example:\n                    5 + 6\n\
    \                    11\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1\n                    -1\n                \
    \    -1\n                    -1\n                    -1\n                    -1\n\
    \                    -1\n                    -1\n                    -1\n    \
    \                -1\n                    -1\n                    -1\n        \
    \            -1\n                    -1\n                    -1\n            \
    \        -1\n                    -1", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend", " \
    \   if n <= m \n        return n\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,6)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,7)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,8)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,9)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,11)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,12)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,13)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,14)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,15)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,16)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,17)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,18)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,19)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,21)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,22)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,23)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,24)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,25)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,26)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,27)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,28)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,29)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,30)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,31)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,32)\n</cell>\n<code language=julia-1.5>\n\
    rounded_", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end", "    if n <= m \n        return n\n    else \n        return -1\n    end\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list.\nExample:\
    \ \n    sum([1,2,3])\n    returns 6\nHint: Use a for loop to iterate through the\
    \ list.", "    if n <= m \n        return n\n    else \n        return -1\nend",
  "    if n <= m \n        return n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns their sum.\n\
    If n is greater than m, return -1.\nExample: \nn = 10, m = 5\nOutput: 15\nn =\
    \ 10, m = 10\nOutput: -1", "    if m > n \n        return -1\n    else \n    \
    \    return round(Int64(n)/Int64(m))\nend", "    if m > n then return -1\n   \
    \ else return round(m/n) * n\nend", "    if m>n \n        return -1\n    elseif\
    \ m==0\n        return -1\n    elseif n==0\n        return -1\n    elseif n==m\n\
    \        return n\n    else\n        return round(m/n::Int64)\n    end\nend\n\
    rounded_avg(4,5)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a\
    \ positive integer n and returns the number of digits\nof the number in base 10.\
    \ \nExample: \nn = 123 \ndigits(n) = 2 \nn = 1234 \ndigits(n) = 3 \nn = 12345\
    \ \ndigits(n) = 4", "    if n == m \n        return -1\n    else \n        return\
    \ round(m*(n+1)/2 + n)/2\nend", "    if n <= m \n        rounded_avg = round(n/m)\
    \ \n        return rounded_avg\n    else\n        rounded_avg = -1\n        return\
    \ rounded_avg\n    end\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes in two integers n and m, and returns True if n is divisible\
    \ by m, and False otherwise. \nExample: \nrounded_avg(5,6)\nrounded_avg(5,5)\n\
    rounded_avg(5,4)\nrounded_avg(5,3)\nrounded_avg(5,2)\nrounded_avg(5,1)\nrounded_avg(5,0)\n\
    rounded_avg(6,0)\nrounded_avg(7,0)\nrounded_avg(8,0)\nrounded_avg(9,0)\nrounded_avg(10,0)\n\
    rounded_avg(11,0)\nrounded_avg(12,0)\nrounded_avg(13,0)\nrounded_avg(14,0)\nrounded_avg(15,0)\n\
    rounded_avg(16,0)\nrounded_avg(17,0)\nrounded_avg(18,0)\nrounded_avg(19,0)\nrounded_avg(20,0)\n\
    rounded_avg(21,0)\nrounded_avg(22,0)\nrounded_avg(23,0)\nrounded_avg(24,0)\nrounded_avg(25,0)\n\
    rounded_avg(26,0)\nrounded_avg(27,0)\nrounded_avg(28,0)\nrounded_avg(29,0)\nrounded_avg(30,0)\n\
    rounded_avg(31,0)\nrounded_avg(32,0)\nrounded_avg(33,0)\nrounded_avg(34,0)\nrounded_avg(35,0)\n\
    rounded_avg(36,0)\nrounded_avg(37,0)\nrounded_avg(38,0)\nrounded_avg(39,0)\nrounded_avg(40,0)\n\
    rounded_avg(41,0)\nrounded_avg(42,0)\nrounded_avg(43,0)\nrounded_avg(44,0)\nrounded_avg(45,0)\n\
    rounded_avg(46,0)\nrounded_avg(47,0)\nrounded_avg(48,0)\nrounded_avg(49,0)\nrounded_avg(50,0)\n\
    rounded_avg(51,0)\nrounded_avg(52,0)\nrounded_avg(53,0)\nrounded_avg(54,0)\nrounded_avg(55,0)\n\
    rounded_avg(56,0)\nrounded_avg(57,0)\nrounded_", "    if n < m \n        return\
    \ -1\n    else \n        return round(m/n::Int64)*n\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, but I wonder why you use `Int64` instead\
    \ of `Int`?\n<|/ c |>\n<| c |>\nI used Int64 because I wanted to be able to use\
    \ negative numbers. Int would not allow me to do that.\n<|/ c |>\n<| c |>\n`Int`\
    \ also allows negative numbers. `Int` just has less bits to represent positive\
    \ numbers. `Int64` has more bits to represent positive numbers. `Int` has more\
    \ bits to represent negative numbers. `Int64` has more bits to represent negative\
    \ numbers. `Int` has more bits to represent positive numbers. `Int64` has more\
    \ bits to represent negative numbers. `Int` has more bits to represent positive\
    \ numbers. `Int64` has more bits to represent negative numbers. `Int` has more\
    \ bits to represent positive numbers. `Int64` has more bits to represent negative\
    \ numbers. `Int` has more bits to represent positive numbers. `Int64` has more\
    \ bits to represent negative numbers. `Int` has more bits to represent positive\
    \ numbers. `Int64` has more bits to represent negative numbers. `Int` has more\
    \ bits to represent positive numbers. `Int64` has more bits to represent negative\
    \ numbers. `Int` has more bits to represent positive numbers. `Int64` has more\
    \ bits to represent negative numbers. `Int` has more bits to represent positive\
    \ numbers. `Int64` has more bits to represent negative numbers.\n<|/ c |>\n<|\
    \ c |>\n`Int` has more bits to represent negative numbers. `Int64` has more bits\
    \ to represent negative numbers. `Int` has more bits to represent positive numbers.\
    \ `Int64` has more bits to represent positive numbers. `Int` has more bits to\
    \ represent negative numbers. `Int64` has more bits to represent negative numbers.\
    \ `Int` has more bits to represent positive numbers. `Int64` has more bits to\
    \ represent negative numbers. `Int` has more bits to represent positive numbers.\
    \ `Int64` has more bits to represent negative numbers. `Int` has more bits to\
    \ represent positive numbers. `Int64` has more bits to represent negative numbers.\
    \ `Int` has more bits to represent positive numbers. `Int64` has more bits to\
    \ represent negative numbers. `Int` has more bit", "    if m>n then return -1\n\
    \    else return round(Int64(n)/Int64(m))\nend\nrounded_avg(4,5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two integers and returns the sum of\
    \ the integers \n    between them inclusive.\n    Example:\n                 \
    \   \"\"\"", "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns the sum of the integers from n through m. \nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 20\nOutput: \n10 + 20 = 40\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 10\nOutput: \n10 + 10 = 20\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 5\nOutput: \n10 + 5 = 15\nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 10\nOutput: \n10 + 10 = 20\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 5\nOutput: \n10 + 5 = 15\nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 10\nOutput: \n10 + 10 = 20\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 5\nOutput: \n10 + 5 = 15\nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 10\nOutput: \n10 + 10 = 20\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 5\nOutput: \n10 + 5 = 15\nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 10\nOutput: \n10 + 10 = 20\nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 10, m = 5\nOutput: \n10 + 5 = 15\nRound the answer to the\
    \ nearest integer and convert that to binary.\nIf n", "    if n < m \n       \
    \ return -1\n    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n         \
    \           factorial(4)\n                    16\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n        \
    \            4! = 1*2*3*4\n                    4! = 1*2*3*4\n                \
    \    4! = 1*2*3*4\n                    4! = 1*2*3*4\n                    4! =\
    \ 1*2*3*4\n                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n        \
    \            4! = 1*2*3*4\n                    4! = 1*2*3*4\n                \
    \    4! = 1*2*3*4\n                    4! = 1*2*3*4\n                    4! =\
    \ 1*2*3*4\n                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n        \
    \            4! = 1*2*3*4\n                    4! = 1*2*3*4\n                \
    \    4! = 1*2*3*4\n                    4! = 1*2*3*4\n                    4! =\
    \ 1*2*3*4\n                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n        \
    \            4! = 1*2*3*4\n                    4! = 1*2*3*4\n                \
    \    4! = 1*2*3*4\n                    4! = 1*2*3*4\n                    4! =\
    \ 1*2*3*4\n                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n        \
    \            4! = 1*2*3*4\n                    4! = 1*2*3*4\n                \
    \    4! = 1*2*3*4\n                    4! = 1*2*3*4\n                    4! =\
    \ 1*2*3*4\n                    4! = 1*2*3*4\n                    4! = 1*2*3*4\n\
    \                    4! = 1*2*3*4\n                    ", "    if n > m \n   \
    \     rounded_avg = -1\n    else\n        rounded_avg = round(n/m + 0.5, digits=2)\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(10,10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in two integers n and m and returns the product\
    \ of the integers from n through m. Round the answer to the nearest integer and\
    \ convert that to binary.\nIf n is greater than m, return -1.\nExample:\nn = 10,\
    \ m = 10\nn = 10, m = 20\nn = 10, m = 30\nn = 10, m = 40\nn = 10, m = 50\nn =\
    \ 10, m = 60\nn = 10, m = 70\nn = 10, m = 80\nn = 10, m = 90\nn = 10, m = 100\n\
    n = 10, m = 110\nn = 10, m = 120\nn = 10, m = 130\nn = 10, m = 140\nn = 10, m\
    \ = 150\nn = 10, m = 160\nn = 10, m = 170\nn = 10, m = 180\nn = 10, m = 190\n\
    n = 10, m = 200\nn = 10, m = 210\nn = 10, m = 310\nn = 10, m = 320\nn = 10, m\
    \ = 330\nn = 10, m = 340\nn = 10, m = 350\nn = 10, m = 360\nn = 10, m = 370\n\
    n = 10, m = 380\nn = 10, m = 390\nn = 10, m = 400\nn = 10, m = 410\nn = 10, m\
    \ = 420\nn = 10, m = 430\nn = 10, m = 440\nn = 10, m = 450\nn = 10, m = 460\n\
    n = 10, m = 470\nn = 10, m = 480\nn = 10, m = 490\nn = 10, m = 500\nn = 10, m\
    \ = 510\nn = 10, m = 520\nn = 10, m = 530\nn = 10, m = 540\nn = 10, m = 550\n\
    n = 10, m = 560\nn = 10, m = 570\nn = 10, m = 580\nn = 10, m = 590\nn = 10, m\
    \ = 600\nn = 10, m = 610\nn = 10, m = 620\nn = 10, m = 630\nn = 10, m = 640\n\
    n = 10, m = 650\nn = 10, m = 660\nn = 10, m = 670\nn = 10, m = 680\nn = 10, m\
    \ = 690\nn = 10, m = 700\nn = 10, m = 710\nn = 10, m = 720\nn = 10, m = 730\n\
    n = 10, m = 740\nn = 10, m = 750\nn = 10, m = 760\nn = 10, m = 770\nn = 10, m\
    \ = 780\nn = 10, m = 790\nn = 10, m = 800\nn = 10, m = 810\nn = 10, m = 820\n\
    n = 10, m = 830\nn = 10, m = 840\nn = 10, m = 850\nn = 10, m = ", "    if n >\
    \ m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that computes the factorial of a number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \                  factorial(5)\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    ", "    if\
    \ n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(m/n)\
    \ * n\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \                    factorial(5)\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120", "    if n > m \n        rounded_avg = -1\n    else\n \
    \       rounded_avg = round(n/m) + round(n/m)\n    end\n    return rounded_avg\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns true if n is divisible by m.", "    if m>n\
    \ \n        return -1\n    else \n        rounded_avg = (n+m)/2\n        return\
    \ round(rounded_avg)\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes in two integers n and m and returns true if n is divisible\
    \ by m and false otherwise.\nExample:\nrounded_avg(4,5)\nrounded_avg(4,6)\nrounded_avg(4,7)\n\
    rounded_avg(4,8)\nrounded_avg(4,9)\nrounded_avg(4,10)\nrounded_avg(4,11)\nrounded_avg(4,12)\n\
    rounded_avg(4,13)\nrounded_avg(4,14)\nrounded_avg(4,15)\nrounded_avg(4,16)\nrounded_avg(4,17)\n\
    rounded_avg(4,18)\nrounded_avg(4,19)\nrounded_avg(4,20)\nrounded_avg(4,21)\nrounded_avg(4,22)\n\
    rounded_avg(4,23)\nrounded_avg(4,24)\nrounded_avg(4,25)\nrounded_avg(4,26)\nrounded_avg(4,27)\n\
    rounded_avg(4,28)\nrounded_avg(4,29)\nrounded_avg(4,30)\nrounded_avg(4,31)\nrounded_avg(4,32)\n\
    rounded_avg(4,33)\nrounded_avg(4,34)\nrounded_avg(4,35)\nrounded_avg(4,36)\nrounded_avg(4,37)\n\
    rounded_avg(4,38)\nrounded_avg(4,39)\nrounded_avg(4,40)\nrounded_avg(4,41)\nrounded_avg(4,42)\n\
    rounded_avg(4,43)\nrounded_avg(4,44)\nrounded_avg(4,45)\nrounded_avg(4,46)\nrounded_avg(4,47)\n\
    rounded_avg(4,48)\nrounded_avg(4,49)\nrounded_avg(4,50)\nrounded_avg(4,51)\nrounded_avg(4,52)\n\
    rounded_avg(4,53)\nrounded_avg(4,54)\nrounded_avg(4,55)\nrounded_avg(4,56)\nrounded_avg(4,57)\n\
    rounded_avg(4,58)\nrounded_avg(4,59)\nrounded_avg(4,60)\nrounded_avg(4,61)\nrounded_avg(4,62)\n",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(4,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.5>",
  "    if n <= m \n        return -1\n    else \n        return round(m/n::Int64)*n\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the number of\
    \ elements in the list that are greater than or equal to 3.", "    if m > n \n\
    \        return -1\n    else \n        return round(Int64(n)/Int64(m))\nend",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n                    \"\"\"", "    if n < m \n\
    \        return -1\n    else\n        return round(Int64(n)/Int64(m))\n    end\n\
    end\nrounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns their sum.\nIf n is greater than m, return\
    \ -1.\nExample: \nn = 4, m = 5\nn = 5, m = 4\nn = 6, m = 5\nn = 7, m = 5\nn =\
    \ 8, m = 5\nn = 9, m = 5\nn = 10, m = 5\nn = 11, m = 5\nn = 12, m = 5\nn = 13,\
    \ m = 5\nn = 14, m = 5\nn = 15, m = 5\nn = 16, m = 5\nn = 17, m = 5\nn = 18, m\
    \ = 5\nn = 19, m = 5\nn = 20, m = 5\nn = 21, m = 5\nn = 22, m = 5\nn = 23, m =\
    \ 5\nn = 24, m = 5\nn = 25, m = 5\nn = 26, m = 5\nn = 27, m = 5\nn = 28, m = 5\n\
    n = 29, m = 5\nn = 30, m = 5\nn = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn =\
    \ 34, m = 5\nn = 35, m = 5\nn = 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39,\
    \ m = 5\nn = 30, m = 5\nn = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn = 34, m\
    \ = 5\nn = 35, m = 5\nn = 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39, m =\
    \ 5\nn = 30, m = 5\nn = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn = 34, m = 5\n\
    n = 35, m = 5\nn = 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39, m = 5\nn =\
    \ 30, m = 5\nn = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn = 34, m = 5\nn = 35,\
    \ m = 5\nn = 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39, m = 5\nn = 30, m\
    \ = 5\nn = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn = 34, m = 5\nn = 35, m =\
    \ 5\nn = 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39, m = 5\nn = 30, m = 5\n\
    n = 31, m = 5\nn = 32, m = 5\nn = 33, m = 5\nn = 34, m = 5\nn = 35, m = 5\nn =\
    \ 36, m = 5\nn = 37, m = 5\nn = 38, m = 5\nn = 39, m = 5\nn = 3", "    if n <=\
    \ m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n \
    \   end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the number of\
    \ positive numbers in the list.\nExample: \n[1,2,3,4,5,6,7,8,9,10] returns 4\n\
    [1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1]\
    \ returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] returns -1\n[1,2,3,4,5,6,7,8,9,10,-1] ",
  "    if m > n then\n        return -1\n    else\n        return round(m*(n+1)/2+n)/2\n\
    \    end\nend\nrounded_avg(4,5)\n</cell>\n<code language=julia-1.0>\n\"\"\"You\
    \ are given two positive integers n and m, and your task is to compute the\n \
    \   average of the integers from n through m (including n and m). \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
    \ than m, return -1.\n    Example:\n                    \"\"\"", "    if n < m\
    \ \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m + 0.5)*m\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns True if n\
    \ is divisible by m, False otherwise. \nExample: \nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n\
    rounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\nrounded_avg(5,6)\n",
  "    if n < m \n        return -1\n    else \n        return round(m*(n+1)/2+n)/2\n\
    end", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(Int64(n/m))\n    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n                    \"\"\"", "  \
    \  if n > m \n        return -1\n    else \n        return round(Int64(n+m)/2)\n\
    end\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two integers n and m and returns true if n\
    \ is divisible by m and false otherwise. \nExample: \nn = 10, m = 5\nn = 10, m\
    \ = 10\nn = 10, m = 15\nn = 10, m = 20\nn = 10, m = 25\nn = 10, m = 30\nn = 10,\
    \ m = 35\nn = 10, m = 40\nn = 10, m = 45\nn = 10, m = 50\nn = 10, m = 55\nn =\
    \ 10, m = 60\nn = 10, m = 65\nn = 10, m = 70\nn = 10, m = 75\nn = 10, m = 80\n\
    n = 10, m = 85\nn = 10, m = 90\nn = 10, m = 95\nn = 10, m = 100\nn = 10, m = 105\n\
    n = 10, m = 110\nn = 10, m = 115\nn = 10, m = 120\nn = 10, m = 125\nn = 10, m\
    \ = 130\nn = 10, m = 135\nn = 10, m = 140\nn = 10, m = 145\nn = 10, m = 150\n\
    n = 10, m = 155\nn = 10, m = 160\nn = 10, m = 165\nn = 10, m = 170\nn = 10, m\
    \ = 175\nn = 10, m = 180\nn = 10, m = 185\nn = 10, m = 190\nn = 10, m = 195\n\
    n = 10, m = 200\nn = 10, m = 205\nn = 10, m = 210\nn = 10, m = 215\nn = 10, m\
    \ = 220\nn = 10, m = 225\nn = 10, m = 230\nn = 10, m = 235\nn = 10, m = 240\n\
    n = 10, m = 245\nn = 10, m = 250\nn = 10, m = 255\nn = 10, m = 260\nn = 10, m\
    \ = 265\nn = 10, m = 270\nn = 10, m = 275\nn = 10, m = 280\nn = 10, m = 285\n\
    n = 10, m = 290\nn = 10, m = 295\nn = 10, m = 300\nn = 10, m = 305\nn = 10, m\
    \ = 310\nn = 10, m = 315\nn = 10, m = 320\nn = 10, m = 325\nn = 10, m = 330\n\
    n = 10, m = 335\nn = 10, m = 340\nn = 10, m = 345\nn = 10, m = 350\nn = 10, m\
    \ = 355\nn = 10, m = 360\nn = 10, m = 365\nn = 10, m = 370\nn = 10, m = 375\n\
    n = 10, m = 380\nn = 10, m = 385\nn = 10, m = 390\nn = 10, m = 395\nn = 10, m\
    \ = 400\nn = 10, m = 405\nn = 10, m = 410\nn = 10, m = 415", "    if n > m \n\
    \        return -1\n    else\n        return round(Int, (n+m)/2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,0)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,1)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,2)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,3)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,4)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,6)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,9)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,12)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,15)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,18)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,21)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,23)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,24)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,25)\n</cell>\n<code language=julia-1.5>\n\
    roun", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(m/n::Int64)*n\n    end\n    return rounded_avg\nend\nrounded_avg(5,3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number. \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n                    factorial(5)\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120\n                    120\n                    120\n          \
    \          120\n                    120\n                    120\n           \
    \         120\n                    120\n                    120\n            \
    \        120\n                    120\n                    120\n             \
    \       120\n                    120\n                    120\n              \
    \      120\n                    120\n                    120\n               \
    \     120\n                    120\n                    120\n                \
    \    120\n                    120\n                    120\n                 \
    \   120\n                    120\n                    120\n                  \
    \  120\n                    120\n                    120\n                   \
    \ 120\n                    120\n                    120\n                    120\n\
    \                    120\n                    120\n                    120\n \
    \                   120\n                    120\n                    120\n  \
    \                  120\n                    120\n                    120\n   \
    \                 120\n                    120\n                    120\n    \
    \                120\n                    120\n                    120\n     \
    \               120\n                    120\n                    120\n      \
    \              120\n                    120\n                    120\n       \
    \             120\n                    120\n                    120\n        \
    \            120\n                    120\n                    120\n         \
    \           120", "    if n <= m \n        rounded_avg = round(n/m) \n       \
    \ rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg + 1 \n   \
    \     rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg * 2 \n\
    \        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg % 2\
    \ \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg = rounded_avg\
    \ % 2 \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 ", "    if n <= m \n        rounded_avg = round(n/m) \n        rounded_avg\
    \ = rounded_avg * 2 \n        rounded_avg = rounded_avg + 1 \n        rounded_avg\
    \ = rounded_avg % 2 \n        rounded_avg = rounded_avg \n    else \n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,6)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,7)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,8)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,9)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,11)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,12)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,13)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,14)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,15)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,16)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,17)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,18)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,19)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,21)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,22)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,23)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,24)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,25)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,26)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,27)\n</cell>\n<code language=julia-1.5>\nrounded_avg(5,28)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(5,29)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(5,30)\n</cell>", "    if m > n \n        return -1\n    elseif m ==\
    \ n \n        return m\n    else\n        return round(m/n) * n\n    end\nend\n\
    rounded_avg(4,5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a number. \nThe factorial of a number $n$ is defined as:",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Float64(n)/Float64(m))\n\
    \    end\n    return rounded_avg\nend\nrounded_avg(4,5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes in two integers n and m and returns the number\
    \ of integers from n through m (including n and m).\nExample:\nrounded_avg(4,5)\n\
    rounded_avg(4,6)\nrounded_avg(4,7)\nrounded_avg(4,8)\nrounded_avg(4,9)\nrounded_avg(4,10)\n\
    rounded_avg(4,11)\nrounded_avg(4,12)\nrounded_avg(4,13)\nrounded_avg(4,14)\nrounded_avg(4,15)\n\
    rounded_avg(4,16)\nrounded_avg(4,17)\nrounded_avg(4,18)\nrounded_avg(4,19)\nrounded_avg(4,20)\n\
    rounded_avg(4,21)\nrounded_avg(4,22)\nrounded_avg(4,23)\nrounded_avg(4,24)\nrounded_avg(4,25)\n\
    rounded_avg(4,26)\nrounded_avg(4,27)\nrounded_avg(4,28)\nrounded_avg(4,29)\nrounded_avg(4,30)\n\
    rounded_avg(4,31)\nrounded_avg(4,32)\nrounded_avg(4,33)\nrounded_avg(4,34)\nrounded_avg(4,35)\n\
    rounded_avg(4,36)\nrounded_avg(4,37)\nrounded_avg(4,38)\nrounded_avg(4,39)\nrounded_avg(4,40)\n\
    rounded_avg(4,41)\nrounded_avg(4,42)\nrounded_avg(4,43)\nrounded_avg(4,44)\nrounded_avg(4,45)\n\
    rounded_avg(4,46)\nrounded_avg(4,47)\nrounded_avg(4,48)\nrounded_avg(4,49)\nrounded_avg(4,50)\n\
    rounded_avg(4,51)\nrounded_avg(4,52)\nrounded_avg(4,53)\nrounded_avg(4,54)\nrounded_avg(4,55)\n\
    rounded_avg(4,56)\nrounded_avg(4,57)\nrounded_avg(4,58)\nrounded_avg(4,59)\nrounded_avg(4,60)\n\
    rounded_avg(4,61)", "    if n > m \n        rounded_avg = -1\n    else\n     \
    \   rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end", "    if n > m \n        return -1\n    elseif n == m \n        return n\n\
    \    else\n        avg = floor((n + m) / 2)\n        return tostring(avg)\n  \
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n\
    \ <= m \n        return n\n    else\n        return -1\n    end\nend\nrounded_avg(5,6)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns their sum.\nIf n is greater than m, return -1.\nExample: \nn =\
    \ 10, m = 5\nOutput: 15"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
