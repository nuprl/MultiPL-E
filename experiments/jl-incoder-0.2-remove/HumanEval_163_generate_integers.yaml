name: HumanEval_163_generate_integers
language: jl
prompt: "\"\"\"\n    Given two positive integers a and b, return the even digits between\
  \ a\n    and b, in ascending order.\n\n    For example:\n                \"\"\"\n\
  function generate_integers(a::Int64, b::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
  \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
  \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
completions: ["    \n    integers = Vector{Int64}()\n    \n    while a <= b\n    \
    \    push!(integers, a)\n        a = a + 2\n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a < b\n        \n        integers.push(a)\n\
    \        a = a + 2\n        \n    end\n    \n    return integers\nend", "    \n\
    \    integers = Vector{Int64}()\n    \n    while(b > 0)\n        \n        integers.push(b\
    \ % 10)\n        b /= 10\n    end\n    \n    integers\nend", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n\
    \    \n    while(a <= b)\n        push!(integers, a)\n        \n        a = a\
    \ + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 100)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        integers = append(integers, a)\n        a = a\
    \ + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n    \
    \    push!(integers, a)\n        a = a + 2\n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates integers within a given range. For\
    \ example, generate_integers(1, 10) should return [1, 3, 5, 7, 9]. Hint: you can\
    \ use the function you wrote in exercise 1.", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        integers = append(integers, a)\n        \n\
    \        a = a + 2\n        \n    end\n    \n    return integers\nend", "    \n\
    \    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 2\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integer", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 1\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a < b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a < b\n        \n       \
    \ integers.push(a)\n        \n        a = a + 2\n        \n    end\n    \n   \
    \ return integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while(b > 0)\n\
    \        \n        integers.push(b % 10)\n        b /= 10\n    end\n    \n   \
    \ integers\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        push!(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end", "    \n    even_integers = Vector{Int64}()\n    \n    while a <= b\n   \
    \     \n        if a % 2 == 0\n            even_integers = even_integers + [a]\n\
    \        end\n        \n        a = a + 1\n    end\n    \n    return even_integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 2\n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(integers, a)\n        a += 2\n    end\n    \n\
    \    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        push!(integers, a)\n        a += 2\n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    even_integers = Vector{Int64}()\n    \n   \
    \ while a <= b\n        \n        if a % 2 == 0\n            even_integers = even_integers\
    \ + [a]\n        end\n        \n        a = a + 1\n    end\n    \n    return even_integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    evens = Vector{Int64}()\n\
    \    \n    for i in a:a:b\n        if i%2 == 0\n            evens.push(i)\n  \
    \      end\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 100)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10000)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 100000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 1000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10000000)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 100000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10000000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 100000000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000001)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000002)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 1000000000004)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 1000000000005)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000006)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000007)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 1000000000010)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 1000000000011)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000012)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        integers = append(integers, a)\n        a = a\
    \ + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integ", "    \n    integers = Vector{Int64}()\n    \n    while(a <= b)\n\
    \        push!(integers, a)\n        a = a + 2\n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between 1 and 100 (both\
    \ included) that are divisible by 3.", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        \n        integers.push(a)\n        \n      \
    \  a += 1\n        \n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        push!(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n\
    \        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        \n        integers.push(a)\n        \n      \
    \  a += 1\n        \n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 100)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10000)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 100000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 1000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10000000)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 100000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10000000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 100000000000)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10000000000000000000000000)",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        \n      \
    \  integers.push(a)\n        \n        a = a + 2\n        \n    end\n    \n  \
    \  return integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        \n        push!(integers, a)\n        \n        a = a + 2\n\
    \        \n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    integers = generate_integers(a,b)\n    \n    return integers\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(b > 0)\n        \n        integers.push(b\
    \ % 10)\n        \n        b = b // 10\n    end\n    \n    integers\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        integers = append(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    integers = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n\
    \        a += 1\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers += [a]\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5", "    \n    integers = Vector{Int64}()\n  \
    \  \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    evens = Vector{Int64}()\n    \n \
    \   while a <= b\n        evens.append(a)\n        a += 1\n    end\n    \n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)", "    \n    integers = Vector{Int64}()\n    \n    while(a\
    \ <= b)\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend", "    \n    even_integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        \n        if a % 2 == 0\n            even_integers = even_integers\
    \ .+ a\n        end\n        \n        a = a + 1\n    end\n    \n    return even_integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend", "    \n   \
    \ integers = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend",
  "    \n    integers = Vector{Int64}()\n    \n    while a < b\n        \n       \
    \ integers.push(a)\n        a = a + 2\n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while(a <= b)\n        \n     \
    \   push!(integers, a)\n        \n        a = a + 2\n    end\n    \n    return\
    \ integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n \
    \   \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n  \
    \  \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n  \
    \  \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        integers.push(a)\n        \n        a = a\
    \ + 2\n        \n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers = append(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        \n\
    \        integers.push(a)\n        \n        a = a + 2\n        \n    end\n  \
    \  \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend", "    \n   \
    \ integers = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n\
    \        a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers += collect(a%10)\n\
    \        \n        a = floor(a/10)\n        \n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        integers = append(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend", "    \n   \
    \ integers = Vector{Int64}()\n    \n    while a <= b\n        \n        push!(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while(a <= b)\n       \
    \ integers += [a]\n        a += 1\n    end\n    \n    return integers\nend", " \
    \   \n    integers = Vector{Int64}()\n    \n    while a < b\n        \n      \
    \  integers.push(a%10)\n        a = floor(a/10)\n        \n    end\n    \n   \
    \ return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n \
    \   \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(", "    \n    integers = Vector{Int64}()\n    \n    while a\
    \ <= b\n        \n        integers += [a]\n        \n        a += 1\n        \n\
    \    end\n    \n    return integers\nend", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a += 1\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n\
    \        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>", "    \n    evens\
    \ = Vector{Int64}()\n    \n    while(b > 0)\n        evens.push(b % 10)\n    \
    \    b = b // 10\n    end\n    \n    evens\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        \n        integers = append(integers, a)\n  \
    \      \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=juli", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        \n        integers = integers + [a % 10]\n  \
    \      a = a / 10\n        \n    end\n    \n    return integers\nend", "    \n\
    \    integers = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 2\n    end\n\
    \    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 2\n    end\n\
    \    \n    integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        \n        a = a +\
    \ 2\n    end\n    \n    return integers\nend", "    \n    even_integers = Vector{Int64}()\n\
    \    \n    for i = a:b\n        even_integers = even_integers + i\n    end\n \
    \   \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that generates the integers\
    \ from 1 to n where n is given as an input argument.", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        \n        integers.push(a)\n        \n      \
    \  a = a + 2\n        \n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     a += 1\n    end\n    \n    return integers\nend", "    \n    integers =\
    \ Vector{Int64}()\n    \n    while a <= b\n        \n        integers = append(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a < b\n        \n        integers.push(a)\n        a = a + 2\n        \n   \
    \ end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        \n        a = a +\
    \ 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    even_integers = Vector{Int64}()\n    \n    while(a\
    \ <= b)\n        \n        even_integers = even_integers + [a]\n        \n   \
    \     a = a + 1\n        \n    end\n    \n    return even_integers\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        \n      \
    \  integers += [a]\n        \n        a += 1\n        \n    end\n    \n    return\
    \ integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n \
    \   \n    while a <= b\n        integers += [a]\n        a += 1\n    end\n   \
    \ \n    integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while(a\
    \ <= b)\n        push!(integers, a)\n        \n        a = a + 2\n    end\n  \
    \  \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    integers = Vector{Int64}()\n    \n    while a < b\n        \n       \
    \ integers.push(a)\n        \n        a = a + 2\n        \n    end\n    \n   \
    \ return integers\nend", "    \n    evens = Vector{Int64}()\n    \n    for i in\
    \ a:a:b\n        if i%2 == 0\n            push!(evens, i)\n        end\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.4>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(1, 100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ generates all the integers between 1 and 100 that are divisible by 3.", "  \
    \  \n    integers = Vector{Int64}()\n    \n    while a <= b\n        \n      \
    \  push!(integers, a)\n        \n        a = a + 2\n        \n    end\n    \n\
    \    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n\
    \    \n    while(b > 0)\n        \n        integers.push(b % 10)\n        \n \
    \       b = b // 10\n    end\n    \n    integers\nend", "    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a = a + 2\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first n\
    \ positive integers less than or equal to n.", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integer",
  "    \n    integers = Vector{Int64}()\n    \n    while(b > 0)\n        \n      \
    \  integers.push(b % 10)\n        \n        b = b // 10\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        \n        integers.push(a)\n        a = a + 2\n        \n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        integers.append(a)\n        a = a + 2\n    end\n  \
    \  \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n  \
    \  \n    return integers\nend", "    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a += 1\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        integers += [a]\n        a += 1\n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 2\n    end\n    \n    integers\nend", "    \n    integers =\
    \ Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n      \
    \  a += 1\n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n\
    \        push!(integers, a)\n        a += 1\n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     \n        a = a + 2\n    end\n    \n    return integers\nend", "    \n \
    \   integers = Vector{Int64}()\n    \n    while(b > 0)\n        \n        integers.push(b\
    \ % 10)\n        \n        b = b // 10\n        \n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    integers = Vector{Int64}()\n    \n    while(a\
    \ <= b)\n        \n        integers.push(a)\n        a = a + 2\n    end\n    \n\
    \    return integers\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n    \
    \    integers.append(a)\n        a += 1\n    end\n    \n    return integers\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5", "    \n    integers = Vector{Int64}()\n  \
    \  \n    while a <= b\n        \n        integers.push(a)\n        a = a + 2\n\
    \        \n    end\n    \n    return integers\nend", "    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        integers.append(a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n\
    \        \n        push!(integers, a)\n        \n        a = a + 2\n        \n\
    \    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    integers = Vector{Int64}()\n \
    \   \n    while a <= b\n        \n        push!(integers, a)\n        \n     \
    \   a = a + 2\n        \n    end\n    \n    return integers\nend", "    \n   \
    \ integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        integers.append(a)\n\
    \        a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        integers += [a]\n       \
    \ a += 1\n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(integers, a)\n        a += 1\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        push!(integers, a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.push(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        push!(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates integers between 1 and 100 in ascending\
    \ order. Then, write a function that generates integers between 1 and 100 in descending\
    \ order. Then, write a function that generates integers between 1 and 100 in ascending\
    \ order and descending order. Then, write a function that generates integers between\
    \ 1 and 100 in ascending order, descending order, and ascending order. Then, write\
    \ a function that generates integers between 1 and 100 in ascending order, descending\
    \ order, and descending order. Then, write a function that generates integers\
    \ between 1 and 100 in ascending order, descending order, and ascending order,\
    \ descending order, and ascending order. Then, write a function that generates\
    \ integers between 1 and 100 in ascending order, descending order, and ascending\
    \ order, descending order, and descending order, and ascending order. Then, write\
    \ a function that generates integers between 1 and 100 in ascending order, descending\
    \ order, and ascending order, descending order, and descending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and ascending order, descending order, and ascending order, descending\
    \ order, and asc", "    \n    integers = Vector{Int64}()\n    \n    while a <=\
    \ b\n        \n        push!(integers, a)\n        \n        a = a + 2\n     \
    \   \n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ integers up to a specified limit, inclusive.", "    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a += 1\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<text>\nExercise\nWrite a function that generates integers between 1\
    \ and 100, and returns the even digits in ascending order.", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 1\n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while(a <= b)\n        push!(integers, a)\n        a += 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        integers.push(a)\n        \n        a = a\
    \ + 2\n        \n    end\n    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first n\
    \ integers of a Fibonacci sequence in ascending order.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 1\n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while(b > 0)\n        \n        integers.push(b % 10)\n        b /=\
    \ 10\n    end\n    \n    integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(", "    \n    integers = Vector{Int64}()\n    \n    while a\
    \ < b\n        \n        integers.push(a)\n        \n        a = a + 2\n     \
    \   \n    end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        integers.push(a)\n        a = a + 2\n   \
    \ end\n    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n\
    \    \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        push!(integers, a)\n        \n        a =\
    \ a + 2\n        \n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        push!(integers,\
    \ a)\n        \n        a = a + 2\n        \n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend", "    \n   \
    \ integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        \n        integers.push(a)\n\
    \        \n        a = a + 2\n        \n    end\n    \n    return integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers, a)\n   \
    \     a = a + 2\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a += 1\n    end\n    \n    integers\nend", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n\
    \        push!(integers, a)\n        a += 1\n    end\n    \n    return integers\n\
    end", "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        \n\
    \        integers.push(a)\n        a = a + 2\n    end\n    \n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates integers up to a specified limit.",
  "    \n    integers = Vector{Int64}()\n    \n    while(a <= b)\n        push!(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3. \nThe function should return a vector of integers containing\
    \ the numbers that are divisible by 3.", "    \n    integers = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(integers, a)\n        a += 1\n    end\n\
    \    \n    return integers\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while(a <= b)\n\
    \        integers.append(a)\n        a = a + 2\n    end\n    \n    return integers\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(integers, a)\n    \
    \    a = a + 2\n    end\n    \n    return integers\nend", "    \n    even_integers\
    \ = Vector{Int64}()\n    \n    for i = a:b\n        if i%2 == 0\n            push!(even_integers,\
    \ i)\n        end\n    end\n    \n    return even_integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1, 10)\n</cell>\n<code language=julia-1.5>",
  "    \n    integers = Vector{Int64}()\n    \n    while a <= b\n        push!(integers,\
    \ a)\n        a += 1\n    end\n    \n    return integers\nend", "    \n    integers\
    \ = Vector{Int64}()\n    \n    while(a <= b)\n        integers = append(integers,\
    \ a)\n        a = a + 2\n    end\n    \n    return integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(1,10)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(1,10)\n\
    </cell>\n<code language=julia-1.5>\ngenerate", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    integers = Vector{Int64}()\n    \n    while\
    \ a <= b\n        integers.append(a)\n        a = a + 2\n    end\n    \n    return\
    \ integers\nend", "    \n    integers = Vector{Int64}()\n    \n    while a < b\n\
    \        \n        integers.push(a)\n        a = a + 2\n        \n    end\n  \
    \  \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(integers, a)\n        a = a + 2\n    end\n  \
    \  \n    return integers\nend", "    \n    integers = Vector{Int64}()\n    \n\
    \    while a <= b\n        \n        integers.push(a)\n        \n        a +=\
    \ 1\n        \n    end\n    \n    return integers\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
