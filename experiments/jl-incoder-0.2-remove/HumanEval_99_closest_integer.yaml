name: HumanEval_99_closest_integer
language: jl
prompt: "\"\"\"\n    Create a function that takes a value (string) representing a\
  \ number\n    and returns the closest integer to it. If the number is equidistant\n\
  \    from two integers, round it away from zero.\n\n    Examples\n        \n   \
  \ Note:\n    Rounding away from zero means that if the given number is equidistant\n\
  \    from two integers, the one you should return is the one that is the\n    farthest\
  \ from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"\
  -14.5\") should return -15.\n    \"\"\"\nfunction closest_integer(value::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"\
  10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") ==\
  \ -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n"
completions: ["    \n    closest_integer = Int64(math.ceil(toFloat64(value)))\n  \
    \  \n    if closest_integer == toFloat64(value)\n        closest_integer = Int64(math.floor(toFloat64(value)))\n\
    \    end\n    \n    return closest_integer\nend", "    \n    if value == \"\"\n\
    \        error(\"Value cannot be empty\")\n    end\n    \n    local value = tonumber(value)\n\
    \    \n    if value == 0\n        error(\"Value cannot be 0\")\n    end\n    \n\
    \    if value < 0\n        error(\"Value cannot be negative\")\n    end\n    \n\
    \    local closest = 0\n    \n    for i = 1, #value\n        do\n            local\
    \ current = tonumber(value[i])\n            \n            if current < closest\n\
    \                closest = current\n            end\n        end\n    end\n  \
    \  \n    return closest\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that takes a value (string) representing a number\n    and\
    \ returns the closest float to it. If the number is equidistant\n    from two\
    \ floats, round it away from zero.", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    digits = value.digits\n    \n    if digits[1] == digits[2]\n \
    \       return digits[1]\n    \n    if digits[1] > digits[2]\n        return digits[1]\n\
    \    \n    return digits[2]\nend\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string representing a number and\
    \ returns the closest integer to the number in base 10.", "    \n    if value\
    \ == \"\"\n        return -1\n    \n    digits = value.digits\n    \n    if digits[1]\
    \ == \"\"\n        return digits[0]\n    \n    if digits[1] == \"-\"\n       \
    \ return -digits[0]\n    \n    digits[1] = digits[1].digits\n    \n    if digits[1][1]\
    \ == \"+\"\n        return digits[0] + digits[1][0]\n    \n    if digits[1][1]\
    \ == \"-\"\n        return digits[0] - digits[1][0]\n    \n    if digits[1][1]\
    \ == \"*\"\n        return digits[0] * digits[1][0]\n    \n    if digits[1][1]\
    \ == \"/\"\n        return digits[0] / digits[1][0]\n    \n    if digits[1][1]\
    \ == \"%\"\n        return digits[0] % digits[1][0]\n    \n    if digits[1][1]\
    \ == \"^\"\n        return digits[0] ** digits[1][0]\n    \n    if digits[1][1]\
    \ == \"+\"\n        return digits[0] + digits[1][1]\n    \n    if digits[1][1]\
    \ == \"-\"\n        return digits[0] - digits[1][1]\n    \n    if digits[1][1]\
    \ == \"*\"\n        return digits[0] * digits[1][1]\n    \n    if digits[1][1]\
    \ == \"/\"\n        return digits[0] / digits[1][1]\n    \n    if digits[1][1]\
    \ == \"%\"\n        return digits[0] % digits[1][1]\n    \n    if digits[1][1]\
    \ == \"^\"\n        return digits[0] ** digits[1][1]\n    \n    if digits[1][1]\
    \ == \"+\"\n        return digits[0] + digits[1][1]\n    \n    if digits[1][1]\
    \ == \"-\"\n        return digits[0] - digits[1][1]\n    \n    if digits[1][1]\
    \ == \"*\"\n        return digits[0] * digits[1][1]\n    \n    if digits[1][1]\
    \ == \"/\"\n        return digits[0] / digits[1][1]\n    \n    if digits[1][1]\
    \ == \"%\"\n        return digits[0] % digits[1][1]\n    \n    if digits[1][1]\
    \ == \"^\"\n        return digits[0] ** digits[1][1]\n    \n    if digits[1][1]\
    \ == \"+\"\n        return digits[0] + digits[1][1]\n    \n    if digits[1][1]\
    \ == \"-\"\n        return digits[0] - digits[1][1]\n    \n    if digits[1][1]\
    \ == \"*\"\n        return digits[0] * digits[1][1]\n    \n    if digits[1][1]\
    \ == \"/\"\n        return digits[0] / digits[1][1]\n    \n    if digits[1][1]\
    \ == \"%\"\n        return digits[0] % digits[1][1]\n    \n    if digits[1][1]\
    \ == \"^\"\n        return digits[0] ** digits[1][1]\n    \n    if digits[1][1]\
    \ == \"+\"\n        return digits[0] + digits[1][1]\n    \n    if digits[1][1]\
    \ == \"-\"\n        return digits[0] - digits[1][1]\n    \n    if digits[1][1]\
    \ == \"*\"\n        return ", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == Int64(0)\n        closest_integer = Int64(math.floor(value))\n\
    \    \n    return closest_integer\nend", "    \n    closest_integer = Int(0)\n\
    \    \n    if value == \"NaN\" || value == \"nan\" || value == \"-NaN\" || value\
    \ == \"-nan\"\n        closest_integer = Int(0)\n    elseif value == \"+inf\"\n\
    \        closest_integer = Int(Int.max())\n    elseif value == \"-inf\"\n    \
    \    closest_integer = Int(-Int.max())\n    elseif value == \"+infinity\"\n  \
    \      closest_integer = Int(Int.max())\n    elseif value == \"-infinity\"\n \
    \       closest_integer = Int(-Int.max())\n    elseif value == \"+inf\"\n    \
    \    closest_integer = Int(Int.max())\n    elseif value == \"-inf\"\n        closest_integer\
    \ = Int(-Int.max())\n    elseif value == \"+infinity\"\n        closest_integer\
    \ = Int(Int.max())\n    elseif value == \"-infinity\"\n        closest_integer\
    \ = Int(-Int.max())\n    elseif value == \"+inf\"\n        closest_integer = Int(Int.max())\n\
    \    elseif value == \"-inf\"\n        closest_integer = Int(-Int.max())\n   \
    \ elseif value == \"+infinity\"\n        closest_integer = Int(Int.max())\n  \
    \  elseif value == \"-infinity\"\n        closest_integer = Int(-Int.max())\n\
    \    elseif value == \"+inf\"\n        closest_integer = Int(Int.max())\n    elseif\
    \ value == \"-inf\"\n        closest_integer = Int(-Int.max())\n    elseif value\
    \ == \"+infinity\"\n        closest_integer = Int(Int.max())\n    elseif value\
    \ == \"-infinity\"\n        closest_integer = Int(-Int.max())\n    elseif value\
    \ == \"+inf\"\n        closest_integer = Int(Int.max())\n    elseif value == \"\
    -inf\"\n        closest_integer = Int(-Int.max())\n    elseif value == \"+infinity\"\
    \n        closest_integer = Int(Int.max())\n    elseif value == \"-infinity\"\n\
    \        closest_integer = Int(-Int.max())\n    elseif value == \"+inf\"\n   \
    \     closest_integer = Int(Int.max())\n    elseif value == \"-inf\"\n       \
    \ closest_integer = Int(-Int.max())\n    elseif value == \"+infinity\"\n     \
    \   closest_integer = Int(Int.max())\n    elseif value == \"-infinity\"\n    \
    \    closest_integer = Int(-Int.max())\n    elseif value == \"+inf\"\n       \
    \ closest_integer = Int(Int.max())\n    elseif value == \"-inf\"\n        closest_integer\
    \ = Int(", "    \n    closest_integer = Int64(0)\n    \n    if value == \"-inf\"\
    \ \n        closest_integer = Int64(-Inf)\n    else if value == \"inf\" \n   \
    \     closest_integer = Int64(Inf)\n    else if value == \"nan\" \n        closest_integer\
    \ = Int64(-1)\n    else if value == \"0\" \n        closest_integer = Int64(0)\n\
    \    else if value == \"1\" \n        closest_integer = Int64(1)\n    else if\
    \ value == \"2\" \n        closest_integer = Int64(2)\n    else if value == \"\
    3\" \n        closest_integer = Int64(3)\n    else if value == \"4\" \n      \
    \  closest_integer = Int64(4)\n    else if value == \"5\" \n        closest_integer\
    \ = Int64(5)\n    else if value == \"6\" \n        closest_integer = Int64(6)\n\
    \    else if value == \"7\" \n        closest_integer = Int64(7)\n    else if\
    \ value == \"8\" \n        closest_integer = Int64(8)\n    else if value == \"\
    9\" \n        closest_integer = Int64(9)\n    else if value == \"10\" \n     \
    \   closest_integer = Int64(10)\n    else if value == \"11\" \n        closest_integer\
    \ = Int64(11)\n    else if value == \"12\" \n        closest_integer = Int64(12)\n\
    \    else if value == \"13\" \n        closest_integer = Int64(13)\n    else if\
    \ value == \"14\" \n        closest_integer = Int64(14)\n    else if value ==\
    \ \"15\" \n        closest_integer = Int64(15)\n    else if value == \"16\" \n\
    \        closest_integer = Int64(16)\n    else if value == \"17\" \n        closest_integer\
    \ = Int64(17)\n    else if value == \"18\" \n        closest_integer = Int64(18)\n\
    \    else if value == \"19\" \n        closest_integer = Int64(19)\n    else if\
    \ value == \"20\" \n        closest_integer = Int64(20)\n    else if value ==\
    \ \"21\" \n        closest_integer = Int64(21)\n    else if value == \"22\" \n\
    \        closest_integer = Int64(22)\n    else if value == \"23\" \n        closest_integer\
    \ = Int64(23)\n    else if value == \"24\" \n        closest_integer = Int64(24)\n\
    \    else if value == \"25\" \n        closest_integer = Int64(25)\n    else if\
    \ value == \"26\" \n        closest_integer = Int64(26)\n    else if value ==\
    \ \"27\" \n        closest_integer = Int64(27)\n    ", "    if value == \"\"\n\
    \        throw(ArgumentError(\"Value cannot be an empty string\"))\n    \n   \
    \ if value == \".\"\n        throw(ArgumentError(\"Value cannot be a decimal point\"\
    ))\n    \n    if value == \"-\"\n        throw(ArgumentError(\"Value cannot be\
    \ a negative sign\"))\n    \n    if value == \"+\"\n        throw(ArgumentError(\"\
    Value cannot be a plus sign\"))\n    \n    if value == \"0\"\n        throw(ArgumentError(\"\
    Value cannot be a zero\"))\n    \n    if value == \"1\"\n        throw(ArgumentError(\"\
    Value cannot be a one\"))\n    \n    if value == \"2\"\n        throw(ArgumentError(\"\
    Value cannot be a two\"))\n    \n    if value == \"3\"\n        throw(ArgumentError(\"\
    Value cannot be a three\"))\n    \n    if value == \"4\"\n        throw(ArgumentError(\"\
    Value cannot be a four\"))\n    \n    if value == \"5\"\n        throw(ArgumentError(\"\
    Value cannot be a five\"))\n    \n    if value == \"6\"\n        throw(ArgumentError(\"\
    Value cannot be a six\"))\n    \n    if value == \"7\"\n        throw(ArgumentError(\"\
    Value cannot be a seven\"))\n    \n    if value == \"8\"\n        throw(ArgumentError(\"\
    Value cannot be a eight\"))\n    \n    if value == \"9\"\n        throw(ArgumentError(\"\
    Value cannot be a nine\"))\n    \n    if value == \".\"\n        throw(ArgumentError(\"\
    Value cannot be a decimal point\"))\n    \n    if value == \"-\"\n        throw(ArgumentError(\"\
    Value cannot be a negative sign\"))\n    \n    if value == \"+\"\n        throw(ArgumentError(\"\
    Value cannot be a plus sign\"))\n    \n    if value == \"0\"\n        throw(ArgumentError(\"\
    Value cannot be a zero\"))\n    \n    if value == \"1\"\n        throw(ArgumentError(\"\
    Value cannot be a one\"))\n    \n    if value == \"2\"\n        throw(ArgumentError(\"\
    Value cannot be a two\"))\n    \n    if value == \"3\"\n        throw(ArgumentError(\"\
    Value cannot be a three\"))\n    \n    if value == \"4\"\n        throw(ArgumentError(\"\
    Value cannot be a four\"))\n    \n    if value == \"5\"\n        throw(ArgumentError(\"\
    Value cannot be a five\"))\n    \n    if value == \"6\"\n        throw(ArgumentError(\"\
    Value cannot be a six\"))\n    \n    if value == \"7\"\n        throw(ArgumentError(\"\
    Value cannot be a seven\"))\n    \n    if value == \"8\"\n        throw(ArgumentError(\"\
    Value cannot be a eight\"))\n    \n    if value == \"9\"\n        throw(ArgumentError(\"\
    Value cannot be a nine\"))\n    \n    if value == \"", "    \n    closest_integer\
    \ = Int64(0)\n    \n    \n    if value == \"-inf\" or value == \"inf\" or value\
    \ == \"\"\n        return closest_integer\n    \n    \n    \n    if value == \"\
    nan\"\n        return closest_integer\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    closest_integer = Int64(0)\n\
    \    \n    value_int = parse(value) \n    \n    if value_int > 0 \n        closest_integer\
    \ = value_int\n    else \n        closest_integer = -value_int\n    \n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n\
    <text>\nNow let's create a function that takes a value (string) representing a\
    \ number\nand returns the closest real number to it. If the number is equidistant\n\
    from two numbers, round it away from zero.", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == value\n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_", "    \n    if value == \"\"\n        error(\"\
    Value cannot be empty\")\n    end", "    \n    closest_integer = Int64(0)\n  \
    \  \n    if value == \"\"\n        closest_integer = Int64(0)\n    elseif value\
    \ == \"-\"\n        closest_integer = Int64(0)\n    elseif value == \"+\"\n  \
    \      closest_integer = Int64(0)\n    elseif value == \"0\"\n        closest_integer\
    \ = Int64(0)\n    elseif value == \"1\"\n        closest_integer = Int64(1)\n\
    \    elseif value == \"2\"\n        closest_integer = Int64(2)\n    elseif value\
    \ == \"3\"\n        closest_integer = Int64(3)\n    elseif value == \"4\"\n  \
    \      closest_integer = Int64(4)\n    elseif value == \"5\"\n        closest_integer\
    \ = Int64(5)\n    elseif value == \"6\"\n        closest_integer = Int64(6)\n\
    \    elseif value == \"7\"\n        closest_integer = Int64(7)\n    elseif value\
    \ == \"8\"\n        closest_integer = Int64(8)\n    elseif value == \"9\"\n  \
    \      closest_integer = Int64(9)\n    else\n        closest_integer = Int64(closest(value))\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer(value::Int64)", "    \n    if value == \"\"\n    \
    \    error(\"The value cannot be an empty string\")\n    end\n    \n    number\
    \ = parse(Float64, value)\n    \n    if number == 0.0\n        error(\"The value\
    \ cannot be zero\")\n    end\n    \n    closest_integer = Int(ceil(number))\n\
    \    \n    if number == closest_integer\n        error(\"The value cannot be equidistant\
    \ from two integers\")\n    end\n    \n    return closest_integer\nend", "   \
    \ \n    if value == \"\"\n        error(\"The value cannot be empty\")\n    \n\
    \    number = parse(Float64, value)\n    \n    if number == 0.0\n        error(\"\
    The value cannot be 0\")\n    \n    closest_integer = Int(ceil(number))\n    \n\
    \    if number == closest_integer\n        error(\"The value cannot be equidistant\
    \ from two integers\")\n    \n    return closest_integer\nend", "    \n    if\
    \ value == \"\"\n        return -1\n    \n    digits = value.digits\n    \n  \
    \  if digits.length == 1\n        return digits[0]\n    \n    closest_digit =\
    \ digits[0]\n    \n    for i in 1..digits.length\n        if digits[i] > closest_digit\n\
    \            closest_digit = digits[i]\n        end\n    end\n    \n    return\
    \ closest_digit\nend", "    \n    closest_integer = Int64(math.floor(value))\n\
    \    \n    if closest_integer == value \n        closest_integer = Int64(math.ceil(value))\n\
    \    \n    return closest_integer\nend", "    \n    if value == \"\"\n       \
    \ error(\"The value given cannot be an empty string\")\n    elseif value == \"\
    \ \" \n        error(\"The value given cannot be a space character\")\n    elseif\
    \ value == \"-\" \n        error(\"The value given cannot be a negative sign\"\
    )\n    elseif value == \"+\" \n        error(\"The value given cannot be a plus\
    \ sign\")\n    elseif value == \".\" \n        error(\"The value given cannot\
    \ be a decimal point\")\n    elseif value == \"e\" \n        error(\"The value\
    \ given cannot be an exponent\")\n    elseif value == \"E\" \n        error(\"\
    The value given cannot be an exponent with capital E\")\n    elseif value == \"\
    +\" \n        error(\"The value given cannot be a plus sign\")\n    elseif value\
    \ == \"-\" \n        error(\"The value given cannot be a negative sign\")\n  \
    \  elseif value == \"*\" \n        error(\"The value given cannot be a multiplication\
    \ sign\")\n    elseif value == \"/\" \n        error(\"The value given cannot\
    \ be a division sign\")\n    elseif value == \"%\" \n        error(\"The value\
    \ given cannot be a modulus sign\")\n    elseif value == \"^\" \n        error(\"\
    The value given cannot be an exponent with capital E\")\n    elseif value == \"\
    ~\" \n        error(\"The value given cannot be a tilde sign\")\n    elseif value\
    \ == \"(\" \n        error(\"The value given cannot be a left parenthesis\")\n\
    \    elseif value == \")\" \n        error(\"The value given cannot be a right\
    \ parenthesis\")\n    elseif value == \"[\" \n        error(\"The value given\
    \ cannot be a left square bracket\")\n    elseif value == \"]\" \n        error(\"\
    The value given cannot be a right square bracket\")\n    elseif value == \"{\"\
    \ \n        error(\"The value given cannot be a left curly bracket\")\n    elseif\
    \ value == \"}\" \n        error(\"The value given cannot be a right curly bracket\"\
    )\n    elseif value == \"<\" \n        error(\"The value given cannot be a left\
    \ angle bracket\")\n    elseif value == \">\" \n        error(\"The value given\
    \ cannot be a right angle bracket\")\n    elseif value == \"!\" \n        error(\"\
    The value given cannot be a exclamation point\")\n    elseif value == \"?\" \n\
    \        error(\"The value given cannot be a question mark\")\n    elseif value\
    \ == \"=\" \n        error(\"The value given cannot be an equal sign\")\n    elseif\
    \ value == \"|\" \n        error(\"The value given cannot be a vertical bar\"\
    )\n    elseif value == \"&\" \n        error(\"The value given cannot be an ampersand\"\
    )\n    elseif value == \"$\" \n        error(\"The value given cannot be ", " \
    \   \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n        closest_integer\
    \ = Int64(0)\n        return closest_integer\n    \n    value_as_number = parse_number(value)\n\
    \    \n    if value_as_number == 0\n        closest_integer = Int64(0)\n     \
    \   return closest_integer\n    \n    closest_integer = Int64(0)\n    \n    if\
    \ value_as_number < 0\n        closest_integer = Int64(-1)\n        return closest_integer\n\
    \    \n    if value_as_number > Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int64(Int",
  "    \n    closest_integer = Int64(math.ceil(value))\n    if closest_integer ==\
    \ value \n        closest_integer = Int64(math.floor(value))\n    end\n    return\
    \ closest_integer\nend", "    \n    if value == \"\"\n        error(\"Value cannot\
    \ be an empty string\")\n    end", "    \n    if value == \"\"\n        error(\"\
    The value cannot be an empty string\")\n    end\n    \n    local digits = split(value,\
    \ \".\")\n    local digits_int = map(int, digits)\n    local digits_int_sorted\
    \ = sort(digits_int)\n    local digits_int_sorted_reverse = reverse(digits_int_sorted)\n\
    \    \n    local closest = digits_int_sorted_reverse[1]\n    \n    if digits_int_sorted_reverse[1]\
    \ == 0\n        error(\"The given value cannot be equidistant from two integers\"\
    )\n    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[1]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[2]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[3]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[4]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[5]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[6]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[7]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[8]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[9]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[10]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[11]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[12]\n\
    \        error(\"The given value cannot be equidistant from two integers\")\n\
    \    end\n    \n    if digits_int_sorted_reverse[1] == digits_int_sorted[", " \
    \   if value == \"\"\n        error(\"Value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"Value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"Value cannot be positive\")\n    else\n        closest_integer(value[1..end])\n\
    \    end\nend", "    \n    if value == \"-inf\" \n        then return -Infinity\
    \ \n    else if value == \"inf\" \n        then return Infinity \n    else if\
    \ value == \"nan\" \n        then return NaN \n    else if value == \"0\" \n \
    \       then return 0 \n    else if value == \"1\" \n        then return 1 \n\
    \    else if value == \"2\" \n        then return 2 \n    else if value == \"\
    3\" \n        then return 3 \n    else if value == \"4\" \n        then return\
    \ 4 \n    else if value == \"5\" \n        then return 5 \n    else if value ==\
    \ \"6\" \n        then return 6 \n    else if value == \"7\" \n        then return\
    \ 7 \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else if value == \"35\" \n        then return 35 \n    else ",
  "    \n    closest_integer = Int64(math.ceil(value))\n    \n    if closest_integer\
    \ == value\n        closest_integer = Int64(math.floor(value))\n    end\n    \n\
    \    return closest_integer\nend", "    \n    closest_integer = Int(0)\n    \n\
    \    if value == \"NaN\" \n        closest_integer = Int(NaN)\n    else if value\
    \ == \"-NaN\" \n        closest_integer = Int(NaN)\n    else if value == \"-Inf\"\
    \ \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n    \
    \    closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer\
    \ = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n\
    \    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else\
    \ if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value\
    \ == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\"\
    \ \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n    \
    \    closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer\
    \ = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n\
    \    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else\
    \ if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value\
    \ == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\"\
    \ \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n    \
    \    closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer\
    \ = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n\
    \    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else\
    \ if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value\
    \ == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\"\
    \ \n        closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n    \
    \    closest_integer = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer\
    \ = Int(-Inf)\n    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n\
    \    else if value == \"-Inf\" \n        closest_integer = Int(-Inf)\n    else ",
  "    \n    closest_integer = Int64(math.ceil(Int64(value)))\n    \n    if closest_integer\
    \ == Int64(math.floor(value)):\n        closest_integer = Int64(math.ceil(value))\n\
    \    \n    return closest_integer\nend", "    \n    if value == \"\"\n       \
    \ error(\"Value cannot be an empty string\")\n    end\n    \n    number = parse(Float64,\
    \ value)\n    \n    if number == 0\n        error(\"Value cannot be 0\")\n   \
    \ end\n    \n    closest_integer = round(number)\n    \n    if number == closest_integer\n\
    \        error(\"Value cannot be equidistant from two integers\")\n    end\n \
    \   \n    return closest_integer\nend", "    \n    closest_integer = Int64(math.floor(value))\n\
    \    if closest_integer == value\n        closest_integer = Int64(math.ceil(value))\n\
    \    end\n    return closest_integer\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == value\n        closest_integer\n    else\n  \
    \      closest_integer - 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two floats, round it away from zero.", "    \n    closest_integer = int64(0)\n\
    \    \n    if value == \"\"\n        closest_integer = int64(0)\n    elseif value\
    \ == \"-\"\n        closest_integer = int64(0)\n    elseif value == \"+\"\n  \
    \      closest_integer = int64(0)\n    elseif value == \"0\"\n        closest_integer\
    \ = int64(0)\n    elseif value == \"1\"\n        closest_integer = int64(1)\n\
    \    elseif value == \"2\"\n        closest_integer = int64(2)\n    elseif value\
    \ == \"3\"\n        closest_integer = int64(3)\n    elseif value == \"4\"\n  \
    \      closest_integer = int64(4)\n    elseif value == \"5\"\n        closest_integer\
    \ = int64(5)\n    elseif value == \"6\"\n        closest_integer = int64(6)\n\
    \    elseif value == \"7\"\n        closest_integer = int64(7)\n    elseif value\
    \ == \"8\"\n        closest_integer = int64(8)\n    elseif value == \"9\"\n  \
    \      closest_integer = int64(9)\n    elseif value == \"10\"\n        closest_integer\
    \ = int64(10)\n    elseif value == \"11\"\n        closest_integer = int64(11)\n\
    \    elseif value == \"12\"\n        closest_integer = int64(12)\n    elseif value\
    \ == \"13\"\n        closest_integer = int64(13)\n    elseif value == \"14\"\n\
    \        closest_integer = int64(14)\n    elseif value == \"15\"\n        closest_integer\
    \ = int64(15)\n    elseif value == \"16\"\n        closest_integer = int64(16)\n\
    \    elseif value == \"17\"\n        closest_integer = int64(17)\n    elseif value\
    \ == \"18\"\n        closest_integer = int64(18)\n    elseif value == \"19\"\n\
    \        closest_integer = int64(19)\n    elseif value == \"20\"\n        closest_integer\
    \ = int64(20)\n    elseif value == \"21\"\n        closest_integer = int64(21)\n\
    \    elseif value == \"22\"\n        closest_integer = int64(22)\n    elseif value\
    \ == \"23\"\n        closest_integer = int64(23)\n    elseif value == \"24\"\n\
    \        closest_integer = int64(24)\n    elseif value == \"25\"\n        closest_integer\
    \ = int64(25)\n    elseif value == \"26\"\n        closest_integer = int64(26)\n\
    \    elseif value == \"27\"\n        closest_integer = int64(27)\n    elseif value\
    \ == \"28\"\n        closest_integer = int64(28)\n    elseif value == \"29\"\n\
    \        closest_integer = int64(29)\n    elseif value == \"30\"\n        closest_integer\
    \ = int64(30)\n    elseif value == \"31\"\n", "    \n    if value == \"\"\n  \
    \      error(\"Value cannot be an empty string\")\n    end", "    \n    closest_integer\
    \ = Int64(math.floor(value))\n    \n    if closest_integer == value\n        closest_integer\
    \ = Int64(math.ceil(value))\n    \n    return closest_integer\nend", "    \n \
    \   if value == \"nan\" \n        error(\"NaN is not a number\")\n    elseif value\
    \ == \"inf\" \n        error(\"Infinity is not a number\")\n    elseif value ==\
    \ \"-inf\" \n        error(\"Negative infinity is not a number\")\n    elseif\
    \ value == \"-nan\" \n        error(\"Negative NaN is not a number\")\n    elseif\
    \ value == \"0\" || value == \"-0\" \n        error(\"Zero or negative zero is\
    \ not a number\")\n    elseif value == \"1\" || value == \"-1\" \n        error(\"\
    One or negative one is not a number\")\n    elseif value == \"inf\" || value ==\
    \ \"-inf\"\n        error(\"Infinity or negative infinity is not a number\")\n\
    \    elseif value == \"nan\" || value == \"-nan\"\n        error(\"NaN or negative\
    \ NaN is not a number\")\n    elseif value == \"inf\" || value == \"-inf\"\n \
    \       error(\"Infinity or negative infinity is not a number\")\n    elseif value\
    \ == \"-inf\" || value == \"-nan\"\n        error(\"Negative infinity or negative\
    \ NaN is not a number\")\n    elseif value == \"-inf\" || value == \"-nan\"\n\
    \        error(\"Negative infinity or negative NaN is not a number\")\n    elseif\
    \ value == \"-inf\" || value == \"-nan\"\n        error(\"Negative infinity or\
    \ negative NaN is not a number\")\n    elseif value == \"-inf\" || value == \"\
    -nan\"\n        error(\"Negative infinity or negative NaN is not a number\")\n\
    \    elseif value == \"-inf\" || value == \"-nan\"\n        error(\"Negative infinity\
    \ or negative NaN is not a number\")\n    elseif value == \"-inf\" || value ==\
    \ \"-nan\"\n        error(\"Negative infinity or negative NaN is not a number\"\
    )\n    elseif value == \"-inf\" || value == \"-nan\"\n        error(\"Negative\
    \ infinity or negative NaN is not a number\")\n    elseif value == \"-inf\" ||\
    \ value == \"-nan\"\n        error(\"Negative infinity or negative NaN is not\
    \ a number\")\n    elseif value == \"-inf\" || value == \"-nan\"\n        error(\"\
    Negative infinity or negative NaN is not a number\")\n    elseif value == \"-inf\"\
    \ || value == \"-nan\"\n        error(\"Negative infinity or negative NaN is not\
    \ a number\")\n    elseif value == \"-inf\" || value == \"-nan\"\n        error(\"\
    Negative infinity or negative NaN is not a number\")\n    elseif value == \"-inf\"\
    \ || value == \"-nan\"\n        error(\"Negative infinity or negative NaN is not\
    \ a number\")\n    elseif value == \"-inf\" || value == \"-nan\"\n        error(\"\
    Negative infinity or negative NaN", "    \n    closest_integer = Int64(0)\n  \
    \  \n    if value == \"\"\n        return closest_integer\n    \n    if value\
    \ == \"-\"\n        return -closest_integer\n    \n    digits = split(value, \"\
    .\")\n    \n    if digits.length == 2\n        digits = digits[2:]\n    \n   \
    \ if digits.length == 1\n        return Int64(digits[0])\n    \n    digits = digits[2:]\n\
    \    \n    if digits.length == 1\n        return Int64(digits[0])\n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    digits = digits[2:]\n    \n    if digits.length == 1\n        return\
    \ Int64(digits[0])\n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 1\n        return Int64(digits[0])\n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    digits = digits[2:]\n    \n    if digits.length == 1\n        return\
    \ Int64(digits[0])\n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 1\n        return Int64(digits[0])\n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    digits = digits[2:]\n    \n    if digits.length == 1\n        return\
    \ Int64(digits[0])\n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 1\n        return Int64(digits[0])\n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    digits = digits[2:]\n    \n    if digits.length == 1\n        return\
    \ Int64(digits[0])\n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 1\n        return Int64(digits[0])\n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    digits = digits[2:]\n    \n    if digits.length == 1\n        return\
    \ Int64(digits[0])\n    \n    digits = ", "    \n    closest_integer = Int64(math.floor(value))\n\
    \    if closest_integer == value\n        closest_integer = Int64(math.ceil(value))\n\
    \    end\n    return closest_integer\nend", "    \n    \n    \"\"\"\n    Create\
    \ a function that takes a value (string) representing a number\n    and returns\
    \ the closest integer to it. If the number is equidistant\n    from two integers,\
    \ round it away from zero.", "    \n    if value == \"\"\n        error(\"Value\
    \ cannot be empty\")\n    end\n    \n    number = parse(Float64, value)\n    \n\
    \    if number == 0.0\n        error(\"Value cannot be 0\")\n    end\n    \n \
    \   diff = abs(number - number)\n    \n    if diff < 1e-6\n        return number\n\
    \    end\n    \n    if diff < 1e-4\n        return round(number)\n    end\n  \
    \  \n    if diff < 1e-3\n        return round(number * 10) / 10\n    end\n   \
    \ \n    if diff < 1e-2\n        return round(number * 100) / 100\n    end\n  \
    \  \n    if diff < 1e-1\n        return round(number * 1000) / 1000\n    end\n\
    \    \n    if diff < 1e0\n        return round(number * 10000) / 10000\n    end\n\
    \    \n    if diff < 1e1\n        return round(number * 100000) / 100000\n   \
    \ end\n    \n    if diff < 1e2\n        return round(number * 1000000) / 1000000\n\
    \    end\n    \n    if diff < 1e3\n        return round(number * 10000000) / 10000000\n\
    \    end\n    \n    if diff < 1e4\n        return round(number * 100000000) /\
    \ 100000000\n    end\n    \n    if diff < 1e5\n        return round(number * 1000000000)\
    \ / 1000000000\n    end\n    \n    if diff < 1e6\n        return round(number\
    \ * 10000000000) / 10000000000\n    end\n    \n    if diff < 1e7\n        return\
    \ round(number * 100000000000) / 100000000000\n    end\n    \n    if diff < 1e8\n\
    \        return round(number * 1000000000000) / 1000000000000\n    end\n    \n\
    \    if diff < 1e9\n        return round(number * 10000000000000) / 10000000000000\n\
    \    end\n    \n    if diff < 1e10\n        return round(number * 100000000000000)\
    \ / 100000000000000\n    end\n    \n    if diff < 1e11\n        return round(number\
    \ * 1000000000000000) / 1000000000000000\n    end\n    \n    if diff < 1e12\n\
    \        return round(number * 10000000000000000) / 10000000000000000\n    end\n\
    \    \n    if diff < 1e13\n        return round(number * 100000000000000000) /\
    \ 100000000000000000\n    end\n    \n    if diff < 1e14\n        return round(number\
    \ * 1000000000000000000) / 1000000000000000000\n    end\n    \n    if diff < 1e15\n\
    \        return round(number * 10000000000000000000) / 10000000000000000000\n\
    \    end\n    \n    if diff < 1e16\n        return round(number * 100000000000000000000)\
    \ / 100000000000000000000\n    end\n    \n    if diff < 1e17\n        return round(number\
    \ * 1000000000000000000000) / 1000000000000000000000\n    end\n    \n    if diff\
    \ < 1e18\n        return round(number", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        return closest_integer\n    \n    digits\
    \ = value.digits\n    \n    if digits[1] == \"\"\n        return closest_integer\n\
    \    \n    if digits[1] == \"-\"\n        digits[1] = digits[1][1:]\n    \n  \
    \  if digits[1] == \"+\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"0\"\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"1\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"2\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"3\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"4\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"5\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"6\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"7\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"8\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"9\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \".\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"-\"\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"+\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"0\"\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"1\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"2\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"3\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"4\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"5\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"6\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"7\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"8\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"9\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"0\"\n      \
    \  digits[1] = digits[1][1:]\n    \n    if digits[1] == \"1\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"2\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"3\"\n        digits[1] = digits[1]", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"NaN\" \n        closest_integer = Int64(\"\
    NaN\")\n    elseif value == \"-NaN\" \n        closest_integer = Int64(\"-NaN\"\
    )\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n\
    \    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n  \
    \  elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif\
    \ value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value\
    \ == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value ==\
    \ \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"\
    -Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\"\
    \ \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n\
    \        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n  \
    \      closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n    \
    \    closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n      \
    \  closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer\
    \ = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer =\
    \ Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"\
    -Inf\")\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\"\
    )\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n\
    \    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n  \
    \  elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif\
    \ value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value\
    \ == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value ==\
    \ \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"\
    -Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\"\
    \ \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n\
    \        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n  \
    \      closest_integer = Int64(\"-Inf", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    digits = value.digits\n    \n    if digits[1] == \"\"\n      \
    \  return -1\n    \n    if digits[1] == \"-\"\n        return -closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"+\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"0\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"1\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"2\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"3\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"4\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"5\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"6\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"7\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"8\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"9\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \".\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \",\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"-\"\n        return -closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"+\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"0\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"1\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"2\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"3\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"4\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"5\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"6\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"7\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"8\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"9\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"E\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"+\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"-\"\n        return -closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == value\n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    closest_integer = Int64(math.ceil(Int64(value)))\n    \n    if closest_integer\
    \ == Int64(value)\n        closest_integer = Int64(math.floor(Int64(value)))\n\
    \    end\n    \n    return closest_integer\nend", "    \n    if value == \"\"\n\
    \        return -1\n    \n    digits = value.chars\n    \n    smallest_digit =\
    \ digits[1]\n    \n    if smallest_digit == \"-\"\n        smallest_digit = digits[2]\n\
    \    \n    if smallest_digit == \".\"\n        smallest_digit = digits[3]\n  \
    \  \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n    smallest_digit = smallest_digit.to_string()\n\
    \    \n    smallest_digit = smallest_digit.to_string()\n    \n    smallest_digit\
    \ = smallest_digit.to_string()\n    \n", "    \n    closest_integer = Int64(math.floor(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.ceil(value))\n\
    \    \n    return closest_integer\nend", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"0\" || value == \"-0\"\n        closest_integer = 0\n\
    \    else\n        \n        integer_value = Int64(value)\n        \n        if\
    \ integer_value < 0\n            integer_value = -integer_value\n        end\n\
    \        \n        closest_integer = integer_value\n    end\n    \n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Int64)::String",
  "    \n    closest_integer = Int64(math.floor(Int64(value)))\n    \n    if closest_integer\
    \ == Int64(value)\n        closest_integer = Int64(0)\n    end\n    \n    return\
    \ closest_integer\nend", "    \n    closest_integer = Int64(0)\n    \n    \n \
    \   if value == \"-inf\" or value == \"inf\" or value == \"\"\n        return\
    \ closest_integer\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if value\
    \ == \"\"\n        error(\"value cannot be an empty string\")\n    end\n    \n\
    \    local value = tonumber(value)\n    if value == nil\n        error(\"value\
    \ must be a number\")\n    end\n    \n    if value == 0\n        return 0\n  \
    \  end\n    \n    local closest\n    \n    if value == 1\n        closest = 1\n\
    \    else\n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        local\
    \ closest\n        \n        local closest\n        \n        local closest\n\
    \        \n        local closest\n        \n        local closest\n        \n\
    \        local closest\n        \n        local closest\n        \n        ",
  "    \n    closest_integer = Int64(math.floor(value))\n    \n    if closest_integer\
    \ == value\n        closest_integer = Int64(math.ceil(value))\n    \n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that takes a value (string) representing a number\n    and returns\
    \ the closest float to it. If the number is equidistant\n    from two floats,\
    \ round it away from zero.", "    \n    closest_integer = Int64(0)\n    \n   \
    \ if value == \"\"\n        return closest_integer\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_integer\
    \ = Int64(math.floor(Float64(value)))\n    \n    if closest_integer == Int64(math.floor(value))\n\
    \        closest_integer = Int64(math.ceil(value))\n    end\n    \n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that takes a value (string) representing a number\n    and returns\
    \ the closest float to it. If the number is equidistant\n    from two floats,\
    \ round it away from zero.", "    \n    closest_integer = Int64(0)\n    \n   \
    \ \n    if value == \"\"\n        return closest_integer\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"NaN\" || value == \"nan\" || value == \"\
    -NaN\" || value == \"-nan\"\n        return Int64(\"NaN\")\n    \n    digits =\
    \ split(value, \".\")\n    \n    if length(digits) == 1 || length(digits) == 2\n\
    \        return Int64(digits[1])\n    \n    digits_int = map(Int64, digits)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = sort(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        digits_int = reverse(digits_int)\n\
    \    \n    if length(digits_int) == length(digits)\n        ", "    \n    closest_integer\
    \ = Int(0)\n    \n    if value == \"-inf\" \n        closest_integer = -Int(Inf)\n\
    \    \n    else if value == \"inf\" \n        closest_integer = Int(Inf)\n   \
    \ \n    else if value == \"-inf\" \n        closest_integer = -Int(-Inf)\n   \
    \ \n    else if value == \"inf\" \n        closest_integer = Int(-Inf)\n    \n\
    \    else if value == \"nan\" \n        closest_integer = Int(NaN)\n    \n   \
    \ else if value == \"0\" \n        closest_integer = Int(0)\n    \n    else if\
    \ value == \"1\" \n        closest_integer = Int(1)\n    \n    else if value ==\
    \ \"2\" \n        closest_integer = Int(2)\n    \n    else if value == \"3\" \n\
    \        closest_integer = Int(3)\n    \n    else if value == \"4\" \n       \
    \ closest_integer = Int(4)\n    \n    else if value == \"5\" \n        closest_integer\
    \ = Int(5)\n    \n    else if value == \"6\" \n        closest_integer = Int(6)\n\
    \    \n    else if value == \"7\" \n        closest_integer = Int(7)\n    \n \
    \   else if value == \"8\" \n        closest_integer = Int(8)\n    \n    else\
    \ if value == \"9\" \n        closest_integer = Int(9)\n    \n    else if value\
    \ == \"10\" \n        closest_integer = Int(10)\n    \n    else if value == \"\
    11\" \n        closest_integer = Int(11)\n    \n    else if value == \"12\" \n\
    \        closest_integer = Int(12)\n    \n    else if value == \"13\" \n     \
    \   closest_integer = Int(13)\n    \n    else if value == \"14\" \n        closest_integer\
    \ = Int(14)\n    \n    else if value == \"15\" \n        closest_integer = Int(15)\n\
    \    \n    else if value == \"16\" \n        closest_integer = Int(16)\n    \n\
    \    else if value == \"17\" \n        closest_integer = Int(17)\n    \n    else\
    \ if value == \"18\" \n        closest_integer = Int(18)\n    \n    else if value\
    \ == \"19\" \n        closest_integer = Int(19)\n    \n    else if value == \"\
    20\" \n        closest_integer = Int(20)\n    \n    else if value == \"21\" \n\
    \        closest_integer = Int(21)\n    \n    else if value == \"22\" \n     \
    \   closest_integer = Int(22)\n    \n    else if value == \"23\" \n        closest_integer\
    \ = Int(23)\n    \n", "    \n    if value == \"\"\n        return -1\n    \n \
    \   numbers = value.split(\",\")\n    \n    closest_integer = numbers[0]\n   \
    \ \n    for number in numbers\n        if number > closest_integer\n         \
    \   closest_integer = number\n    \n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two floats, round it away from zero.", "    \n    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.ceil(value))\n    end\n    return closest_integer\nend", "    \n\
    \    if value == \"\"\n        error(\"value cannot be an empty string\")\n  \
    \  end\n    \n    number = parse(Float64, value)\n    \n    if number == 0.0\n\
    \        error(\"value cannot be 0.0\")\n    end\n    \n    diff = abs(number\
    \ - 1.0)\n    \n    if diff < 1.0e-10\n        return number\n    end\n    \n\
    \    if diff < 1.0e-6\n        return round(number)\n    end\n    \n    if diff\
    \ < 1.0e-3\n        return round(number * 10.0) / 10.0\n    end\n    \n    if\
    \ diff < 1.0\n        return round(number * 100.0) / 100.0\n    end\n    \n  \
    \  if diff < 1.0e3\n        return round(number * 1000.0) / 1000.0\n    end\n\
    \    \n    if diff < 1.0e6\n        return round(number * 10000.0) / 10000.0\n\
    \    end\n    \n    if diff < 1.0e9\n        return round(number * 100000.0) /\
    \ 100000.0\n    end\n    \n    if diff < 1.0e10\n        return round(number *\
    \ 1000000.0) / 1000000.0\n    end\n    \n    if diff < 1.0e12\n        return\
    \ round(number * 10000000.0) / 10000000.0\n    end\n    \n    if diff < 1.0e13\n\
    \        return round(number * 100000000.0) / 100000000.0\n    end\n    \n   \
    \ if diff < 1.0e14\n        return round(number * 1000000000.0) / 1000000000.0\n\
    \    end\n    \n    if diff < 1.0e15\n        return round(number * 10000000000.0)\
    \ / 10000000000.0\n    end\n    \n    if diff < 1.0e16\n        return round(number\
    \ * 100000000000.0) / 100000000000.0\n    end\n    \n    if diff < 1.0e17\n  \
    \      return round(number * 1000000000000.0) / 1000000000000.0\n    end\n   \
    \ \n    if diff < 1.0e18\n        return round(number * 10000000000000.0) / 10000000000000.0\n\
    \    end\n    \n    if diff < 1.0e19\n        return round(number * 100000000000000.0)\
    \ / 100000000000000.0\n    end\n    \n    if diff < 1.0e20\n        return round(number\
    \ * 1000000000000000.0) / 1000000000000000.0\n    end\n    \n    if diff < 1.0e21\n\
    \        return round(number * 10000000000000000.0) / 10000000000000000.0\n  \
    \  end\n    \n    if diff < 1.0e22\n        return round(number * 100000000000000000.0)\
    \ / 100000000000000000.0\n    end\n    \n    if diff < 1.0e23\n        return\
    \ round(number * 1000000000000000000.0) / 1000000000000000000.0\n    end\n   \
    \ \n    if diff < 1.0e24\n        return round(number * 10000000000000000000.0)\
    \ / 10000000000000000000.0\n    end\n    \n", "    \n    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    \n    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest real number to it. If the number is equidistant\n\
    \    from two numbers, round it away from zero.", "    \n    if value == \"\"\n\
    \        error(\"Value cannot be empty\")\n    elseif value == \"-\"\n       \
    \ error(\"Value cannot be negative\")\n    elseif value == \"+\"\n        error(\"\
    Value cannot be positive\")\n    elseif value == \"0\"\n        error(\"Value\
    \ cannot be 0\")\n    elseif value == \"1\"\n        error(\"Value cannot be 1\"\
    )\n    elseif value == \"2\"\n        error(\"Value cannot be 2\")\n    elseif\
    \ value == \"3\"\n        error(\"Value cannot be 3\")\n    elseif value == \"\
    4\"\n        error(\"Value cannot be 4\")\n    elseif value == \"5\"\n       \
    \ error(\"Value cannot be 5\")\n    elseif value == \"6\"\n        error(\"Value\
    \ cannot be 6\")\n    elseif value == \"7\"\n        error(\"Value cannot be 7\"\
    )\n    elseif value == \"8\"\n        error(\"Value cannot be 8\")\n    elseif\
    \ value == \"9\"\n        error(\"Value cannot be 9\")\n    else\n        \n \
    \       local digits = string.split(value, \".\")\n        local digits_length\
    \ = digits:len()\n        \n        if digits_length == 1\n            error(\"\
    Value cannot be equidistant from two integers\")\n        elseif digits_length\
    \ == 2\n            \n            local first_digit = tonumber(digits[1])\n  \
    \          local second_digit = tonumber(digits[2])\n            \n          \
    \  if first_digit == second_digit\n                error(\"Value cannot be equidistant\
    \ from two integers\")\n            else\n                \n                local\
    \ first_digit_rounded = round(first_digit)\n                local second_digit_rounded\
    \ = round(second_digit)\n                \n                if first_digit_rounded\
    \ == second_digit_rounded\n                    error(\"Value cannot be equidistant\
    \ from two integers\")\n                else\n                    \n         \
    \           if first_digit_rounded < second_digit_rounded\n                  \
    \      error(\"Value cannot be equidistant from two integers\")\n            \
    \        else\n                        \n                        return first_digit_rounded\n\
    \                    end\n                end\n            end\n        else\n\
    \            error(\"Value cannot be equidistant from two integers\")\n      \
    \  end\n    end\nend\n</cell>\n<text>\nThe function closest_integer takes the\
    \ value of a string representing a number and returns an integer.", "    \n  \
    \  if value == \"\"\n        error(\"The value cannot be an empty string\")\n\
    \    end\n    \n    if isdigit(value[1])\n        error(\"The value cannot start\
    \ with a digit\")\n    end\n    \n    if isdigit(value[2])\n        error(\"The\
    \ value cannot end with a digit\")\n    end\n    \n    if isdigit(value[3])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit(value[4])\n        error(\"The value cannot contain any digits\")\n\
    \    end\n    \n    if isdigit(value[5])\n        error(\"The value cannot contain\
    \ any digits\")\n    end\n    \n    if isdigit(value[6])\n        error(\"The\
    \ value cannot contain any digits\")\n    end\n    \n    if isdigit(value[7])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit(value[8])\n        error(\"The value cannot contain any digits\")\n\
    \    end\n    \n    if isdigit(value[9])\n        error(\"The value cannot contain\
    \ any digits\")\n    end\n    \n    if isdigit(value[10])\n        error(\"The\
    \ value cannot contain any digits\")\n    end\n    \n    if isdigit(value[11])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit(value[12])\n        error(\"The value cannot contain any digits\")\n\
    \    end\n    \n    if isdigit(value[13])\n        error(\"The value cannot contain\
    \ any digits\")\n    end\n    \n    if isdigit(value[14])\n        error(\"The\
    \ value cannot contain any digits\")\n    end\n    \n    if isdigit(value[15])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit(value[16])\n        error(\"The value cannot contain any digits\")\n\
    \    end\n    \n    if isdigit(value[17])\n        error(\"The value cannot contain\
    \ any digits\")\n    end\n    \n    if isdigit(value[18])\n        error(\"The\
    \ value cannot contain any digits\")\n    end\n    \n    if isdigit(value[19])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit(value[20])\n        error(\"The value cannot contain any digits\")\n\
    \    end\n    \n    if isdigit(value[21])\n        error(\"The value cannot contain\
    \ any digits\")\n    end\n    \n    if isdigit(value[22])\n        error(\"The\
    \ value cannot contain any digits\")\n    end\n    \n    if isdigit(value[23])\n\
    \        error(\"The value cannot contain any digits\")\n    end\n    \n    if\
    \ isdigit", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if value == \"\"\n        error(\"value cannot be empty\")\n    \n    digits\
    \ = value.digits\n    \n    if digits == 0\n        error(\"value cannot be empty\"\
    )\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n        error(\"\
    value cannot be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits\
    \ == 0\n        error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n", "    \n    if value == \"\"\n        return -1\n    \n\
    \    digits = split(value, \".\")\n    \n    if digits.length != 2\n        return\
    \ -1\n    \n    digit1 = digits[1]\n    digit2 = digits[2]\n    \n    if digit1\
    \ == \"\"\n        return -1\n    \n    if digit2 == \"\"\n        return -1\n\
    \    \n    digit1 = digit1\n    digit2 = digit2\n    \n    if digit1 == \"\"\n\
    \        return -1\n    \n    if digit2 == \"\"\n        return -1\n    \n   \
    \ digit1 = digit1\n    digit2 = digit2\n    \n    if digit1 == \"\"\n        return\
    \ -1\n    \n    if digit2 == \"\"\n        return -1\n    \n    digit1 = digit1\n\
    \    digit2 = digit2\n    \n    if digit1 == \"\"\n        return -1\n    \n \
    \   if digit2 == \"\"\n        return -1\n    \n    digit1 = digit1\n    digit2\
    \ = digit2\n    \n    if digit1 == \"\"\n        return -1\n    \n    if digit2\
    \ == \"\"\n        return -1\n    \n    digit1 = digit1\n    digit2 = digit2\n\
    \    \n    if digit1 == \"\"\n        return -1\n    \n    if digit2 == \"\"\n\
    \        return -1\n    \n    digit1 = digit1\n    digit2 = digit2\n    \n   \
    \ if digit1 == \"\"\n        return -1\n    \n    if digit2 == \"\"\n        return\
    \ -1\n    \n    digit1 = digit1\n    digit2 = digit2\n    \n    if digit1 == \"\
    \"\n        return -1\n    \n    if digit2 == \"\"\n        return -1\n    \n\
    \    digit1 = digit1\n    digit2 = digit2\n    \n    if digit1 == \"\"\n     \
    \   return -1\n    \n    if digit2 == \"\"\n        return -1\n    \n    digit1\
    \ = digit1\n    digit2 = digit2\n    \n    if digit1 == \"\"\n        return -1\n\
    \    \n    if digit2 == \"\"\n        return -1\n    \n    digit1 = digit1\n \
    \   digit2 = digit2\n    \n    if digit1 == \"\"\n        return -1\n    \n  \
    \  if digit2 == \"\"\n        return -1\n    \n    digit1 = digit1\n    digit2\
    \ = digit2\n    \n    if digit1 == \"\"\n        return -1\n    \n    if digit2\
    \ == \"\"\n        return -1\n    \n    digit1 = digit1\n    digit2 = digit2\n\
    \    \n    if digit1 == \"\"\n        return -1\n    \n    if digit2 == \"\"\n\
    \        return -1\n    \n    digit1 = digit1\n    digit2 = digit2\n    \n   \
    \ if digit1 == \"\"\n        return -1\n    \n    if digit2 == \"\"\n        return\
    \ -1\n    \n    digit1 = digit", "    \n    if value == \"\"\n        return -1\n\
    \    \n    digits = value.digits\n    \n    if digits[1] == digits[2]\n      \
    \  return digits[1]\n    \n    diff = digits[1] - digits[2]\n    \n    if diff\
    \ < 0\n        return digits[1]\n    \n    return digits[2]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.51\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.5111\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.51111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.511111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.51111111\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.511111111\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5111111111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.51111111111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511111111\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.5111111111\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.51111111111\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.511111111111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.5111111111111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.51111111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511111111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111111111111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111111111111\"\
    )\n</cell", "    \n    if value == \"\"\n        error(\"The value given was empty.\"\
    )\n    end\n    \n    local num = tonumber(value)\n    if num == nil\n       \
    \ error(\"The value given is not a number.\")\n    end\n    \n    if num < 0\n\
    \        error(\"The value given is negative.\")\n    end\n    \n    if num ==\
    \ 0\n        return 0\n    end\n    \n    local closest = 0\n    local closestDiff\
    \ = abs(num - closest)\n    \n    for i = 1, 10 do\n        local diff = (num\
    \ - closest)\n        if diff < closestDiff\n            closestDiff = diff\n\
    \            closest = i\n        end\n    end\n    \n    return closest\nend\n\
    </cell>\n<text>\nThe function closest_integer takes a string representing a number\
    \ and returns the closest integer to it. If the number is equidistant from two\
    \ integers, round it away from zero.", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"-inf\" \n        closest_integer = Int64(-Inf)\n    \n\
    \    else if value == \"inf\" \n        closest_integer = Int64(Inf)\n    \n \
    \   else if value == \"nan\" \n        closest_integer = Int64(-1)\n    \n   \
    \ else if value == \"0\" \n        closest_integer = Int64(0)\n    \n    else\
    \ if value == \"1\" \n        closest_integer = Int64(1)\n    \n    else if value\
    \ == \"2\" \n        closest_integer = Int64(2)\n    \n    else if value == \"\
    3\" \n        closest_integer = Int64(3)\n    \n    else if value == \"4\" \n\
    \        closest_integer = Int64(4)\n    \n    else if value == \"5\" \n     \
    \   closest_integer = Int64(5)\n    \n    else if value == \"6\" \n        closest_integer\
    \ = Int64(6)\n    \n    else if value == \"7\" \n        closest_integer = Int64(7)\n\
    \    \n    else if value == \"8\" \n        closest_integer = Int64(8)\n    \n\
    \    else if value == \"9\" \n        closest_integer = Int64(9)\n    \n    else\
    \ if value == \"10\" \n        closest_integer = Int64(10)\n    \n    else if\
    \ value == \"11\" \n        closest_integer = Int64(11)\n    \n    else if value\
    \ == \"12\" \n        closest_integer = Int64(12)\n    \n    else if value ==\
    \ \"13\" \n        closest_integer = Int64(13)\n    \n    else if value == \"\
    14\" \n        closest_integer = Int64(14)\n    \n    else if value == \"15\"\
    \ \n        closest_integer = Int64(15)\n    \n    else if value == \"16\" \n\
    \        closest_integer = Int64(16)\n    \n    else if value == \"17\" \n   \
    \     closest_integer = Int64(17)\n    \n    else if value == \"18\" \n      \
    \  closest_integer = Int64(18)\n    \n    else if value == \"19\" \n        closest_integer\
    \ = Int64(19)\n    \n    else if value == \"20\" \n        closest_integer = Int64(20)\n\
    \    \n    else if value == \"21\" \n        closest_integer = Int64(21)\n   \
    \ \n    else if value == \"22\" \n        closest_integer = Int64(22)\n    \n\
    \    else if value == \"23\" \n        closest_integer = Int64(23)\n    \n   \
    \ else if value == \"24\" \n        closest_integer = Int", "    if value == \"\
    \"\n        error(\"The value given was empty.\")\n    elseif value == \"-\"\n\
    \        error(\"The value given was a negative number.\")\n    elseif value ==\
    \ \"+\"\n        error(\"The value given was a positive number.\")\n    elseif\
    \ value == \"0\"\n        error(\"The value given was zero.\")\n    elseif value\
    \ == \"1\"\n        error(\"The value given was a number that equidistantly divides\
    \ itself.\")\n    elseif value == \"-1\"\n        error(\"The value given was\
    \ a negative number that equidistantly divides itself.\")\n    elseif value ==\
    \ \"1.5\"\n        error(\"The value given was a number that equidistantly divides\
    \ itself.\")\n    elseif value == \"-1.5\"\n        error(\"The value given was\
    \ a negative number that equidistantly divides itself.\")\n    elseif value ==\
    \ \"1.5e2\"\n        error(\"The value given was a number that equidistantly divides\
    \ itself.\")\n    elseif value == \"-1.5e2\"\n        error(\"The value given\
    \ was a negative number that equidistantly divides itself.\")\n    elseif value\
    \ == \"1.5e-2\"\n        error(\"The value given was a number that equidistantly\
    \ divides itself.\")\n    elseif value == \"-1.5e-2\"\n        error(\"The value\
    \ given was a negative number that equidistantly divides itself.\")\n    elseif\
    \ value == \"1.5e-3\"\n        error(\"The value given was a number that equidistantly\
    \ divides itself.\")\n    elseif value == \"-1.5e-3\"\n        error(\"The value\
    \ given was a negative number that equidistantly divides itself.\")\n    elseif\
    \ value == \"1.5e-4\"\n        error(\"The value given was a number that equidistantly\
    \ divides itself.\")\n    elseif value == \"-1.5e-4\"\n        error(\"The value\
    \ given was a negative number that equidistantly divides itself.\")\n    elseif\
    \ value == \"1.5e-5\"\n        error(\"The value given was a number that equidistantly\
    \ divides itself.\")\n    elseif value == \"-1.5e-5\"\n        error(\"The value\
    \ given was a negative number that equidistantly divides itself.\")\n    elseif\
    \ value == \"1.5e-6\"\n        error(\"The value given was a number that equidistantly\
    \ divides itself.\")\n    elseif value == \"-1.5e-6\"\n        error(\"The value\
    \ given was a negative number that equidistantly divides itself.\")\n    elseif\
    \ value == \"1.5", "    \n    if value == \"\"\n        error(\"The value given\
    \ was empty\")\n    end\n    \n    local value = tonumber(value)\n    if value\
    \ == 0\n        error(\"The value given was 0\")\n    end\n    \n    local closest\
    \ = 0\n    local closestDiff = abs(value - closest)\n    \n    for i = 1, 10 do\n\
    \        local diff = abs(value - closest)\n        if diff < closestDiff then\n\
    \            closest = value\n            closestDiff = diff\n        end\n  \
    \  end\n    \n    return closest\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if value == \"\"\n        return -1\n    \n    number = parse(Float64,\
    \ value)\n    \n    if number == 0.0\n        return -1\n    \n    diff = abs(number\
    \ - floor(number))\n    \n    if diff < 0.5\n        return floor(number)\n  \
    \  else\n        return ceil(number)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two floats, round it away from zero.", "    \n    closest_integer = Int64(math.floor(Int64(value)))\n\
    \    \n    if closest_integer == Int64(math.floor(Int64(value))):\n        closest_integer\
    \ = Int64(math.ceil(Int64(value)))\n    \n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two integers, round it away from zero.", "    \n  \
    \  closest_integer = Int64(0)\n    \n    digits = value.digits\n    \n    digits_len\
    \ = len(digits)\n    \n    if digits_len == 0 \n        error(\"The given value\
    \ has no digits.\")\n    \n    if digits_len == 1\n        closest_integer = digits[0]\n\
    \    \n    elseif digits_len == 2\n        closest_integer = digits[0] + digits[1]\n\
    \    \n    elseif digits_len == 3\n        closest_integer = digits[0] + digits[1]\
    \ + digits[2]\n    \n    elseif digits_len == 4\n        closest_integer = digits[0]\
    \ + digits[1] + digits[2] + digits[3]\n    \n    elseif digits_len == 5\n    \
    \    closest_integer = digits[0] + digits[1] + digits[2] + digits[3] + digits[4]\n\
    \    \n    elseif digits_len == 6\n        closest_integer = digits[0] + digits[1]\
    \ + digits[2] + digits[3] + digits[4] + digits[5]\n    \n    elseif digits_len\
    \ == 7\n        closest_integer = digits[0] + digits[1] + digits[2] + digits[3]\
    \ + digits[4] + digits[5] + digits[6]\n    \n    elseif digits_len == 8\n    \
    \    closest_integer = digits[0] + digits[1] + digits[2] + digits[3] + digits[4]\
    \ + digits[5] + digits[6] + digits[7]\n    \n    elseif digits_len == 9\n    \
    \    closest_integer = digits[0] + digits[1] + digits[2] + digits[3] + digits[4]\
    \ + digits[5] + digits[6] + digits[7] + digits[8]\n    \n    elseif digits_len\
    \ == 10\n        closest_integer = digits[0] + digits[1] + digits[2] + digits[3]\
    \ + digits[4] + digits[5] + digits[6] + digits[7] + digits[8] + digits[9]\n  \
    \  \n    elseif digits_len == 11\n        closest_integer = digits[0] + digits[1]\
    \ + digits[2] + digits[3] + digits[4] + digits[5] + digits[6] + digits[7] + digits[8]\
    \ + digits[9] + digits[10]\n    \n    elseif digits_len == 12\n        closest_integer\
    \ = digits[0] + digits[1] + digits[2] + digits[3] + digits[4] + digits[5] + digits[6]\
    \ + digits[7] + digits[8] + digits[9] + digits[10] + digits[11]\n    \n    elseif\
    \ digits_len == 13\n        closest_integer = digits[0] + digits[1] + digits[2]\
    \ + digits[3] + digits[4] + digits[5] + digits[6] + digits[7", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"\"\n        return closest_integer\n   \
    \ \n    \n    if value == \"0\"\n        return closest_integer\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    if value == \"0\" || value == \"-0\" \n \
    \       then return 0\n    \n    else if value == \"1\" || value == \"-1\" \n\
    \        then return 1\n    \n    else if value == \"2\" || value == \"-2\" \n\
    \        then return 2\n    \n    else if value == \"3\" || value == \"-3\" \n\
    \        then return 3\n    \n    else if value == \"4\" || value == \"-4\" \n\
    \        then return 4\n    \n    else if value == \"5\" || value == \"-5\" \n\
    \        then return 5\n    \n    else if value == \"6\" || value == \"-6\" \n\
    \        then return 6\n    \n    else if value == \"7\" || value == \"-7\" \n\
    \        then return 7\n    \n    else if value == \"8\" || value == \"-8\" \n\
    \        then return 8\n    \n    else if value == \"9\" || value == \"-9\" \n\
    \        then return 9\n    \n    else if value == \"10\" || value == \"-10\"\
    \ \n        then return 10\n    \n    else if value == \"11\" || value == \"-11\"\
    \ \n        then return 11\n    \n    else if value == \"12\" || value == \"-12\"\
    \ \n        then return 12\n    \n    else if value == \"13\" || value == \"-13\"\
    \ \n        then return 13\n    \n    else if value == \"14\" || value == \"-14\"\
    \ \n        then return 14\n    \n    else if value == \"15\" || value == \"-15\"\
    \ \n        then return 15\n    \n    else if value == \"16\" || value == \"-16\"\
    \ \n        then return 16\n    \n    else if value == \"17\" || value == \"-17\"\
    \ \n        then return 17\n    \n    else if value == \"18\" || value == \"-18\"\
    \ \n        then return 18\n    \n    else if value == \"19\" || value == \"-19\"\
    \ \n        then return 19\n    \n    else if value == \"20\" || value == \"-20\"\
    \ \n        then return 20\n    \n    else if value == \"21\" || value == \"-21\"\
    \ \n        then return 21\n    \n    else if value == \"22\" || value == \"-22\"\
    \ \n        then return 22\n    \n    else if value == \"23\" || value == \"-23\"\
    \ \n        then return 23\n    \n    else if value == \"24\" || value == \"-24\"\
    \ \n        then return 24\n    \n    else if value == \"25\" || value == \"-25\"\
    \ \n        then return 25\n    \n    else if value == \"26\" || value == \"-26\"\
    \ \n        ", "    \n    closest_integer = Int64(math.floor(Int64(value)))\n\
    \    \n    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    \n    return closest_integer\nend", "    \n    closest_integer =\
    \ Int64(0)\n    \n    if value == \"\"\n        return closest_integer\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if value == \"\"\n        error(\"The value cannot be empty\")\n    end\n\
    \    \n    try\n        val = Float64(value)\n    catch e\n        error(\"The\
    \ value must be a number\")\n    end\n    \n    \n    if val < 0\n        error(\"\
    The value cannot be negative\")\n    end\n    \n    \n    if val == 0\n      \
    \  error(\"The value cannot be 0\")\n    end\n    \n    \n    if val > 0\n   \
    \     error(\"The value cannot be positive\")\n    end\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if\
    \ value == \"\"\n        error(\"The value must be a string\")\n    end", "  \
    \  \n    if value == \"\"\n        error(\"Value cannot be empty\")\n    end\n\
    \    \n    digits = split(value, \".\")\n    \n    if length(digits) < 2\n   \
    \     error(\"Value must contain at least two digits\")\n    end\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = map(digits, parse)\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x -> round(x))\n    \n    digits = map(digits,\
    \ x -> abs(x))\n    \n    digits = sort(digits)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = map(digits, x ", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == Int64(math.floor(value))\n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    \n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5\")\n</cell>\n<code\
    \ language=julia-1.1>\nclosest_integer(\"-14.5\")\n</cell>\n<code language=julia-1.1>\n\
    closest_integer(\"14.51\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"\
    14.510\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5100\")\n\
    </cell>\n<code language=julia-1.1>\nclosest_integer(\"14.51000\")\n</cell>\n<code\
    \ language=julia-1.1>\nclosest_integer(\"14.510000\")\n</cell>\n<code language=julia-1.1>\n\
    closest_integer(\"14.5100000\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"\
    14.51000000\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.510000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5100000000\")\n</cell>\n\
    <code language=julia-1.1>\nclosest_integer(\"14.51000000000\")\n</cell>\n<code\
    \ language=julia-1.1>\nclosest_integer(\"14.510000000000\")\n</cell>\n<code language=julia-1.1>\n\
    closest_integer(\"14.5100000000000\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"\
    14.51000000000000\")\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.510000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5100000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.51000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.510000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5100000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.51000000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.510000000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.5100000000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"14.51000000000000000000000\"\
    )\n</cell>\n<code language=julia-1.1>\nclosest_integer(\"", "    \n    if value\
    \ == \"\"\n        error(\"The value cannot be empty\")\n    \n    number = parse(Float64,\
    \ value)\n    \n    if number == 0.0\n        error(\"The value cannot be 0\"\
    )\n    \n    diff = abs(number - number)\n    \n    if diff < 1.0\n        return\
    \ number\n    \n    if diff < 2.0\n        return number + 1.0\n    \n    if diff\
    \ < 3.0\n        return number + 2.0\n    \n    if diff < 4.0\n        return\
    \ number + 3.0\n    \n    if diff < 5.0\n        return number + 4.0\n    \n \
    \   if diff < 6.0\n        return number + 5.0\n    \n    if diff < 7.0\n    \
    \    return number + 6.0\n    \n    if diff < 8.0\n        return number + 7.0\n\
    \    \n    if diff < 9.0\n        return number + 8.0\n    \n    if diff < 10.0\n\
    \        return number + 9.0\n    \n    if diff < 11.0\n        return number\
    \ + 10.0\n    \n    if diff < 12.0\n        return number + 11.0\n    \n    if\
    \ diff < 13.0\n        return number + 12.0\n    \n    if diff < 14.0\n      \
    \  return number + 13.0\n    \n    if diff < 15.0\n        return number + 14.0\n\
    \    \n    if diff < 16.0\n        return number + 15.0\n    \n    if diff < 17.0\n\
    \        return number + 16.0\n    \n    if diff < 18.0\n        return number\
    \ + 17.0\n    \n    if diff < 19.0\n        return number + 18.0\n    \n    if\
    \ diff < 20.0\n        return number + 19.0\n    \n    if diff < 21.0\n      \
    \  return number + 20.0\n    \n    if diff < 22.0\n        return number + 21.0\n\
    \    \n    if diff < 23.0\n        return number + 22.0\n    \n    if diff < 24.0\n\
    \        return number + 23.0\n    \n    if diff < 25.0\n        return number\
    \ + 24.0\n    \n    if diff < 26.0\n        return number + 25.0\n    \n    if\
    \ diff < 27.0\n        return number + 26.0\n    \n    if diff < 28.0\n      \
    \  return number + 27.0\n    \n    if diff < 29.0\n        return number + 28.0\n\
    \    \n    if diff < 30.0\n        return number + 29.0\n    \n    if diff < 31.0\n\
    \        return number + 30.0\n    \n    if diff < 32.0\n        return number\
    \ + 31.0\n    \n    if diff < 33.0\n        return number + 32.0\n    \n    if\
    \ diff < 34.0\n        return number + 33.0\n    \n    if diff < 35.0\n      \
    \  return number + ", "    \n    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    \n    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two integers, round it away from zero.", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        closest_integer = Int64(0)\n    else\n  \
    \      \n        digits = split(value, \".\")\n        \n        digits_int =\
    \ Int64(0)\n        \n        for d in digits\n            digits_int *= 10\n\
    \            digits_int += Int64(d)\n        end\n        \n        if digits_int\
    \ == 0\n            closest_integer = Int64(0)\n        else\n            \n \
    \           digits_int -= 1\n            \n            if digits_int < 0\n   \
    \             digits_int *= -1\n            end\n            \n            closest_integer\
    \ = digits_int\n        end\n    end\n    \n    return closest_integer\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)::Int64",
  "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    digits = value.digits\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    if digits.length == 2\n   \
    \     if digits[0] == digits[1]\n            return Int64(digits[0])\n       \
    \ else\n            return Int64(digits[1])\n    \n    if digits.length == 3\n\
    \        if digits[0] == digits[1]\n            if digits[1] == digits[2]\n  \
    \              return Int64(digits[0])\n            else\n                return\
    \ Int64(digits[2])\n        else\n            if digits[1] == digits[2]\n    \
    \            return Int64(digits[1])\n            else\n                return\
    \ Int64(digits[2])\n    \n    if digits.length == 4\n        if digits[0] == digits[1]\n\
    \            if digits[1] == digits[2]\n                if digits[2] == digits[3]\n\
    \                    return Int64(digits[0])\n                else\n         \
    \           return Int64(digits[3])\n            else\n                if digits[2]\
    \ == digits[3]\n                    return Int64(digits[1])\n                else\n\
    \                    return Int64(digits[3])\n        else\n            if digits[1]\
    \ == digits[2]\n                if digits[2] == digits[3]\n                  \
    \  return Int64(digits[1])\n                else\n                    return Int64(digits[3])\n\
    \            else\n                if digits[2] == digits[3]\n               \
    \     return Int64(digits[2])\n                else\n                    return\
    \ Int64(digits[3])\n    \n    if digits.length == 5\n        if digits[0] == digits[1]\n\
    \            if digits[1] == digits[2]\n                if digits[2] == digits[3]\n\
    \                    if digits[3] == digits[4]\n                        return\
    \ Int64(digits[0])\n                    else\n                        return Int64(digits[4])\n\
    \                else\n                    if digits[3] == digits[4]\n       \
    \                 return Int64(digits[1])\n                    else\n        \
    \                return Int64(digits[4])\n            else\n                if\
    \ digits[2] == digits[3]\n                    if digits[3] == digits[4]\n    \
    \                    return Int64(digits[2])\n                    else\n     \
    \                   return Int64(digits[4])\n                else\n          \
    \          if digits[3] == digits[4]\n                        return Int64(digits[3])\n\
    \                    else\n                        return Int64(digits[4])\n \
    \           \n    if digits.length == 6\n        if digits[0] == digits[1]\n \
    \           if digits[1] == digits[2]\n                if digits[2] == digits[3]\n\
    \                    if digits[3] == digits[4]\n                        if digits[4]\
    \ == digits[5]\n                            return Int64(digits[0])\n        \
    \                else\n                            return Int64(digits[5])\n \
    \                   else\n                        if digits[4] == digits[5]\n\
    \                            return Int64(digits[1])\n                       \
    \ else\n                            return Int64(digits[5])\n                else\n\
    \                    if digits[3] == digits[4]\n                        if digits[4]\
    \ == digits[5]\n                            return ", "    \n    if value == \"\
    \"\n        error(\"value cannot be an empty string\")\n    end\n    \n    local\
    \ digits = split(value, \".\")\n    local digits_int = map(digits, tointeger)\n\
    \    \n    local max_int = max(digits_int)\n    local min_int = min(digits_int)\n\
    \    \n    if max_int == min_int\n        return max_int\n    end\n    \n    if\
    \ max_int - min_int == 1\n        return max_int\n    end\n    \n    if max_int\
    \ - min_int == -1\n        return min_int\n    end\n    \n    if max_int - min_int\
    \ == 0\n        return max_int - 1\n    end\n    \n    return max_int + 1\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    end\n    \n    number = parse(Float64, value)\n\
    \    \n    if number == 0\n        error(\"value cannot be 0\")\n    end\n   \
    \ \n    closest_integer = round(number)\n    \n    if number == closest_integer\n\
    \        error(\"value cannot be equidistant from two integers\")\n    end\n \
    \   \n    return closest_integer\nend", "    \n    closest_integer = Int64(0)\n\
    \    \n    \n    if value == \"NaN\" || value == \"NaN\" || value == \"NaN\" ||\
    \ value == \"NaN\"\n        closest_integer = Int64(\"NaN\")\n    elseif value\
    \ == \"-NaN\" || value == \"-NaN\" || value == \"-NaN\" || value == \"-NaN\"\n\
    \        closest_integer = Int64(\"-NaN\")\n    elseif value == \"-Infinity\"\
    \ || value == \"-Infinity\" || value == \"-Infinity\" || value == \"-Infinity\"\
    \n        closest_integer = Int64(\"-Infinity\")\n    elseif value == \"Infinity\"\
    \ || value == \"Infinity\" || value == \"Infinity\" || value == \"Infinity\"\n\
    \        closest_integer = Int64(\"Infinity\")\n    elseif value == \"0\"\n  \
    \      closest_integer = Int64(0)\n    elseif value == \"1\"\n        closest_integer\
    \ = Int64(1)\n    elseif value == \"2\"\n        closest_integer = Int64(2)\n\
    \    elseif value == \"3\"\n        closest_integer = Int64(3)\n    elseif value\
    \ == \"4\"\n        closest_integer = Int64(4)\n    elseif value == \"5\"\n  \
    \      closest_integer = Int64(5)\n    elseif value == \"6\"\n        closest_integer\
    \ = Int64(6)\n    elseif value == \"7\"\n        closest_integer = Int64(7)\n\
    \    elseif value == \"8\"\n        closest_integer = Int64(8)\n    elseif value\
    \ == \"9\"\n        closest_integer = Int64(9)\n    elseif value == \"10\"\n \
    \       closest_integer = Int64(10)\n    elseif value == \"11\"\n        closest_integer\
    \ = Int64(11)\n    elseif value == \"12\"\n        closest_integer = Int64(12)\n\
    \    elseif value == \"13\"\n        closest_integer = Int64(13)\n    elseif value\
    \ == \"14\"\n        closest_integer = Int64(14)\n    elseif value == \"15\"\n\
    \        closest_integer = Int64(15)\n    elseif value == \"16\"\n        closest_integer\
    \ = Int64(16)\n    elseif value == \"17\"\n        closest_integer = Int64(17)\n\
    \    elseif value == \"18\"\n        closest_integer = Int64(18)\n    elseif value\
    \ == \"19\"\n        closest_integer = Int64(19)\n    elseif value == \"20\"\n\
    \        closest_integer = Int64(20)\n    elseif value == \"21\"\n        closest_integer\
    \ = Int64(21)\n    elseif value == \"22\"\n        closest_integer = Int64(22)\n\
    \    elseif value == \"23\"\n        closest_integer = Int64(23)\n    elseif value\
    \ == \"24\"\n        closest_integer = Int64(24)\n    elseif value == \"25", " \
    \   \n    closest_integer = Int64(0)\n    \n    if value == \"NaN\" \n       \
    \ closest_integer = Int64(\"NaN\")\n    else if value == \"-NaN\" \n        closest_integer\
    \ = Int64(\"-NaN\")\n    else if value == \"-Inf\" \n        closest_integer =\
    \ Int64(\"-Inf\")\n    else if value == \"-Inf\" \n        closest_integer = Int64(\"\
    -Inf\")\n    else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\"\
    )\n    else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n\
    \    else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n \
    \   else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n  \
    \  else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n   \
    \ else if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else\
    \ if value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else if\
    \ value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else if value\
    \ == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else if value ==\
    \ \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else if value == \"\
    -Inf\" \n        closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\"\
    \ \n        closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n\
    \        closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n \
    \       closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n  \
    \      closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n   \
    \     closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n    \
    \    closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n     \
    \   closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n      \
    \  closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n       \
    \ closest_integer = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n        closest_integer\
    \ = Int64(\"-Inf\")\n    else if value == \"-Inf\" \n        closest_integer =\
    \ Int64(\"-Inf\")\n    else if value == \"-Inf\" \n", "    \n    if value == \"\
    \"\n        return -1\n    \n    number = parse(value) \n    \n    if number ==\
    \ -1\n        return -1\n    \n    lower = floor(number)\n    upper = ceil(number)\n\
    \    \n    if lower == upper\n        return lower\n    \n    if number < 0\n\
    \        return -1\n    \n    if number > upper\n        return upper\n    \n\
    \    if number < lower\n        return lower\n    \n    return number\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two floats, round it away from zero.", "    \n    if\
    \ value == \"\"\n        error(\"The value cannot be empty\")\n    end\n    \n\
    \    if value == \"-\"\n        return -closest_integer(value)\n    end\n    \n\
    \    digits = split(value, \".\")\n    \n    if length(digits) < 2\n        error(\"\
    The value cannot be equidistant from two integers\")\n    end\n    \n    digits[1]\
    \ = digits[1] * 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]\
    \ = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1]",
  "    \n    if value == \"\"\n        error(\"Value cannot be empty\")\n    end\n\
    \    \n    local value = tonumber(value)\n    if value == 0\n        error(\"\
    Value cannot be 0\")\n    end\n    \n    local closest = 0\n    local closestDiff\
    \ = abs(value - closest)\n    \n    for i = 1, 10 do\n        local diff = abs(value\
    \ - closest)\n        if diff < closestDiff then\n            closestDiff = diff\n\
    \            closest = i\n        end\n    end\n    \n    return closest\nend\n\
    </cell>\n<text>\nclosest_integer()", "    \n    closest_integer = Int64(math.floor(Float64(value)))\n\
    \    \n    if closest_integer == Int64(math.floor(value))\n        closest_integer\
    \ = Int64(math.ceil(value))\n    \n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two floats, round it away from zero.", "    \n    closest_integer\
    \ = Int(0)\n    \n    if value == \"-inf\" or value == \"inf\" then\n        return\
    \ -Inf(1,1)\n    end\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ < 2 then\n        return Int(value)\n    end\n    \n    digits[1] = digits[1]\
    \ * 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[2]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n", "    \n    if value ==\
    \ \"\"\n        error(\"The value cannot be an empty string\")\n    end\n    \n\
    \    local value = tonumber(value)\n    if value == 0\n        error(\"The value\
    \ cannot be 0\")\n    end\n    \n    local closest = 0\n    local closestDiff\
    \ = abs(value - closest)\n    \n    for i = 1, 10 do\n        local diff = abs(value\
    \ - closest)\n        if diff < closestDiff then\n            closestDiff = diff\n\
    \            closest = i\n        end\n    end\n    \n    return closest\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if value == \"-inf\" \n      \
    \  then return -Inf \n    else if value == \"inf\" \n        then return Inf \n\
    \    else if value == \"nan\" \n        then return NaN \n    else if value ==\
    \ \"0\" \n        then return 0 \n    else if value == \"1\" \n        then return\
    \ 1 \n    else if value == \"2\" \n        then return 2 \n    else if value ==\
    \ \"3\" \n        then return 3 \n    else if value == \"4\" \n        then return\
    \ 4 \n    else if value == \"5\" \n        then return 5 \n    else if value ==\
    \ \"6\" \n        then return 6 \n    else if value == \"7\" \n        then return\
    \ 7 \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else if value == \"35\" \n        then return 35 \n    else ",
  "    \n    if value == \"\"\n        return -1\n    \n    digits = value.chars\n\
    \    \n    smallest_digit = digits[0]\n    \n    smallest_digit = smallest_digit\
    \ - '0'\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = smallest_digit + smallest_digit\n    \n    smallest_digit = smallest_digit\
    \ / 10\n    \n    smallest_digit = smallest_digit * 10\n    \n    smallest_digit\
    \ = ", "    \n    if value == \"\"\n        return -1\n    \n    digits = value.digits\n\
    \    \n    closest_integer = digits[1]\n    \n    if digits[2] == digits[3]\n\
    \        closest_integer = digits[2]\n    \n    if digits[2] < digits[3]\n   \
    \     closest_integer = digits[2]\n    \n    if digits[1] < digits[2]\n      \
    \  closest_integer = digits[1]\n    \n    if digits[1] == digits[2]\n        closest_integer\
    \ = digits[1]\n    \n    if digits[1] > digits[2]\n        closest_integer = digits[2]\n\
    \    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two floats, round it away from zero.", "    \n    if value == \"\"\n       \
    \ return -1\n    \n    digits = split(value, \".\")\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digits[1]) \n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 2\n        return round(digits[1])\
    \ \n    \n    digits = digits[2:]\n    \n    if digits.length == 2\n        return\
    \ round(digits[1]) \n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digits[1]) \n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 2\n        return round(digits[1])\
    \ \n    \n    digits = digits[2:]\n    \n    if digits.length == 2\n        return\
    \ round(digits[1]) \n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digits[1]) \n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 2\n        return round(digits[1])\
    \ \n    \n    digits = digits[2:]\n    \n    if digits.length == 2\n        return\
    \ round(digits[1]) \n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digits[1]) \n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 2\n        return round(digits[1])\
    \ \n    \n    digits = digits[2:]\n    \n    if digits.length == 2\n        return\
    \ round(digits[1]) \n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digits[1]) \n    \n    digits\
    \ = digits[2:]\n    \n    if digits.length == 2\n        return round(digits[1])\
    \ \n    \n    digits = digits[2:]\n    \n    if digits.length == 2\n        return\
    \ round(digits[1]) \n    \n    digits = digits[2:]\n    \n    if digits.length\
    \ == 2\n        return round(digits[1]) \n    \n    digits = digits[2:]\n    \n\
    \    if digits.length == 2\n        return round(digit", "    \n    if value ==\
    \ \"\"\n        error(\"The value given was empty\")\n    elseif value == \"-\"\
    \n        error(\"The value given was a negative number\")\n    elseif value ==\
    \ \"+\"\n        error(\"The value given was a positive number\")\n    elseif\
    \ value == \"0\"\n        error(\"The value given was 0\")\n    elseif value ==\
    \ \"1\"\n        error(\"The value given was 1\")\n    elseif value == \"2\"\n\
    \        error(\"The value given was 2\")\n    elseif value == \"3\"\n       \
    \ error(\"The value given was 3\")\n    elseif value == \"4\"\n        error(\"\
    The value given was 4\")\n    elseif value == \"5\"\n        error(\"The value\
    \ given was 5\")\n    elseif value == \"6\"\n        error(\"The value given was\
    \ 6\")\n    elseif value == \"7\"\n        error(\"The value given was 7\")\n\
    \    elseif value == \"8\"\n        error(\"The value given was 8\")\n    elseif\
    \ value == \"9\"\n        error(\"The value given was 9\")\n    else\n       \
    \ error(\"The value given was not a number\")\n    end\n    \n    if value ==\
    \ \"-\"\n        return -Int64(round(Int64(abs(value)))) \n    elseif value ==\
    \ \"+\"\n        return Int64(round(Int64(abs(value)))) \n    elseif value ==\
    \ \"0\"\n        return 0\n    elseif value == \"1\"\n        return 1\n    elseif\
    \ value == \"2\"\n        return 2\n    elseif value == \"3\"\n        return\
    \ 3\n    elseif value == \"4\"\n        return 4\n    elseif value == \"5\"\n\
    \        return 5\n    elseif value == \"6\"\n        return 6\n    elseif value\
    \ == \"7\"\n        return 7\n    elseif value == \"8\"\n        return 8\n  \
    \  elseif value == \"9\"\n        return 9\n    else\n        error(\"The value\
    \ given was not a number\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest real number to it. If the number is equidistant\n\
    \    from two numbers, round it away from zero.", "    \n    closest_integer =\
    \ Int64(0)\n    \n    if value == \"NaN\"\n        return NaN\n    \n    if value\
    \ == \"-NaN\"\n        return NaN\n    \n    if value == \"Infinity\"\n      \
    \  return Infinity\n    \n    if value == \"-Infinity\"\n        return -Infinity\n\
    \    \n    if value == \"0\"\n        return 0\n    \n    if value == \"-0\"\n\
    \        return 0\n    \n    if value == \"NaN\"\n        return NaN\n    \n \
    \   if value == \"Infinity\"\n        return Infinity\n    \n    if value == \"\
    -Infinity\"\n        return -Infinity\n    \n    if value == \"0\"\n        return\
    \ 0\n    \n    if value == \"-0\"\n        return 0\n    \n    if value == \"\
    NaN\"\n        return NaN\n    \n    if value == \"Infinity\"\n        return\
    \ Infinity\n    \n    if value == \"-Infinity\"\n        return -Infinity\n  \
    \  \n    if value == \"0\"\n        return 0\n    \n    if value == \"-0\"\n \
    \       return 0\n    \n    if value == \"NaN\"\n        return NaN\n    \n  \
    \  if value == \"Infinity\"\n        return Infinity\n    \n    if value == \"\
    -Infinity\"\n        return -Infinity\n    \n    if value == \"0\"\n        return\
    \ 0\n    \n    if value == \"-0\"\n        return 0\n    \n    if value == \"\
    NaN\"\n        return NaN\n    \n    if value == \"Infinity\"\n        return\
    \ Infinity\n    \n    if value == \"-Infinity\"\n        return -Infinity\n  \
    \  \n    if value == \"0\"\n        return 0\n    \n    if value == \"-0\"\n \
    \       return 0\n    \n    if value == \"NaN\"\n        return NaN\n    \n  \
    \  if value == \"Infinity\"\n        return Infinity\n    \n    if value == \"\
    -Infinity\"\n        return -Infinity\n    \n    if value == \"0\"\n        return\
    \ 0\n    \n    if value == \"-0\"\n        return 0\n    \n    if value == \"\
    NaN\"\n        return NaN\n    \n    if value == \"Infinity\"\n        return\
    \ Infinity\n    \n    if value == \"-Infinity\"\n        return -Infinity\n  \
    \  \n    if value == \"0\"\n        return 0\n    \n    if value == \"-0\"\n \
    \       return 0\n    \n    if value == \"NaN\"\n        return NaN\n    \n  \
    \  if value == \"Infinity\"\n        return Infinity\n    \n    if value == \"\
    -Infinity\"\n        return -Infinity\n    \n    if value == \"0\"\n        return\
    \ 0\n    \n    if value == \"-0\"\n        return 0\n    \n    if value == \"\
    NaN\"\n        return NaN\n    \n    if value == \"Infinity\"\n        return\
    \ Infinity\n    \n    if value == \"-Infinity\"\n        return -Infinity\n  \
    \  \n    if value == \"0\"\n        return 0\n    \n    if value == \"-0\"\n \
    \       return 0\n    \n    if value ", "    if value == \"\"\n        throw(ArgumentError(\"\
    The value cannot be an empty string\"))\n    if value == \"0\"\n        throw(ArgumentError(\"\
    The value cannot be the number 0\"))\n    if value == \"1\"\n        throw(ArgumentError(\"\
    The value cannot be the number 1\"))\n    if value == \"-1\"\n        throw(ArgumentError(\"\
    The value cannot be the number -1\"))\n    if value == \"-2\"\n        throw(ArgumentError(\"\
    The value cannot be the number -2\"))\n    if value == \"-3\"\n        throw(ArgumentError(\"\
    The value cannot be the number -3\"))\n    if value == \"-4\"\n        throw(ArgumentError(\"\
    The value cannot be the number -4\"))\n    if value == \"-5\"\n        throw(ArgumentError(\"\
    The value cannot be the number -5\"))\n    if value == \"-6\"\n        throw(ArgumentError(\"\
    The value cannot be the number -6\"))\n    if value == \"-7\"\n        throw(ArgumentError(\"\
    The value cannot be the number -7\"))\n    if value == \"-8\"\n        throw(ArgumentError(\"\
    The value cannot be the number -8\"))\n    if value == \"-9\"\n        throw(ArgumentError(\"\
    The value cannot be the number -9\"))\n    if value == \"-10\"\n        throw(ArgumentError(\"\
    The value cannot be the number -10\"))\n    if value == \"-11\"\n        throw(ArgumentError(\"\
    The value cannot be the number -11\"))\n    if value == \"-12\"\n        throw(ArgumentError(\"\
    The value cannot be the number -12\"))\n    if value == \"-13\"\n        throw(ArgumentError(\"\
    The value cannot be the number -13\"))\n    if value == \"-14\"\n        throw(ArgumentError(\"\
    The value cannot be the number -14\"))\n    if value == \"-15\"\n        throw(ArgumentError(\"\
    The value cannot be the number -15\"))\n    if value == \"-16\"\n        throw(ArgumentError(\"\
    The value cannot be the number -16\"))\n    if value == \"-17\"\n        throw(ArgumentError(\"\
    The value cannot be the number -17\"))\n    if value == \"-18\"\n        throw(ArgumentError(\"\
    The value cannot be the number -18\"))\n    if value == \"-19\"\n        throw(ArgumentError(\"\
    The value cannot be the number -19\"))\n    if value == \"-20\"\n        throw(ArgumentError(\"\
    The value cannot be the number -20\"))\n    if value == \"-21\"\n        throw(ArgumentError(\"\
    The value cannot be the number -21\"))\n    if value == \"-22\"\n        throw(ArgumentError(\"\
    The value cannot be the number -22\"))\n    if value == \"-23\"\n        throw(ArgumentError(\"\
    The value cannot be the number -23\"))\n    if value == \"-24\"\n        throw(ArgumentError(\"\
    The value cannot be the number -24", "    \n    if value == \"\"\n        error(\"\
    The value cannot be empty\")\n    end\n    \n    number = parse(Float64, value)\n\
    \    \n    if number == 0.0\n        error(\"The value cannot be 0\")\n    end\n\
    \    \n    diff = abs(number - round(number))\n    \n    if diff < 1.0\n     \
    \   return round(number)\n    else\n        return round(number) + 1.0\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if value == \"\"\n      \
    \  error(\"The value cannot be an empty string\")\n    end", "    \n    closest_integer\
    \ = Int64(math.floor(Int64(value)))\n    if closest_integer == Int64(math.floor(value))\n\
    \        closest_integer = Int64(math.ceil(value))\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes\
    \ a value (string) representing a number\n    and returns the closest float to\
    \ it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.", "    \n    if value == \"\"\n        return -1\n    \n    number = toFloat(value)\n\
    \    \n    if number == 0.0\n        return -1\n    \n    closest_integer = toInt(floor(number))\n\
    \    \n    if number - closest_integer < 0.5\n        return closest_integer\n\
    \    else\n        return closest_integer + 1\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    closest_integer = int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    closest_integer = Int64(math.ceil(value))\n   \
    \ \n    if closest_integer == value\n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    \n    return closest_integer\nend", "    \n    if value == \"\"\n\
    \        error(\"value cannot be an empty string\")\n    end\n    \n    local\
    \ digits = split(value, \".\")\n    local digits_len = length(digits)\n    \n\
    \    if digits_len == 1\n        return tonumber(digits[1])\n    end\n    \n \
    \   local closest_integer = tonumber(digits[1])\n    \n    if digits_len == 2\n\
    \        if digits[1] == \"\"\n            error(\"value cannot be an empty string\"\
    )\n        end\n        \n        local digits_1 = split(digits[1], \".\")\n \
    \       local digits_1_len = length(digits_1)\n        \n        if digits_1_len\
    \ == 1\n            return tonumber(digits_1[1])\n        end\n        \n    \
    \    if digits_1_len == 2\n            if digits_1[1] == \"\"\n              \
    \  error(\"value cannot be an empty string\")\n            end\n            \n\
    \            local digits_2 = split(digits_1[2], \".\")\n            local digits_2_len\
    \ = length(digits_2)\n            \n            if digits_2_len == 1\n       \
    \         return tonumber(digits_2[1])\n            end\n            \n      \
    \      if digits_2_len == 2\n                if digits_2[1] == \"\"\n        \
    \            error(\"value cannot be an empty string\")\n                end\n\
    \                \n                local digits_3 = split(digits_2[2], \".\")\n\
    \                local digits_3_len = length(digits_3)\n                \n   \
    \             if digits_3_len == 1\n                    return tonumber(digits_3[1])\n\
    \                end\n                \n                if digits_3_len == 2\n\
    \                    if digits_3[1] == \"\"\n                        error(\"\
    value cannot be an empty string\")\n                    end\n                \
    \    \n                    local digits_4 = split(digits_3[2], \".\")\n      \
    \              local digits_4_len = length(digits_4)\n                    \n \
    \                   if digits_4_len == 1\n                        return tonumber(digits_4[1])\n\
    \                    end\n                    \n                    if digits_4_len\
    \ == 2\n                        if digits_4[1] == \"\"\n                     \
    \       error(\"value cannot be an empty string\")\n                        end\n\
    \                        \n                        local digits_5 = split(digits_4[2],\
    \ \".\")\n                        local digits_5_len = length(digits_5)\n    \
    \                    \n                        if digits_5_len == 1\n        \
    \                    return tonumber(digits_5[1])\n                        end\n\
    \                        \n                        if digits_5_len == 2\n    \
    \                        if digits_5[1] == \"\"\n                            \
    \    error(\"value cannot be an empty string\")\n                            end\n\
    \                            \n                            local digits_6 = split(digits_5[2],\
    \ \".\")\n                            local digits_6_len = length(digits_6)\n\
    \                            \n                            if digits_6_len ==\
    \ 1\n                                return tonumber(digits_6[1])\n          \
    \                  end\n                            \n                       \
    \     if digits_6_len", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == value\n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    \n    return closest_integer\nend", "    \n    closest_integer =\
    \ Int64(math.floor(value))\n    if abs(closest_integer - value) < abs(closest_integer\
    \ - value/2)\n        closest_integer = Int64(math.ceil(value))\n    end\n   \
    \ return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that takes a value (string) representing a number\n    and\
    \ returns the closest float to it. If the number is equidistant\n    from two\
    \ floats, round it away from zero.", "    \n    \n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ float to it. If the number is equidistant\n    from two floats, round it away\
    \ from zero.", "    \n    if value == \"\"\n        return -1\n    \n    number\
    \ = parse(Float64, value)\n    \n    if number == 0.0\n        return -1\n   \
    \ \n    diff = abs(number - number)\n    \n    if diff < 1.0\n        return number\n\
    \    \n    if diff < 2.0\n        return number + 1.0\n    \n    if diff < 3.0\n\
    \        return number + 2.0\n    \n    if diff < 4.0\n        return number +\
    \ 3.0\n    \n    if diff < 5.0\n        return number + 4.0\n    \n    if diff\
    \ < 6.0\n        return number + 5.0\n    \n    if diff < 7.0\n        return\
    \ number + 6.0\n    \n    if diff < 8.0\n        return number + 7.0\n    \n \
    \   if diff < 9.0\n        return number + 8.0\n    \n    if diff < 10.0\n   \
    \     return number + 9.0\n    \n    if diff < 11.0\n        return number + 10.0\n\
    \    \n    if diff < 12.0\n        return number + 11.0\n    \n    if diff < 13.0\n\
    \        return number + 12.0\n    \n    if diff < 14.0\n        return number\
    \ + 13.0\n    \n    if diff < 15.0\n        return number + 14.0\n    \n    if\
    \ diff < 16.0\n        return number + 15.0\n    \n    if diff < 17.0\n      \
    \  return number + 16.0\n    \n    if diff < 18.0\n        return number + 17.0\n\
    \    \n    if diff < 19.0\n        return number + 18.0\n    \n    if diff < 20.0\n\
    \        return number + 19.0\n    \n    if diff < 21.0\n        return number\
    \ + 20.0\n    \n    if diff < 22.0\n        return number + 21.0\n    \n    if\
    \ diff < 23.0\n        return number + 22.0\n    \n    if diff < 24.0\n      \
    \  return number + 23.0\n    \n    if diff < 25.0\n        return number + 24.0\n\
    \    \n    if diff < 26.0\n        return number + 25.0\n    \n    if diff < 27.0\n\
    \        return number + 26.0\n    \n    if diff < 28.0\n        return number\
    \ + 27.0\n    \n    if diff < 29.0\n        return number + 28.0\n    \n    if\
    \ diff < 30.0\n        return number + 29.0\n    \n    if diff < 31.0\n      \
    \  return number + 30.0\n    \n    if diff < 32.0\n        return number + 31.0\n\
    \    \n    if diff < 33.0\n        return number + 32.0\n    \n    if diff < 34.0\n\
    \        return number + 33.0\n    \n    if diff < 35.0\n        return number\
    \ + 34.0\n    \n    if diff < 36", "    \n    if value == \"\"\n        error(\"\
    Value cannot be empty\")\n    end\n    \n    if value == \"-\"\n        return\
    \ -closest_integer(value[end])\n    end\n    \n    if value == \"+\"\n       \
    \ return closest_integer(value[end])\n    end\n    \n    if value == \"0\"\n \
    \       return 0\n    end\n    \n    if value == \"1\"\n        return 1\n   \
    \ end\n    \n    if value == \"2\"\n        return 2\n    end\n    \n    if value\
    \ == \"3\"\n        return 3\n    end\n    \n    if value == \"4\"\n        return\
    \ 4\n    end\n    \n    if value == \"5\"\n        return 5\n    end\n    \n \
    \   if value == \"6\"\n        return 6\n    end\n    \n    if value == \"7\"\n\
    \        return 7\n    end\n    \n    if value == \"8\"\n        return 8\n  \
    \  end\n    \n    if value == \"9\"\n        return 9\n    end\n    \n    if value\
    \ == \".\"\n        return 0.0\n    end\n    \n    if value == \"-\"\n       \
    \ return -closest_integer(value[end])\n    end\n    \n    if value == \"+\"\n\
    \        return closest_integer(value[end])\n    end\n    \n    if value == \"\
    0\"\n        return 0\n    end\n    \n    if value == \"1\"\n        return 1\n\
    \    end\n    \n    if value == \"2\"\n        return 2\n    end\n    \n    if\
    \ value == \"3\"\n        return 3\n    end\n    \n    if value == \"4\"\n   \
    \     return 4\n    end\n    \n    if value == \"5\"\n        return 5\n    end\n\
    \    \n    if value == \"6\"\n        return 6\n    end\n    \n    if value ==\
    \ \"7\"\n        return 7\n    end\n    \n    if value == \"8\"\n        return\
    \ 8\n    end\n    \n    if value == \"9\"\n        return 9\n    end\n    \n \
    \   if value == \".\"\n        return 0.0\n    end\n    \n    if value == \"-\"\
    \n        return -closest_integer(value[end])\n    end\n    \n    if value ==\
    \ \"+\"\n        return closest_integer(value[end])\n    end\n    \n    if value\
    \ == \"0\"\n        return 0\n    end\n    \n    if value == \"1\"\n        return\
    \ 1\n    end\n    \n    if value == \"2\"\n        return 2\n    end\n    \n \
    \   if value == \"3\"\n        return 3\n    end\n    \n    if value == \"4\"\n\
    \        return 4\n    end\n    \n    if value == \"5\"\n        return 5\n  \
    \  end\n    \n    if value == \"6\"\n        return 6\n    end\n    \n    if value\
    \ == \"7\"\n        return 7\n    end\n    \n    if value == \"8\"\n        return\
    \ 8\n    end\n    \n    if value == \"9", "    \n    closest_integer = int64(0)\n\
    \    \n    \n    if value == \"-inf\" \n        closest_integer = int64(-inf)\n\
    \    elseif value == \"inf\" \n        closest_integer = int64(inf)\n    elseif\
    \ value == \"nan\" \n        closest_integer = int64(NaN)\n    elseif value ==\
    \ \"0\" \n        closest_integer = int64(0)\n    elseif value == \"1\" \n   \
    \     closest_integer = int64(1)\n    elseif value == \"2\" \n        closest_integer\
    \ = int64(2)\n    elseif value == \"3\" \n        closest_integer = int64(3)\n\
    \    elseif value == \"4\" \n        closest_integer = int64(4)\n    elseif value\
    \ == \"5\" \n        closest_integer = int64(5)\n    elseif value == \"6\" \n\
    \        closest_integer = int64(6)\n    elseif value == \"7\" \n        closest_integer\
    \ = int64(7)\n    elseif value == \"8\" \n        closest_integer = int64(8)\n\
    \    elseif value == \"9\" \n        closest_integer = int64(9)\n    elseif value\
    \ == \"10\" \n        closest_integer = int64(10)\n    elseif value == \"11\"\
    \ \n        closest_integer = int64(11)\n    elseif value == \"12\" \n       \
    \ closest_integer = int64(12)\n    elseif value == \"13\" \n        closest_integer\
    \ = int64(13)\n    elseif value == \"14\" \n        closest_integer = int64(14)\n\
    \    elseif value == \"15\" \n        closest_integer = int64(15)\n    elseif\
    \ value == \"16\" \n        closest_integer = int64(16)\n    elseif value == \"\
    17\" \n        closest_integer = int64(17)\n    elseif value == \"18\" \n    \
    \    closest_integer = int64(18)\n    elseif value == \"19\" \n        closest_integer\
    \ = int64(19)\n    elseif value == \"20\" \n        closest_integer = int64(20)\n\
    \    elseif value == \"21\" \n        closest_integer = int64(21)\n    elseif\
    \ value == \"22\" \n        closest_integer = int64(22)\n    elseif value == \"\
    23\" \n        closest_integer = int64(23)\n    elseif value == \"24\" \n    \
    \    closest_integer = int64(24)\n    elseif value == \"25\" \n        closest_integer\
    \ = int64(25)\n    elseif value == \"26\" \n        closest_integer = int64(26)\n\
    \    elseif value == \"27\" \n        closest_integer = int64(27)\n    elseif\
    \ value == \"28\" \n        closest_integer = int64(28)\n    elseif value == \"\
    29\" \n        closest_integer = int64(29)\n    elseif value == \"", "    \n \
    \   if value == \"\"\n        error(\"value cannot be empty\")\n    end\n    \n\
    \    if value == \"-\"\n        return -closest_integer(value[end])\n    end\n\
    \    \n    digits = split(value, \".\")\n    \n    if length(digits) < 2\n   \
    \     error(\"value must be of form x.y where x and y are integers\")\n    end\n\
    \    \n    digits[1] = digits[1] * 10\n    \n    digits[1] = digits[1] + digits[2]\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    return digits[1]\nend\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"-14.5\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string representing a number and returns the closest integer\nto it. If the\
    \ number is equidistant from two integers, round it away from zero.", "    \n\
    \    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    digits = value.digits\n    \n    if digits[1] == \"\"\n        return\
    \ closest_integer\n    \n    if digits[1] == \"-\"\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"+\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"0\"\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"1\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"2\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"3\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"4\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"5\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"6\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"7\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"8\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"9\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \".\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"-\"\n        digits[1]\
    \ = digits[1][1:]\n    \n    if digits[1] == \"+\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"0\"\n        digits[1] = digits[1][1:]\n    \n  \
    \  if digits[1] == \"1\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"2\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"3\"\
    \n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"4\"\n      \
    \  digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"5\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"6\"\n        digits[1] = digits[1][:-1]\n\
    \    \n    if digits[1] == \"7\"\n        digits[1] = digits[1][:-1]\n    \n \
    \   if digits[1] == \"8\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1]\
    \ == \"9\"\n        digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"0\"\
    \n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"1\"\n       \
    \ digits[1] = digits[1][:-1]\n    \n    if digits[1] == \"2\"\n        digits[1]\
    \ = digits[1][:-1]\n    \n    if digits[1] == \"3\"\n        digits[1] = digits[1]",
  "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    digits = value.digits\n    \n    if digits[1] ==\
    \ \"\"\n        closest_integer = Int64(digits[0])\n        return closest_integer\n\
    \    \n    if digits[1] == \"-\"\n        digits[1] = \"\"\n        \n    if digits[1]\
    \ == \"+\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"0\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"1\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"2\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"3\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"4\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"5\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"6\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"7\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"8\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"9\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \".\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"-\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"+\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"0\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"1\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"2\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"3\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"4\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"5\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"6\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"7\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"8\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"9\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"0\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"1\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"2\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"3\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"4\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"5\"\n      \
    \  digits[1] = \"\"\n    \n    if digits[1] == \"6\"\n        digits[1] = \"\"\
    \n    \n    if digits[1] == \"7\"\n        digits[1] = \"\"\n    \n    if digits[1]\
    \ == \"8\"\n        digits[1] = \"\"\n    \n    if digits[1] == \"9", "    \n\
    \    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    \n    if value == \"-\"\n        return -closest_integer(value)\n \
    \   \n    \n    if value == \"+\"\n        return closest_integer(value)\n   \
    \ \n    \n    if value == \"0\"\n        return 0\n    \n    \n    if value ==\
    \ \"1\"\n        return 1\n    \n    \n    if value == \"2\"\n        return 2\n\
    \    \n    \n    if value == \"3\"\n        return 3\n    \n    \n    if value\
    \ == \"4\"\n        return 4\n    \n    \n    if value == \"5\"\n        return\
    \ 5\n    \n    \n    if value == \"6\"\n        return 6\n    \n    \n    if value\
    \ == \"7\"\n        return 7\n    \n    \n    if value == \"8\"\n        return\
    \ 8\n    \n    \n    if value == \"9\"\n        return 9\n    \n    \n    if value\
    \ == \".\"\n        return closest_integer(value)\n    \n    \n    if value ==\
    \ \"-\"\n        return -closest_integer(value)\n    \n    \n    if value == \"\
    +\"\n        return closest_integer(value)\n    \n    \n    if value == \"0\"\n\
    \        return 0\n    \n    \n    if value == \"1\"\n        return 1\n    \n\
    \    \n    if value == \"2\"\n        return 2\n    \n    \n    if value == \"\
    3\"\n        return 3\n    \n    \n    if value == \"4\"\n        return 4\n \
    \   \n    \n    if value == \"5\"\n        return 5\n    \n    \n    if value\
    \ == \"6\"\n        return 6\n    \n    \n    if value == \"7\"\n        return\
    \ 7\n    \n    \n    if value == \"8\"\n        return 8\n    \n    \n    if value\
    \ == \"9\"\n        return 9\n    \n    \n    if value == \".\"\n        return\
    \ closest_integer(value)\n    \n    \n    if value == \"-\"\n        return -closest_integer(value)\n\
    \    \n    \n    if value == \"+\"\n        return closest_integer(value)\n  \
    \  \n    \n    if value == \"0\"\n        return 0\n    \n    \n    if value ==\
    \ \"1\"\n        return 1\n    \n    \n    if value == \"2\"\n        return 2\n\
    \    \n    \n    if value == \"3\"\n        return 3\n    \n    \n    if value\
    \ == \"4\"\n        return 4\n    \n    \n    if value == \"5\"\n        return\
    \ 5\n    \n    \n    if value == \"6\"\n        return 6\n    \n    \n    if value\
    \ == \"7\"\n        return 7\n    \n    \n    if value == \"8\"\n        return\
    \ 8\n    \n    \n    if value == \"9\"\n        return 9\n", "    \n    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    end\n    \n    if value\
    \ == \"-\"\n        return -closest_integer(value)\n    end\n    \n    digits\
    \ = split(value, \".\")\n    \n    if length(digits) < 2\n        return error(\"\
    value cannot be empty\")\n    end\n    \n    digits[1] = digits[1] * 10\n    \n\
    \    digits[1] = digits[1] + digits[2]\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1] / 10\n\
    \    \n", "    \n    if value == \"\"\n        return -1\n    \n    number = tofloat(value)\n\
    \    \n    if number == 0.0\n        return -1\n    \n    diff = abs(number -\
    \ floor(number))\n    \n    if diff < 0.5\n        return floor(number)\n    else\n\
    \        return ceil(number)\nend", "    \n    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be -, use closest_integer(\\\"0\\\") instead\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be 0, use closest_integer(\\\"1\\\") instead\")\n\
    \    elseif value == \"1\"\n        error(\"value cannot be 1, use closest_integer(\\\
    \"2\\\") instead\")\n    elseif value == \"2\"\n        error(\"value cannot be\
    \ 2, use closest_integer(\\\"3\\\") instead\")\n    elseif value == \"3\"\n  \
    \      error(\"value cannot be 3, use closest_integer(\\\"4\\\") instead\")\n\
    \    elseif value == \"4\"\n        error(\"value cannot be 4, use closest_integer(\\\
    \"5\\\") instead\")\n    elseif value == \"5\"\n        error(\"value cannot be\
    \ 5, use closest_integer(\\\"6\\\") instead\")\n    elseif value == \"6\"\n  \
    \      error(\"value cannot be 6, use closest_integer(\\\"7\\\") instead\")\n\
    \    elseif value == \"7\"\n        error(\"value cannot be 7, use closest_integer(\\\
    \"8\\\") instead\")\n    elseif value == \"8\"\n        error(\"value cannot be\
    \ 8, use closest_integer(\\\"9\\\") instead\")\n    elseif value == \"9\"\n  \
    \      error(\"value cannot be 9, use closest_integer(\\\"10\\\") instead\")\n\
    \    elseif value == \"10\"\n        error(\"value cannot be 10, use closest_integer(\\\
    \"11\\\") instead\")\n    elseif value == \"11\"\n        error(\"value cannot\
    \ be 11, use closest_integer(\\\"12\\\") instead\")\n    elseif value == \"12\"\
    \n        error(\"value cannot be 12, use closest_integer(\\\"13\\\") instead\"\
    )\n    elseif value == \"13\"\n        error(\"value cannot be 13, use closest_integer(\\\
    \"14\\\") instead\")\n    elseif value == \"14\"\n        error(\"value cannot\
    \ be 14, use closest_integer(\\\"15\\\") instead\")\n    elseif value == \"15\"\
    \n        error(\"value cannot be 15, use closest_integer(\\\"16\\\") instead\"\
    )\n    elseif value == \"16\"\n        error(\"value cannot be 16, use closest_integer(\\\
    \"17\\\") instead\")\n    elseif value == \"17\"\n        error(\"value cannot\
    \ be 17, use closest_integer(\\\"18\\\") instead\")\n    elseif value == \"18\"\
    \n        error(\"value cannot be 18, use closest_integer(\\\"19\\\") instead\"\
    )\n    elseif value == \"19\"\n        error(\"value cannot be 19, use closest_integer(\\\
    \"20\\\") instead\")\n    elseif value == \"20\"\n        error(\"value cannot\
    \ be 20, use closest_integer(\\\"21\\\") instead\")\n", "    \n    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value\n        closest_integer\
    \ = Int64(math.ceil(value))\n    end\n    return closest_integer\nend", "    \n\
    \    if value == \"\"\n        error(\"Value cannot be empty\")\n    end", " \
    \   \n    closest_integer = Int64(math.ceil(value))\n    \n    if closest_integer\
    \ == value \n        closest_integer = Int64(math.floor(value))\n    \n    return\
    \ closest_integer\nend", "    \n    if value == \"\"\n        error(\"The value\
    \ cannot be empty\")\n    end\n    \n    number = parse(Float64, value)\n    \n\
    \    if number == 0.0\n        error(\"The value cannot be 0\")\n    end\n   \
    \ \n    \n    if number < 0\n        error(\"The value cannot be negative\")\n\
    \    end\n    \n    \n    if number == 1.0\n        return number\n    end\n \
    \   \n    \n    if number == 2.0\n        return number\n    end\n    \n    \n\
    \    if number == 3.0\n        return number\n    end\n    \n    \n    if number\
    \ == 4.0\n        return number\n    end\n    \n    \n    if number == 5.0\n \
    \       return number\n    end\n    \n    \n    if number == 6.0\n        return\
    \ number\n    end\n    \n    \n    if number == 7.0\n        return number\n \
    \   end\n    \n    \n    if number == 8.0\n        return number\n    end\n  \
    \  \n    \n    if number == 9.0\n        return number\n    end\n    \n    \n\
    \    if number == 10.0\n        return number\n    end\n    \n    \n    if number\
    \ == 11.0\n        return number\n    end\n    \n    \n    if number == 12.0\n\
    \        return number\n    end\n    \n    \n    if number == 13.0\n        return\
    \ number\n    end\n    \n    \n    if number == 14.0\n        return number\n\
    \    end\n    \n    \n    if number == 15.0\n        return number\n    end\n\
    \    \n    \n    if number == 16.0\n        return number\n    end\n    \n   \
    \ \n    if number == 17.0\n        return number\n    end\n    \n    \n    if\
    \ number == 18.0\n        return number\n    end\n    \n    \n    if number ==\
    \ 19.0\n        return number\n    end\n    \n    \n    if number == 20.0\n  \
    \      return number\n    end\n    \n    \n    if number == 21.0\n        return\
    \ number\n    end\n    \n    \n    if number == 22.0\n        return number\n\
    \    end\n    \n    \n    if number == 23.0\n        return number\n    end\n\
    \    \n    \n    if number == 24.0\n        return number\n    end\n    \n   \
    \ \n    if number == 25.0\n        return number\n    end\n    \n    \n    if\
    \ number == 26.0\n        return number\n    end\n    \n    \n    if number ==\
    \ 27.0\n        return number\n    end\n    \n    \n    if number == 28.0\n  \
    \      return number\n    end\n    \n    \n    if number == 29.0\n        return\
    \ number\n    end\n    \n    \n    if number == 30.0\n        return number\n\
    \    end\n    \n    \n    if number == 31.0\n        return ", "    \n    if value\
    \ == \"\"\n        error(\"The value provided cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"The value provided cannot be a negative number\")\n\
    \    elseif value == \"+\"\n        error(\"The value provided cannot be a positive\
    \ number\")\n    elseif value == \"0\"\n        error(\"The value provided cannot\
    \ be 0\")\n    elseif value == \"1\"\n        error(\"The value provided cannot\
    \ be 1\")\n    elseif value == \"2\"\n        error(\"The value provided cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"The value provided cannot\
    \ be 3\")\n    elseif value == \"4\"\n        error(\"The value provided cannot\
    \ be 4\")\n    elseif value == \"5\"\n        error(\"The value provided cannot\
    \ be 5\")\n    elseif value == \"6\"\n        error(\"The value provided cannot\
    \ be 6\")\n    elseif value == \"7\"\n        error(\"The value provided cannot\
    \ be 7\")\n    elseif value == \"8\"\n        error(\"The value provided cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"The value provided cannot\
    \ be 9\")\n    else\n        \n        local digits = split(value, \".\")\n  \
    \      local digits_length = digits:len()\n        \n        if digits_length\
    \ == 1\n            error(\"The value provided cannot be equidistant from two\
    \ integers\")\n        elseif digits_length == 2\n            \n            local\
    \ first_digit = digits[1]\n            local second_digit = digits[2]\n      \
    \      \n            if first_digit == \"\"\n                error(\"The first\
    \ digit cannot be empty\")\n            elseif second_digit == \"\"\n        \
    \        error(\"The second digit cannot be empty\")\n            elseif first_digit\
    \ == \"-\"\n                error(\"The first digit cannot be a negative number\"\
    )\n            elseif second_digit == \"-\"\n                error(\"The second\
    \ digit cannot be a negative number\")\n            elseif first_digit == \"+\"\
    \n                error(\"The first digit cannot be a positive number\")\n   \
    \         elseif second_digit == \"+\"\n                error(\"The second digit\
    \ cannot be a positive number\")\n            elseif first_digit == \"0\"\n  \
    \              error(\"The first digit cannot be 0\")\n            elseif second_digit\
    \ == \"0\"\n                error(\"The second digit cannot be 0\")\n        \
    \    elseif first_digit == \"1\"\n                error(\"The first digit cannot\
    \ be 1\")\n            elseif second_digit == \"1\"\n                error(\"\
    The second digit cannot be 1\")\n            elseif first_digit == \"2\"\n   \
    \             error(\"The first digit cannot be 2\")\n            elseif second_digit\
    \ == \"2\"\n                error(\"The second digit cannot be 2\")\n        \
    \    elseif first_digit == \"3\"\n                error(\"The first digit cannot\
    \ be 3\")\n            elseif second_digit == \"3\"\n                error(\"\
    The second digit cannot be 3\")\n            elseif first_digit ", "    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    elseif value == \"-\"\
    \n        error(\"value cannot be negative\")\n    elseif value == \"+\"\n   \
    \     error(\"value cannot be positive\")\n    elseif value == \"0\"\n       \
    \ error(\"value cannot be zero\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be one\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be two\")\n    elseif value == \"3\"\n        error(\"value cannot be three\"\
    )\n    elseif value == \"4\"\n        error(\"value cannot be four\")\n    elseif\
    \ value == \"5\"\n        error(\"value cannot be five\")\n    elseif value ==\
    \ \"6\"\n        error(\"value cannot be six\")\n    elseif value == \"7\"\n \
    \       error(\"value cannot be seven\")\n    elseif value == \"8\"\n        error(\"\
    value cannot be eight\")\n    elseif value == \"9\"\n        error(\"value cannot\
    \ be nine\")\n    elseif value == \".\"\n        error(\"value cannot be a decimal\
    \ point\")\n    elseif value == \"e\"\n        error(\"value cannot be an exponent\"\
    )\n    elseif value == \"E\"\n        error(\"value cannot be an exponent\")\n\
    \    elseif value == \"+\"\n        error(\"value cannot be an exponent\")\n \
    \   elseif value == \"-\"\n        error(\"value cannot be an exponent\")\n  \
    \  elseif value == \"*\"\n        error(\"value cannot be an exponent\")\n   \
    \ elseif value == \"/\"\n        error(\"value cannot be an exponent\")\n    elseif\
    \ value == \"%\"\n        error(\"value cannot be an exponent\")\n    elseif value\
    \ == \"^\"\n        error(\"value cannot be an exponent\")\n    elseif value ==\
    \ \"(\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"\
    )\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"[\"\
    \n        error(\"value cannot be an exponent\")\n    elseif value == \"]\"\n\
    \        error(\"value cannot be an exponent\")\n    elseif value == \"(\"\n \
    \       error(\"value cannot be an exponent\")\n    elseif value == \")\"\n  \
    \      error(\"value cannot be an exponent\")\n    elseif value == \"{\"\n   \
    \     error(\"value cannot be an exponent\")\n    elseif value == \"}\"\n    \
    \    error(\"value cannot be an exponent\")\n    elseif value == \"[\"\n     \
    \   error(\"value cannot be an exponent\")\n    elseif value == \"]\"\n      \
    \  error(\"value cannot be an exponent\")\n    elseif value == \"{\"\n       \
    \ error(\"value cannot be an exponent\")\n    elseif value == \"}\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"(\"\n        error(\"value\
    \ cannot be an exponent\")\n    elseif value == \")\"\n        error(\"value cannot\
    \ be an exponent\")\n    elseif value == \"[\"\n        error(\"value ", "   \
    \ \n    closest_integer = Int64(math.floor(value))\n    \n    if closest_integer\
    \ == value\n        closest_integer = Int64(math.ceil(value))\n    \n    return\
    \ closest_integer\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    closest_integer = Int64(0)\n    \n    digits = value.chars\n\
    \    \n    digits_sorted = digits[1..-1]\n    \n    digits_sorted.sort()\n   \
    \ \n    closest_integer = digits_sorted[0]\n    \n    for digit in digits_sorted[1..-1]\n\
    \        if digit < closest_integer\n            closest_integer = digit\n   \
    \     end\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.51\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.511\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.5111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.51111\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511111\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.51111111\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"14.511111112\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.5111111123\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.51111111234\"\
    )\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"14.511111112345\")\n\
    </cell>\n<code language=julia-1.5>\nclosest_integer(\"14.5111111123456\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.51111111234567\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.511111112345678\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.5111111123456789\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.51111111234567890\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.511111112345678901\")\n</cell>\n<code\
    \ language=julia-1.5>\nclosest_integer(\"14.5111111123456789012\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.51111111234567890123\")\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.5", "    \n    closest_integer\
    \ = Int64(0)\n    \n    digits = value.digits\n    \n    if digits.length == 0\
    \ \n        closest_integer = Int64(0)\n        return closest_integer\n    \n\
    \    if digits.length == 1\n        closest_integer = Int64(digits[0])\n     \
    \   return closest_integer\n    \n    if digits.length == 2\n        if digits[0]\
    \ == digits[1]\n            closest_integer = Int64(digits[0])\n        else\n\
    \            closest_integer = Int64(digits[1])\n        return closest_integer\n\
    \    \n    if digits.length == 3\n        if digits[0] == digits[1]\n        \
    \    if digits[1] == digits[2]\n                closest_integer = Int64(digits[0])\n\
    \            else\n                closest_integer = Int64(digits[2])\n      \
    \  else\n            if digits[1] == digits[2]\n                closest_integer\
    \ = Int64(digits[1])\n            else\n                closest_integer = Int64(digits[2])\n\
    \        return closest_integer\n    \n    if digits.length == 4\n        if digits[0]\
    \ == digits[1]\n            if digits[1] == digits[2]\n                if digits[2]\
    \ == digits[3]\n                    closest_integer = Int64(digits[0])\n     \
    \           else\n                    closest_integer = Int64(digits[3])\n   \
    \         else\n                if digits[2] == digits[3]\n                  \
    \  closest_integer = Int64(digits[1])\n                else\n                \
    \    closest_integer = Int64(digits[3])\n        else\n            if digits[1]\
    \ == digits[2]\n                if digits[2] == digits[3]\n                  \
    \  closest_integer = Int64(digits[1])\n                else\n                \
    \    closest_integer = Int64(digits[3])\n            else\n                if\
    \ digits[2] == digits[3]\n                    closest_integer = Int64(digits[2])\n\
    \                else\n                    closest_integer = Int64(digits[3])\n\
    \        return closest_integer\n    \n    if digits.length == 5\n        if digits[0]\
    \ == digits[1]\n            if digits[1] == digits[2]\n                if digits[2]\
    \ == digits[3]\n                    if digits[3] == digits[4]\n              \
    \          closest_integer = Int64(digits[0])\n                    else\n    \
    \                    closest_integer = Int64(digits[4])\n                else\n\
    \                    if digits[3] == digits[4]\n                        closest_integer\
    \ = Int64(digits[1])\n                    else\n                        closest_integer\
    \ = Int64(digits[4])\n            else\n                if digits[2] == digits[3]\n\
    \                    if digits[3] == digits[4]\n                        closest_integer\
    \ = Int64(digits[2])\n                    else\n                        closest_integer\
    \ = Int64(digits[4])\n                else\n                    if digits[3] ==\
    \ digits[4]\n                        closest_integer = Int64(digits[3])\n    \
    \                else\n                        closest_integer = Int64(digits[4])\n\
    \        else\n            if digits[1] == digits[2]\n                if digits[2]\
    \ == digits[3]", "    if value == \"\"\n        error(\"value cannot be empty\"\
    )\n    elseif value == \"-\"\n        error(\"value cannot be negative\")\n  \
    \  elseif value == \"+\"\n        error(\"value cannot be positive\")\n    elseif\
    \ value == \"0\"\n        error(\"value cannot be 0\")\n    elseif value == \"\
    1\"\n        error(\"value cannot be 1\")\n    elseif value == \"2\"\n       \
    \ error(\"value cannot be 2\")\n    elseif value == \"3\"\n        error(\"value\
    \ cannot be 3\")\n    elseif value == \"4\"\n        error(\"value cannot be 4\"\
    )\n    elseif value == \"5\"\n        error(\"value cannot be 5\")\n    elseif\
    \ value == \"6\"\n        error(\"value cannot be 6\")\n    elseif value == \"\
    7\"\n        error(\"value cannot be 7\")\n    elseif value == \"8\"\n       \
    \ error(\"value cannot be 8\")\n    elseif value == \"9\"\n        error(\"value\
    \ cannot be 9\")\n    elseif value == \".\"\n        error(\"value cannot be a\
    \ decimal point\")\n    elseif value == \"e\"\n        error(\"value cannot be\
    \ an exponent\")\n    elseif value == \"+\"\n        error(\"value cannot be an\
    \ exponent\")\n    elseif value == \"-\"\n        error(\"value cannot be an exponent\"\
    )\n    elseif value == \"*\"\n        error(\"value cannot be an exponent\")\n\
    \    elseif value == \"/\"\n        error(\"value cannot be an exponent\")\n \
    \   elseif value == \"%\"\n        error(\"value cannot be an exponent\")\n  \
    \  elseif value == \"^\"\n        error(\"value cannot be an exponent\")\n   \
    \ elseif value == \"~\"\n        error(\"value cannot be an exponent\")\n    elseif\
    \ value == \"(\"\n        error(\"value cannot be an exponent\")\n    elseif value\
    \ == \")\"\n        error(\"value cannot be an exponent\")\n    elseif value ==\
    \ \"[\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"\
    ]\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"(\"\
    \n        error(\"value cannot be an exponent\")\n    elseif value == \")\"\n\
    \        error(\"value cannot be an exponent\")\n    elseif value == \"{\"\n \
    \       error(\"value cannot be an exponent\")\n    elseif value == \"}\"\n  \
    \      error(\"value cannot be an exponent\")\n    elseif value == \"[\"\n   \
    \     error(\"value cannot be an exponent\")\n    elseif value == \"]\"\n    \
    \    error(\"value cannot be an exponent\")\n    elseif value == \"{\"\n     \
    \   error(\"value cannot be an exponent\")\n    elseif value == \"}\"\n      \
    \  error(\"value cannot be an exponent\")\n    elseif value == \"(\"\n       \
    \ error(\"value cannot be an exponent\")\n    elseif value == \")\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"{\"\n        error(\"value\
    \ cannot be an exponent\")\n    elseif value == \"}\"", "    \n    if value ==\
    \ \"\"\n        error(\"Value cannot be empty\")\n    \n    number = parse_value(value)\n\
    \    \n    if number == 0\n        error(\"Value cannot be 0\")\n    \n    if\
    \ number < 0\n        error(\"Value cannot be negative\")\n    \n    if number\
    \ == 1\n        error(\"Value cannot be 1\")\n    \n    if number == 2\n     \
    \   error(\"Value cannot be 2\")\n    \n    if number == 3\n        error(\"Value\
    \ cannot be 3\")\n    \n    if number == 4\n        error(\"Value cannot be 4\"\
    )\n    \n    if number == 5\n        error(\"Value cannot be 5\")\n    \n    if\
    \ number == 6\n        error(\"Value cannot be 6\")\n    \n    if number == 7\n\
    \        error(\"Value cannot be 7\")\n    \n    if number == 8\n        error(\"\
    Value cannot be 8\")\n    \n    if number == 9\n        error(\"Value cannot be\
    \ 9\")\n    \n    if number == 10\n        error(\"Value cannot be 10\")\n   \
    \ \n    if number == 11\n        error(\"Value cannot be 11\")\n    \n    if number\
    \ == 12\n        error(\"Value cannot be 12\")\n    \n    if number == 13\n  \
    \      error(\"Value cannot be 13\")\n    \n    if number == 14\n        error(\"\
    Value cannot be 14\")\n    \n    if number == 15\n        error(\"Value cannot\
    \ be 15\")\n    \n    if number == 16\n        error(\"Value cannot be 16\")\n\
    \    \n    if number == 17\n        error(\"Value cannot be 17\")\n    \n    if\
    \ number == 18\n        error(\"Value cannot be 18\")\n    \n    if number ==\
    \ 19\n        error(\"Value cannot be 19\")\n    \n    if number == 20\n     \
    \   error(\"Value cannot be 20\")\n    \n    if number == 21\n        error(\"\
    Value cannot be 21\")\n    \n    if number == 22\n        error(\"Value cannot\
    \ be 22\")\n    \n    if number == 23\n        error(\"Value cannot be 23\")\n\
    \    \n    if number == 24\n        error(\"Value cannot be 24\")\n    \n    if\
    \ number == 25\n        error(\"Value cannot be 25\")\n    \n    if number ==\
    \ 26\n        error(\"Value cannot be 26\")\n    \n    if number == 27\n     \
    \   error(\"Value cannot be 27\")\n    \n    if number == 28\n        error(\"\
    Value cannot be 28\")\n    \n    if number == 29\n        error(\"Value cannot\
    \ be 29\")\n    \n    if number == 30\n        error(\"Value cannot be 30\")\n\
    \    \n    if number == 31\n        error(\"Value cannot be 31\")\n    \n    if\
    \ number == 32\n        error(\"Value cannot be 32\")\n    \n    if number ==\
    \ 33\n        error(\"Value cannot be 33\")\n    \n    if number == 34\n", " \
    \   \n    if value == \"\"\n        return -1\n    \n    digits = value.digits\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[1..]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n    digits = digits[0..-2]\n\
    \    \n    if digits == []\n        return -1\n    \n", "    \n    if value ==\
    \ \"\"\n        return -1\n    \n    digits = value.digits\n    \n    if digits.length\
    \ == 1\n        return digits[0]\n    \n    closest_integer = digits[0]\n    \n\
    \    for digit in digits[1..]\n        if closest_integer == 0\n            closest_integer\
    \ = digit\n        else\n            if closest_integer - digit < 0\n        \
    \        closest_integer = digit\n            else\n                closest_integer\
    \ = closest_integer - digit\n            end\n        end\n    end\n    \n   \
    \ return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  closest_integer(value::Int64)", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    digits = value.digits\n    \n    if digits[1] == \"\"\n      \
    \  return -1\n    \n    if digits[1] == \"-\"\n        return -closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"+\"\n        return closest_integer(digits[2])\n\
    \    \n    if digits[1] == \"0\"\n        return 0\n    \n    if digits[1] ==\
    \ \"1\"\n        return digits[2]\n    \n    if digits[1] == \"2\"\n        return\
    \ digits[2] + digits[3]\n    \n    if digits[1] == \"3\"\n        return digits[2]\
    \ + digits[3] + digits[4]\n    \n    if digits[1] == \"4\"\n        return digits[2]\
    \ + digits[3] + digits[4] + digits[5]\n    \n    if digits[1] == \"5\"\n     \
    \   return digits[2] + digits[3] + digits[4] + digits[5] + digits[6]\n    \n \
    \   if digits[1] == \"6\"\n        return digits[2] + digits[3] + digits[4] +\
    \ digits[5] + digits[6] + digits[7]\n    \n    if digits[1] == \"7\"\n       \
    \ return digits[2] + digits[3] + digits[4] + digits[5] + digits[6] + digits[7]\
    \ + digits[8]\n    \n    if digits[1] == \"8\"\n        return digits[2] + digits[3]\
    \ + digits[4] + digits[5] + digits[6] + digits[7] + digits[8] + digits[9]\n  \
    \  \n    if digits[1] == \"9\"\n        return digits[2] + digits[3] + digits[4]\
    \ + digits[5] + digits[6] + digits[7] + digits[8] + digits[9] + digits[10]\n \
    \   \n    return -1\nend", "    \n    if value == \"\"\n        error(\"Value\
    \ cannot be empty\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    \n    closest_integer = Int(0)\n\
    \    \n    if value == \"\"\n        return closest_integer\n    \n    digits\
    \ = value.digits\n    \n    if digits.length == 1\n        return Int(digits[0])\n\
    \    \n    closest_integer = Int(digits[0])\n    \n    for digit in digits[1..-1]\n\
    \        \n        if digit < closest_integer\n            closest_integer = digit\n\
    \        elseif digit > closest_integer\n            closest_integer = closest_integer\n\
    \        else\n            break\n    end\n    \n    return closest_integer\n\
    end", "    \n    if value == \"\"\n        return -1\n    \n    digits = value.digits\n\
    \    \n    if digits[1] == digits[2]\n        return digits[1]\n    \n    if digits[1]\
    \ > digits[2]\n        return digits[1]\n    \n    return digits[2]\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two integers, round it away from zero.", "    \n  \
    \  if value == \"-inf\" || value == \"inf\" \n        then return value\n    \n\
    \    local value = tonumber(value)\n    \n    if value == 0 \n        then return\
    \ 0\n    \n    if value == Inf \n        then return Inf\n    \n    if value ==\
    \ -Inf \n        then return -Inf\n    \n    if value == NaN \n        then return\
    \ NaN\n    \n    if value == -0 \n        then return -0\n    \n    if value ==\
    \ 0 \n        then return 0\n    \n    if value == 1 \n        then return 1\n\
    \    \n    if value == -1 \n        then return -1\n    \n    if value == Infinity\
    \ \n        then return Inf\n    \n    if value == -Infinity \n        then return\
    \ -Inf\n    \n    if value == NaN \n        then return NaN\n    \n    if value\
    \ == -Infinity \n        then return -Inf\n    \n    if value == -Infinity \n\
    \        then return -Inf\n    \n    if value == Infinity \n        then return\
    \ Inf\n    \n    if value == -Infinity \n        then return -Inf\n    \n    if\
    \ value == -Infinity \n        then return -Inf\n    \n    if value == Infinity\
    \ \n        then return Inf\n    \n    if value == -Infinity \n        then return\
    \ -Inf\n    \n    if value == -Infinity \n        then return -Inf\n    \n   \
    \ if value == Infinity \n        then return Inf\n    \n    if value == -Infinity\
    \ \n        then return -Inf\n    \n    if value == -Infinity \n        then return\
    \ -Inf\n    \n    if value == Infinity \n        then return Inf\n    \n    if\
    \ value == -Infinity \n        then return -Inf\n    \n    if value == -Infinity\
    \ \n        then return -Inf\n    \n    if value == Infinity \n        then return\
    \ Inf\n    \n    if value == -Infinity \n        then return -Inf\n    \n    if\
    \ value == -Infinity \n        then return -Inf\n    \n    if value == Infinity\
    \ \n        then return Inf\n    \n    if value == -Infinity \n        then return\
    \ -Inf\n    \n    if value == -Infinity \n        then return -Inf\n    \n   \
    \ if value == Infinity \n        then return Inf\n    \n    if value == -Infinity\
    \ \n        then return -Inf\n    \n    if value == -Infinity \n        then return\
    \ -Inf\n    \n    if value == Infinity \n        then return Inf\n    \n    if\
    \ value == -Infinity \n        then return -Inf\n    \n    if value == -Infinity\
    \ \n        then return -Inf\n    \n    if value == ", "    \n    if value ==\
    \ \"\"\n        error(\"Value cannot be empty\")\n    end\n    \n    local num\
    \ = tonumber(value)\n    if num == nil\n        error(\"Value is not a number\"\
    )\n    end\n    \n    if num < 0\n        error(\"Value cannot be negative\")\n\
    \    end\n    \n    local closest\n    \n    if num == 0\n        closest = 0\n\
    \    else\n        local closest\n        local max\n        local min\n     \
    \   \n        local max\n        local min\n        \n        local max\n    \
    \    local min\n        \n        local max\n        local min\n        \n   \
    \     local max\n        local min\n        \n        local max\n        local\
    \ min\n        \n        local max\n        local min\n        \n        local\
    \ max\n        local min\n        \n        local max\n        local min\n   \
    \     \n        local max\n        local min\n        \n        local max\n  \
    \      local min\n        \n        local max\n        local min\n        \n \
    \       local max\n        local min\n        \n        local max\n        local\
    \ min\n        \n        local max\n        local min\n        \n        local\
    \ max\n        local min\n        \n        local max\n        local min\n   \
    \     \n        local max\n        local min\n        \n        local max\n  \
    \      local min\n        \n        local max\n        local min\n        \n \
    \       local max\n        local min\n        \n        local max\n        local\
    \ min\n        \n        local max\n        local min\n        \n        local\
    \ max\n        local min\n        \n        local max\n        local min\n   \
    \     \n        local max\n        local min\n        \n        local max\n  \
    \      local min\n        \n        local max\n        local min\n        \n \
    \       local max\n        local min\n        \n        local max\n        local\
    \ min\n        \n        local max\n        local min\n        \n        local\
    \ max\n        local min\n        \n        local max\n        local min\n   \
    \     \n        local max\n        local min\n        \n        local max\n  \
    \      local min\n        \n        local max\n        local min\n        \n \
    \       local max\n        local min\n        \n        local max\n        local\
    \ min\n        \n        local max\n        local min\n        \n        local\
    \ max\n        local min\n        \n        local max\n        local min\n   \
    \     \n        local max\n        local min\n        \n        local max\n  \
    \      local min\n        \n        local max\n        ", "    \n    closest_integer\
    \ = Int64(math.ceil(value))\n    \n    if closest_integer == value\n        closest_integer\
    \ = Int64(math.floor(value))\n    \n    return closest_integer\nend", "    \n\
    \    if value == \"\"\n        error(\"Value cannot be an empty string\")\n  \
    \  end\n    \n    digits = split(value, \".\")\n    \n    if length(digits) <\
    \ 2\n        error(\"Value must contain at least two digits\")\n    end\n    \n\
    \    digits[1] = digits[1] * 10\n    \n    digits[1] = digits[1] + digits[2]\n\
    \    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1] % 10\n\
    \    \n    digits[1] = digits[1] + digits[3]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[4]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[5]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[6]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[7]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[8]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[9]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[10]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[11]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[12]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % 10\n    \n    digits[1] = digits[1] + digits[13]\n    \n    digits[1] = digits[1]\
    \ / 10\n    \n    digits[1] = digits[1] % 10\n    \n    digits[1] = digits[1]\
    \ + digits[14]\n    \n    digits[1] = digits[1] / 10\n    \n    digits[1] = digits[1]\
    \ % ", "    \n    closest_integer = Int64(0)\n    \n    closest_integer = Int64(math.floor(value))\n\
    \    \n    if closest_integer == Int64(0)\n        closest_integer = Int64(math.ceil(value))\n\
    \    \n    return closest_integer\nend", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be negative\")\n    elseif value == \"+\"\n        error(\"value cannot be positive\"\
    )\n    else\n        local result = tonumber(value)\n        if result < 0\n \
    \           error(\"value cannot be negative\")\n        elseif result > 0\n \
    \           error(\"value cannot be positive\")\n        else\n            local\
    \ closest = 0\n            local closestDiff = abs(result)\n            for i\
    \ = 1, 10 do\n                local diff = abs(result - i)\n                if\
    \ diff < closestDiff then\n                    closest = i\n                 \
    \   closestDiff = diff\n                end\n            end\n            return\
    \ closest\n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\n    closest_integer(value::String)::Int64", "    \n    closest_integer = int64(0)\n\
    \    \n    if value == \"\"\n        return int64(0)\n    \n    \n    if value\
    \ == \"0\"\n        return int64(0)\n    \n    \n    if value == \"1\"\n     \
    \   return int64(1)\n    \n    \n    if value == \"2\"\n        return int64(2)\n\
    \    \n    \n    if value == \"3\"\n        return int64(3)\n    \n    \n    if\
    \ value == \"4\"\n        return int64(4)\n    \n    \n    if value == \"5\"\n\
    \        return int64(5)\n    \n    \n    if value == \"6\"\n        return int64(6)\n\
    \    \n    \n    if value == \"7\"\n        return int64(7)\n    \n    \n    if\
    \ value == \"8\"\n        return int64(8)\n    \n    \n    if value == \"9\"\n\
    \        return int64(9)\n    \n    \n    if value == \"10\"\n        return int64(10)\n\
    \    \n    \n    if value == \"11\"\n        return int64(11)\n    \n    \n  \
    \  if value == \"12\"\n        return int64(12)\n    \n    \n    if value == \"\
    13\"\n        return int64(13)\n    \n    \n    if value == \"14\"\n        return\
    \ int64(14)\n    \n    \n    if value == \"15\"\n        return int64(15)\n  \
    \  \n    \n    if value == \"16\"\n        return int64(16)\n    \n    \n    if\
    \ value == \"17\"\n        return int64(17)\n    \n    \n    if value == \"18\"\
    \n        return int64(18)\n    \n    \n    if value == \"19\"\n        return\
    \ int64(19)\n    \n    \n    if value == \"20\"\n        return int64(20)\n  \
    \  \n    \n    if value == \"21\"\n        return int64(21)\n    \n    \n    if\
    \ value == \"22\"\n        return int64(22)\n    \n    \n    if value == \"23\"\
    \n        return int64(23)\n    \n    \n    if value == \"24\"\n        return\
    \ int64(24)\n    \n    \n    if value == \"25\"\n        return int64(25)\n  \
    \  \n    \n    if value == \"26\"\n        return int64(26)\n    \n    \n    if\
    \ value == \"27\"\n        return int64(27)\n    \n    \n    if value == \"28\"\
    \n        return int64(28)\n    \n    \n    if value == \"29\"\n        return\
    \ int64(29)\n    \n    \n    if value == \"30\"\n        return int64(30)\n  \
    \  \n    \n    if value == \"31\"\n        return int64(31)\n    \n    \n    if\
    \ value == \"32\"\n        return int64(32)\n    \n    \n    if value ", "   \
    \ \n    closest_integer = Int64(math.ceil(Int64(value)))\n    if closest_integer\
    \ == Int64(value) \n        closest_integer = Int64(math.floor(Int64(value)))\n\
    \    \n    return closest_integer\nend", "    if value == \"\"\n        return\
    \ -1\n    \n    number = parse(Float64, value)\n    \n    if number == 0\n   \
    \     return 0\n    \n    diff = abs(number - 1)\n    \n    if diff < abs(number\
    \ - 2)\n        return number\n    \n    return number - 1\nend", "    \n    closest_integer\
    \ = int64(0)\n    \n    if value == \"\"\n        return closest_integer\n   \
    \ \n    if value == \"-\"\n        return int64(closest_integer)\n    \n    digits\
    \ = value.digits\n    \n    if digits[1] == \"\"\n        return int64(closest_integer)\n\
    \    \n    if digits[1] == \"0\"\n        return int64(closest_integer)\n    \n\
    \    if digits[1] == \"1\"\n        return int64(closest_integer)\n    \n    if\
    \ digits[1] == \"2\"\n        return int64(closest_integer)\n    \n    if digits[1]\
    \ == \"3\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"\
    4\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"5\"\n\
    \        return int64(closest_integer)\n    \n    if digits[1] == \"6\"\n    \
    \    return int64(closest_integer)\n    \n    if digits[1] == \"7\"\n        return\
    \ int64(closest_integer)\n    \n    if digits[1] == \"8\"\n        return int64(closest_integer)\n\
    \    \n    if digits[1] == \"9\"\n        return int64(closest_integer)\n    \n\
    \    if digits[1] == \".\"\n        return int64(closest_integer)\n    \n    if\
    \ digits[1] == \"-\"\n        return int64(closest_integer)\n    \n    if digits[1]\
    \ == \"+\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"\
    e\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"E\"\n\
    \        return int64(closest_integer)\n    \n    if digits[1] == \"-\"\n    \
    \    return int64(closest_integer)\n    \n    if digits[1] == \"+\"\n        return\
    \ int64(closest_integer)\n    \n    if digits[1] == \"0\"\n        return int64(closest_integer)\n\
    \    \n    if digits[1] == \"1\"\n        return int64(closest_integer)\n    \n\
    \    if digits[1] == \"2\"\n        return int64(closest_integer)\n    \n    if\
    \ digits[1] == \"3\"\n        return int64(closest_integer)\n    \n    if digits[1]\
    \ == \"4\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"\
    5\"\n        return int64(closest_integer)\n    \n    if digits[1] == \"6\"\n\
    \        return int64(closest_integer)\n    \n    if digits[1] == \"7\"\n    \
    \    return int64(closest_integer)\n    \n    if digits[1] == \"8\"\n        return\
    \ int64(closest_integer)\n    \n    if digits[1] == \"9\"\n        return int64(closest_integer)\n\
    \    \n    if digits[1] == \"e\"\n        return int64(closest_integer)\n    \n\
    \    if digits[1] == \"E\"\n        return int64(closest_integer)\n    \n    if\
    \ digits[1] == \"-\"", "    \n    if value == \"-inf\" \n        then return -Inf\
    \ \n    else if value == \"inf\" \n        then return Inf \n    else if value\
    \ == \"nan\" \n        then return NaN \n    else \n        local num = tonumber(value)\n\
    \        if num == 0 \n            then return 0 \n        else \n           \
    \ local diff = abs(num - floor(num))\n            if diff < 0.5 \n           \
    \     then return floor(num) \n            else \n                local diff2\
    \ = abs(num - ceil(num))\n                if diff2 < 0.5 \n                  \
    \  then return ceil(num) \n                else \n                    local diff3\
    \ = abs(num - round(num))\n                    if diff3 < 0.5 \n             \
    \           then return round(num) \n                    else \n             \
    \           local diff4 = abs(num - trunc(num))\n                        if diff4\
    \ < 0.5 \n                            then return trunc(num) \n              \
    \          else \n                            local diff5 = abs(num - round(num))\n\
    \                            if diff5 < 0.5 \n                               \
    \ then return round(num) \n                            else \n               \
    \                 return num\n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a value (string) representing a number\n\
    \    and returns the closest float to it. If the number is equidistant\n    from\
    \ two floats, round it away from zero.", "    \n    if value == \"\"\n       \
    \ error(\"The value cannot be an empty string\")\n    end\n    \n    number =\
    \ parse(Float64, value)\n    \n    if number == 0\n        error(\"The value cannot\
    \ be 0\")\n    end\n    \n    difference = abs(number - 1)\n    \n    if difference\
    \ < abs(number - 2)\n        difference = abs(number - 2)\n    end\n    \n   \
    \ if difference < abs(number - 3)\n        difference = abs(number - 3)\n    end\n\
    \    \n    if difference < abs(number - 4)\n        difference = abs(number -\
    \ 4)\n    end\n    \n    if difference < abs(number - 5)\n        difference =\
    \ abs(number - 5)\n    end\n    \n    if difference < abs(number - 6)\n      \
    \  difference = abs(number - 6)\n    end\n    \n    if difference < abs(number\
    \ - 7)\n        difference = abs(number - 7)\n    end\n    \n    if difference\
    \ < abs(number - 8)\n        difference = abs(number - 8)\n    end\n    \n   \
    \ if difference < abs(number - 9)\n        difference = abs(number - 9)\n    end\n\
    \    \n    if difference < abs(number - 10)\n        difference = abs(number -\
    \ 10)\n    end\n    \n    if difference < abs(number - 11)\n        difference\
    \ = abs(number - 11)\n    end\n    \n    if difference < abs(number - 12)\n  \
    \      difference = abs(number - 12)\n    end\n    \n    if difference < abs(number\
    \ - 13)\n        difference = abs(number - 13)\n    end\n    \n    if difference\
    \ < abs(number - 14)\n        difference = abs(number - 14)\n    end\n    \n \
    \   if difference < abs(number - 15)\n        difference = abs(number - 15)\n\
    \    end\n    \n    if difference < abs(number - 16)\n        difference = abs(number\
    \ - 16)\n    end\n    \n    if difference < abs(number - 17)\n        difference\
    \ = abs(number - 17)\n    end\n    \n    if difference < abs(number - 18)\n  \
    \      difference = abs(number - 18)\n    end\n    \n    if difference < abs(number\
    \ - 19)\n        difference = abs(number - 19)\n    end\n    \n    if difference\
    \ < abs(number - 20)\n        difference = abs(number - 20)\n    end\n    \n \
    \   if difference < abs(number - 21)\n        difference = abs(number - 21)\n\
    \    end\n    \n    if difference < abs(number - 22)\n        difference = abs(number\
    \ - 22)\n    end\n    \n    if difference < abs(number - 23)\n        difference\
    \ = abs(number - 23)\n    end\n    \n    if difference < abs(number - 24)\n  \
    \      difference = abs(number - ", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    number = value\n    \n    if number == \"-\"\n        number =\
    \ \"\"\n    \n    if number == \"+\"\n        number = \"\"\n    \n    if number\
    \ == \".\"\n        number = \"\"\n    \n    if number == \"-\"\n        number\
    \ = \"\"\n    \n    if number == \"+\"\n        number = \"\"\n    \n    if number\
    \ == \"0\"\n        number = \"\"\n    \n    if number == \"1\"\n        number\
    \ = \"\"\n    \n    if number == \"2\"\n        number = \"\"\n    \n    if number\
    \ == \"3\"\n        number = \"\"\n    \n    if number == \"4\"\n        number\
    \ = \"\"\n    \n    if number == \"5\"\n        number = \"\"\n    \n    if number\
    \ == \"6\"\n        number = \"\"\n    \n    if number == \"7\"\n        number\
    \ = \"\"\n    \n    if number == \"8\"\n        number = \"\"\n    \n    if number\
    \ == \"9\"\n        number = \"\"\n    \n    if number == \".\"\n        number\
    \ = \"\"\n    \n    if number == \"-\"\n        number = \"\"\n    \n    if number\
    \ == \"+\"\n        number = \"\"\n    \n    if number == \"0\"\n        number\
    \ = \"\"\n    \n    if number == \"1\"\n        number = \"\"\n    \n    if number\
    \ == \"2\"\n        number = \"\"\n    \n    if number == \"3\"\n        number\
    \ = \"\"\n    \n    if number == \"4\"\n        number = \"\"\n    \n    if number\
    \ == \"5\"\n        number = \"\"\n    \n    if number == \"6\"\n        number\
    \ = \"\"\n    \n    if number == \"7\"\n        number = \"\"\n    \n    if number\
    \ == \"8\"\n        number = \"\"\n    \n    if number == \"9\"\n        number\
    \ = \"\"\n    \n    if number == \".\"\n        number = \"\"\n    \n    if number\
    \ == \"-\"\n        number = \"\"\n    \n    if number == \"+\"\n        number\
    \ = \"\"\n    \n    if number == \"0\"\n        number = \"\"\n    \n    if number\
    \ == \"1\"\n        number = \"\"\n    \n    if number == \"2\"\n        number\
    \ = \"\"\n    \n    if number == \"3\"\n        number = \"\"\n    \n    if number\
    \ == \"4\"\n        number = \"\"\n    \n    if number == \"5\"\n        number\
    \ = \"\"\n    \n    if number == \"6\"\n        number = \"\"\n    \n    if number\
    \ == \"7\"\n        number = \"\"\n    \n    if number == \"8\"\n        number\
    \ = \"\"\n    \n    if number == \"9\"\n        number = \"\"\n    \n    if number\
    \ == \".\"\n        number = \"\"\n    \n    if number == \"-\"\n        number\
    \ = \"\"\n    \n    if number == \"+\"\n        number = ", "    \n    if value\
    \ == \"\"\n        error(\"Value cannot be an empty string\")\n    end\n    \n\
    \    local num = tonumber(value)\n    if num == nil\n        error(\"Value must\
    \ be a number\")\n    end\n    \n    local closest = 0\n    local closestDiff\
    \ = math.abs(num - closest)\n    \n    for i = 1, 10 do\n        local diff =\
    \ math.abs(num - closest)\n        if diff < closestDiff then\n            closest\
    \ = i\n            closestDiff = diff\n        end\n    end\n    \n    return\
    \ closest\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"-inf\" \n        closest_integer = Int64(-Inf)\n\
    \    \n    else if value == \"inf\" \n        closest_integer = Int64(Inf)\n \
    \   \n    else if value == \"nan\" \n        closest_integer = Int64(-1)\n   \
    \ \n    else if value == \"0\" \n        closest_integer = Int64(0)\n    \n  \
    \  else if value == \"1\" \n        closest_integer = Int64(1)\n    \n    else\
    \ if value == \"2\" \n        closest_integer = Int64(2)\n    \n    else if value\
    \ == \"3\" \n        closest_integer = Int64(3)\n    \n    else if value == \"\
    4\" \n        closest_integer = Int64(4)\n    \n    else if value == \"5\" \n\
    \        closest_integer = Int64(5)\n    \n    else if value == \"6\" \n     \
    \   closest_integer = Int64(6)\n    \n    else if value == \"7\" \n        closest_integer\
    \ = Int64(7)\n    \n    else if value == \"8\" \n        closest_integer = Int64(8)\n\
    \    \n    else if value == \"9\" \n        closest_integer = Int64(9)\n    \n\
    \    else if value == \"10\" \n        closest_integer = Int64(10)\n    \n   \
    \ else if value == \"11\" \n        closest_integer = Int64(11)\n    \n    else\
    \ if value == \"12\" \n        closest_integer = Int64(12)\n    \n    else if\
    \ value == \"13\" \n        closest_integer = Int64(13)\n    \n    else if value\
    \ == \"14\" \n        closest_integer = Int64(14)\n    \n    else if value ==\
    \ \"15\" \n        closest_integer = Int64(15)\n    \n    else if value == \"\
    16\" \n        closest_integer = Int64(16)\n    \n    else if value == \"17\"\
    \ \n        closest_integer = Int64(17)\n    \n    else if value == \"18\" \n\
    \        closest_integer = Int64(18)\n    \n    else if value == \"19\" \n   \
    \     closest_integer = Int64(19)\n    \n    else if value == \"20\" \n      \
    \  closest_integer = Int64(20)\n    \n    else if value == \"21\" \n        closest_integer\
    \ = Int64(21)\n    \n    else if value == \"22\" \n        closest_integer = Int64(22)\n\
    \    \n    else if value == \"23\" \n        closest_integer = Int64(23)\n   \
    \ \n    else if value == \"24\" \n        closest_integer = Int", "    \n    if\
    \ value == \"\"\n        error(\"The value cannot be an empty string\")\n    end\n\
    \    \n    number = parse(Float64, value)\n    \n    if number == 0.0\n      \
    \  error(\"The value cannot be 0\")\n    end\n    \n    closest_integer = Int(ceil(number))\n\
    \    \n    if number == closest_integer\n        error(\"The value cannot be equidistant\
    \ from two integers\")\n    end\n    \n    return closest_integer\nend", "   \
    \ \n    closest_integer = Int64(math.ceil(value))\n    \n    if closest_integer\
    \ == value \n        closest_integer = Int64(math.floor(value))\n    \n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"\
    14.5\")\n</cell>\n<code language=julia-1.5>\nclosest_integer(\"-14.5\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a value (string) representing\
    \ a number\nand returns the closest float to it. If the number is equidistant\n\
    \    from two floats, round it away from zero.", "    \n    if value == \"\"\n\
    \        return -1\n    \n    digits = value.digits\n    \n    if digits[1] ==\
    \ digits[2]\n        return digits[1]\n    \n    if digits[1] > digits[2]\n  \
    \      return digits[1]\n    \n    return digits[2]\nend", "    if value == \"\
    \"\n        error(\"value cannot be empty\")\n    elseif value == \"-\"\n    \
    \    error(\"value cannot be negative\")\n    elseif value == \"+\"\n        error(\"\
    value cannot be positive\")\n    elseif value == \"0\"\n        error(\"value\
    \ cannot be 0\")\n    elseif value == \"1\"\n        error(\"value cannot be 1\"\
    )\n    elseif value == \"2\"\n        error(\"value cannot be 2\")\n    elseif\
    \ value == \"3\"\n        error(\"value cannot be 3\")\n    elseif value == \"\
    4\"\n        error(\"value cannot be 4\")\n    elseif value == \"5\"\n       \
    \ error(\"value cannot be 5\")\n    elseif value == \"6\"\n        error(\"value\
    \ cannot be 6\")\n    elseif value == \"7\"\n        error(\"value cannot be 7\"\
    )\n    elseif value == \"8\"\n        error(\"value cannot be 8\")\n    elseif\
    \ value == \"9\"\n        error(\"value cannot be 9\")\n    else\n        error(\"\
    value must be an integer or float\")\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"0\"\n        return closest_integer\n    \n    \n    if value ==\
    \ \"1\"\n        return closest_integer\n    \n    \n    if value == \"2\"\n \
    \       return closest_integer\n    \n    \n    if value == \"3\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"4\"\n        return closest_integer\n\
    \    \n    \n    if value == \"5\"\n        return closest_integer\n    \n   \
    \ \n    if value == \"6\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"7\"\n        return closest_integer\n    \n    \n    if value ==\
    \ \"8\"\n        return closest_integer\n    \n    \n    if value == \"9\"\n \
    \       return closest_integer\n    \n    \n    if value == \"10\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"11\"\n        return closest_integer\n\
    \    \n    \n    if value == \"12\"\n        return closest_integer\n    \n  \
    \  \n    if value == \"13\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"14\"\n        return closest_integer\n    \n    \n    if value ==\
    \ \"15\"\n        return closest_integer\n    \n    \n    if value == \"16\"\n\
    \        return closest_integer\n    \n    \n    if value == \"17\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"18\"\n        return closest_integer\n\
    \    \n    \n    if value == \"19\"\n        return closest_integer\n    \n  \
    \  \n    if value == \"20\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"21\"\n        return closest_integer\n    \n    \n    if value ==\
    \ \"22\"\n        return closest_integer\n    \n    \n    if value == \"23\"\n\
    \        return closest_integer\n    \n    \n    if value == \"24\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"25\"\n        return closest_integer\n\
    \    \n    \n    if value == \"26\"\n        return closest_integer\n    \n  \
    \  \n    if value == \"27\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"28\"\n        return closest_integer\n    \n    \n    if value ==\
    \ \"29\"\n        return closest_integer\n    \n    \n    if value == \"30\"\n\
    \        return closest_integer\n    \n    \n    if value == \"31\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"32\"\n        return closest_integer\n\
    \    \n    \n    if value == \"33\"\n        return closest_integer\n    \n  \
    \  \n    if value == \"34\"\n        return closest_integer\n    \n    \n    if\
    \ value == \"35\"\n", "    \n    closest_integer = Int64(0)\n    \n    if value\
    \ == \"\"\n        return closest_integer\n    \n    \n    \n    if value == \"\
    0\"\n        return closest_integer\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if value == \"\"\
    \n        error(\"The value cannot be empty\")\n    \n    number = tofloat(value)\n\
    \    \n    if number == 0.0\n        error(\"The value cannot be 0\")\n    \n\
    \    if number < 0.0\n        error(\"The value cannot be negative\")\n    \n\
    \    closest_integer = floor(number)\n    \n    if number - closest_integer <\
    \ 0.5\n        closest_integer = closest_integer + 1\n    \n    return closest_integer\n\
    end", "    \n    if value == \"\"\n        error(\"Value cannot be empty\")\n\
    \    elseif value == \"-\"\n        error(\"Value cannot be negative\")\n    elseif\
    \ value == \"+\"\n        error(\"Value cannot be positive\")\n    elseif value\
    \ == \"0\"\n        error(\"Value cannot be 0\")\n    elseif value == \"1\"\n\
    \        error(\"Value cannot be 1\")\n    elseif value == \"2\"\n        error(\"\
    Value cannot be 2\")\n    elseif value == \"3\"\n        error(\"Value cannot\
    \ be 3\")\n    elseif value == \"4\"\n        error(\"Value cannot be 4\")\n \
    \   elseif value == \"5\"\n        error(\"Value cannot be 5\")\n    elseif value\
    \ == \"6\"\n        error(\"Value cannot be 6\")\n    elseif value == \"7\"\n\
    \        error(\"Value cannot be 7\")\n    elseif value == \"8\"\n        error(\"\
    Value cannot be 8\")\n    elseif value == \"9\"\n        error(\"Value cannot\
    \ be 9\")\n    elseif value == \".\"\n        error(\"Value cannot be a decimal\
    \ point\")\n    elseif value == \"e\"\n        error(\"Value cannot be an exponent\"\
    )\n    elseif value == \"E\"\n        error(\"Value cannot be an exponent with\
    \ capital E\")\n    elseif value == \"+\"\n        error(\"Value cannot be an\
    \ exponent with plus sign\")\n    elseif value == \"-\"\n        error(\"Value\
    \ cannot be an exponent with minus sign\")\n    elseif value == \"*\"\n      \
    \  error(\"Value cannot be an exponent with asterisk\")\n    elseif value == \"\
    /\"\n        error(\"Value cannot be an exponent with division\")\n    elseif\
    \ value == \"%\"\n        error(\"Value cannot be an exponent with percent\")\n\
    \    elseif value == \"^\"\n        error(\"Value cannot be an exponent with caret\"\
    )\n    elseif value == \"~\"\n        error(\"Value cannot be an exponent with\
    \ tilde\")\n    elseif value == \"(\"\n        error(\"Value cannot be an exponent\
    \ with opening parenthesis\")\n    elseif value == \")\"\n        error(\"Value\
    \ cannot be an exponent with closing parenthesis\")\n    elseif value == \"+\"\
    \n        error(\"Value cannot be an exponent with plus sign\")\n    elseif value\
    \ == \"-\"\n        error(\"Value cannot be an exponent with minus sign\")\n \
    \   elseif value == \"*\"\n        error(\"Value cannot be an exponent with asterisk\"\
    )\n    elseif value == \"/\"\n        error(\"Value cannot be an exponent with\
    \ division\")\n    elseif value == \"%\"\n        error(\"Value cannot be an exponent\
    \ with percent\")\n    elseif value == \"^\"\n        error(\"Value cannot be\
    \ an exponent with caret\")\n    elseif value == \"~\"\n        error(\"Value\
    \ cannot be an exponent with tilde\")\n    elseif value == \"(\"\n        error(\"\
    Value cannot be an exponent with opening parenthesis\")\n    elseif value == ",
  "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    digits = value.digits\n    \n    if digits.length\
    \ == 1\n        return Int64(digits[0])\n    \n    closest_digit = Int64(0)\n\
    \    \n    for digit in digits\n        if digit < closest_digit\n           \
    \ closest_digit = digit\n    \n    if closest_digit == 0\n        return Int64(digits[0])\n\
    \    \n    if closest_digit == 1\n        return Int64(digits[1])\n    \n    if\
    \ closest_digit == 2\n        return Int64(digits[2])\n    \n    if closest_digit\
    \ == 3\n        return Int64(digits[3])\n    \n    if closest_digit == 4\n   \
    \     return Int64(digits[4])\n    \n    if closest_digit == 5\n        return\
    \ Int64(digits[5])\n    \n    if closest_digit == 6\n        return Int64(digits[6])\n\
    \    \n    if closest_digit == 7\n        return Int64(digits[7])\n    \n    if\
    \ closest_digit == 8\n        return Int64(digits[8])\n    \n    if closest_digit\
    \ == 9\n        return Int64(digits[9])\n    \n    return Int64(digits[10])\n\
    end", "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n    \
    \    closest_integer = Int64(0)\n        return closest_integer\n    \n    split_value\
    \ = value.split(\".\")\n    \n    if split_value[1] == \"0\"\n        closest_integer\
    \ = Int64(0)\n        return closest_integer\n    \n    if split_value[1] == \"\
    1\"\n        closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_value[1] == \"2\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"3\"\n      \
    \  closest_integer = Int64(split_value[0])\n        return closest_integer\n \
    \   \n    if split_value[1] == \"4\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"5\"\n      \
    \  closest_integer = Int64(split_value[0])\n        return closest_integer\n \
    \   \n    if split_value[1] == \"6\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"7\"\n      \
    \  closest_integer = Int64(split_value[0])\n        return closest_integer\n \
    \   \n    if split_value[1] == \"8\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"9\"\n      \
    \  closest_integer = Int64(split_value[0])\n        return closest_integer\n \
    \   \n    if split_value[1] == \"10\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"11\"\n     \
    \   closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_value[1] == \"12\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"13\"\n     \
    \   closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_value[1] == \"14\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"15\"\n     \
    \   closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_value[1] == \"16\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"17\"\n     \
    \   closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_value[1] == \"18\"\n        closest_integer = Int64(split_value[0])\n\
    \        return closest_integer\n    \n    if split_value[1] == \"19\"\n     \
    \   closest_integer = Int64(split_value[0])\n        return closest_integer\n\
    \    \n    if split_", "    \n    closest_integer = Int64(math.floor(Int64(value)))\n\
    \    \n    if closest_integer == Int64(math.floor(value))\n        closest_integer\
    \ = Int64(math.ceil(value))\n    \n    return closest_integer\nend", "    \n \
    \   if value == \"\"\n        error(\"The value given cannot be empty\")\n   \
    \ end\n    \n    local digits = split(value, \".\")\n    local digits_length =\
    \ digits[1]\n    local digits_value = digits[2]\n    \n    if digits_length ==\
    \ 0\n        error(\"The value given cannot be empty\")\n    end\n    \n    if\
    \ digits_value == \"\"\n        error(\"The value given cannot be empty\")\n \
    \   end\n    \n    local digits_value = tonumber(digits_value)\n    \n    if digits_value\
    \ == 0\n        error(\"The value given cannot be 0\")\n    end\n    \n    local\
    \ digits_length = tonumber(digits_length)\n    \n    if digits_length == 0\n \
    \       error(\"The value given cannot be 0\")\n    end\n    \n    local digits_length\
    \ = digits_length + 1\n    \n    if digits_length < digits_value\n        error(\"\
    The value given cannot be smaller than the length of the number\")\n    end\n\
    \    \n    local digits_value = digits_value / digits_length\n    \n    if digits_value\
    \ == 0\n        error(\"The value given cannot be 0\")\n    end\n    \n    local\
    \ digits_value = digits_value % digits_length\n    \n    if digits_value == 0\n\
    \        error(\"The value given cannot be 0\")\n    end\n    \n    local digits_value\
    \ = digits_value + 1\n    \n    return digits_value\nend\n</cell>\n<text>\nThe\
    \ function above is called in the next cell to test the function.", "    \n  \
    \  closest_integer = Int64(0)\n    \n    \n    if value == \"0\" || value == \"\
    -0\"\n        closest_integer = Int64(0)\n    elseif value == \"1\" || value ==\
    \ \"-1\"\n        closest_integer = Int64(1)\n    elseif value == \"2\" || value\
    \ == \"-2\"\n        closest_integer = Int64(2)\n    elseif value == \"3\" ||\
    \ value == \"-3\"\n        closest_integer = Int64(3)\n    elseif value == \"\
    4\" || value == \"-4\"\n        closest_integer = Int64(4)\n    elseif value ==\
    \ \"5\" || value == \"-5\"\n        closest_integer = Int64(5)\n    elseif value\
    \ == \"6\" || value == \"-6\"\n        closest_integer = Int64(6)\n    elseif\
    \ value == \"7\" || value == \"-7\"\n        closest_integer = Int64(7)\n    elseif\
    \ value == \"8\" || value == \"-8\"\n        closest_integer = Int64(8)\n    elseif\
    \ value == \"9\" || value == \"-9\"\n        closest_integer = Int64(9)\n    elseif\
    \ value == \"10\" || value == \"-10\"\n        closest_integer = Int64(10)\n \
    \   elseif value == \"11\" || value == \"-11\"\n        closest_integer = Int64(11)\n\
    \    elseif value == \"12\" || value == \"-12\"\n        closest_integer = Int64(12)\n\
    \    elseif value == \"13\" || value == \"-13\"\n        closest_integer = Int64(13)\n\
    \    elseif value == \"14\" || value == \"-14\"\n        closest_integer = Int64(14)\n\
    \    elseif value == \"15\" || value == \"-15\"\n        closest_integer = Int64(15)\n\
    \    elseif value == \"16\" || value == \"-16\"\n        closest_integer = Int64(16)\n\
    \    elseif value == \"17\" || value == \"-17\"\n        closest_integer = Int64(17)\n\
    \    elseif value == \"18\" || value == \"-18\"\n        closest_integer = Int64(18)\n\
    \    elseif value == \"19\" || value == \"-19\"\n        closest_integer = Int64(19)\n\
    \    elseif value == \"20\" || value == \"-20\"\n        closest_integer = Int64(20)\n\
    \    elseif value == \"21\" || value == \"-21\"\n        closest_integer = Int64(21)\n\
    \    elseif value == \"22\" || value == \"-22\"\n        closest_integer = Int64(22)\n\
    \    elseif value == \"23\" || value == \"-23\"\n        closest_integer = Int64(23)\n\
    \    elseif value == \"24\" || value == \"-24\"\n        closest_integer = Int64(24)\n\
    \    elseif value == \"25\" || value == \"-25\"\n        closest_integer = Int64(25)\n",
  "    \n    if value == \"\"\n        return -1\n    \n    digits = value.chars\n\
    \    \n    smallest_digit = digits[1]\n    \n    if smallest_digit == \"-\"\n\
    \        smallest_digit = digits[2]\n    \n    if smallest_digit == \".\"\n  \
    \      smallest_digit = digits[3]\n    \n    if smallest_digit == \"-\"\n    \
    \    smallest_digit = digits[4]\n    \n    if smallest_digit == \".\"\n      \
    \  smallest_digit = digits[5]\n    \n    if smallest_digit == \"-\"\n        smallest_digit\
    \ = digits[6]\n    \n    if smallest_digit == \".\"\n        smallest_digit =\
    \ digits[7]\n    \n    if smallest_digit == \"-\"\n        smallest_digit = digits[8]\n\
    \    \n    if smallest_digit == \".\"\n        smallest_digit = digits[9]\n  \
    \  \n    if smallest_digit == \"-\"\n        smallest_digit = digits[10]\n   \
    \ \n    if smallest_digit == \".\"\n        smallest_digit = digits[11]\n    \n\
    \    if smallest_digit == \"-\"\n        smallest_digit = digits[12]\n    \n \
    \   if smallest_digit == \".\"\n        smallest_digit = digits[13]\n    \n  \
    \  if smallest_digit == \"-\"\n        smallest_digit = digits[14]\n    \n   \
    \ if smallest_digit == \".\"\n        smallest_digit = digits[15]\n    \n    if\
    \ smallest_digit == \"-\"\n        smallest_digit = digits[16]\n    \n    if smallest_digit\
    \ == \".\"\n        smallest_digit = digits[17]\n    \n    if smallest_digit ==\
    \ \"-\"\n        smallest_digit = digits[18]\n    \n    if smallest_digit == \"\
    .\"\n        smallest_digit = digits[19]\n    \n    if smallest_digit == \"-\"\
    \n        smallest_digit = digits[20]\n    \n    if smallest_digit == \".\"\n\
    \        smallest_digit = digits[21]\n    \n    if smallest_digit == \"-\"\n \
    \       smallest_digit = digits[22]\n    \n    if smallest_digit == \".\"\n  \
    \      smallest_digit = digits[23]\n    \n    if smallest_digit == \"-\"\n   \
    \     smallest_digit = digits[24]\n    \n    if smallest_digit == \".\"\n    \
    \    smallest_digit = digits[25]\n    \n    if smallest_digit == \"-\"\n     \
    \   smallest_digit = digits[26]\n    \n    if smallest_digit == \".\"\n      \
    \  smallest_digit = digits[27]\n    ", "    \n    closest_integer = Int64(math.ceil(value))\n\
    \    \n    if closest_integer == Int64(math.floor(value))\n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    \n    return closest_integer\nend",
  "    \n    if value == \"\"\n        error(\"value cannot be an empty string\")\n\
    \    end\n    \n    local value = tonumber(value)\n    if value == 0\n       \
    \ error(\"value cannot be 0\")\n    end\n    \n    local closest = 0\n    local\
    \ closestDiff = math.abs(value - closest)\n    \n    for i = 1, 10 do\n      \
    \  local diff = math.abs(value - closest)\n        if diff < closestDiff then\n\
    \            closest = value\n            closestDiff = diff\n        end\n  \
    \      value = value + 0.1\n    end\n    \n    return closest\nend\n</cell>\n\
    <code language=julia-1.5>\nclosest_integer(\"14.5\")\n</cell>\n<code language=julia-1.5>\n\
    closest_integer(\"-14.5\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string representing a number and returns the closest integer to the number\
    \ in base 10.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if value == \"\"\n        return -1\n    \n    digits = value.chars\n\
    \    \n    smallest_digit = digits[0]\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_digit - smallest_digit % 10\n    \n    smallest_digit\
    \ = smallest_digit - smallest_digit % 10\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_digit - smallest_digit % 10\n    \n    smallest_digit\
    \ = smallest_digit - smallest_digit % 10\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_digit - smallest_digit % 10\n    \n    smallest_digit\
    \ = smallest_digit - smallest_digit % 10\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_digit - smallest_digit % 10\n    \n    smallest_digit\
    \ = smallest_digit - smallest_digit % 10\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_digit - smallest_digit % 10\n    \n    smallest_digit\
    \ = smallest_digit - smallest_digit % 10\n    \n    smallest_digit = smallest_digit\
    \ - smallest_digit % 10\n    \n    smallest_digit = smallest_digit - smallest_digit\
    \ % 10\n    \n    smallest_digit = smallest_digit - smallest_digit % 10\n    \n\
    \    smallest_digit = smallest_", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    number = parse(Float64, value)\n    \n    if number == 0.0\n \
    \       return -1\n    \n    diff = abs(number - 1)\n    \n    if diff < abs(number\
    \ - 2)\n        return -1\n    \n    if diff < abs(number - 3)\n        return\
    \ -2\n    \n    if diff < abs(number - 4)\n        return -3\n    \n    if diff\
    \ < abs(number - 5)\n        return -4\n    \n    if diff < abs(number - 6)\n\
    \        return -5\n    \n    if diff < abs(number - 7)\n        return -6\n \
    \   \n    if diff < abs(number - 8)\n        return -7\n    \n    if diff < abs(number\
    \ - 9)\n        return -8\n    \n    if diff < abs(number - 10)\n        return\
    \ -9\n    \n    if diff < abs(number - 11)\n        return -10\n    \n    if diff\
    \ < abs(number - 12)\n        return -11\n    \n    if diff < abs(number - 13)\n\
    \        return -12\n    \n    if diff < abs(number - 14)\n        return -13\n\
    \    \n    if diff < abs(number - 15)\n        return -14\n    \n    if diff <\
    \ abs(number - 16)\n        return -15\n    \n    if diff < abs(number - 17)\n\
    \        return -16\n    \n    if diff < abs(number - 18)\n        return -17\n\
    \    \n    if diff < abs(number - 19)\n        return -18\n    \n    if diff <\
    \ abs(number - 20)\n        return -19\n    \n    if diff < abs(number - 21)\n\
    \        return -20\n    \n    if diff < abs(number - 22)\n        return -21\n\
    \    \n    if diff < abs(number - 23)\n        return -22\n    \n    if diff <\
    \ abs(number - 24)\n        return -23\n    \n    if diff < abs(number - 25)\n\
    \        return -24\n    \n    if diff < abs(number - 26)\n        return -25\n\
    \    \n    if diff < abs(number - 27)\n        return -26\n    \n    if diff <\
    \ abs(number - 28)\n        return -27\n    \n    if diff < abs(number - 29)\n\
    \        return -28\n    \n    if diff < abs(number - 30)\n        return -29\n\
    \    \n    if diff < abs(number - 31)\n        return -30\n    \n    if diff <\
    \ abs(number - 32)\n        return -31\n    \n    if diff < abs(number - 33)\n\
    \        return -32\n    \n    if diff < abs(number - 34)\n        return -33\n\
    \    \n    if diff < abs(number - 35)\n        return -34\n    \n    if diff <\
    \ abs(number - 36)", "    \n    closest_integer = int64(0)\n    \n    digits =\
    \ split(value, \".\")\n    \n    if length(digits) < 2\n        return int64(digits[1])\n\
    \    \n    digits_int = map(int, digits)\n    \n    if digits_int[1] < digits_int[0]\n\
    \        closest_integer = int64(digits_int[1])\n    else\n        closest_integer\
    \ = int64(digits_int[0])\n    end\n    \n    return closest_integer\nend", " \
    \   if value == \"\"\n        error(\"Value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"Value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"Value cannot be positive\")\n    else\n        local num\
    \ = tonumber(value)\n        if num == NaN\n            error(\"Value cannot be\
    \ converted to a number\")\n        elseif num == -Inf\n            error(\"Value\
    \ cannot be converted to a number\")\n        elseif num == Inf\n            error(\"\
    Value cannot be converted to a number\")\n        else\n            local closest\
    \ = 1\n            local closestNum = num\n            local closestDiff = abs(closestNum\
    \ - num)\n            local closestSign = 1\n            if closestNum > num\n\
    \                closestSign = -1\n            end\n            while closestNum\
    \ > 0\n                closestNum = closestNum / 10\n                closestDiff\
    \ = closestDiff / 10\n                if closestNum == num\n                 \
    \   return closestSign * closestDiff\n                end\n                if\
    \ closestNum > num\n                    closestSign = closestSign * -1\n     \
    \           end\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    closest_integer(value::String)::Int64", "    \n    if value == \"\"\
    \n        error(\"value cannot be empty\")\n    end\n    \n    number = parse(Float64,\
    \ value)\n    \n    if number == 0.0\n        error(\"value cannot be 0\")\n \
    \   end\n    \n    diff = abs(number - round(number))\n    \n    if diff < 1.0\n\
    \        return round(number)\n    else\n        return round(number) + 1.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ float to it. If the number is equidistant\n    from two floats, round it away\
    \ from zero.", "    \n    if value == \"\"\n        return -1\n    \n    number\
    \ = value\n    \n    if number == \"-\"\n        number = -number\n    \n    number\
    \ = number.replace(\",\", \"\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"+\", \"\")\n    \n    if number == \"\
    0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n\
    \    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n    \n    if number\
    \ == \"0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"\
    -\")\n    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n    \n    if number\
    \ == \"0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"\
    -\")\n    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n    \n    if number\
    \ == \"0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"\
    -\")\n    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n    \n    if number\
    \ == \"0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"\
    -\")\n    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-\")\n    \n    if number == \"0\"\n        return\
    \ 0\n    \n    number = number.replace(\"\u2212\", \"-\")\n    \n    if number\
    \ == \"0\"\n        return 0\n    \n    number = number.replace(\"\u2212\", \"\
    -\")\n    \n    if number == \"0\"\n        return 0\n    \n    number = number.replace(\"\
    \u2212\", \"-\")\n    \n    if number == \"0\"\n        return 0\n    \n    number\
    \ = number.replace(\"\u2212\", \"-", "    \n    if value == \"\"\n        error(\"\
    Value cannot be empty\")\n    end\n    \n    digits = split(value, \".\")\n  \
    \  \n    if length(digits) < 2\n        error(\"Value must contain at least two\
    \ digits\")\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits)\
    \ == 0\n        error(\"Value must contain at least two digits\")\n    end\n \
    \   \n    digits = map(x -> parse(Int64, x), digits)\n    \n    smallest_digit\
    \ = minimum(digits)\n    \n    closest_integer = smallest_digit\n    \n    for\
    \ digit in digits[2:end]\n        closest_integer = round(closest_integer * 10\
    \ + digit)\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer(value::String)::Int64", "    \n    \n    \"\"\"\n\
    \    Create a function that takes a value (string) representing a number\n   \
    \ and returns the closest float to it. If the number is equidistant\n    from\
    \ two floats, round it away from zero.", "    \n    closest_integer = int64(0)\n\
    \    \n    if value == \"-inf\" or value == \"inf\" or value == \"nan\" then\n\
    \        return int64(0)\n    end\n    \n    if value == \"0\" then\n        return\
    \ int64(0)\n    end\n    \n    if value == \"1\" then\n        return int64(1)\n\
    \    end\n    \n    if value == \"2\" then\n        return int64(2)\n    end\n\
    \    \n    if value == \"3\" then\n        return int64(3)\n    end\n    \n  \
    \  if value == \"4\" then\n        return int64(4)\n    end\n    \n    if value\
    \ == \"5\" then\n        return int64(5)\n    end\n    \n    if value == \"6\"\
    \ then\n        return int64(6)\n    end\n    \n    if value == \"7\" then\n \
    \       return int64(7)\n    end\n    \n    if value == \"8\" then\n        return\
    \ int64(8)\n    end\n    \n    if value == \"9\" then\n        return int64(9)\n\
    \    end\n    \n    if value == \"10\" then\n        return int64(10)\n    end\n\
    \    \n    if value == \"11\" then\n        return int64(11)\n    end\n    \n\
    \    if value == \"12\" then\n        return int64(12)\n    end\n    \n    if\
    \ value == \"13\" then\n        return int64(13)\n    end\n    \n    if value\
    \ == \"14\" then\n        return int64(14)\n    end\n    \n    if value == \"\
    15\" then\n        return int64(15)\n    end\n    \n    if value == \"16\" then\n\
    \        return int64(16)\n    end\n    \n    if value == \"17\" then\n      \
    \  return int64(17)\n    end\n    \n    if value == \"18\" then\n        return\
    \ int64(18)\n    end\n    \n    if value == \"19\" then\n        return int64(19)\n\
    \    end\n    \n    if value == \"20\" then\n        return int64(20)\n    end\n\
    \    \n    if value == \"21\" then\n        return int64(21)\n    end\n    \n\
    \    if value == \"22\" then\n        return int64(22)\n    end\n    \n    if\
    \ value == \"23\" then\n        return int64(23)\n    end\n    \n    if value\
    \ == \"24\" then\n        return int64(24)\n    end\n    \n    if value == \"\
    25\" then\n        return int64(25)\n    end\n    \n    if value == \"26\" then\n\
    \        return int64(26)\n    end\n    \n    if value == \"27\" then\n      \
    \  return int64(27)\n    end\n    \n    if value == \"28\" then\n        return\
    \ int64(28)\n    end\n    \n    if value == \"29\" then\n        return int64(29)\n\
    \    end\n    \n", "    \n    if value == \"\"\n        error(\"Value cannot be\
    \ empty\")\n    \n    number = parse(value) \n    \n    if number == 0\n     \
    \   error(\"Value cannot be 0\")\n    \n    if number < 0\n        error(\"Value\
    \ cannot be negative\")\n    \n    closest_integer = number\n    \n    if number\
    \ == 1\n        closest_integer = number\n    \n    if number % 1 == 0\n     \
    \   closest_integer = round(number)\n    \n    if number == round(number)\n  \
    \      closest_integer = round(number)\n    \n    if number == round(number) -\
    \ 1\n        closest_integer = round(number) - 1\n    \n    if number == round(number)\
    \ + 1\n        closest_integer = round(number) + 1\n    \n    if number == round(number)\
    \ + 2\n        closest_integer = round(number) + 2\n    \n    if number == round(number)\
    \ + 3\n        closest_integer = round(number) + 3\n    \n    if number == round(number)\
    \ + 4\n        closest_integer = round(number) + 4\n    \n    if number == round(number)\
    \ + 5\n        closest_integer = round(number) + 5\n    \n    if number == round(number)\
    \ + 6\n        closest_integer = round(number) + 6\n    \n    if number == round(number)\
    \ + 7\n        closest_integer = round(number) + 7\n    \n    if number == round(number)\
    \ + 8\n        closest_integer = round(number) + 8\n    \n    if number == round(number)\
    \ + 9\n        closest_integer = round(number) + 9\n    \n    if number == round(number)\
    \ + 10\n        closest_integer = round(number) + 10\n    \n    if number == round(number)\
    \ + 11\n        closest_integer = round(number) + 11\n    \n    if number == round(number)\
    \ + 12\n        closest_integer = round(number) + 12\n    \n    if number == round(number)\
    \ + 13\n        closest_integer = round(number) + 13\n    \n    if number == round(number)\
    \ + 14\n        closest_integer = round(number) + 14\n    \n    if number == round(number)\
    \ + 15\n        closest_integer = round(number) + 15\n    \n    if number == round(number)\
    \ + 16\n        closest_integer = round(number) + 16\n    \n    if number == round(number)\
    \ + 17\n        closest_integer = round(number) + 17\n    \n    if number == round(number)\
    \ + 18\n        closest_integer = round(number) + 18\n    \n    if number == round(number)\
    \ + 19\n        closest_integer = round(number) + 19\n    \n    if number == round(number)\
    \ + 20\n        closest_integer = round(number) + 20\n    \n    if number == round(number)\
    \ + 21\n        closest_integer = round(number) + 21", "    \n    closest_integer\
    \ = Int64(0)\n    \n    if value == \"NaN\" \n        closest_integer = Int64(\"\
    NaN\")\n    elseif value == \"-NaN\" \n        closest_integer = Int64(\"-NaN\"\
    )\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n\
    \    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n  \
    \  elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif\
    \ value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value\
    \ == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value ==\
    \ \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"\
    -Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\"\
    \ \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n\
    \        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n  \
    \      closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n    \
    \    closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n      \
    \  closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer\
    \ = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer =\
    \ Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"\
    -Inf\")\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\"\
    )\n    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n\
    \    elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n  \
    \  elseif value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif\
    \ value == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value\
    \ == \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value ==\
    \ \"-Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"\
    -Inf\" \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\"\
    \ \n        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n\
    \        closest_integer = Int64(\"-Inf\")\n    elseif value == \"-Inf\" \n  \
    \      closest_integer = Int64(\"-Inf", "    \n    \n    \"\"\"\n    Create a\
    \ function that takes a value (string) representing a number\n    and returns\
    \ the closest integer to it. If the number is equidistant\n    from two integers,\
    \ round it away from zero.", "    \n    closest_integer = Int64(math.ceil(math.log(value,10)))\n\
    \    \n    if closest_integer == math.ceil(value) or closest_integer == math.floor(value):\n\
    \        closest_integer = closest_integer - 1\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes\
    \ a value (string) representing a number\n    and returns the closest float to\
    \ it. If the number is equidistant\n    from two floats, round it away from zero.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if value == \"\"\n        return\
    \ -1\n    \n    digits = value.chars\n    \n    smallest_digit = digits[0]\n \
    \   \n    smallest_digit_value = digits[1]\n    \n    smallest_digit_count = 1\n\
    \    \n    smallest_digit_index = 2\n    \n    smallest_digit_distance = 0\n \
    \   \n    smallest_digit_distance_sum = 0\n    \n    for digit in digits[2:]\n\
    \        \n        digit_value = digit[1]\n        \n        digit_count = 1\n\
    \        \n        digit_index = 2\n        \n        digit_distance = 0\n   \
    \     \n        digit_distance_sum = 0\n        \n        for digit_char in digits[2:]\n\
    \            \n            digit_value = digit_char[1]\n            \n       \
    \     digit_count = digit_count + 1\n            \n            digit_index = digit_index\
    \ + 1\n            \n            digit_distance = digit_distance + 1\n       \
    \     \n            digit_distance_sum = digit_distance_sum + digit_distance\n\
    \            \n            if digit_distance_sum > digit_distance_sum\n      \
    \          digit_distance_sum = digit_distance_sum\n            \n           \
    \ if digit_distance_sum < smallest_digit_distance_sum\n                smallest_digit_distance_sum\
    \ = digit_distance_sum\n                \n                smallest_digit_distance\
    \ = digit_distance\n                \n                smallest_digit_value = digit_value\n\
    \                \n                smallest_digit_count = digit_count\n      \
    \          \n                smallest_digit_index = digit_index\n            \
    \    \n                smallest_digit_distance = digit_distance\n            \
    \    \n                smallest_digit_distance_sum = digit_distance_sum\n    \
    \            \n                smallest_digit_distance_sum = digit_distance_sum\n\
    \            \n            if digit_distance_sum == digit_distance_sum\n     \
    \           digit_distance_sum = digit_distance_sum\n            \n          \
    \  if digit_distance_sum < smallest_digit_distance_sum\n                smallest_digit_distance_sum\
    \ = digit_distance_sum\n                \n                smallest_digit_distance\
    \ = digit_distance\n                \n                smallest_digit_value = digit_value\n\
    \                \n                smallest_digit_count = digit_count\n      \
    \          \n                smallest_digit_index = digit_index\n            \
    \    \n                smallest_digit_distance = digit_distance\n            \
    \    \n                smallest_digit_distance_sum = digit_distance_sum\n    \
    \            \n                smallest_digit_distance_sum = digit_distance_sum\n\
    \            \n            if digit_distance_sum == digit_distance_sum\n     \
    \           digit_distance_sum = digit_distance_sum\n            \n          \
    \  if digit_distance_sum < smallest_digit_distance_sum\n                smallest_digit_distance_sum\
    \ = digit_distance_sum\n                \n                smallest_digit_distance\
    \ = digit_distance\n                \n                smallest_digit_value = digit_value\n\
    \                \n                smallest_digit_count = digit_count\n      \
    \          \n                smallest_digit_index = digit_index\n            \
    \    \n                smallest_digit_distance = digit_distance\n            \
    \    \n                smallest_digit_distance_sum = ", "    \n    if value ==\
    \ \"\"\n        return -1\n    \n    number = toFloat(value)\n    \n    if number\
    \ == 0.0\n        return -1\n    \n    closest_integer = floor(number)\n    \n\
    \    if number - closest_integer < 0.5\n        return closest_integer\n    \n\
    \    return closest_integer + 1\nend", "    \n    closest_integer = Int64(0)\n\
    \    \n    if value == \"-inf\" \n        closest_integer = Int64(-Inf)\n    elseif\
    \ value == \"inf\" \n        closest_integer = Int64(Inf)\n    elseif value ==\
    \ \"nan\" \n        closest_integer = Int64(-1)\n    elseif value == \"0\" \n\
    \        closest_integer = Int64(0)\n    elseif value == \"1\" \n        closest_integer\
    \ = Int64(1)\n    elseif value == \"2\" \n        closest_integer = Int64(2)\n\
    \    elseif value == \"3\" \n        closest_integer = Int64(3)\n    elseif value\
    \ == \"4\" \n        closest_integer = Int64(4)\n    elseif value == \"5\" \n\
    \        closest_integer = Int64(5)\n    elseif value == \"6\" \n        closest_integer\
    \ = Int64(6)\n    elseif value == \"7\" \n        closest_integer = Int64(7)\n\
    \    elseif value == \"8\" \n        closest_integer = Int64(8)\n    elseif value\
    \ == \"9\" \n        closest_integer = Int64(9)\n    elseif value == \"10\" \n\
    \        closest_integer = Int64(10)\n    elseif value == \"11\" \n        closest_integer\
    \ = Int64(11)\n    elseif value == \"12\" \n        closest_integer = Int64(12)\n\
    \    elseif value == \"13\" \n        closest_integer = Int64(13)\n    elseif\
    \ value == \"14\" \n        closest_integer = Int64(14)\n    elseif value == \"\
    15\" \n        closest_integer = Int64(15)\n    elseif value == \"16\" \n    \
    \    closest_integer = Int64(16)\n    elseif value == \"17\" \n        closest_integer\
    \ = Int64(17)\n    elseif value == \"18\" \n        closest_integer = Int64(18)\n\
    \    elseif value == \"19\" \n        closest_integer = Int64(19)\n    elseif\
    \ value == \"20\" \n        closest_integer = Int64(20)\n    elseif value == \"\
    21\" \n        closest_integer = Int64(21)\n    elseif value == \"22\" \n    \
    \    closest_integer = Int64(22)\n    elseif value == \"23\" \n        closest_integer\
    \ = Int64(23)\n    elseif value == \"24\" \n        closest_integer = Int64(24)\n\
    \    elseif value == \"25\" \n        closest_integer = Int64(25)\n    elseif\
    \ value == \"26\" \n        closest_integer = Int64(26)\n    elseif value == \"\
    27\" \n        closest_integer = Int64(27)\n    elseif value == \"28\" \n    \
    \    closest_integer = Int64(28)\n    elseif value == \"29\" \n        closest_integer\
    \ = Int64(29)", "    \n    closest_integer = int64(0)\n    \n    if value == \"\
    \"\n        return int64(0)\n    \n    splitted = split(value, \".\")\n    \n\
    \    if length(splitted) == 2 \n        \n        splitted[1] = splitted[1] %\
    \ 10\n        \n        splitted[1] = int64(splitted[1])\n        \n        splitted[1]\
    \ = int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1]\
    \ + 1)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n  \
    \      splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] =\
    \ int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1] /\
    \ 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n   \
    \     splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1]\
    \ / 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n \
    \       splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] =\
    \ int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1] /\
    \ 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n   \
    \     splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1]\
    \ / 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n \
    \       splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] =\
    \ int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1] /\
    \ 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n   \
    \     splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1]\
    \ / 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n \
    \       splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] =\
    \ int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1] /\
    \ 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n   \
    \     splitted[1] = int64(splitted[1] / 10)\n        \n        splitted[1] = int64(splitted[1]\
    \ / 10)\n        \n        splitted[1] = int64(splitted[1] / 10)\n        \n \
    \       splitted[1] = int64(splitted[1] / 10)\n        \n        ", "    \n  \
    \  if value == \"\"\n        error(\"Value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"Value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"Value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"Value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    Value cannot be 1\")\n    elseif value == \"2\"\n        error(\"Value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"Value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"Value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"Value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"Value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    Value cannot be 7\")\n    elseif value == \"8\"\n        error(\"Value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"Value cannot be 9\")\n \
    \   else\n        \n        local value = tonumber(value)\n        \n        if\
    \ value == 0\n            error(\"Value cannot be 0\")\n        elseif value ==\
    \ 1\n            error(\"Value cannot be 1\")\n        elseif value == 2\n   \
    \         error(\"Value cannot be 2\")\n        elseif value == 3\n          \
    \  error(\"Value cannot be 3\")\n        elseif value == 4\n            error(\"\
    Value cannot be 4\")\n        elseif value == 5\n            error(\"Value cannot\
    \ be 5\")\n        elseif value == 6\n            error(\"Value cannot be 6\"\
    )\n        elseif value == 7\n            error(\"Value cannot be 7\")\n     \
    \   elseif value == 8\n            error(\"Value cannot be 8\")\n        elseif\
    \ value == 9\n            error(\"Value cannot be 9\")\n        else\n       \
    \     \n            local closest = value\n            local closestDiff = abs(value\
    \ - closest)\n            \n            if closestDiff < 0.5\n               \
    \ local closestDiff = abs(value - closest)\n                local closestDiff\
    \ = closestDiff - 0.5\n                local closestDiff = closestDiff + 0.5\n\
    \                local closestDiff = closestDiff + 0.5\n                local\
    \ closestDiff = closestDiff + 0.5\n                local closestDiff = closestDiff\
    \ + 0.5\n                local closestDiff = closestDiff + 0.5\n             \
    \   local closestDiff = closestDiff + 0.5\n                local closestDiff =\
    \ closestDiff + 0.5\n                local closestDiff = closestDiff + 0.5\n \
    \               local closestDiff = closestDiff + 0.5\n                local closestDiff\
    \ = closestDiff + 0.5\n                local closestDiff = closestDiff + 0.5\n\
    \                local closestDiff = closestDiff + 0.5\n                local\
    \ closestDiff = closestDiff + 0.5\n                local closestDiff = closestDiff\
    \ + 0.5\n                local closestDiff = closestDiff + 0.5\n             \
    \   local ", "    \n    if value == \"\"\n        error(\"value cannot be an empty\
    \ string\")\n    end\n    \n    number = parse(Float64, value)\n    \n    if number\
    \ == 0.0\n        error(\"value cannot be 0.0\")\n    end\n    \n    closest_integer\
    \ = Int(ceil(number))\n    \n    if number == closest_integer\n        error(\"\
    value cannot be equidistant from two integers\")\n    end\n    \n    return closest_integer\n\
    end", "    \n    closest_integer = Int64(0)\n    \n    if value == \"-inf\" \n\
    \        closest_integer = Int64(-Inf)\n    \n    else if value == \"inf\" \n\
    \        closest_integer = Int64(Inf)\n    \n    else if value == \"nan\" \n \
    \       closest_integer = Int64(-1)\n    \n    else if value == \"0\" \n     \
    \   closest_integer = Int64(0)\n    \n    else if value == \"1\" \n        closest_integer\
    \ = Int64(1)\n    \n    else if value == \"2\" \n        closest_integer = Int64(2)\n\
    \    \n    else if value == \"3\" \n        closest_integer = Int64(3)\n    \n\
    \    else if value == \"4\" \n        closest_integer = Int64(4)\n    \n    else\
    \ if value == \"5\" \n        closest_integer = Int64(5)\n    \n    else if value\
    \ == \"6\" \n        closest_integer = Int64(6)\n    \n    else if value == \"\
    7\" \n        closest_integer = Int64(7)\n    \n    else if value == \"8\" \n\
    \        closest_integer = Int64(8)\n    \n    else if value == \"9\" \n     \
    \   closest_integer = Int64(9)\n    \n    else if value == \"10\" \n        closest_integer\
    \ = Int64(10)\n    \n    else if value == \"11\" \n        closest_integer = Int64(11)\n\
    \    \n    else if value == \"12\" \n        closest_integer = Int64(12)\n   \
    \ \n    else if value == \"13\" \n        closest_integer = Int64(13)\n    \n\
    \    else if value == \"14\" \n        closest_integer = Int64(14)\n    \n   \
    \ else if value == \"15\" \n        closest_integer = Int64(15)\n    \n    else\
    \ if value == \"16\" \n        closest_integer = Int64(16)\n    \n    else if\
    \ value == \"17\" \n        closest_integer = Int64(17)\n    \n    else if value\
    \ == \"18\" \n        closest_integer = Int64(18)\n    \n    else if value ==\
    \ \"19\" \n        closest_integer = Int64(19)\n    \n    else if value == \"\
    20\" \n        closest_integer = Int64(20)\n    \n    else if value == \"21\"\
    \ \n        closest_integer = Int64(21)\n    \n    else if value == \"22\" \n\
    \        closest_integer = Int64(22)\n    \n    else if value == \"23\" \n   \
    \     closest_integer = Int64(23)\n    \n    else if value == \"24\" \n      \
    \  closest_integer = Int", "    \n    closest_integer = Int(0)\n    \n    if value\
    \ == \"-inf\" \n        closest_integer = -Int(0)\n    else if value == \"inf\"\
    \ \n        closest_integer = Int(0)\n    else if value == \"nan\" \n        closest_integer\
    \ = Int(0)\n    else if value == \"0\" \n        closest_integer = Int(0)\n  \
    \  else if value == \"1\" \n        closest_integer = Int(1)\n    else if value\
    \ == \"2\" \n        closest_integer = Int(2)\n    else if value == \"3\" \n \
    \       closest_integer = Int(3)\n    else if value == \"4\" \n        closest_integer\
    \ = Int(4)\n    else if value == \"5\" \n        closest_integer = Int(5)\n  \
    \  else if value == \"6\" \n        closest_integer = Int(6)\n    else if value\
    \ == \"7\" \n        closest_integer = Int(7)\n    else if value == \"8\" \n \
    \       closest_integer = Int(8)\n    else if value == \"9\" \n        closest_integer\
    \ = Int(9)\n    else if value == \"10\" \n        closest_integer = Int(10)\n\
    \    else if value == \"11\" \n        closest_integer = Int(11)\n    else if\
    \ value == \"12\" \n        closest_integer = Int(12)\n    else if value == \"\
    13\" \n        closest_integer = Int(13)\n    else if value == \"14\" \n     \
    \   closest_integer = Int(14)\n    else if value == \"15\" \n        closest_integer\
    \ = Int(15)\n    else if value == \"16\" \n        closest_integer = Int(16)\n\
    \    else if value == \"17\" \n        closest_integer = Int(17)\n    else if\
    \ value == \"18\" \n        closest_integer = Int(18)\n    else if value == \"\
    19\" \n        closest_integer = Int(19)\n    else if value == \"20\" \n     \
    \   closest_integer = Int(20)\n    else if value == \"21\" \n        closest_integer\
    \ = Int(21)\n    else if value == \"22\" \n        closest_integer = Int(22)\n\
    \    else if value == \"23\" \n        closest_integer = Int(23)\n    else if\
    \ value == \"24\" \n        closest_integer = Int(24)\n    else if value == \"\
    25\" \n        closest_integer = Int(25)\n    else if value == \"26\" \n     \
    \   closest_integer = Int(26)\n    else if value == \"27\" \n        closest_integer\
    \ = Int(27)\n    else if value == \"28\" \n        closest_integer = Int(28)\n\
    \    else if value == \"29\" \n        closest_integer = Int(29)\n    else if ",
  "    \n    closest_integer = Int(0)\n    \n    if value == \"0\" || value == \"\
    -0\"\n        return Int(0)\n    \n    if value == \"1\" || value == \"-1\"\n\
    \        return Int(1)\n    \n    if value == \"2\" || value == \"-2\"\n     \
    \   return Int(2)\n    \n    if value == \"3\" || value == \"-3\"\n        return\
    \ Int(3)\n    \n    if value == \"4\" || value == \"-4\"\n        return Int(4)\n\
    \    \n    if value == \"5\" || value == \"-5\"\n        return Int(5)\n    \n\
    \    if value == \"6\" || value == \"-6\"\n        return Int(6)\n    \n    if\
    \ value == \"7\" || value == \"-7\"\n        return Int(7)\n    \n    if value\
    \ == \"8\" || value == \"-8\"\n        return Int(8)\n    \n    if value == \"\
    9\" || value == \"-9\"\n        return Int(9)\n    \n    if value == \"10\" ||\
    \ value == \"-10\"\n        return Int(10)\n    \n    if value == \"11\" || value\
    \ == \"-11\"\n        return Int(11)\n    \n    if value == \"12\" || value ==\
    \ \"-12\"\n        return Int(12)\n    \n    if value == \"13\" || value == \"\
    -13\"\n        return Int(13)\n    \n    if value == \"14\" || value == \"-14\"\
    \n        return Int(14)\n    \n    if value == \"15\" || value == \"-15\"\n \
    \       return Int(15)\n    \n    if value == \"16\" || value == \"-16\"\n   \
    \     return Int(16)\n    \n    if value == \"17\" || value == \"-17\"\n     \
    \   return Int(17)\n    \n    if value == \"18\" || value == \"-18\"\n       \
    \ return Int(18)\n    \n    if value == \"19\" || value == \"-19\"\n        return\
    \ Int(19)\n    \n    if value == \"20\" || value == \"-20\"\n        return Int(20)\n\
    \    \n    if value == \"21\" || value == \"-21\"\n        return Int(21)\n  \
    \  \n    if value == \"22\" || value == \"-22\"\n        return Int(22)\n    \n\
    \    if value == \"23\" || value == \"-23\"\n        return Int(23)\n    \n  \
    \  if value == \"24\" || value == \"-24\"\n        return Int(24)\n    \n    if\
    \ value == \"25\" || value == \"-25\"\n        return Int(25)\n    \n    if value\
    \ == \"26\" || value == \"-26\"\n        return Int(26)\n    \n    if value ==\
    \ \"27\" || value == \"-27\"\n        return Int(27)\n    \n    if value == \"\
    28\" || value == \"-28\"\n        return Int(28)\n    \n    if value == \"29\"\
    \ || value == \"-29\"\n        return Int(29)\n    \n    if value == \"30\" ||\
    \ value == \"-30", "    \n    if value == \"\"\n        error(\"The value cannot\
    \ be empty\")\n    end\n    \n    number = parse(Float64, value)\n    \n    if\
    \ number == 0.0\n        error(\"The value cannot be 0\")\n    end\n    \n   \
    \ if number == 1.0\n        error(\"The value cannot be 1\")\n    end\n    \n\
    \    if number == -1.0\n        error(\"The value cannot be -1\")\n    end\n \
    \   \n    if number == 2.0\n        error(\"The value cannot be 2\")\n    end\n\
    \    \n    if number == -2.0\n        error(\"The value cannot be -2\")\n    end\n\
    \    \n    if number == 3.0\n        error(\"The value cannot be 3\")\n    end\n\
    \    \n    if number == -3.0\n        error(\"The value cannot be -3\")\n    end\n\
    \    \n    if number == 4.0\n        error(\"The value cannot be 4\")\n    end\n\
    \    \n    if number == -4.0\n        error(\"The value cannot be -4\")\n    end\n\
    \    \n    if number == 5.0\n        error(\"The value cannot be 5\")\n    end\n\
    \    \n    if number == -5.0\n        error(\"The value cannot be -5\")\n    end\n\
    \    \n    if number == 6.0\n        error(\"The value cannot be 6\")\n    end\n\
    \    \n    if number == -6.0\n        error(\"The value cannot be -6\")\n    end\n\
    \    \n    if number == 7.0\n        error(\"The value cannot be 7\")\n    end\n\
    \    \n    if number == -7.0\n        error(\"The value cannot be -7\")\n    end\n\
    \    \n    if number == 8.0\n        error(\"The value cannot be 8\")\n    end\n\
    \    \n    if number == -8.0\n        error(\"The value cannot be -8\")\n    end\n\
    \    \n    if number == 9.0\n        error(\"The value cannot be 9\")\n    end\n\
    \    \n    if number == -9.0\n        error(\"The value cannot be -9\")\n    end\n\
    \    \n    if number == 10.0\n        error(\"The value cannot be 10\")\n    end\n\
    \    \n    if number == -10.0\n        error(\"The value cannot be -10\")\n  \
    \  end\n    \n    if number == 11.0\n        error(\"The value cannot be 11\"\
    )\n    end\n    \n    if number == -11.0\n        error(\"The value cannot be\
    \ -11\")\n    end\n    \n    if number == 12.0\n        error(\"The value cannot\
    \ be 12\")\n    end\n    \n    if number == -12.0\n        error(\"The value cannot\
    \ be -12\")\n    end\n    \n    if number == 13.0\n        error(\"The value cannot\
    \ be 13\")\n    end\n    \n    if number == -13.0\n        error(\"The value cannot\
    \ be -13\")\n    end\n    \n    if number == 14.0\n        error(\"The value cannot\
    \ be 14\")\n    end\n    ", "    \n    if value == \"\"\n        error(\"value\
    \ cannot be empty\")\n    \n    digits = value.digits\n    \n    if digits ==\
    \ 0\n        error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n  \
    \  digits = digits[1..end]\n    \n    if digits == 0\n        error(\"value cannot\
    \ be empty\")\n    \n    digits = digits[1..end]\n    \n    if digits == 0\n \
    \       error(\"value cannot be empty\")\n    \n    digits = digits[1..end]\n\
    \    \n    if digits == 0\n        error(\"value cannot be empty\")\n    \n",
  "    \n    closest_integer = Int64(math.floor(value))\n    \n    if closest_integer\
    \ == value \n        closest_integer = Int64(math.ceil(value))\n    \n    return\
    \ closest_integer\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
