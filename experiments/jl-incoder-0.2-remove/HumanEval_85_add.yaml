name: HumanEval_85_add
language: jl
prompt: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
  \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
  \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
  \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
completions: ["    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n \
    \   return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2", "    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n\"\"\"", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[",
  "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend",
  "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens =\
    \ collect(evens)\n    odds = collect(odds)\n    evens = sum(evens)\n    odds =\
    \ sum(odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warn", "    evens = lst[findall(x ->\
    \ mod(x,2) == 0, lst)]\n    evens = evens[findall(x -> mod(x,2) == 1, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 2, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 3, lst)]\n    evens = evens[findall(x -> mod(x,2) == 4, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 5, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 6, lst)]\n    evens = evens[findall(x -> mod(x,2) == 7, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 8, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 9, lst)]\n    evens = evens[findall(x -> mod(x,2) == 10, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 11, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 12, lst)]\n    evens = evens[findall(x -> mod(x,2) == 13, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 14, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 15, lst)]\n    evens = evens[findall(x -> mod(x,2) == 16, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 17, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 18, lst)]\n    evens = evens[findall(x -> mod(x,2) == 19, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 20, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 21, lst)]\n    evens = evens[findall(x -> mod(x,2) == 22, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 23, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 24, lst)]\n    evens = evens[findall(x -> mod(x,2) == 25, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 26, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 27, lst)]\n    evens = evens[findall(x -> mod(x,2) == 28, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 29, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 30, lst)]\n    evens = evens[findall(x -> mod(x,2) == 31, lst)]\n",
  "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return even\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert add([1]) == 1;\n@assert add([1,2])\
    \ == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 7;\n@assert add([1,2,3,4,5])\
    \ == 10;\n@assert add([1,2,3,4,5,6]) == 13;\n@assert add([1,2,3,4,5,6,7]) == 16;\n\
    @assert add([1,2,3,4,5,6,7,8]) == 19;\n@assert add([1,2,3,4,5,6,7,8,9]) == 22;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == 25;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 28;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 31;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 34;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 37;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 40;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 43;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 46;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 49;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 52;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 55;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 58;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 61;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 64;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 67;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4,5])\
    \ == 10;\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in a vector. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for ", "    evens = lst[findall(x -> mod(x,2)==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = ", "    even\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in the list that are less than the given value.", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend", "    even =\
    \ lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n    return even\nend\n\"\"\
    \"", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2,3]) == 6\n\
    @assert add([1,3,5,7,9]) == 10\n@assert add([1,3,5,7,9,11]) == 13\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ are less than a given value.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    even.+=(odd.+0)\n    return\
    \ even\nend", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    ", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the sum of the even numbers in\
    \ a given list. \nWrite a function that returns the sum of the odd numbers in\
    \ a given list. \nWrite a function that returns the sum of the even numbers in\
    \ a given list and the sum of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+ + odd.+\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4])\
    \ == 7;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6]) == 13;\n\
    @assert add([1,2,3,4,5,6,7]) == 16;\n@assert add([1,2,3,4,5,6,7,8]) == 19;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9]) == 22;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 25;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11]) == 28;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 32;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 35;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 38;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 41;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\
    \ == 44;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 47;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 50;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 53;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==\
    \ 56;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) ==\
    \ 59;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == 62;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == 65;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 68;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,", "  \
    \  evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n \
    \   evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = ", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.3>\nadd(vec(1:10))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the even elements in\
    \ the vector.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(x -> x + 1, evens)\n    return sum(evens)\nend", "    even =\
    \ lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(1:5) == 6\n</cell>\n<code language=julia-1.5>\n@assert add(1:10) ==\
    \ 15\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list.", "    even = lst[1::2]\n    odd\
    \ = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n\"\"\"", "    evens\
    \ = lst[1 :end] \n    odds = lst[2 :end] \n    evens + odds\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([1]) == 1;\n@assert add([2]) == 2;\n@assert\
    \ add([3]) == 3;\n@assert add([4]) == 4;\n@assert add([5]) == 5;\n@assert add([6])\
    \ == 6;\n@assert add([7]) == 7;\n@assert add([8]) == 8;\n@assert add([9]) == 9;\n\
    @assert add([10]) == 10;\n@assert add([11]) == 11;\n@assert add([12]) == 12;\n\
    @assert add([13]) == 13;\n@assert add([14]) == 14;\n@assert add([15]) == 15;\n\
    @assert add([16]) == 16;\n@assert add([17]) == 17;\n@assert add([18]) == 18;\n\
    @assert add([19]) == 19;\n@assert add([20]) == 20;\n@assert add([21]) == 21;\n\
    @assert add([22]) == 22;\n@assert add([23]) == 23;\n@assert add([24]) == 24;\n\
    @assert add([25]) == 25;\n@assert add([26]) == 26;\n@assert add([27]) == 27;\n\
    @assert add([28]) == 28;\n@assert add([29]) == 29;\n@assert add([30]) == 30;\n\
    @assert add([31]) == 31;\n@assert add([32]) == 32;\n@assert add([33]) == 33;\n\
    @assert add([34]) == 34;\n@assert add([35]) == 35;\n@assert add([36]) == 36;\n\
    @assert add([37]) == 37;\n@assert add([38]) == 38;\n@assert add([39]) == 39;\n\
    @assert add([40]) == 40;\n@assert add([41]) == 41;\n@assert add([42]) == 42;\n\
    @assert add([43]) == 43;\n@assert add([44]) == 44;\n@assert add([45]) == 45;\n\
    @assert add([46]) == 46;\n@assert add([47]) == 47;\n@assert add([48]) == 48;\n\
    @assert add([49]) == 49;\n@assert add([50]) == 50;\n@assert add([51]) == 5", " \
    \   even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\n\
    end", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(1:10) == [2,4,6,8,10,12,14,16,18,20]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector v and returns\
    \ the sum of the squares of the elements in the vector.", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend", "    evens =\
    \ lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens + odds\nend", "    even\
    \ = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n\
    \"\"\"", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([1,2,3,4,5,6,7,8,9,10]))\
    \ == Vector{Int64}([2,4,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers in a vector. \nThe function should work\
    \ for both real and complex numbers.", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 ==\
    \ 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, even)]\n    even = even[findall(x\
    \ -> x % 2 != 0, odd)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 != 0, even)]\n   \
    \ odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2\
    \ == 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, odd)]\n    even = ", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even = even(:);\n    odd = odd(:);\n    even = union(even, odd);\n    even\
    \ = union(even, lst[end-1:end]);\n    return length(even)\nend\n\"\"\"", "   \
    \ evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = sum(evens)\n    return evens\nend", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    ", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(1:10) == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n\
    <text>\nExercise 2\nWrite a function called evens that takes a vector and returns\
    \ the even indices. For example, evens([1,2,3,4,5,6,7,8,9,10]) should return [2,4,6,8].",
  "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x ->\
    \ mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens\
    \ = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0,\
    \ lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n",
  "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>", "    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend",
  "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ even numbers in a given list. \nWrite a function that returns the product of\
    \ the odd numbers in a given list. \nWrite a function that returns the maximum\
    \ of the even numbers in a given list. \nWrite a function that returns the maximum\
    \ of the odd numbers in a given list. \nWrite a function that returns the minimum\
    \ of the even numbers in a given list. \nWrite a function that returns the minimum\
    \ of the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the even numbers in a given list multiplied by the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the product of the odd numbers\
    \ in a given list multiplied by the sum of the even numbers in a given list. \n\
    Write a function that returns the product of the even numbers in a given list\
    \ multiplied by the product of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the odd numbers in a given list multiplied by the\
    \ product of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the even numbers in a given list divided by the sum of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ odd numbers in a given list divided by the sum of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the even numbers in a given\
    \ list divided by the product of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the odd numbers in a given list divided by the product\
    \ of the even numbers in a given list. \nWrite a function that returns the sum\
    \ of the even numbers in a given list divided by the sum of the odd numbers in\
    \ a given list. \nWrite a function that returns the sum of the odd numbers in\
    \ a given list divided by the sum of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the even numbers in a given list divided\
    \ by the product of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the odd numbers in a given list divided by the product of the even\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ even numbers in a given list divided by the sum of the odd numbers in a given\
    \ list. \nWrite a function that returns the product of the odd numbers in a given\
    \ list divided by the sum of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the even numbers in a given list divided by the\
    \ product of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the odd numbers in a given ", "    evens = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = ", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    return sum(evens)\nend", "    even = lst[1 :end] \n    odd = lst[2\
    \ :end] \n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert add([1]) == 1;\n@assert add([2]) == 3;\n@assert add([3]) == 5;\n@assert\
    \ add([4]) == 7;\n@assert add([5]) == 9;\n@assert add([6]) == 11;\n@assert add([7])\
    \ == 13;\n@assert add([8]) == 15;\n@assert add([9]) == 17;\n@assert add([10])\
    \ == 19;\n@assert add([11]) == 23;\n@assert add([12]) == 27;\n@assert add([13])\
    \ == 31;\n@assert add([14]) == 35;\n@assert add([15]) == 39;\n@assert add([16])\
    \ == 43;\n@assert add([17]) == 47;\n@assert add([18]) == 51;\n@assert add([19])\
    \ == 55;\n@assert add([20]) == 59;\n@assert add([21]) == 63;\n@assert add([22])\
    \ == 67;\n@assert add([23]) == 71;\n@assert add([24]) == 75;\n@assert add([25])\
    \ == 79;\n@assert add([26]) == 83;\n@assert add([27]) == 87;\n@assert add([28])\
    \ == 91;\n@assert add([29]) == 95;\n@assert add([30]) == 99;\n@assert add([31])\
    \ == 103;\n@assert add([32]) == 107;\n@assert add([33]) == 111;\n@assert add([34])\
    \ == 115;\n@assert add([35]) == 119;\n@assert add([36]) == 123;\n@assert add([37])\
    \ == 127;\n@assert add([38]) == 131;\n@assert add([39]) == 135;\n@assert add([40])\
    \ == 139;\n@assert add([41]) == 143;\n@assert add([42]) == 147;\n@assert add([43])\
    \ == 151;\n@assert add([44]) == 155;\n@assert add([45]) == 159;\n@assert add([46])\
    \ == 163;\n@assert add([47]) == 167;\n@assert add([48]) == 171;\n@assert add([49])\
    \ == 175;\n", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n   \
    \ even.+=(odd.+=1)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add([1]) == [2]\n@assert add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5])\
    \ == [2,4,6,8,10]\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\"\"\"\n\"\"\
    \"\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    add(lst)\n    lst\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    evens = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    ", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integer", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n\"\"\"", "    even = lst[1 :] \n    odd = lst[2 :]\n  \
    \  even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.*2)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n\"\"\"\n\"\"\"\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    add(lst)\n\
    \    lst\n    \n    \n    \n\"\"\"\n\"\"\"", "    even = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 3\n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4])\
    \ == 10\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,2,3,4,5,6]) == 21\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in the\
    \ list lst that have even indices. \nWrite a function that returns the sum of\
    \ the numbers in the list lst that have odd indices. \nWrite a function that returns\
    \ the sum of the numbers in the list lst that have both even and odd indices.\n\
    Write a function that returns the sum of the numbers in the list lst that have\
    \ no even or odd indices.", "    even = lst[1 :end]\n    odd = lst[2 :end]\n \
    \   even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 2 \n@assert add([1,2]) == 3 \n\
    @assert add([1,2,3]) == 5 \n@assert add([1,2,3,4]) == 6\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the numbers in the list lst that\
    \ have even indices. For example, sum([1,3,5,7,9]) should return 10, and sum([1,3,5,7,9,11])\
    \ should return 17.", "    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even = even[findall(x -> x\
    \ % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    add(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the sum of the squares of the elements of the vector.", "    even =\
    \ lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n\
    \    even.+ odd.\nend", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x\
    \ -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, even)]\n    even = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 ==\
    \ 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even\
    \ = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0,\
    \ odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 == 0, odd)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x\
    \ -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, even)]\n    even = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = ", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 ==\
    \ 1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n   \
    \ evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+ + odd.+\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 3\n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4])\
    \ == 10\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,2,3,4,5,6]) == 21\n@assert\
    \ add([1,2,3,4,5,6,7]) == 28\n@assert add([1,2,3,4,5,6,7,8]) == 36\n@assert add([1,2,3,4,5,6,7,8,9])\
    \ == 45\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 55\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 66\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 76\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 86\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 96\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 105\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 116\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 126\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 136\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 145\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 156\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 165\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 176\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 186\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 196\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\
    \ == 205\n@assert add([1,2,3,4,", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == [2]\n@assert add([1,2]) == [3,4]\n@assert add([1,2,3]) ==\
    \ [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 3.",
  "    even = lst[1::2]\n    odd = lst[2::2]\n    return sum(even) + sum(odd)\nend",
  "    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n    evens =\
    \ evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = ", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,3,5,7,9])\
    \ == 21\n@assert add([1,3,5,7,9,11,13,15]) == 35\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the integers in lst. For\
    \ example, sum([1,2,3]) should return 9. Make sure your function works with lists\
    \ of different lengths.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = map(add, evens)\n    return sum(evens)\nend", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n   \
    \ evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n \
    \   evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = ", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return even\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \n", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+\
    \ + odd.+\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens =\
    \ evens[2:end]\n    evens = collect(evens)\n    evens = collect(evens)\n    evens\
    \ = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n \
    \   evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    ", "    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2]) == 3\n@assert\
    \ add([1,2,3]) == 6\n@assert add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5]) ==\
    \ 15\n@assert add([1,2,3,4,5,6]) == 21\n@assert add([1,2,3,4,5,6,7]) == 28\n@assert\
    \ add([1,2,3,4,5,6,7,8]) == 36\n@assert add([1,2,3,4,5,6,7,8,9]) == 45\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10]) == 54\n@assert add([1,2,3,4,5,6,7,8,9,10,11]) ==\
    \ 63\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 72\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 81\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 90\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 100\n</cell>\n<text>\nExercise 2\nWrite a function called sum that takes\
    \ a list of numbers and returns the sum of the numbers. \nWrite a test that passes\
    \ when the function works as expected.", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    even = lst[1::2]\n    odd =\
    \ lst[2::2]\n    even.+=(odd)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([1,2,3,4,5,6,7,8,9,10])) == Vector{Int64}([2,4,6,8,10,12,14,16,18,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called add_all that takes in a list\
    \ of integers and returns the sum of all the even numbers in the list. \nWrite\
    \ another function called add_all_even that takes in a list of integers and returns\
    \ the sum of all the even numbers in the list. \nWrite another function called\
    \ add_all_odd that takes in a list of integers and returns the sum of all the\
    \ odd numbers in the list. \nWrite another function called add_all_even that takes\
    \ in a list of integers and returns the sum of all the even numbers in the list.\
    \ \nWrite another function called add_all_odd that takes in a list of integers\
    \ and returns the sum of all the odd numbers in the list. \nWrite another function\
    \ called add_all_even that takes in a list of integers and returns the sum of\
    \ all the even numbers in the list. \nWrite another function called add_all_odd\
    \ that takes in a list of integers and returns the sum of all the odd numbers\
    \ in the list. ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n\"\"\"", "    even = lst[1 :] \n    odd = lst[2 :]\n  \
    \  even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n\
    @assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) ==\
    \ 8;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6]) == 12;\n@assert\
    \ add([1,2,3,4,5,6,7]) == 15;\n@assert add([1,2,3,4,5,6,7,8]) == 18;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9]) == 21;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 24;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11]) == 27;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 30;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 33;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 36;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 39;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\
    \ == 42;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 45;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 48;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 51;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==\
    \ 54;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) ==\
    \ 57;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == 60;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == 63;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 66;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = map(add, evens)\n    evens = reduce(add, evens)\n    return evens\nend", " \
    \   even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2,3]) == 5\n@assert\
    \ add([1,3,5,7,9]) == 10\n@assert add([1,3,5,7,9,11,13,15]) == 15\n@assert add([1,3,5,7,9,11,13,15,17,19])\
    \ == 19\n@assert add([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ == 103\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in the list lst that are divisible by 3.", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.*2)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n  \
    \  return even\nend", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n   \
    \ even = even.+odd\n    return even\nend", "    even = lst[findall(x -> x % 2\
    \ == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+ odd.\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert add([1]) == 1;\n@assert add([1,2,3])\
    \ == 3;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 45;\n</cell>\n<text>\nExercise 2\nWrite a function called sum that takes\
    \ in a list of integers and returns the sum of all the integers in the list. Test\
    \ it on a list of integers and a vector of integers.", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype add(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements that are at odd indices.", "    even = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.(2:end).+even.(1:end-1)\n\
    \    odd = odd.(2:end).+odd.(1:end-1)\n    even = even.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend", "  \
    \  even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    return sum(even + odd)\nend\n\"\"\"", "    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ even elements that are at odd indices.", "    evens = lst[findall(x -> x % 2\
    \ == 0, lst)]\n    evens = evens[2:end]\n    evens = map(x -> x + 2, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4,5]) ==\
    \ 10\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 15\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the numbers in the list lst starting\
    \ with the number at index idx. For example, if the list lst is [1,2,3,4,5,6,7,8,9,10],\
    \ and idx is 2, the function should return 17.", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = collect(evens)\n  \
    \  evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens =\
    \ evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n\"\"\"", "    evens = lst[findall(x->x%2==0,lst)]\n   \
    \ evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n \
    \   evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend", "    even\
    \ = lst[1::2]\n    odd = lst[2::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called sum2 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum3 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum4 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum5 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum6 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum7 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum8 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum9 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum10 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum11 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum12 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum13 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum14 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum15 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum16 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum17 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum18 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum19 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum20 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum21 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum22 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum23 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum24 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum25 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum26 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum27 that sums up all even numbers in a given list. \nWrite a function\
    \ called sum28 that sums up all even numbers in a given list. \nWrite a function\
    \ called ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend", "    evens = lst[findall(x -> mod(x,2)==0, lst)]\n   \
    \ evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==2, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==3, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==4, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==5, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==6, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==7, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==8, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==9, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==10, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==11, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==12, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==13, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==14, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==15, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==16, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==17, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==18, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==19, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==20, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> ", "    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    \"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ even elements of a given list. \nWrite a function that returns the sum of the\
    \ squares of the even elements of a given vector. \nWrite a function that returns\
    \ the sum of the squares of the even elements of a given matrix. \nWrite a function\
    \ that returns the sum of the squares of the even elements of a given tensor.\
    \ \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite ", "    even = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n\
    \    return sum(even) + sum(odd)\nend", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(even + odd)\nend", "    evens = lst[1 :end]\
    \ \n    odds = lst[2 :end] \n    evens + odds\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add([1]) == 1 \n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert\
    \ add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5]) == 15\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called mul that multiplies all the numbers in a list. \n\
    The function should work when the list has any number of elements.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = ", "    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend",
  "    evens = lst[1 : (end-1)]\n    evens = evens[evens .% 2 == 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)\n    return even\nend", "    evens = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x %\
    \ 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = ", "    evens = lst[findall(x->x%2==0, lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[", "    even\
    \ = lst[1 :end]\n    odd = lst[2 :end]\n    even = even(even(:))\n    even = even\
    \ + odd\n    even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4])\
    \ == 7;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6]) == 13;\n\
    </cell>\n<text>\nExercise 2\nWrite a function called sum that takes in a list\
    \ of integers and returns the sum of the integers in the list. For example, sum([1,2,3])\
    \ should return 6. Make sure your function works with negative numbers as well.",
  "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n\
    @assert add([1,2,3,4]) == 7;\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ count_evens that takes a vector and returns the number of even elements in the\
    \ vector. For example, count_evens([1,3,5]) should return 2.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.-even)\n    return even\nend", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = collect(evens)\n  \
    \  evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    ", "    even = lst[1 : (end-1)]\n    odd = lst[(end-2) : (end-1)]\n    even.+=(odd.*2)\n\
    \    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    even = lst[1::2]\n  \
    \  odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@", "    evens =\
    \ lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n   \
    \ evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0,\
    \ evens)]\n    evens = ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\n\
    end\n</cell>\n<code language=julia-1.4>\nadd([1,2,3,4,5,6])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even elements\
    \ of a given list.", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n\
    \    return even\nend", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    even = even.+odd\n    return even\n\
    end\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n   \
    \ even.+=(odd.-even)\n    return even\nend", "    even = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called sub that subtracts two lists.",
  "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens =\
    \ map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = ", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    ", "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, ", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the even elements in the vector.", "    evens = lst[1 : (end-1)]\n    odds =\
    \ lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 != 0, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)\n\
    \    evens = union(evens, odds)\n    evens = collect(evens)\n    odds = collect(odds)",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n \
    \   evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    ", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)\n    return even\nend\n\"\"\"", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    ", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n   \
    \ evens + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4])\
    \ == 8;\n@assert add([1,2,3,4,5]) == 13;\n@assert add([1,2,3,4,5,6]) == 18;\n\
    @assert add([1,2,3,4,5,6,7]) == 23;\n@assert add([1,2,3,4,5,6,7,8]) == 30;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9]) == 37;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 44;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11]) == 51;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 59;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 66;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 73;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 80;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\
    \ == 87;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 94;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 101;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 108;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==\
    \ 115;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) ==\
    \ 122;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == 129;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == 136;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 143;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\n\
    end\n\"\"\"", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ +\
    \ even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ +\
    \ odd.+ + even.+ + odd.+ + even.+ + odd.+ ", "    evens = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\"\"\"",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n  \
    \  evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    ", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+=0)\n    return even\nend", "    even = lst[1::2]\n    odd =\
    \ lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == [2]\n@assert add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5])\
    \ == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10,12,14,16,18,20]\n\
    </cell>\n<text>\nExercise 3\nWrite a function called add_all that takes in a list\
    \ of integers and returns the sum of all the even numbers in the list.", "   \
    \ evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n \
    \   return sum(evens)\nend", "    evens = lst[1 : (end-1)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens + sum(odds)\nend", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the even numbers in a given list.", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n   \
    \ evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n \
    \   evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = ", "    even\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add([1]) == 3\n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4,5])\
    \ == 15\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that satisfy a given predicate.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = reduce(+, evens)\n    return evens\nend", "    evens = lst[findall(x->x%2==0,lst)]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = ", "    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4])\
    \ == 8;\n@assert add([1,2,3,4,5]) == 13;\n@assert add([1,2,3,4,5,6]) == 19;\n\
    @assert add([1,2,3,4,5,6,7]) == 25;\n@assert add([1,2,3,4,5,6,7,8]) == 30;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9]) == 36;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 43;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11]) == 49;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 55;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 61;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 67;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 74;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\
    \ == 81;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 87;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 94;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 101;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==\
    \ 108;\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the numbers in the list lst that are divisible by 3.", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)/2\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4,5])\
    \ == 10;\n</cell>\n<text>\nExercise 2\nWrite a function called add_all that takes\
    \ a list of numbers and returns the sum of the even numbers and the sum of the\
    \ odd numbers.", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ [2]\n@assert add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and ", "    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([1]) == [2]\n@assert add([1,2,3]) == [2,4,6]\n\
    @assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called add_all that takes in a list of integers and returns the sum of all the\
    \ even numbers in the list. Also return the sum of all the odd numbers in the\
    \ list.", "    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n \
    \   return even\nend\n\"\"\"", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    evens = evens[2:end]\n    evens = map(add, evens)\n    return sum(evens)\n\
    end", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens\
    \ + sum(odds)\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens\
    \ = ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=1)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of the even elements\
    \ of a given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list. \nWrite a function that returns the product of the even and\
    \ odd elements of a given list. \nWrite a function that returns the product of\
    \ the even and even elements of a given list. \nWrite a function that returns\
    \ the product of the odd elements of a given list. \nWrite a function that returns\
    \ the product of the even and odd elements of a given list. \nWrite a function\
    \ that returns the product of the even and even elements of a given list. \nWrite\
    \ a function that returns the product of the odd elements of a given list. \n\
    Write a function that returns the product of the even and odd elements of a given\
    \ list. \nWrite a function that returns the product of the even and even elements\
    \ of a given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list. \nWrite a function that returns the product of the even and\
    \ odd elements of a given list. \nWrite a function that returns the product of\
    \ the even and even elements of a given list. ", "    even = lst[1::2]\n    odd\
    \ = lst[2::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+\
    \ odd.\nend", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n \
    \   even.+=(odd.*2)\n    return even\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
