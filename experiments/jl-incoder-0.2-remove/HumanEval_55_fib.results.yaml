language: jl
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to call a function that doesn't exist.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpixkeypdq.jl:5\nin expression starting at /tmp/tmpixkeypdq.jl:5\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took to run\
    \ our function.  We will see later that we can use this information to optimize\
    \ our code.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2_jpbzu.jl:5\nin expression starting at /tmp/tmpv2_jpbzu.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will tell us the time it took to execute\
    \ the code. Let's see how long it took to compute fib(10).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsibh70p3.jl:5\nin expression starting at /tmp/tmpsibh70p3.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise\nWrite a recursive function named fib_r(n::Int64) that returns the nth\
    \ Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpujsdr3y8.jl:5\nin expression starting at /tmp/tmpujsdr3y8.jl:5\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates $n!$,\
    \ where $n$ is a positive integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv43tkh2u.jl:9\nin expression starting at /tmp/tmpv43tkh2u.jl:9\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n\n    else fib(n - 1) +\
    \ fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nThe @time macro will tell us the time it took to run our code. Let's see\
    \ what happens if we run it a million times:\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpetfa5ti6.jl:5\nin expression starting at /tmp/tmpetfa5ti6.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function\
    \ and time how long it takes to run. Julia will print the time it took to run\
    \ the function to the console.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps7q2sqnr.jl:5\nin expression starting at /tmp/tmps7q2sqnr.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nJulia is lazy, so nothing is computed until you\
    \ ask for it. The function fib is only called once, even though it calls itself\
    \ twice (once to compute fib(n-1) and once to compute fib(n-2)). Julia is smart\
    \ enough to not compute fib(n-2) until it needs to.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18jjflcj.jl:9\nin expression starting at /tmp/tmp18jjflcj.jl:9\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe Julia compiler has optimized the recursive\
    \ function into a loop, so the code runs much faster. Let's see what happens when\
    \ we compile the function using @code_warntype.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9mcasmg.jl:5\nin expression starting at /tmp/tmpw9mcasmg.jl:5\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will give you the time it took\
    \ to run a piece of code. Let's see what happens when we run it on a larger number:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2inw678c.jl:5\nin expression starting at /tmp/tmp2inw678c.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbnr60di5.jl:5\nin expression starting at /tmp/tmpbnr60di5.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run a code block multiple\
    \ times and report the execution time for each execution.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp07wucmg3.jl:5\nin expression starting at /tmp/tmp07wucmg3.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec that computes the n-th Fibonacci\
    \ number. Test it on small numbers and on large numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazpwcuec.jl:6\nin expression starting at /tmp/tmpazpwcuec.jl:6\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurbgsvwx.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurbgsvwx.jl:1\n\
    in expression starting at /tmp/tmpurbgsvwx.jl:1\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will time the execution of your\
    \ Julia code. \nThe output will look something like this:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpilscdwdx.jl:5\nin expression starting at /tmp/tmpilscdwdx.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2) \nend \n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n\
    <text>\nThe @time macro will measure the execution time of a block of code. \n\
    The first argument is the name of the block of code to be measured. \nThe second\
    \ argument is the time unit in which the code will be executed. \nThe third argument\
    \ is the number of times the code will be executed. \nThe fourth argument is the\
    \ time unit in which the code will be executed. \nThe fifth argument is the number\
    \ of times the code will be executed. \nThe sixth argument is the time unit in\
    \ which the code will be executed. \nThe seventh argument is the number of times\
    \ the code will be executed. \nThe eighth argument is the time unit in which the\
    \ code will be executed. \nThe ninth argument is the number of times the code\
    \ will be executed. \nThe tenth argument is the time unit in which the code will\
    \ be executed. \nThe eleventh argument is the number of times the code will be\
    \ executed. \nThe twelfth argument is the time unit in which the code will be\
    \ executed. \nThe thirteenth argument is the number of times the code will be\
    \ executed. \nThe fourteenth argument is the time unit in which the code will\
    \ be executed. \nThe fifteenth argument is the number of times the code will be\
    \ executed. \nThe sixteenth argument is the time unit in which the code will be\
    \ executed. \nThe seventeenth argument is the number of times the code will be\
    \ executed. \nThe eighteenth argument is the time unit in which the code will\
    \ be executed. \nThe nineteenth argument is the number of times the code will\
    \ be executed. \nThe twenty-first argument is the time unit in which the code\
    \ will be executed. \nThe twenty-second argument is the number of times the code\
    \ will be executed. \nThe twenty-third argument is the time unit in which the\
    \ code will be executed. \nThe twenty-fourth argument is the number of times the\
    \ code will be executed. \nThe twenty-fifth argument is the time unit in which\
    \ the code will be executed. \nThe twenty-sixth argument is the number of times\
    \ the code will be executed. \nThe twenty-seventh argument is the time unit in\
    \ which the code will be executed. \nThe twenty-eighth argument is the number\
    \ of times the code will be executed. \nThe twenty-ninth argument is the time\
    \ unit in which the code will be executed. \nThe thirty-first argument is the\
    \ time unit in which the code will be executed. \nThe thirty-second argument is\
    \ the number of times the code will be executed. \nThe thirty-third \nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj77j5urr.jl:5\nin expression starting at /tmp/tmpj77j5urr.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mjlgfge.jl:9\nin expression starting at /tmp/tmp0mjlgfge.jl:9\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a code block\
    \ and time how long it takes to run. Julia will then print the time it took to\
    \ run the code block.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7xw__1e0.jl:5\nin expression starting at /tmp/tmp7xw__1e0.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number recursively.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj7pc43vb.jl:5\nin expression starting at /tmp/tmpj7pc43vb.jl:5\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a recursive function fib_rec that computes the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9mqmi29.jl:9\nin expression starting at /tmp/tmpv9mqmi29.jl:9\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nJulia is lazy, so it will not compute Fibonacci\
    \ numbers for numbers below a certain threshold, like 10 or 20. Instead, it will\
    \ store the results in a cache and return the cached result whenever it needs\
    \ to. Let's see how it works:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dcu_wjb.jl:9\nin expression starting at /tmp/tmp9dcu_wjb.jl:9\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that returns the n-th\
    \ Fibonacci number modulo 1000000007 (i.e. the remainder after dividing by 1000000007).\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwepeivu.jl:6\nin expression starting at /tmp/tmplwepeivu.jl:6\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdanhr9i7.jl:5\nin expression starting at /tmp/tmpdanhr9i7.jl:5\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a block of\
    \ code a number of times and then report the time it took to run that block of\
    \ code. Julia will automatically compile the code into a native machine instruction\
    \ set (CPU) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (ISA) instruction set (ISA) instruction set (ISA) instruction\
    \ set (ISA) instruction set (ISA) instruction set (ISA) instruction set (ISA)\
    \ instruction set (IS\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fj84ksd.jl:9\nin expression starting at /tmp/tmp_fj84ksd.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2\n        1\n    else\n        fib(n-1) +\
    \ fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nThe @time macro will time the execution of the code in the cell\
    \ and output the elapsed time. In the example above the elapsed time is approximately\
    \ 0.04 seconds. If you run this cell multiple times you will get different results.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz92p90an.jl:10\nin expression starting at\
    \ /tmp/tmpz92p90an.jl:10\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(2)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(1)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(-1)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(-2)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(-3)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(-4)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(-5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(-6)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(-7)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(-8)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(100)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(1000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(10000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype fib(100000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype fib(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(100000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype fib(1000000000000000)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8nc1m2qg.jl:5\nin expression starting at /tmp/tmp8nc1m2qg.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n \n        else return\
    \ fib(n-2) + fib(n-1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphamdr7hv.jl:5\nin expression starting at /tmp/tmphamdr7hv.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qzxre79.jl:6\nin expression starting at /tmp/tmp_qzxre79.jl:6\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmiwd1t2.jl:5\nin expression starting at /tmp/tmpxmiwd1t2.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will measure the time it takes\
    \ to run the function and report the elapsed time as a floating point number.\
    \ Here we see that fib(10) takes about 0.1 seconds to run.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmporheug5t.jl:5\nin expression starting at /tmp/tmporheug5t.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)::Int64\
    \ which returns the nth Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpyovu2d.jl:9\nin expression starting at /tmp/tmphpyovu2d.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe function fib is recursive, which means it\
    \ calls itself over and over again, until it hits the maximum recursion depth\
    \ (the maximum amount of nested function calls). Julia has a special syntax for\
    \ recursive functions, which looks like this:\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdneczdk.jl:9\nin expression starting at /tmp/tmprdneczdk.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n \n        else return\
    \ fib(n-1) + fib(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number recursively.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkjek7mh0.jl:5\nin expression starting at /tmp/tmpkjek7mh0.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2) \nend \n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the n-th Fibonacci number using\
    \ memoization.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjn1lcw6z.jl:5\nin expression starting at /tmp/tmpjn1lcw6z.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n \n    else\
    \ \n        return fib(n-1) + fib(n-2) \nend \n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number recursively.\nHint: Use a base case to stop\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhcnz5cq.jl:9\nin expression starting at /tmp/tmplhcnz5cq.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe @time\
    \ macro will tell us how long it took to run our code. Let's see what happens\
    \ if we run it a million times:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkqrjvm9w.jl:5\nin expression starting at /tmp/tmpkqrjvm9w.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the function and\
    \ return the elapsed time. Let's compare the elapsed time with the naive implementation:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpszu13_kz.jl:5\nin expression starting at /tmp/tmpszu13_kz.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2\n        1\n    else\n        fib(n-1) +\
    \ fib(n-2)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7v_y1k7.jl:1\nin expression starting at /tmp/tmpp7v_y1k7.jl:1\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 1\nWrite a Julia function that computes\
    \ the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ybxluj9.jl:6\nin expression starting at /tmp/tmp9ybxluj9.jl:6\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ which returns the nth Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymolfxll.jl:9\nin expression starting at /tmp/tmpymolfxll.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lg_lwap.jl:9\nin expression starting at /tmp/tmp_lg_lwap.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the function\
    \ and to print out the time it took to execute.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4vohl3r.jl:9\nin expression starting at /tmp/tmpn4vohl3r.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ which returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxzs8yq9m.jl:5\nin expression starting at /tmp/tmpxzs8yq9m.jl:5\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a block of\
    \ code a certain number of times and then print the average time it took to run.\
    \ Here we ran the code 10 times and printed the average time it took to run:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vcssky8.jl:9\nin expression starting at /tmp/tmp7vcssky8.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio26df_x.jl:9\nin expression starting at /tmp/tmpio26df_x.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n-1) + fib(n-2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7ask9r8.jl:6\nin expression starting at /tmp/tmpy7ask9r8.jl:6\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us the time it took\
    \ to run the function fib(10)\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphw8gn45y.jl:5\nin expression starting at /tmp/tmphw8gn45y.jl:5\n"
  stdout: ''
  timestamp: 1659747087
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0j1404g8.jl:9\nin expression starting at /tmp/tmp0j1404g8.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the function\
    \ and to print the execution time (in seconds) at the end of the cell. Julia will\
    \ print the execution time even if the function does not return anything.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zkf7345.jl:9\nin expression starting at /tmp/tmp4zkf7345.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(0)\n</cell>\n<code language=julia-1.5>\n@code_native fib(1)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(20)\n</cell>\n<code language=julia-1.5>\n@code_native fib(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(40)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(50)\n</cell>\n<code language=julia-1.5>\n@code_native fib(60)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(70)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(80)\n</cell>\n<code language=julia-1.5>\n@code_native fib(90)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(100)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(200)\n</cell>\n<code language=julia-1.5>\n@code_native fib(300)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(400)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(500)\n</cell>\n<code language=julia-1.5>\n@code_native fib(600)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(700)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(800)\n</cell>\n<code language=julia-1.5>\n@code_native fib(900)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(1000)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(2000)\n</cell>\n<code language=julia-1.5>\n@code_native fib(3000)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(4000)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(5000)\n</cell>\n<code language=julia-1.5>\n@code_native fib(6000)\n\
    </cell>\n<code language=julia-1.5>\n@code_native fib(7000)\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(8000)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5syb9pf.jl:9\nin expression starting at /tmp/tmpa5syb9pf.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run the function and how long it took to compile the function.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqe0gutkn.jl:5\nin expression starting at /tmp/tmpqe0gutkn.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be non-negative\")\n    else if n == 0 \n        0\n    else if n == 1 \n  \
    \      1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2ppchzy.jl:6\nin expression starting at /tmp/tmph2ppchzy.jl:6\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10000);\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpossgy6gk.jl:9\nin expression starting at /tmp/tmpossgy6gk.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe @time\
    \ macro will time the execution of your code. \nThe @time macro will time the\
    \ execution of your code. \nThe @time macro will time the execution of your code.\
    \ \nThe @time macro will time the execution of your code. \nThe @time macro will\
    \ time the execution of your code. \nThe @time macro will time the execution of\
    \ your code. \nThe @time macro will time the execution of your code. \nThe @time\
    \ macro will time the execution of your code. \nThe @time macro will time the\
    \ execution of your code. \nThe @time macro will time the execution of your code.\
    \ \nThe @time macro will time the execution of your code. \nThe @time macro will\
    \ time the execution of your code. \nThe @time macro will time the execution of\
    \ your code. \nThe @time macro will time the execution of your code. \nThe @time\
    \ macro will time the execution of your code. \nThe @time macro will time the\
    \ execution of your code. \nThe @time macro will time the execution of your code.\
    \ \nThe @time macro will time the execution of your code. \nThe @time macro will\
    \ time the execution of your code. \nThe @time macro will time the execution of\
    \ your code. \nThe @time macro will time the execution of your code. \nThe @time\
    \ macro will time the execution of your code. \nThe @time macro will time the\
    \ execution of your code. \nThe @time macro will time the execution of your code.\
    \ \nThe @time macro will time the execution of your code. \nThe @time macro will\
    \ time the execution of your code. \nThe @time macro will time the execution of\
    \ your code. \nThe @time macro will time the execution of your code. \nThe @time\
    \ macro will time the execution of your code. \nThe @time macro will time the\
    \ execution of your code. \nThe @time macro will time the execution of your code.\
    \ \nThe @time macro will time the execution of your code. \nThe @time macro will\
    \ time the execution of your code. \nThe @time macro will time the execution of\
    \ your code. \nThe @time macro will time the execution of your code. \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprx2nqdl8.jl:5\nin expression starting at /tmp/tmprx2nqdl8.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    The @time macro tells Julia to execute the function and time how long it takes\
    \ to run. Here we see that fib(100) takes about 10 seconds to run. Julia is smart\
    \ enough to know that fib(100) does not depend on any external variables and will\
    \ compile it into machine code directly. On the other hand, fib(10) takes about\
    \ 0.1 seconds to run. Julia is smart enough to know that fib(10) does not depend\
    \ on any external variables and will compile it into machine code directly.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcmq7eoie.jl:5\nin expression starting at /tmp/tmpcmq7eoie.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(10)\n</cell>\n<text>\nThe @code_warntype macro will warn you\
    \ about unused variables and functions. It is often a good idea to remove unused\
    \ variables and functions before submitting your code. Julia will warn you about\
    \ unused variables and functions if you use the @code_warntype macro.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpffxqyrsp.jl:5\nin expression starting at /tmp/tmpffxqyrsp.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run our code. Let's see how long it took to run our fib function with n=10:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpna5vshv0.jl:5\nin expression starting at /tmp/tmpna5vshv0.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2) \nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nThe function above is recursive. Julia has a special syntax for recursive\
    \ functions:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxgn_yn2.jl:5\nin expression starting at /tmp/tmpwxgn_yn2.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to compile the function\
    \ and to run it 10 times. Each time Julia will compile the function and run it\
    \ 10 times. So the @time macro tells Julia to compile the function and to run\
    \ it 10 times. Each time Julia will compile the function and run it 10 times.\
    \ So the @time macro tells Julia to compile the function and to run it 10 times.\
    \ Each time Julia will compile the function and run it 10 times. So the @time\
    \ macro tells Julia to compile the function and to run it 10 times. Each time\
    \ Julia will compile the function and run it 10 times. So the @time macro tells\
    \ Julia to compile the function and to run it 10 times. Each time Julia will compile\
    \ the function and run it 10 times. So the @time macro tells Julia to compile\
    \ the function and to run it 10 times. Each time Julia will compile the function\
    \ and run it 10 times. So the @time macro tells Julia to compile the function\
    \ and to run it 10 times. Each time Julia will compile the function and run it\
    \ 10 times. So the @time macro tells Julia to compile the function and to run\
    \ it 10 times. Each time Julia will compile the function and run it 10 times.\
    \ So the @time macro tells Julia to compile the function and to run it 10 times.\
    \ Each time Julia will compile the function and run it 10 times. So the @time\
    \ macro tells Julia to compile the function and to run it 10 times. Each time\
    \ Julia will compile the function and run it 10 times. So the @time macro tells\
    \ Julia to compile the function and to run it 10 times. Each time Julia will compile\
    \ the function and run it 10 times. So the @time macro tells Julia to compile\
    \ the function and to run it 10 times. Each time Julia will compile the function\
    \ and run it 10 times. So the @time macro tells Julia to compile the function\
    \ and to run it 10 times. Each time Julia will compile the function and run it\
    \ 10 times. So the @time macro tells Julia to compile the function and to run\
    \ it 10 times. Each time Juli\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp65gyn6e5.jl:5\nin expression starting at /tmp/tmp65gyn6e5.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype fib(10)\n</cell>\n<code language=julia-1.3>\n@code_warntype fib(100)\n\
    </cell>\n<text>\nThe @code_warntype macro will warn you about any type mismatch\
    \ that occurs. This is useful if you know that your function will return a type\
    \ that Julia does not understand.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa52jqssw.jl:5\nin expression starting at /tmp/tmpa52jqssw.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function named fibonacci that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16elwonv.jl:9\nin expression starting at /tmp/tmp16elwonv.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplh885sfa.jl:5\nin expression starting at /tmp/tmplh885sfa.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.1>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will measure the execution time of\
    \ a function or expression. Here we measure the execution time of the Fibonacci\
    \ function fib.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvrup0tbc.jl:5\nin expression starting at /tmp/tmpvrup0tbc.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the nth\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspseq1oa.jl:9\nin expression starting at /tmp/tmpspseq1oa.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(1000)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3glim4o.jl:9\nin expression starting at /tmp/tmp_3glim4o.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gt48xvz.jl:5\nin expression starting at /tmp/tmp7gt48xvz.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run the code. Let's see how long it took to run our function fib.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdsnmcqpr.jl:5\nin expression starting at /tmp/tmpdsnmcqpr.jl:5\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zphm195.jl:6\nin expression starting at /tmp/tmp8zphm195.jl:6\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function fib_rec that\
    \ computes the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3bo8jue.jl:9\nin expression starting at /tmp/tmpv3bo8jue.jl:9\n"
  stdout: ''
  timestamp: 1659747088
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe function fib is recursive, i.e. it calls itself\
    \ to compute the next Fibonacci number. Julia has special syntax for recursive\
    \ functions, which are denoted by a keyword (@).\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoe_7ktq4.jl:9\nin expression starting at /tmp/tmpoe_7ktq4.jl:9\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run a block of code a number\
    \ of times and then report the time it took to run that block of code. Here we\
    \ ran the code 10 times and then printed the average time it took to run that\
    \ block of code.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7qajkdh.jl:9\nin expression starting at /tmp/tmpe7qajkdh.jl:9\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function named fibonacci that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo82khg_3.jl:9\nin expression starting at /tmp/tmpo82khg_3.jl:9\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvmh2a6z.jl:9\nin expression starting at /tmp/tmpbvmh2a6z.jl:9\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the code\
    \ in the cell and time how long it takes to execute. Julia will print the elapsed\
    \ time at the end. Here we see that fib(10) takes about 2.5 seconds to execute.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuwmxvwk5.jl:5\nin expression starting at /tmp/tmpuwmxvwk5.jl:5\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=julia-1.0>\n@code_native fib\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<code language=julia-1.0>\n@code_native fib\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb33rb58n.jl:5\nin expression starting at /tmp/tmpb33rb58n.jl:5\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first n Fibonacci numbers. \nHint: Use a recursive function.\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzz23w7hf.jl:5\nin expression starting at /tmp/tmpzz23w7hf.jl:5\n"
  stdout: ''
  timestamp: 1659747090
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<text>\n\
    The function fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64)\
    \ returns a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type\
    \ number. \nThe function fib(n::Int64) returns a Int64 type number. \nThe function\
    \ fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64) returns\
    \ a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type number.\
    \ \nThe function fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64)\
    \ returns a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type\
    \ number. \nThe function fib(n::Int64) returns a Int64 type number. \nThe function\
    \ fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64) returns\
    \ a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type number.\
    \ \nThe function fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64)\
    \ returns a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type\
    \ number. \nThe function fib(n::Int64) returns a Int64 type number. \nThe function\
    \ fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64) returns\
    \ a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type number.\
    \ \nThe function fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64)\
    \ returns a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type\
    \ number. \nThe function fib(n::Int64) returns a Int64 type number. \nThe function\
    \ fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64) returns\
    \ a Int64 type number. \nThe function fib(n::Int64) returns a Int64 type number.\
    \ \nThe function fib(n::Int64) returns a Int64 type number. \nThe function fib(n::Int64)\
    \ returns a Int64 type number. \nThe function fib\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpck8_3jhl.jl:5\nin expression starting at /tmp/tmpck8_3jhl.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppu34ayed.jl:9\nin expression starting at /tmp/tmppu34ayed.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 then return 0\n    if n == 1 then return\
    \ 1\n    return fib(n - 1) + fib(n - 2)\nend\n\"\"\"\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(10)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(100)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(10000)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ fib(100000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(10000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(100000000)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(1000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ fib(10000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(100000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype fib(10000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(100000000000000)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(1000000000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ fib(10000000000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000000000000000000)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpguwmz0lz.jl:4\nin expression starting at /tmp/tmpguwmz0lz.jl:4\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(100)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(1000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(1000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(1000000000000000000000000000)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpigfv7kfw.jl:5\nin expression starting at /tmp/tmpigfv7kfw.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp26jymy42.jl:5\nin expression starting at /tmp/tmp26jymy42.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2\n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a recursive function named fibonacci_rec(n) that returns the\
    \ nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpab3ptpy6.jl:5\nin expression starting at /tmp/tmpab3ptpy6.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ returns the nth Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gp26qd7.jl:9\nin expression starting at /tmp/tmp4gp26qd7.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function\
    \ and time how long it takes to run. Julia will print the time it took to run\
    \ the function and will also print a summary of the function run. Julia will also\
    \ print the time it took to run the function and will also print a summary of\
    \ the function run. Julia will print the time it took to run the function and\
    \ will also print a summary of the function run.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gpt7i_3.jl:5\nin expression starting at /tmp/tmp7gpt7i_3.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphl_94uem.jl:9\nin expression starting at /tmp/tmphl_94uem.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpah6motbu.jl:5\nin expression starting at /tmp/tmpah6motbu.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(100)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(1000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(10000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(100000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(1000000)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(10000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ fib(100000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(10000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype fib(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(1000000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ fib(10000000000000)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(1000000000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype fib(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype fib(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype fib(1000000000000000000000000)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsym5dtdt.jl:5\nin expression starting at /tmp/tmpsym5dtdt.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a block of\
    \ code several times and to print out the total time it took to run. Here we see\
    \ that Julia spends most of its time in the fib function, which makes sense since\
    \ it does a lot of work to compute Fibonacci numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i3pm37n.jl:9\nin expression starting at /tmp/tmp1i3pm37n.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq5xjqrf7.jl:5\nin expression starting at /tmp/tmpq5xjqrf7.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_r(n::Int64) which returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikmlul65.jl:9\nin expression starting at /tmp/tmpikmlul65.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(1000)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes the n-th Fibonacci number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b22k9e0.jl:9\nin expression starting at /tmp/tmp8b22k9e0.jl:9\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n - 1) + fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n\
    <text>\nThe function fib is recursive, which means that it calls itself over and\
    \ over again. Julia will try to optimize this by memoizing the results. To do\
    \ this, we use the @code_warntype macro, which will warn us if we are doing something\
    \ wrong.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzfp_tr22.jl:5\nin expression starting at /tmp/tmpzfp_tr22.jl:5\n"
  stdout: ''
  timestamp: 1659747091
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\n\
    \        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(100)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(1000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(1000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(1000000000000000000000000000)\n</cell>\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckyl7pan.jl:9\nin expression starting at /tmp/tmpckyl7pan.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n \n    else\
    \ \n        return fib(n-1) + fib(n-2) \nend \n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea0_tj53.jl:9\nin expression starting at /tmp/tmpea0_tj53.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        fib(n-1) + fib(n-2)\nend\n\"\
    \"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(0)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype fib(1)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(2)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(3)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(4)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(6)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(8)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(9)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(11)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(12)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(14)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(16)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(17)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(18)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(19)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(20)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(21)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(22)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(23)\n</cell>\n<code language=julia-1.5>\n@code_warntype fib(24)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype fib(25)\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3x20y52.jl:5\nin expression starting at /tmp/tmpy3x20y52.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsk58j8p2.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk58j8p2.jl:1\n\
    in expression starting at /tmp/tmpsk58j8p2.jl:1\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a piece of code\
    \ a number of times and then report the total time taken.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2uo2alvg.jl:5\nin expression starting at /tmp/tmp2uo2alvg.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run a block of code a number\
    \ of times and report the average execution time.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzfw47q3f.jl:5\nin expression starting at /tmp/tmpzfw47q3f.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n - 1) + fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    The @time macro will execute the function and time how long it takes to run. Let's\
    \ time the function again:\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6wof2in6.jl:5\nin expression starting at /tmp/tmp6wof2in6.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(100)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp856vidap.jl:5\nin expression starting at /tmp/tmp856vidap.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8st8w0kj.jl:5\nin expression starting at /tmp/tmp8st8w0kj.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will execute the code in the cell\
    \ and return the elapsed time. In the cell below we see how it works.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxfvqu4j.jl:5\nin expression starting at /tmp/tmpmxfvqu4j.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t5eb50z.jl:9\nin expression starting at /tmp/tmp5t5eb50z.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to compile the function\
    \ and to run it 10 times. Each time the function is called, Julia will compile\
    \ the function and run it 10 times. To see how long it takes to run a function,\
    \ we can use the @time macro.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzu3s3sj0.jl:9\nin expression starting at /tmp/tmpzu3s3sj0.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function\
    \ and time how long it takes to run. Julia will then print the time it took to\
    \ run the function to the screen. Julia will then run the function and time how\
    \ long it takes to run. Julia will then print the time it took to run the function\
    \ to the screen. Julia will then run the function and time how long it takes to\
    \ run. Julia will then print the time it took to run the function to the screen.\
    \ Julia will then run the function and time how long it takes to run. Julia will\
    \ then print the time it took to run the function to the screen. Julia will then\
    \ run the function and time how long it takes to run. Julia will then print the\
    \ time it took to run the function to the screen. Julia will then run the function\
    \ and time how long it takes to run. Julia will then print the time it took to\
    \ run the function to the screen. Julia will then run the function and time how\
    \ long it takes to run. Julia will then print the time it took to run the function\
    \ to the screen. Julia will then run the function and time how long it takes to\
    \ run. Julia will then print the time it took to run the function to the screen.\
    \ Julia will then run the function and time how long it takes to run. Julia will\
    \ then print the time it took to run the function to the screen. Julia will then\
    \ run the function and time how long it takes to run. Julia will then print the\
    \ time it took to run the function to the screen. Julia will then run the function\
    \ and time how long it takes to run. Julia will then print the time it took to\
    \ run the function to the screen. Julia will then run the function and time how\
    \ long it takes to run. Julia will then print the time it took to run the function\
    \ to the screen. Julia will then run the function and time how long it takes to\
    \ run. Julia will then print the time it took to run the function to the screen.\
    \ Julia will then run the function and time how long it takes to run. Julia will\
    \ then print the time it took to run the function to the screen. Julia will then\
    \ run the function and time how long it takes to run. Julia will then print the\
    \ time it took to run the function to the screen. Julia will then run the function\
    \ and time how long it \nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ythrstp.jl:9\nin expression starting at /tmp/tmp3ythrstp.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurbgsvwx.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurbgsvwx.jl:1\n\
    in expression starting at /tmp/tmpurbgsvwx.jl:1\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will measure the execution time\
    \ of a block of code. Here we measure the execution time of the fib function.\
    \ We can see that it is about 4 times faster than the naive implementation. Let's\
    \ see how it performs on a larger input:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpofyxk0em.jl:5\nin expression starting at /tmp/tmpofyxk0em.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib\n</cell>\n<text>\nThe @code_native macro will generate native\
    \ code for the function fib. Let's see what it looks like:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvikz9wk6.jl:5\nin expression starting at /tmp/tmpvikz9wk6.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the function and\
    \ time the execution time (in seconds).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxaqnf5lo.jl:5\nin expression starting at /tmp/tmpxaqnf5lo.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxcroje_d.jl:5\nin expression starting at /tmp/tmpxcroje_d.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurbgsvwx.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurbgsvwx.jl:1\n\
    in expression starting at /tmp/tmpurbgsvwx.jl:1\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvk09lt6_.jl:5\nin expression starting at /tmp/tmpvk09lt6_.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=julia-1.5>\n@code_native fib\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<code language=julia-1.5>\n@code_native fib\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp558flh_n.jl:5\nin expression starting at /tmp/tmp558flh_n.jl:5\n"
  stdout: ''
  timestamp: 1659747094
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that returns the n-th Fibonacci\
    \ number in Julia\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp068kp2a0.jl:5\nin expression starting at /tmp/tmp068kp2a0.jl:5\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxdek1y4.jl:5\nin expression starting at /tmp/tmpqxdek1y4.jl:5\n"
  stdout: ''
  timestamp: 1659747094
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise\nWrite a recursive function fib_rec that computes the nth Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1plydvm.jl:9\nin expression starting at /tmp/tmpc1plydvm.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run our code. Let's see how long it took to run our fib function with n =\
    \ 10\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uf1ln8i.jl:9\nin expression starting at /tmp/tmp4uf1ln8i.jl:9\n"
  stdout: ''
  timestamp: 1659747093
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2\n        1\n    else\n        fib(n-1) +\
    \ fib(n-2)\nend\n\"\"\"\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(2)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(3)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(4)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(5)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(6)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(7)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(8)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(9)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(10)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(11)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(12)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(13)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(14)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(15)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(16)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(17)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(18)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(19)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(20)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(21)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(22)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(23)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(24)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(25)\n</cell>\n<code language=julia-1.0>\n@code_warntype fib(26)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype fib(27)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(28)\n\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu486mnwj.jl:1\nin expression starting at /tmp/tmpu486mnwj.jl:1\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run a block of code a number\
    \ of times and report the average execution time. Here we run it 10 times and\
    \ report the average execution time.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0v4vpa1.jl:9\nin expression starting at /tmp/tmpn0v4vpa1.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function fib_rec(n::Int64)\
    \ which returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15bu2mw9.jl:6\nin expression starting at /tmp/tmp15bu2mw9.jl:6\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2) \nend \n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a function that computes the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp51gtmvig.jl:5\nin expression starting at /tmp/tmp51gtmvig.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the code in the cell\
    \ and time how long it takes to run. In the above example, the code takes about\
    \ 0.3 seconds to run. Let's see how long it takes to run a larger number:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbv43y_wf.jl:5\nin expression starting at /tmp/tmpbv43y_wf.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgbmdd5ph.jl:5\nin expression starting at /tmp/tmpgbmdd5ph.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100)\n</cell>\n<code language=julia-1.3>\n@time fib(1000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(100000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4pnhcuaz.jl:5\nin expression starting at /tmp/tmp4pnhcuaz.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ which returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3j69x6yx.jl:5\nin expression starting at /tmp/tmp3j69x6yx.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n \n    else\
    \ \n        return fib(n - 1) + fib(n - 2) \nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will time the execution of a function\
    \ and will print the elapsed time. Here we see that the function takes about 1.5\
    \ seconds to compute $10$ Fibonacci numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowo40rt_.jl:9\nin expression starting at /tmp/tmpowo40rt_.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqaxvz3rt.jl:5\nin expression starting at /tmp/tmpqaxvz3rt.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n \n    else\
    \ \n        return fib(n-1) + fib(n-2) \nend \n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6kqp9i5.jl:9\nin expression starting at /tmp/tmpm6kqp9i5.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n    else if n\
    \ == 1 \n        then return 1 \n    else \n        fib(n-1) + fib(n-2) \nend\
    \ \n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(100)\n</cell>\n<code language=julia-1.0>\n@time fib(1000)\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10000)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(100000)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000)\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(100000000)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(100000000000)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(1000000000001)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(1000000000002)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000003)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(1000000000004)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(1000000000005)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000006)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(1000000000007)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(1000000000008)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000009)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(1000000000010)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(1000000000011)\n</cell>\n<code language=julia-1.0>\n@time fib(1000000000012)\n\
    </cell>\n<code language=julia-1.0>\n@time fib(1000000000013)\n</cell>\n<code language=julia-1.0>\n\
    @time fib(1000000000014)\n</cell>\n<code language=julia-1.0>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_nu9xus9.jl:5\nin expression starting at /tmp/tmp_nu9xus9.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n - 1) + fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the n-th Fibonacci number.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3zdvaeg.jl:5\nin expression starting at /tmp/tmpg3zdvaeg.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 then return 0\n    if n == 1 then return\
    \ 1\n    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)::Int64\
    \ which returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd6afa26v.jl:4\nin expression starting at /tmp/tmpd6afa26v.jl:4\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will measure the time it takes\
    \ to run a piece of code. Here we measure the time it takes to run fib(10).\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw5ortfir.jl:5\nin expression starting at /tmp/tmpw5ortfir.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxd2_wnj.jl:9\nin expression starting at /tmp/tmpzxd2_wnj.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslkm4ww5.jl:9\nin expression starting at /tmp/tmpslkm4ww5.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run a block of code a number\
    \ of times and then print the elapsed time. Here we ran the code 10 times and\
    \ printed the elapsed time.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_b3885lk.jl:5\nin expression starting at /tmp/tmp_b3885lk.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will execute the code in the cell\
    \ and return the elapsed time (in seconds) for the cell to execute.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6p8yh2a.jl:5\nin expression starting at /tmp/tmpb6p8yh2a.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function\
    \ and time how long it takes to run. Here we see that Julia is able to run this\
    \ function in about 2 milliseconds.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxfj0iqf7.jl:5\nin expression starting at /tmp/tmpxfj0iqf7.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpet1dkwcd.jl:5\nin expression starting at /tmp/tmpet1dkwcd.jl:5\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurbgsvwx.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurbgsvwx.jl:1\n\
    in expression starting at /tmp/tmpurbgsvwx.jl:1\n"
  stdout: ''
  timestamp: 1659747083
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Julia compiler can optimize this recursive\
    \ function by memoizing the result. Let's see how it works:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys0dlwc6.jl:9\nin expression starting at /tmp/tmpys0dlwc6.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will run your function and time\
    \ how long it takes to run. Let's time the fib function above with n = 10. We'll\
    \ use the @time macro to time the execution of fib function and to see how long\
    \ it takes to run. We'll use the @elapsed macro to measure the time taken to run\
    \ the fib function and to see how long it took to run.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyvkqwkf.jl:9\nin expression starting at /tmp/tmpeyvkqwkf.jl:9\n"
  stdout: ''
  timestamp: 1659747096
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n \n        else return\
    \ fib(n - 1) + fib(n - 2) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype fib(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6uuj4ma_.jl:5\nin expression starting at /tmp/tmp6uuj4ma_.jl:5\n"
  stdout: ''
  timestamp: 1659747098
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run the code. On my laptop it took about 0.2 seconds to run this code.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfz2bvcum.jl:9\nin expression starting at /tmp/tmpfz2bvcum.jl:9\n"
  stdout: ''
  timestamp: 1659747098
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the code in the cell\
    \ and return the time taken in seconds. If the cell is executed multiple times\
    \ then multiple times the time taken will be returned.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o1eig2x.jl:9\nin expression starting at /tmp/tmp_o1eig2x.jl:9\n"
  stdout: ''
  timestamp: 1659747098
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpflf8v8uk.jl:5\nin expression starting at /tmp/tmpflf8v8uk.jl:5\n"
  stdout: ''
  timestamp: 1659747098
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the function and\
    \ print the elapsed time. Julia will print the elapsed time in the following format:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9sag3mu0.jl:5\nin expression starting at /tmp/tmp9sag3mu0.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs3swlaw.jl:9\nin expression starting at /tmp/tmpcs3swlaw.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        0\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(10)\n</cell>\n<text>\nThe @code_native macro will automatically\
    \ generate native code for the function fib. Let's try it out on a few examples:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbz3au05.jl:6\nin expression starting at /tmp/tmpbbz3au05.jl:6\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a recursive function fib_rec(n::Int64)::Int64 that returns the n-th Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf306s_wz.jl:5\nin expression starting at /tmp/tmpf306s_wz.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then 1\n        else fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that computes the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpizmn_5as.jl:5\nin expression starting at /tmp/tmpizmn_5as.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmput7gzugq.jl:9\nin expression starting at /tmp/tmput7gzugq.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took\
    \ to run our code. Let's see what happens if we run it a million times:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa5d5ufx_.jl:5\nin expression starting at /tmp/tmpa5d5ufx_.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 then return 0\n    if n == 1 then return\
    \ 1\n    return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the function and\
    \ print out the time it took to run. Let's see how long it took to run this function:\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp10vv8h9q.jl:4\nin expression starting at /tmp/tmp10vv8h9q.jl:4\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the n-th Fibonacci number using memoization.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio26df_x.jl:9\nin expression starting at /tmp/tmpio26df_x.jl:9\n"
  stdout: ''
  timestamp: 1659747085
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(10)\n</cell>\n<text>\nJulia is smart enough to optimize this\
    \ recursive function and turn it into a loop:\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphhibvmch.jl:5\nin expression starting at /tmp/tmphhibvmch.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64)::Int64 that returns the\
    \ n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpblqoes98.jl:5\nin expression starting at /tmp/tmpblqoes98.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a piece of\
    \ code for a certain number of iterations and then report the elapsed time. Julia\
    \ will then compile the code into a native machine instruction set and run it\
    \ on the CPU.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmput0ld_jz.jl:5\nin expression starting at /tmp/tmput0ld_jz.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will give you the execution time\
    \ of your code snippet.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg752tav7.jl:5\nin expression starting at /tmp/tmpg752tav7.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a piece of\
    \ code a certain number of times and then report the total time taken.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8hd2t4qq.jl:5\nin expression starting at /tmp/tmp8hd2t4qq.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib\n</cell>\n<text>\nJulia is smart enough to realize that fib(n-1)\
    \ + fib(n-2) is the same function as fib(n), so it doesn't need to compute it\
    \ twice. Julia also knows that fib(n) can be computed using fib(n-1) + fib(n-2),\
    \ so it doesn't need to compute it at all.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps4irltka.jl:5\nin expression starting at /tmp/tmps4irltka.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t\
    @test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) ==\
    \ 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprx7te2e2.jl:1\nin expression starting at /tmp/tmprx7te2e2.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n <= 1 \n        then n \n        else fib(n-1)\
    \ + fib(n-2) \nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nThe @time macro will execute the function and return the elapsed time\
    \ (in seconds) for the function call.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe_il_xla.jl:5\nin expression starting at /tmp/tmpe_il_xla.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(100);\n</cell>\n<text>\nExercise 2\nWrite a recursive function named\
    \ fib_r(n::Int64) that returns the n-th Fibonacci number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5scojsr.jl:9\nin expression starting at /tmp/tmpv5scojsr.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run a code block a\
    \ number of times and then print the time it took to run that code block. Here\
    \ we see that Julia is able to compute the Fibonacci number in less than a second\
    \ (about 2.5 seconds).\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc0qzxp0l.jl:5\nin expression starting at /tmp/tmpc0qzxp0l.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(2)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype fib(1)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(3)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(4)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(5)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(6)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(7)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(8)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(9)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(10)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(11)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(12)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(13)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(14)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(15)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(16)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(17)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(18)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(19)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(20)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(21)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(22)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(23)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype fib(24)\n</cell>\n<code language=julia-1.4>\n@code_warntype fib(25)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype fib(26)\n</cell>\n<code language=julia-1.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1pq_shw_.jl:5\nin expression starting at /tmp/tmp1pq_shw_.jl:5\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th Fibonacci\
    \ number in Julia.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dckyj69.jl:5\nin expression starting at /tmp/tmp6dckyj69.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took to run\
    \ the code. Let's see what happens if we run it a million times:\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1kduchcs.jl:5\nin expression starting at /tmp/tmp1kduchcs.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to compile the function\
    \ and to run it a number of times and to report the execution time for each execution.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_dm6ln2.jl:9\nin expression starting at /tmp/tmpp_dm6ln2.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        return 0 \n    else if n == 1 \n\
    \        return 1 \n    else \n        return fib(n-1) + fib(n-2) \nend \n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec that computes Fibonacci numbers using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy4ru_jo.jl:6\nin expression starting at /tmp/tmpsy4ru_jo.jl:6\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n - 1) + fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100)\n</cell>\n<code language=julia-1.3>\n@time fib(1000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(100000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n@time fib(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpznkauilf.jl:5\nin expression starting at /tmp/tmpznkauilf.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(100)\n</cell>\n<text>\nExercise 2\nWrite a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4os_z8f.jl:5\nin expression starting at /tmp/tmpc4os_z8f.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else \n        fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_r(n::Int64)::Int64 that returns\
    \ the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4k4c8dn.jl:6\nin expression starting at /tmp/tmpq4k4c8dn.jl:6\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"Fibonacci number must\
    \ be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n      \
    \  1\n    else \n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the function and\
    \ time how long it takes to run. Let's time the function again:\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rwohtuo.jl:6\nin expression starting at /tmp/tmp2rwohtuo.jl:6\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10000)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_rec that computes the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnfzfrg3e.jl:5\nin expression starting at /tmp/tmpnfzfrg3e.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\")\n\
    \    else if n == 0 \n        return 0 \n    else if n == 1 \n        return 1\
    \ \n    else \n        return fib(n-1) + fib(n-2) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64) that returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdft58b57.jl:6\nin expression starting at /tmp/tmpdft58b57.jl:6\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will tell us how long it took to run\
    \ the code. Let's see what happens if we run it a million times:\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyte28ag.jl:5\nin expression starting at /tmp/tmpiyte28ag.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \     else return fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmputotunb7.jl:5\nin expression starting at /tmp/tmputotunb7.jl:5\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(100);\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80q22y3n.jl:9\nin expression starting at /tmp/tmp80q22y3n.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpmn2zcz.jl:9\nin expression starting at /tmp/tmpcpmn2zcz.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using a recursive function and memoization.\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsxm0nze.jl:9\nin expression starting at /tmp/tmpvsxm0nze.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec(n::Int64) which returns the n-th\
    \ Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp13wrtwpr.jl:5\nin expression starting at /tmp/tmp13wrtwpr.jl:5\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(1000)\n</cell>\n<text>\nThe @time macro tells Julia to execute the code\
    \ in the cell and time how long it takes to execute. Julia will print the elapsed\
    \ time at the end. Here we see that Julia executes the code in the cell and prints\
    \ the elapsed time at the end.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\
    \t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyng1u_c_.jl:9\nin expression starting at /tmp/tmpyng1u_c_.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the nth Fibonacci number using recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) ==\
    \ 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7aedulqa.jl:5\nin expression starting at /tmp/tmp7aedulqa.jl:5\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)\
    \ that returns the nth Fibonacci number recursively.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1vyo677.jl:9\nin expression starting at /tmp/tmpv1vyo677.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2\n        1\n    else\n        fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nThe @time macro tells Julia to run a block of code several times and then\
    \ report the time it took to run that block of code. Julia will run that block\
    \ of code several times and then report the time it took to run that block of\
    \ code. Julia will run that block of code several times and then report the time\
    \ it took to run that block of code.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpin3ld3ns.jl:9\nin expression starting at /tmp/tmpin3ld3ns.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using memoization.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9bxmzcj.jl:9\nin expression starting at /tmp/tmpu9bxmzcj.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(1000)\n</cell>\n\
    <text>\nThe @time macro will time the execution of the code block you provide.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppwikf956.jl:5\nin expression starting at /tmp/tmppwikf956.jl:5\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nJulia is lazy, so this recursive function will\
    \ never actually be called. Instead, Julia will store a reference to the function\
    \ and call it when it is needed. In the above example, the function fib is only\
    \ called once, when it is first referenced.\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q_15upy.jl:9\nin expression starting at /tmp/tmp5q_15upy.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(1000)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the n-th Fibonacci number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpydexv09x.jl:5\nin expression starting at /tmp/tmpydexv09x.jl:5\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function\
    \ and time how long it takes to run. Julia will automatically print the time it\
    \ took to run the function and also the memory it took to run the function. Note\
    \ that Julia will automatically print the time it took to run the function and\
    \ also the memory it took to run the function.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpudrn5q7l.jl:5\nin expression starting at /tmp/tmpudrn5q7l.jl:5\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native fib(10)\n</cell>\n<text>\nExercise 2\nWrite a Julia function which\
    \ returns the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv00hkejp.jl:9\nin expression starting at /tmp/tmpv00hkejp.jl:9\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ fib(10)\n</cell>\n<text>\nThe @code_warntype macro will warn you if you try\
    \ to call a function that doesn't exist.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpixkeypdq.jl:5\nin expression starting at /tmp/tmpixkeypdq.jl:5\n"
  stdout: ''
  timestamp: 1659747082
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_9hiz_a.jl:9\nin expression starting at /tmp/tmp9_9hiz_a.jl:9\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype fib(10)\n</cell>\n<text>\nThe function fib is recursive, meaning\
    \ that it will call itself over and over again until it reaches the base case\
    \ (when n is 0 or 1).\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnwq2qfx.jl:9\nin expression starting at /tmp/tmpxnwq2qfx.jl:9\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the n-th Fibonacci number recursively.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81czea3f.jl:9\nin expression starting at /tmp/tmp81czea3f.jl:9\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will execute the code in the cell\
    \ and return the time it took to execute.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_vyzpgz.jl:9\nin expression starting at /tmp/tmpt_vyzpgz.jl:9\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to execute the function\
    \ and time how long it takes to run. Let's time the function again:\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq5kukbmd.jl:5\nin expression starting at /tmp/tmpq5kukbmd.jl:5\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nJulia is lazy, so this doesn't actually compute\
    \ fib(10).\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ai5qb1c.jl:5\nin expression starting at /tmp/tmp2ai5qb1c.jl:5\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n == 0 then return 0\n    if n == 1 then return\
    \ 1\n    return fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(1000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10000)\n</cell>\n<code language=julia-1.5>\n@time fib(100000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10000000)\n</cell>\n<code language=julia-1.5>\n@time fib(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10000000000)\n</cell>\n<code language=julia-1.5>\n@time fib(100000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(100000000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(1000000000000000000000000000)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpojh0yd3g.jl:4\nin expression starting at /tmp/tmpojh0yd3g.jl:4\n"
  stdout: ''
  timestamp: 1659747103
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n                \"\"\"\nfunction\
    \ fib(n::Int64)::Int64 \n    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro tells Julia to run the function and\
    \ time how long it takes to run. Here we see that Julia spends most of its time\
    \ in the recursive function fib, which makes sense since it calls itself twice\
    \ for each value of n.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2jzjf3pl.jl:5\nin expression starting at /tmp/tmp2jzjf3pl.jl:5\n"
  stdout: ''
  timestamp: 1659747103
