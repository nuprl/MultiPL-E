language: jl
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \        16 is a perfect square\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l59rulv.jl:14\nin expression starting at\
    \ /tmp/tmp7l59rulv.jl:14\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    if prime_numbers_set[a] == true\n        \n        prime_numbers_set[a]\
    \ == false\n        \n        for b in prime_numbers_set\n            if a % b\
    \ == 0 \n                prime_numbers_set[a] == false\n            end\n    \
    \    end\n    end\n    \n    return prime_numbers_set[a] == true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzz0w21r.jl:26\nin expression starting at\
    \ /tmp/tmprzz0w21r.jl:26\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for p in prime_numbers\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz6dqx1z.jl:18\nin expression starting at\
    \ /tmp/tmpkz6dqx1z.jl:18\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfaqc1ne5.jl:14\nin expression starting at\
    \ /tmp/tmpfaqc1ne5.jl:14\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    for i in primes\n        if\
    \ a % i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngg51fgu.jl:16\nin expression starting at\
    \ /tmp/tmpngg51fgu.jl:16\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp1yc1971.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp1yc1971.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if prime == 3 || prime == 5 || prime == 7 || prime == 11\n          \
    \  return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 7\n    30 = 2 * 3 * 11\n    30\
    \ = 2 * 5 * 7\n    30 = 2 * 7 * 11\n    30 = 2 * 11 * 7\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 7 * 11\n    30 = 2 * 11 * 7\n    30 = 2 * 11 * 11\n    30 = 2 *\
    \ 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * \n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z41xu4s.jl:18\nin expression starting at\
    \ /tmp/tmp0z41xu4s.jl:18\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for p in prime_numbers\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcfa7x2i.jl:18\nin expression starting at\
    \ /tmp/tmpkcfa7x2i.jl:18\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(100)\n    \n    prime_numbers_set = Set(primes)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvz_ybuoc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvz_ybuoc.jl:1\n\
    in expression starting at /tmp/tmpvz_ybuoc.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n\
    \    \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp12oavxk7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12oavxk7.jl:1\n\
    in expression starting at /tmp/tmp12oavxk7.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(40)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \        25 is a perfect square\n        25 is not a perfect square\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlye2hwe.jl:14\nin expression starting at\
    \ /tmp/tmprlye2hwe.jl:14\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for n in prime_numbers\n  \
    \      if n % 3 == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(4000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(4500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(5000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(5500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(6000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(6500)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6h6n1jo8.jl:17\nin expression starting at\
    \ /tmp/tmp6h6n1jo8.jl:17\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for prime in primes\n        if a % prime == 0\n            return\
    \ false\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmplqzbmfhu.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplqzbmfhu.jl:1\n\
    in expression starting at /tmp/tmplqzbmfhu.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for num in prime_numbers\n\
    \        if num == a \n            return true\n        else \n            return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwkjtwyy6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkjtwyy6.jl:1\n\
    in expression starting at /tmp/tmpwkjtwyy6.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\n    \n    Example:\n        25 is a perfect square\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvm8cqtb.jl:16\nin expression starting at\
    \ /tmp/tmpqvm8cqtb.jl:16\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if\
    \ p*p > a\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpdq6jw5fq.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpdq6jw5fq.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: prime_numbers not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpdq6jw5fq.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6jw5fq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6jw5fq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdq6jw5fq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpdq6jw5fq.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6jw5fq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6jw5fq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdq6jw5fq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpdq6jw5fq.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6jw5fq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6jw5fq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdq6jw5fq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpdq6jw5fq.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  timestamp: 1659747437
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n  \
    \      if p*p > a\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03fwglcn.jl:19\nin expression starting at\
    \ /tmp/tmp03fwglcn.jl:19\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if prime_numbers_set.issubset([a])\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    \n    Example:\n        30 is a prime number\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeheazfa.jl:19\nin expression starting at\
    \ /tmp/tmpmeheazfa.jl:19\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n\
    \    \n    for p in prime_numbers\n        if a % p == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax9z64m4.jl:20\nin expression starting at\
    \ /tmp/tmpax9z64m4.jl:20\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n\
    \    \n    for num in prime_numbers\n        if a % num == 0\n            return\
    \ false\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppfkp13mi.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfkp13mi.jl:1\n\
    in expression starting at /tmp/tmppfkp13mi.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n  \
    \      if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 prime and false otherwise.\n    Example:\n        9 = 3^2 * 3^1\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jlqf1v4.jl:18\nin expression starting at\
    \ /tmp/tmp8jlqf1v4.jl:18\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n  \
    \      if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number or false otherwise.\n   \
    \ \n    (a) Knowing that (a) is less then 100.\n    (b) Knowing that (a) is divisible\
    \ by 2.\n    (c) Knowing that (a) is divisible by 3.\n    (d) Knowing that (a)\
    \ is divisible by 5.\n    (e) Knowing that (a) is divisible by 7.\n    (f) Knowing\
    \ that (a) is divisible by 11.\n    (g) Knowing that (a) is divisible by 13.\n\
    \    (h) Knowing that (a) is divisible by 17.\n    (i) Knowing that (a) is divisible\
    \ by 19.\n    (j) Knowing that (a) is divisible by 23.\n    (k) Knowing that (a)\
    \ is divisible by 29.\n    (l) Knowing that (a) is divisible by 31.\n    (m) Knowing\
    \ that (a) is divisible by 35.\n    (n) Knowing that (a) is divisible by 43.\n\
    \    (o) Knowing that (a) is divisible by 51.\n    (p) Knowing that (a) is divisible\
    \ by 59.\n    (x) Knowing that (a) is divisible by 67.\n    (y) Knowing that (a)\
    \ is divisible by 73.\n    (z) Knowing that (a) is divisible by 79.\n    \n  \
    \  Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldye10rw.jl:16\nin expression starting at\
    \ /tmp/tmpldye10rw.jl:16\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    Example:\n        30 is prime\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpow5dcj8l.jl:14\nin expression starting at\
    \ /tmp/tmpow5dcj8l.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4p7pry0.jl:16\nin expression starting at\
    \ /tmp/tmpu4p7pry0.jl:16\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    prime_numbers = primes[a]\n\
    \    \n    for prime in prime_numbers\n        if prime == a\n            return\
    \ false\n        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu9cdkw6.jl:21\nin expression starting at\
    \ /tmp/tmpiu9cdkw6.jl:21\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for p in prime_numbers\n\
    \        if p == a\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilix5zn8.jl:18\nin expression starting at\
    \ /tmp/tmpilix5zn8.jl:18\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    prime_numbers = primes[a]\n\
    \    \n    for prime in prime_numbers\n        if prime == a\n            return\
    \ false\n        end\n    end\n    \n    for prime in prime_numbers\n        if\
    \ prime == a\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0l2c9dxv.jl:27\nin expression starting at\
    \ /tmp/tmp0l2c9dxv.jl:27\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return true\n    \n    primes = primes_list(100)\n\
    \    \n    for p in primes\n        if p*p > a\n            return false\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7tv5dx1.jl:20\nin expression starting at\
    \ /tmp/tmpb7tv5dx1.jl:20\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp05zhj1sw.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05zhj1sw.jl:1\n\
    in expression starting at /tmp/tmp05zhj1sw.jl:1\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2800\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00pwrek7.jl:14\nin expression starting at\
    \ /tmp/tmp00pwrek7.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp1yc1971.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp1yc1971.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        false\n    else\n        true\n    end\nend\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\n\"\"\n\n\
    Stacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp6bgtmgyu.jl:14\nin expression starting at /tmp/tmp6bgtmgyu.jl:14\n"
  stdout: ''
  timestamp: 1659747437
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    \n    Example:\n        30 is a prime number\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqp91k6_l.jl:14\nin expression starting at\
    \ /tmp/tmpqp91k6_l.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2kzxdk2.jl:14\nin expression starting at\
    \ /tmp/tmpw2kzxdk2.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n  \
    \      if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    \n    Example:\n        16 is a perfect\
    \ square\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo177p72b.jl:18\nin expression starting at\
    \ /tmp/tmpo177p72b.jl:18\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12q1vt6e.jl:14\nin expression starting at\
    \ /tmp/tmp12q1vt6e.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(200)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ is_multiply_prime(300)\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(500)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype is_multiply_prime(600)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(700)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(800)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ is_multiply_prime(900)\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(1200)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype is_multiply_prime(1400)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1500)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1600)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1700)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1800)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1900)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2100)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2200)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2300)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2400)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zxwj_u_.jl:14\nin expression starting at\
    \ /tmp/tmp6zxwj_u_.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsinam28w.jl:18\nin expression starting at\
    \ /tmp/tmpsinam28w.jl:18\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    for i in primes\n        if\
    \ a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    Example:\n        30 is a prime number\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj11ggpdh.jl:17\nin expression starting at\
    \ /tmp/tmpj11ggpdh.jl:17\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    for i in primes\n        if\
    \ a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5p_qacq.jl:17\nin expression starting at\
    \ /tmp/tmpt5p_qacq.jl:17\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes(a)\n    \n    for p in primes\n        if p == a\
    \ \n            return true\n        else if p > a \n            return false\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 \n    and false otherwise.\n    Example:\n        9 = 3^2 * 3^2\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyciwr70n.jl:14\nin expression starting at\
    \ /tmp/tmpyciwr70n.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmvvnb0c.jl:15\nin expression starting at\
    \ /tmp/tmpzmvvnb0c.jl:15\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n       \
    \ if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0kmkkdv.jl:17\nin expression starting at\
    \ /tmp/tmpt0kmkkdv.jl:17\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2kzxdk2.jl:14\nin expression starting at\
    \ /tmp/tmpw2kzxdk2.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert\
    \ is_multiply_prime(50) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    Example:\n        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnl50p22.jl:15\nin expression starting at\
    \ /tmp/tmpjnl50p22.jl:15\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    We know that 1 is neither prime nor composite.\n \
    \   Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry5enmqn.jl:14\nin expression starting at\
    \ /tmp/tmpry5enmqn.jl:14\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n@assert\
    \ is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n@assert\
    \ is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n@assert\
    \ is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n@assert\
    \ is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n@assert\
    \ is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n@assert\
    \ is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n@assert\
    \ is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n@assert\
    \ is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n@assert\
    \ is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n@assert\
    \ is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n@assert\
    \ is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n@assert\
    \ is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n@assert\
    \ is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n@assert\
    \ is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n@assert\
    \ is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n@assert\
    \ is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n@assert\
    \ is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n@assert\
    \ is_multiply_prime(68) == false\n@assert \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_7gdp3hs.jl:18\nin expression starting at\
    \ /tmp/tmp_7gdp3hs.jl:18\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    if prime_numbers_set[a] in prime_numbers_set\n        \n        prime_numbers_set[a]\
    \ == true\n        \n    else\n        \n        prime_numbers_set[a] == false\n\
    \        \n    return prime_numbers_set[a]\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9zi62tu.jl:23\nin expression starting at\
    \ /tmp/tmpb9zi62tu.jl:23\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5u9lubm.jl:14\nin expression starting at\
    \ /tmp/tmpa5u9lubm.jl:14\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is prime and false\
    \ otherwise.\n    \n    \n    Example:\n        30 is prime\n        \n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ced872g.jl:14\nin expression starting at\
    \ /tmp/tmp5ced872g.jl:14\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwat7359q.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwat7359q.jl:1\n\
    in expression starting at /tmp/tmpwat7359q.jl:1\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fqh3rq2.jl:14\nin expression starting at\
    \ /tmp/tmp2fqh3rq2.jl:14\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    \n    Example:\n        30 is a prime number\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyamekvu.jl:16\nin expression starting at\
    \ /tmp/tmpwyamekvu.jl:16\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for p in primes\n        if p * 3 == a\n            return true\n \
    \   end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq3bb8r7.jl:20\nin expression starting at\
    \ /tmp/tmpzq3bb8r7.jl:20\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2kzxdk2.jl:14\nin expression starting at\
    \ /tmp/tmpw2kzxdk2.jl:14\n"
  stdout: ''
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    prime_numbers = primes[a]\n\
    \    \n    for prime in prime_numbers\n        if prime == a\n            return\
    \ false\n    end\n    \n    for prime in prime_numbers\n        if prime == a\n\
    \            return true\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapird6hb.jl:25\nin expression starting at\
    \ /tmp/tmpapird6hb.jl:25\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvt6ep2hw.jl:17\nin expression starting at\
    \ /tmp/tmpvt6ep2hw.jl:17\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(100)\n    \n    for p in primes\n       \
    \ if p == a\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprrd9qs3.jl:18\nin expression starting at\
    \ /tmp/tmpprrd9qs3.jl:18\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp1yc1971.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp1yc1971.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    for prime_number in prime_numbers_set\n        if prime_number == a\n\
    \            return false\n    end\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sknjd1p.jl:24\nin expression starting at\
    \ /tmp/tmp3sknjd1p.jl:24\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if\
    \ p * 3 == a\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm5vpbtc.jl:18\nin expression starting at\
    \ /tmp/tmpwm5vpbtc.jl:18\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    if prime_numbers_set == Set(prime_numbers)\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpss_o6fy3.jl:23\nin expression starting at\
    \ /tmp/tmpss_o6fy3.jl:23\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000000)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyy07ze6.jl:14\nin expression starting at\
    \ /tmp/tmpyyy07ze6.jl:14\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is a power of 3 prime numbers and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n    30 = 2 * 3 * 5\n    30 = 2\
    \ * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n\
    \    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 *\
    \ 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 *\
    \ 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 =\
    \ 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n\
    \    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 *\
    \ 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 *\
    \ 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 =\
    \ 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqeixcpc.jl:16\nin expression starting at\
    \ /tmp/tmpvqeixcpc.jl:16\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p > 100\n            return false\n   \
    \     \n        if p == a\n            return true\n        \n        if p % 3\
    \ == 0\n            return false\n        \n        if p % 5 == 0\n          \
    \  return false\n        \n        if p % 7 == 0\n            return false\n \
    \       \n        if p % 11 == 0\n            return false\n        \n       \
    \ if p % 13 == 0\n            return false\n        \n        if p % 17 == 0\n\
    \            return false\n        \n        if p % 19 == 0\n            return\
    \ false\n        \n        if p % 23 == 0\n            return false\n        \n\
    \        if p % 29 == 0\n            return false\n        \n        if p % 31\
    \ == 0\n            return false\n        \n        if p % 37 == 0\n         \
    \   return false\n        \n        if p % 41 == 0\n            return false\n\
    \        \n        if p % 43 == 0\n            return false\n        \n      \
    \  if p % 47 == 0\n            return false\n        \n        if p % 53 == 0\n\
    \            return false\n        \n        if p % 59 == 0\n            return\
    \ false\n        \n        if p % 61 == 0\n            return false\n        \n\
    \        if p % 67 == 0\n            return false\n        \n        if p % 71\
    \ == 0\n            return false\n        \n        if p % 73 == 0\n         \
    \   return false\n        \n        if p % 79 == 0\n            return false\n\
    \        \n        if p % 83 == 0\n            return false\n        \n      \
    \  if p % 89 == 0\n            return false\n        \n        if p % 97 == 0\n\
    \            return false\n        \n        if p % 101 == 0\n            return\
    \ false\n        \n        if p % 103 == 0\n            return false\n       \
    \ \n        if p % 107 == 0\n            return false\n        \n        if p\
    \ % 109 == 0\n            return false\n        \n        if p % 111 == 0\n  \
    \          return false\n        \n        if p % 115 == 0\n            return\
    \ false\n        \n        if p % 117 == 0\n            return false\n       \
    \ \n        if p % 119 == 0\n            return false\n        \n        if p\
    \ % 121 == 0\n            return false\n        \n        if p % 123 == 0\n  \
    \          return false\n        \n        if p % 127 == 0\n            return\
    \ false\n        \n        if p % 131 == 0\n            return false\n       \
    \ \n        if p % 137 == 0\n            return false\n        \n        if p\
    \ % 139 == 0\n            return false\n        \n        if p % 143 == 0\n  \
    \          return false\n        \n        if p % 147 == 0\n            return\
    \ false\n        \n        if p % 151 == 0\n            return false\n       \
    \ \n        if p % 157 == 0\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f6iwnf4.jl:1\nin expression starting at /tmp/tmp5f6iwnf4.jl:1\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    Example:\n\
    \        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0da2p0ey.jl:16\nin expression starting at\
    \ /tmp/tmp0da2p0ey.jl:16\n"
  stdout: ''
  timestamp: 1659747438
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    Example:\n        30 is a prime number\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a46ntvt.jl:14\nin expression starting at\
    \ /tmp/tmp3a46ntvt.jl:14\n"
  stdout: ''
  timestamp: 1659747439
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    \n    for p in primes\n   \
    \     if p > 100\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j0vs81l.jl:20\nin expression starting at\
    \ /tmp/tmp1j0vs81l.jl:20\n"
  stdout: ''
  timestamp: 1659747439
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for p in primes\n        if p > a\n            return false\n     \
    \   \n        if p == a\n            return true\n        \n        if p % a ==\
    \ 0\n            return false\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_okxir6.jl:27\nin expression starting at\
    \ /tmp/tmpy_okxir6.jl:27\n"
  stdout: ''
  timestamp: 1659747439
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9482zawx.jl:14\nin expression starting at\
    \ /tmp/tmp9482zawx.jl:14\n"
  stdout: ''
  timestamp: 1659747439
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p * p > a\n            return false\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaskg4bdd.jl:20\nin expression starting at\
    \ /tmp/tmpaskg4bdd.jl:20\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    You can use the function is_multiply_prime to check it.\n  \
    \  Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bdjqb8o.jl:14\nin expression starting at\
    \ /tmp/tmp_bdjqb8o.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise: Write a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb81kdlq.jl:14\nin expression starting at\
    \ /tmp/tmpxb81kdlq.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5g8skkg.jl:14\nin expression starting at\
    \ /tmp/tmpv5g8skkg.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == true\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == true\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == true\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == true\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == true\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == true\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == true\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == true\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == true\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == true\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == true\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == true\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == true\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == true\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == true\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == true\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == true\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == true\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == true\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == true\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == true\n@assert is_multiply_prime(73)\
    \ == false\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx9c3fwq.jl:14\nin expression starting at\
    \ /tmp/tmpxx9c3fwq.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(30)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    Example:\n    \
    \    30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkorpmljl.jl:14\nin expression starting at\
    \ /tmp/tmpkorpmljl.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n  \
    \      if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbs9_eq5_.jl:16\nin expression starting at\
    \ /tmp/tmpbs9_eq5_.jl:16\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    for prime in prime_numbers_set\n\
    \        if prime == a\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is prime\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiln2koxc.jl:23\nin expression starting at\
    \ /tmp/tmpiln2koxc.jl:23\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_94m7x8_.jl:19\nin expression starting at\
    \ /tmp/tmp_94m7x8_.jl:19\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for num in prime_numbers:\n\
    \        if a % num == 0 \n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime factors of a given number. \n    For example, if the number\
    \ is 24, the function should return 3.\n    \n    You can use the function primes(a)\
    \ to get the prime factors of a number.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4m9snrnx.jl:12\nin expression starting at\
    \ /tmp/tmp4m9snrnx.jl:12\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n  \
    \      if a % p == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2700\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunwr3uz9.jl:17\nin expression starting at\
    \ /tmp/tmpunwr3uz9.jl:17\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptacc6m3m.jl:14\nin expression starting at\
    \ /tmp/tmptacc6m3m.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xdwa6l5.jl:16\nin expression starting at\
    \ /tmp/tmp3xdwa6l5.jl:16\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeiuicjt.jl:17\nin expression starting at\
    \ /tmp/tmpmeiuicjt.jl:17\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca6cu9cu.jl:17\nin expression starting at\
    \ /tmp/tmpca6cu9cu.jl:17\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if\
    \ p*p > a\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5mztjom.jl:18\nin expression starting at\
    \ /tmp/tmpp5mztjom.jl:18\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n       \
    \ if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30ou_z9t.jl:17\nin expression starting at\
    \ /tmp/tmp30ou_z9t.jl:17\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hleyt1d.jl:17\nin expression starting at\
    \ /tmp/tmp9hleyt1d.jl:17\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp1yc1971.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp1yc1971.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9zfz96b.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9zfz96b.jl:1\n\
    in expression starting at /tmp/tmpr9zfz96b.jl:1\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    primes_product = 1\n    \n    for p in primes\n        primes_product\
    \ *= p\n        \n    if a == primes_product\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ovg720m.jl:24\nin expression starting at\
    \ /tmp/tmp7ovg720m.jl:24\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == true\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == true\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == true\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == true\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == true\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == true\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == true\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == true\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == true\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == true\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == true\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == true\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == true\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == true\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == true\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == true\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == true\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == true\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == true\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == true\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == true\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7421bzmb.jl:14\nin expression starting at\
    \ /tmp/tmp7421bzmb.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == true\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == true\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == true\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == true\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == true\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == true\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == true\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == true\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == true\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == true\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == true\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == true\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == true\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == true\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == true\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == true\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == true\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == true\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == true\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == true\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == true\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7421bzmb.jl:14\nin expression starting at\
    \ /tmp/tmp7421bzmb.jl:14\n"
  stdout: ''
  timestamp: 1659747440
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxx0nfi8.jl:16\nin expression starting at\
    \ /tmp/tmpzxx0nfi8.jl:16\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s2vvoee.jl:18\nin expression starting at\
    \ /tmp/tmp3s2vvoee.jl:18\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for n in prime_numbers\n\
    \        if a % n == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeq82ohwc.jl:18\nin expression starting at\
    \ /tmp/tmpeq82ohwc.jl:18\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82ycmvha.jl:14\nin expression starting at\
    \ /tmp/tmp82ycmvha.jl:14\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for i in primes\n        if\
    \ i == 3 || i == 5 || i == 7 || i == 9\n            return true\n        else\n\
    \            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is a perfect square, false otherwise.\n   \
    \ Example:\n        25 is a perfect square\n        25 is not a perfect square\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrwzvq0p.jl:18\nin expression starting at\
    \ /tmp/tmplrwzvq0p.jl:18\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set\
    \ = prime_numbers_set - Set(prime_numbers[a])\n    \n    if prime_numbers_set.isEmpty\
    \ == false\n        \n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzbhfpgd.jl:22\nin expression starting at\
    \ /tmp/tmpwzbhfpgd.jl:22\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnjul4w0.jl:17\nin expression starting at\
    \ /tmp/tmpmnjul4w0.jl:17\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jtjyx16.jl:17\nin expression starting at\
    \ /tmp/tmp8jtjyx16.jl:17\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeim47eax.jl:18\nin expression starting at\
    \ /tmp/tmpeim47eax.jl:18\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for p in primes\n        if p == a\n            return true\n     \
    \   \n        if p > a\n            continue\n        \n        if p % a == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpos7tocg2.jl:25\nin expression starting at\
    \ /tmp/tmpos7tocg2.jl:25\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n  \
    \      if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpqovafkx4.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqovafkx4.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpqovafkx4.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqovafkx4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqovafkx4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqovafkx4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpqovafkx4.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqovafkx4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqovafkx4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqovafkx4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n \
    \  [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpqovafkx4.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqovafkx4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqovafkx4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqovafkx4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpqovafkx4.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2700)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2800\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1r3hzgg.jl:14\nin expression starting at\
    \ /tmp/tmpv1r3hzgg.jl:14\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    for prime in prime_numbers_set\n        if prime == a\n           \
    \ return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 7\n\
    \    30 = 2 * 3 * 11\n    30 = 2 * 3 * 13\n    30 = 2 * 3 * 17\n    30 = 2 * 3\
    \ * 19\n    30 = 2 * 3 * 23\n    30 = 2 * 3 * 29\n    30 = 2 * 3 * 31\n    30\
    \ = 2 * 3 * 37\n    30 = 2 * 3 * 41\n    30 = 2 * 3 * 43\n    30 = 2 * 3 * 47\n\
    \    30 = 2 * 3 * 53\n    30 = 2 * 3 * 59\n    30 = 2 * 3 * 61\n    30 = 2 * 3\
    \ * 67\n    30 = 2 * 3 * 71\n    30 = 2 * 3 * 73\n    30 = 2 * 3 * 79\n    30\
    \ = 2 * 3 * 83\n    30 = 2 * 3 * 89\n    30 = 2 * 3 * 97\n    30 = 2 * 3 * 101\n\
    \    30 = 2 * 3 * 103\n    30 = 2 * 3 * 107\n    30 = 2 * 3 * 109\n    30 = 2\
    \ * 3 * 113\n    30 = 2 * 3 * 127\n    30 = 2 * 3 * 131\n    30 = 2 * 3 * 137\n\
    \    30 = 2 * 3 * 139\n    30 = 2 * 3 * 141\n    30 = 2 * 3 * 143\n    30 = 2\
    \ * 3 * 147\n    30 = 2 * 3 * 149\n    30 = 2 * 3 * 151\n    30 = 2 * 3 * 153\n\
    \    30 = 2 * 3 * 157\n    30 = 2 * 3 * 159\n    30 = 2 * 3 * 161\n    30 = 2\
    \ * 3 * 163\n    30 = 2 * 3 * 165\n    30 = 2 * 3 * 167\n    30 = 2 * 3 * 169\n\
    \    30 = 2 * 3 * 173\n    30 = 2 * 3 * 177\n    30 = 2 * 3 * 179\n    30 = 2\
    \ * 3 * 181\n    30 = 2 * 3 * 183\n    30 = 2 * 3 * 187\n    30 = 2 * 3 * 191\n\
    \    30 = \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtz3f2so.jl:24\nin expression starting at\
    \ /tmp/tmpqtz3f2so.jl:24\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    if prime_numbers_set[a]\n        \n        prime_numbers_set[a] = false\n\
    \        \n        for p in prime_numbers_set\n            if p == a\n       \
    \         prime_numbers_set[a] = true\n                break\n        end\n  \
    \  end\n    \n    return prime_numbers_set[a]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd023yu4o.jl:26\nin expression starting at\
    \ /tmp/tmpd023yu4o.jl:26\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnrkdr6dh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpnrkdr6dh.jl:19\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:22\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:23\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:24\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrkdr6dh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrkdr6dh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnrkdr6dh.jl:28\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\n    \n    Example:\n        25 is a perfect square\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwaubzg8.jl:14\nin expression starting at\
    \ /tmp/tmpbwaubzg8.jl:14\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes(a)\n    \n    for p in primes\n        if p*p >\
    \ a\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpq7gbhgh2.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpq7gbhgh2.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpq7gbhgh2.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq7gbhgh2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq7gbhgh2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq7gbhgh2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpq7gbhgh2.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq7gbhgh2.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq7gbhgh2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq7gbhgh2.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n \
    \  [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpq7gbhgh2.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq7gbhgh2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq7gbhgh2.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq7gbhgh2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpq7gbhgh2.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05duel15.jl:14\nin expression starting at\
    \ /tmp/tmp05duel15.jl:14\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.0>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz_2a_j6.jl:17\nin expression starting at\
    \ /tmp/tmppz_2a_j6.jl:17\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return true\n    else \n        return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgr1jwhmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgr1jwhmv.jl:1\n\
    in expression starting at /tmp/tmpgr1jwhmv.jl:1\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes(a)\n    \n    for prime in primes\n        if a\
    \ % prime == 0\n            return false\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmcxxtqa8.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcxxtqa8.jl:1\n\
    in expression starting at /tmp/tmpmcxxtqa8.jl:1\n"
  stdout: ''
  timestamp: 1659747441
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    for prime in prime_numbers_set\n        if a % prime == 0\n       \
    \     return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ls08a_3.jl:24\nin expression starting at\
    \ /tmp/tmp0ls08a_3.jl:24\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    if prime_numbers_set[a] == true\n        \n        prime_numbers_set[a]\
    \ = false\n        \n        return true\n    \n    else\n        \n        return\
    \ false\n    \nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfpql8yw.jl:24\nin expression starting at\
    \ /tmp/tmpbfpql8yw.jl:24\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if\
    \ p*p > a\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n        30 is prime\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpxbm7a4.jl:18\nin expression starting at\
    \ /tmp/tmptpxbm7a4.jl:18\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rhlw7_l.jl:19\nin expression starting at\
    \ /tmp/tmp1rhlw7_l.jl:19\n"
  stdout: ''
  timestamp: 1659747442
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert\
    \ is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    \n    Example:\n        30 is\
    \ prime\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz4oapf4.jl:15\nin expression starting at\
    \ /tmp/tmpzz4oapf4.jl:15\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p*p > a\n            return false\n   \
    \ \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpoun_8zb9.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoun_8zb9.jl:1\n\
    in expression starting at /tmp/tmpoun_8zb9.jl:1\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppa4k_mb9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppa4k_mb9.jl:1\n\
    in expression starting at /tmp/tmppa4k_mb9.jl:1\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6fzia1w.jl:18\nin expression starting at\
    \ /tmp/tmpr6fzia1w.jl:18\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    primes_product = 1\n    for\
    \ p in primes\n        primes_product *= p\n    \n    return primes_product ==\
    \ a\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfd5hcys0.jl:17\nin expression starting at\
    \ /tmp/tmpfd5hcys0.jl:17\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    for prime in prime_numbers_set\n        if prime == a\n           \
    \ return true\n        end\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ofqs_c7.jl:25\nin expression starting at\
    \ /tmp/tmp8ofqs_c7.jl:25\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if\
    \ p > 100\n            return false\n        end\n    end\n    \n    for p in\
    \ primes\n        if p == a\n            return true\n        end\n    end\n \
    \   \n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o_tlupd.jl:25\nin expression starting at\
    \ /tmp/tmp9o_tlupd.jl:25\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    \n    for i in prime_numbers_set\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multi\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33z_95bl.jl:21\nin expression starting at\
    \ /tmp/tmp33z_95bl.jl:21\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n       \
    \ if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbj0_qt5.jl:17\nin expression starting at\
    \ /tmp/tmpnbj0_qt5.jl:17\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a perfect square, false\
    \ otherwise.\n    \n    Example:\n        16 is a perfect square\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y5kpetr.jl:16\nin expression starting at\
    \ /tmp/tmp2y5kpetr.jl:16\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n       \
    \ if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxxkqpuu.jl:17\nin expression starting at\
    \ /tmp/tmpuxxkqpuu.jl:17\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\n    \n    Example:\n        16 is a perfect square\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9g5elmmj.jl:18\nin expression starting at\
    \ /tmp/tmp9g5elmmj.jl:18\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == true\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmy4poibt.jl:14\nin expression starting at\
    \ /tmp/tmpmy4poibt.jl:14\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi18jeqne.jl:14\nin expression starting at\
    \ /tmp/tmpi18jeqne.jl:14\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert\
    \ is_multiply_prime(31) == false\n@assert is_multiply_prime(99) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    Example:\n        30 is a prime\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfoq98p0.jl:15\nin expression starting at\
    \ /tmp/tmpmfoq98p0.jl:15\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    \n\
    \    Example:\n        30 is prime\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypilk3u_.jl:17\nin expression starting at\
    \ /tmp/tmpypilk3u_.jl:17\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for num in prime_numbers:\n\
    \        if a % num == 0: return False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbz_a5mpf.jl:12\nin expression starting at\
    \ /tmp/tmpbz_a5mpf.jl:12\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        false\n    else\n        true\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uwil9fz.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp7uwil9fz.jl:20\n  Expression: candidate(30)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7uwil9fz.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uwil9fz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7uwil9fz.jl:21\n  Expression: candidate(8) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uwil9fz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uwil9fz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7uwil9fz.jl:25\n  Expression: candidate(126) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uwil9fz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uwil9fz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7uwil9fz.jl:26\n  Expression: candidate(729) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uwil9fz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uwil9fz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7uwil9fz.jl:27\n  Expression: candidate(891) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(400)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(500)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(1000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(1100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1200)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1300)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1400)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1500)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1600)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1700)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1800)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1900)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(2100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w4dvbwp.jl:14\nin expression starting at\
    \ /tmp/tmp5w4dvbwp.jl:14\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n        30 is prime\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_qnqpbq.jl:18\nin expression starting at\
    \ /tmp/tmpy_qnqpbq.jl:18\n"
  stdout: ''
  timestamp: 1659747443
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        10 is a prime number\n   \
    \     20 is not a prime number\n        30 = 2 * 3 * 5\n        40 = 2 * 3 * 7\n\
    \        50 = 2 * 3 * 7 * 11\n        60 = 2 * 3 * 7 * 11 * 13\n        70 = 2\
    \ * 3 * 7 * 11 * 13 * 17\n        80 = 2 * 3 * 7 * 11 * 13 * 17 * 19\n       \
    \ 90 = 2 * 3 * 7 * 11 * 13 * 17 * 19 * 23\n        100 = 2 * 3 * 7 * 11 * 13 *\
    \ 17 * 19 * 23 * 29\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q7526bd.jl:14\nin expression starting at\
    \ /tmp/tmp0q7526bd.jl:14\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn7n_sh_.jl:16\nin expression starting at\
    \ /tmp/tmpdn7n_sh_.jl:16\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n\
    \    \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4p_zrz4.jl:19\nin expression starting at\
    \ /tmp/tmps4p_zrz4.jl:19\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes_list(100)\n    \n    for i in primes\n        if\
    \ a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a perfect square, false\
    \ otherwise.\n    Example:\n        25 is a perfect square\n        25 is not\
    \ a perfect square\n        25 = 25^2\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxquidbv.jl:17\nin expression starting at\
    \ /tmp/tmpzxquidbv.jl:17\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx16wnnd9.jl:20\nin expression starting at\
    \ /tmp/tmpx16wnnd9.jl:20\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1_6_anc.jl:19\nin expression starting at\
    \ /tmp/tmpe1_6_anc.jl:19\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkoqil71n.jl:14\nin expression starting at\
    \ /tmp/tmpkoqil71n.jl:14\n"
  stdout: ''
  timestamp: 1659747444
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n  \
    \      if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpx_02y624.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpx_02y624.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpx_02y624.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_02y624.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_02y624.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx_02y624.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpx_02y624.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_02y624.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_02y624.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx_02y624.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: primes not defined\n  Stacktrace:\n \
    \  [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpx_02y624.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_02y624.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_02y624.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx_02y624.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpx_02y624.jl:9\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  timestamp: 1659747446
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp1yc1971.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpp1yc1971.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1yc1971.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1yc1971.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpp1yc1971.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1659747436
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g_somkv.jl:14\nin expression starting at\
    \ /tmp/tmp1g_somkv.jl:14\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxed4dk7.jl:16\nin expression starting at\
    \ /tmp/tmpgxed4dk7.jl:16\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    primes = primes(a)\n    \n    \n    for i in primes\n        if\
    \ a % i == 0\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    \n    Example:\n        30 is\
    \ prime\n        \n        \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgqzk7mh.jl:19\nin expression starting at\
    \ /tmp/tmpwgqzk7mh.jl:19\n"
  stdout: ''
  timestamp: 1659747445
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte32bo3t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte32bo3t.jl:1\n\
    in expression starting at /tmp/tmpte32bo3t.jl:1\n"
  stdout: ''
  timestamp: 1659747435
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
    \ \n    if a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a perfect power of 2 and\nfalse otherwise.\n\
    Example: \n    16 is a perfect power of 2\n    32 is not a perfect power of 2\n\
    \    64 is a perfect power of 2\n    128 is not a perfect power of 2\n    256\
    \ is a perfect power of 2\n    512 is not a perfect power of 2\n    1024 is a\
    \ perfect power of 2\n    2048 is not a perfect power of 2\n    4096 is a perfect\
    \ power of 2\n    8192 is not a perfect power of 2\n    16384 is a perfect power\
    \ of 2\n    32768 is a perfect power of 2\n    65536 is a perfect power of 2\n\
    \    131072 is a perfect power of 2\n    262144 is a perfect power of 2\n    524288\
    \ is a perfect power of 2\n    1048576 is a perfect power of 2\n    2097152 is\
    \ a perfect power of 2\n    4194304 is a perfect power of 2\n    8388608 is a\
    \ perfect power of 2\n    16777216 is a perfect power of 2\n    33554432 is a\
    \ perfect power of 2\n    67108864 is a perfect power of 2\n    134217728 is a\
    \ perfect power of 2\n    268435456 is a perfect power of 2\n    536870912 is\
    \ a perfect power of 2\n    1073741824 is a perfect power of 2\n    2147483648\
    \ is a perfect power of 2\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73g5iv7f.jl:14\nin expression starting at\
    \ /tmp/tmp73g5iv7f.jl:14\n"
  stdout: ''
  timestamp: 1659747445
