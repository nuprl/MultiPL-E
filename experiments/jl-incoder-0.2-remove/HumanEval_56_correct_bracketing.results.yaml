language: jl
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     else\n            correct_bracketing = correct_bracketing && true\n    \
    \    end\n    end\n    \n    return correct_bracketing\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4hbd1cy.jl:21\nin expression starting at\
    \ /tmp/tmpl4hbd1cy.jl:21\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else \n            correct_bracketing = correct_bracketing\
    \ or false\n            \n    return correct_bracketing\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdsrfd400.jl:12\nin expression starting at /tmp/tmpdsrfd400.jl:12\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket.head == bracket.tail\n\
    \            correct_bracketing = true\n        end\n    end\n    \n    return\
    \ correct_bracketing\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpq8_w9t5x.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpq8_w9t5x.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  type Char has no field head\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpq8_w9t5x.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq8_w9t5x.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq8_w9t5x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq8_w9t5x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  type Char has no field head\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpq8_w9t5x.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq8_w9t5x.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq8_w9t5x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq8_w9t5x.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  type Char has no field head\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpq8_w9t5x.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq8_w9t5x.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq8_w9t5x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq8_w9t5x.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  typ"
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_212upkb.jl:24\nin expression starting at\
    \ /tmp/tmp_212upkb.jl:24\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n \
    \   \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wbgdx9x.jl:1\nin expression starting at /tmp/tmp6wbgdx9x.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xrr_x4e.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xrr_x4e.jl:1\n\
    in expression starting at /tmp/tmp5xrr_x4e.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing || true\n        else if\
    \ bracket == \">\" \n            correct_bracketing = correct_bracketing || true\n\
    \        else \n            correct_bracketing = correct_bracketing || false\n\
    \    end\n    \n    return correct_bracketing\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpsc88fs.jl:12\nin expression starting at\
    \ /tmp/tmpkpsc88fs.jl:12\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</>\") # returns\
    \ true\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hap7x62.jl:17\nin expression starting at\
    \ /tmp/tmp8hap7x62.jl:17\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    ) \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpm8eb_x61.jl:5 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm8eb_x61.jl:61\n\
    in expression starting at /tmp/tmpm8eb_x61.jl:61\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqfsjzr7i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqfsjzr7i.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749154
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing and (open_brackets(brackets)\
    \ == close_brackets(brackets))\n        elseif bracket == \">\"\n            correct_bracketing\
    \ = correct_bracketing and (open_brackets(brackets) != close_brackets(brackets))\n\
    \        else\n            correct_bracketing = correct_bracketing and (open_brackets(brackets)\
    \ == close_brackets(brackets))\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"and\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqpuk__27.jl:11\nin expression starting at /tmp/tmpqpuk__27.jl:11\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf9dnwg4.jl:68\nin expression starting at\
    \ /tmp/tmpsf9dnwg4.jl:68\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        else if bracket == \">\" \n \
    \           correct_bracketing = false \n        else \n            correct_bracketing\
    \ = false \n    return correct_bracketing \n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</>\") # returns true\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</>\") # returns false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    hello\" appears in the string. \nFor example, if the string were \"hello hello\
    \ hello hello hello hello\", the function should return 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacq30bvx.jl:12\nin expression starting at\
    \ /tmp/tmpacq30bvx.jl:12\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets\
    \ = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"?\", \"\").replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\";\", \"\")\n\
    \    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n    brackets\
    \ = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\",\", \"\").replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n    brackets\
    \ = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\").replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\").replace(\"?\", \"\")\n    brackets\
    \ = brackets.replace(\",\", \"\").replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\":\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyyyin80.jl:54\nin expression starting at\
    \ /tmp/tmpwyyyin80.jl:54\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnl3u_ozt.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnl3u_ozt.jl:1\n\
    in expression starting at /tmp/tmpnl3u_ozt.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy87burs4.jl:1\nin expression starting at /tmp/tmpy87burs4.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpo7u4aqny.jl:5 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo7u4aqny.jl:49\n\
    in expression starting at /tmp/tmpo7u4aqny.jl:49\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku39yd8b.jl:1\nin expression starting at /tmp/tmpku39yd8b.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    if brackets == \"\" \n        correct_bracketing = true\n\
    \        return correct_bracketing\n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    brackets = brackets \n    \n   \
    \ brackets = brackets \n    \n    brackets = brackets \n    \n    brackets = brackets\
    \ \n    \n    brackets = brackets \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzo11b7nb.jl:1\nin expression starting at /tmp/tmpzo11b7nb.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or is_opening_bracket(bracket))\n        elseif bracket == \">\"\n         \
    \   correct_bracketing = correct_bracketing and not (correct_bracketing or is_closing_bracket(bracket))\n\
    \        else\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or is_opening_bracket(bracket) or is_closing_bracket(bracket))\n    end\n  \
    \  \n    return correct_bracketing\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"and\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpof9h22s4.jl:11\nin expression starting at /tmp/tmpof9h22s4.jl:11\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && is_opening_bracket(bracket)\n\
    \        elseif bracket == \">\"\n            correct_bracketing = correct_bracketing\
    \ && is_closing_bracket(bracket)\n        else\n            correct_bracketing\
    \ = correct_bracketing && is_opening_bracket(bracket) && is_closing_bracket(bracket)\n\
    \    end\n    \n    return correct_bracketing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgw_y5zjk.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgw_y5zjk.jl:1\n\
    in expression starting at /tmp/tmpgw_y5zjk.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing - checks if brackets are correctly balanced.\n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfylysfjc.jl:1\nin expression starting at /tmp/tmpfylysfjc.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8jxev09.jl:21\nin expression starting at\
    \ /tmp/tmpz8jxev09.jl:21\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2c_8m44.jl:54\nin expression starting at\
    \ /tmp/tmpa2c_8m44.jl:54\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n \
    \   \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wbgdx9x.jl:1\nin expression starting at /tmp/tmp6wbgdx9x.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\">\",\"\")\n\
    \    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"@\",\"\")\n    brackets = brackets.replace(\"\
    $\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz92r2n09.jl:22\nin expression starting at\
    \ /tmp/tmpz92r2n09.jl:22\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    Checks whether brackets\
    \ are correctly paired.\n    \n    brackets is a string of \"<\" and \">\".\n\
    \    return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvynb5j02.jl:1\nin expression starting at /tmp/tmpvynb5j02.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket==\"<\"\n    \
    \        correct_bracketing = true\n        elseif bracket==\">\"\n          \
    \  correct_bracketing = false\n        end\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8v_gpt9g.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp8v_gpt9g.jl:24\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v_gpt9g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v_gpt9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8v_gpt9g.jl:25\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v_gpt9g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v_gpt9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8v_gpt9g.jl:26\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8v_gpt9g.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v_gpt9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8v_gpt9g.jl:27\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8v_gpt9g.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v_gpt9g.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a function that checks if brackets are correctly \n\
    \    formed.\n    \n    brackets is a string of \"<\" and \">\".\n    return True\
    \ if every opening bracket has a corresponding closing bracket.\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzcbmohk.jl:1\nin expression starting at /tmp/tmptzcbmohk.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugn9clx9.jl:17\nin expression starting at\
    \ /tmp/tmpugn9clx9.jl:17\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    Checks whether brackets\
    \ are correctly paired.\n    \n    brackets is a string of \"<\" and \">\".\n\
    \    return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvynb5j02.jl:1\nin expression starting at /tmp/tmpvynb5j02.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[()]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[,]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[;]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [=]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[!]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[~]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[#]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [%]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[&]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[/]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[']\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\"]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[#]\", \"\")\n \
    \   brackets = brackets |> String.replaceAll(\"[%]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[&]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [/]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[']\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[\"]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[#]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [%]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[&]\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[/]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[']\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\"]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[#]\", \"\")\n \
    \   brackets = brackets |> String.replaceAll(\"[%]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[&]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [/]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[']\", \"\")\n  \
    \  brackets = brackets |> String.replaceAll(\"[\"]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[#]\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\" in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic6ugaza.jl:19\nin expression starting at\
    \ /tmp/tmpic6ugaza.jl:19\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\").replace(\":\", \"\")\n\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcmtm6wko.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcmtm6wko.jl:1\n\
    in expression starting at /tmp/tmpcmtm6wko.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3go3tvnt.jl:21\nin expression starting at\
    \ /tmp/tmp3go3tvnt.jl:21\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    bracket_stack.push(brackets)\n    bracket_stack.push(brackets)\n\
    \    \n    correct_bracketing = true\n    while bracket_stack.count > 0\n    \
    \    brackets = bracket_stack.pop()\n        if brackets == \"<\"\n          \
    \  bracket_stack.push(brackets)\n        elseif brackets == \">\"\n          \
    \  bracket_stack.push(brackets)\n        else\n            correct_bracketing\
    \ = false\n        end\n    end\n    return correct_bracketing\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpkb8s6_n3.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpkb8s6_n3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpkb8s6_n3.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkb8s6_n3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkb8s6_n3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkb8s6_n3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpkb8s6_n3.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkb8s6_n3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkb8s6_n3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkb8s6_n3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpkb8s6_n3.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkb8s6_n3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkb8s6_n3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkb8s6_n3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpkb8s6_n3.jl:6\n   [2] macro "
  timestamp: 1659749157
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    paired.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dqdk3e9.jl:1\nin expression starting at /tmp/tmp_dqdk3e9.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    for bracket in brackets\n        if bracket == \"<\"\n         \
    \   correct_bracketing = correct_bracketing and not (correct_bracketing && is_opening_bracket(bracket))\n\
    \        elseif bracket == \">\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing && is_closing_bracket(bracket))\n        else\n\
    \            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ && is_opening_bracket(bracket) or is_closing_bracket(bracket))\n    end\n  \
    \  return correct_bracketing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"and\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8aznp3br.jl:10\nin expression starting at /tmp/tmp8aznp3br.jl:10\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    ) \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0ub7yk6.jl:21\nin expression starting at\
    \ /tmp/tmpo0ub7yk6.jl:21\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    Determine whether brackets\
    \ are correctly nested.\n    \n    brackets is a string of \"<\" and \">\".\n\
    \    return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiiotvqlb.jl:1\nin expression starting at /tmp/tmpiiotvqlb.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    formed.\n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsghhft6.jl:1\nin expression starting at /tmp/tmpzsghhft6.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\[\\\\]]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\(\\\\)]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\{]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\}]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[\\\\,]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\:\\\\-]\"\
    , \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\\
    ]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\\
    ]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\
    \\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\
    )\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\
    \\)\\\\]\\\\)\\\\]\\\\)\\\\]\\\\\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt2ie1li.jl:23\nin expression starting at\
    \ /tmp/tmpwt2ie1li.jl:23\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing determines if brackets are correctly paired.\n    \n  \
    \  brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpss1uyixo.jl:1\nin expression starting at /tmp/tmpss1uyixo.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing determines if brackets has correct bracketing.\n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06zl8ja5.jl:1\nin expression starting at /tmp/tmp06zl8ja5.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_gj09k40.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_gj09k40.jl:1\n\
    in expression starting at /tmp/tmp_gj09k40.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"@\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68eee9ni.jl:23\nin expression starting at\
    \ /tmp/tmp68eee9ni.jl:23\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets =\
    \ brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5ps5nd4.jl:21\nin expression starting at\
    \ /tmp/tmpk5ps5nd4.jl:21\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    for bracket in brackets\n        if bracket == \"<\"\n         \
    \   correct_bracketing = false\n        end\n    end\n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkei5_gnm.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkei5_gnm.jl:24\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkei5_gnm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkei5_gnm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkei5_gnm.jl:25\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkei5_gnm.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkei5_gnm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkei5_gnm.jl:26\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkei5_gnm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkei5_gnm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkei5_gnm.jl:27\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkei5_gnm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkei5_gnm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkei5_gnm.jl:28\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749157
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets do \n        if bracket==\"<\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\">\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"{\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"}\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"(\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\")\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"[\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"]\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\",\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\".\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\";\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\":\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"?\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"!\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\":\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\";\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"=\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"!\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\".\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"?\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\",\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\";\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\":\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"<\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\">\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"{\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"}\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"(\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\")\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"[\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"]\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\",\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\".\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\";\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\":\" then\
    \ \n            correct_bracketing = true \n        else if bracket==\"?\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxn2u5ypt.jl:9\nin expression starting at /tmp/tmpxn2u5ypt.jl:9\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[1:end-1]\n    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[1:end-1]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[1:end-1]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe6ziw3gp.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe6ziw3gp.jl:1\n\
    in expression starting at /tmp/tmpe6ziw3gp.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks whether brackets are correctly\
    \ paired.\n    brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s4wm93t.jl:1\nin expression starting at /tmp/tmp2s4wm93t.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing - checks if brackets are correctly formatted.\n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeumwrg8_.jl:1\nin expression starting at /tmp/tmpeumwrg8_.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvbzxt99.jl:20\nin expression starting at\
    \ /tmp/tmplvbzxt99.jl:20\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a function that takes a string and checks if it \n \
    \   contains any brackets that are not properly closed. \n    \n    brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvp5fkqx6.jl:1\nin expression starting at /tmp/tmpvp5fkqx6.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75ik1_8a.jl:68\nin expression starting at\
    \ /tmp/tmp75ik1_8a.jl:68\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    ) \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnonjj47r.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnonjj47r.jl:1\n\
    in expression starting at /tmp/tmpnonjj47r.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"|\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurizo5e5.jl:22\nin expression starting at\
    \ /tmp/tmpurizo5e5.jl:22\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9yooxxc.jl:22\nin expression starting at\
    \ /tmp/tmpk9yooxxc.jl:22\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing - checks if brackets are correctly nested\n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj4krbeh.jl:1\nin expression starting at /tmp/tmpqj4krbeh.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvs46t4u.jl:1\nin expression starting at /tmp/tmpsvs46t4u.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    formed.\n    \"\"\"\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n\
    \    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva53rg8r.jl:66\nin expression starting at\
    \ /tmp/tmpva53rg8r.jl:66\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.toUpper\n    brackets\
    \ = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [^A-Za-z0-9]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[<>]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9i5un0v.jl:43\nin expression starting at\
    \ /tmp/tmp_9i5un0v.jl:43\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpligp1r0f.jl:23\nin expression starting at\
    \ /tmp/tmpligp1r0f.jl:23\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     else\n            correct_bracketing = correct_bracketing && true\n    \
    \    end\n    end\n    \n    return correct_bracketing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp99d618_v.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp99d618_v.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: True not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp99d618_v.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99d618_v.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99d618_v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp99d618_v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: True not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp99d618_v.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99d618_v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99d618_v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp99d618_v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: True not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp99d618_v.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99d618_v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99d618_v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp99d618_v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: True not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp99d618_v.jl:7\n   [2] macro expa"
  timestamp: 1659749159
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpgq4pgwfd.jl:5 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgq4pgwfd.jl:63\n\
    in expression starting at /tmp/tmpgq4pgwfd.jl:63\n"
  stdout: ''
  timestamp: 1659749157
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing returns True if brackets has correct bracketing.\n    \n\
    \    \"\"\"\n    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplgdmu33j.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplgdmu33j.jl:1\n\
    in expression starting at /tmp/tmplgdmu33j.jl:1\n"
  stdout: ''
  timestamp: 1659749157
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     else\n            correct_bracketing = correct_bracketing && true\n    \
    \    end\n    end\n    \n    return correct_bracketing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz1ykl5ne.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpz1ykl5ne.jl:30\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz1ykl5ne.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz1ykl5ne.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpz1ykl5ne.jl:31\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz1ykl5ne.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz1ykl5ne.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpz1ykl5ne.jl:32\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz1ykl5ne.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz1ykl5ne.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpz1ykl5ne.jl:33\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz1ykl5ne.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz1ykl5ne.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpz1ykl5ne.jl:34\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = false\n        end\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4u6ufzv9.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4u6ufzv9.jl:26\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4u6ufzv9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4u6ufzv9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4u6ufzv9.jl:27\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4u6ufzv9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4u6ufzv9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4u6ufzv9.jl:28\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4u6ufzv9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4u6ufzv9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4u6ufzv9.jl:29\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4u6ufzv9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4u6ufzv9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4u6ufzv9.jl:30\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    bracket_stack.push(brackets)\n    correct_bracket = bracket_stack.top()\n\
    \    bracket_stack.pop()\n    correct_bracket = correct_bracket.strip(\"[]\")\n\
    \    correct_bracket = correct_bracket.strip(\"()\")\n    correct_bracket = correct_bracket.strip(\"\
    {}\")\n    correct_bracket = correct_bracket.strip(\"<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}<>\")\n    correct_bracket = correct_bracket.strip(\"[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}[]<>\")\n    correct_bracket = correct_bracket.strip(\"[][]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}()<>\")\n    correct_bracket = correct_bracket.strip(\"[]()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"(){}<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}{}<>\")\n    correct_bracket = correct_bracket.strip(\"[]{}<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}[]<>\")\n    correct_bracket = correct_bracket.strip(\"[][]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()()[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}()[]<>\")\n    correct_bracket = correct_bracket.strip(\"[]()[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"(){}[]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}{}[]<>\")\n    correct_bracket = correct_bracket.strip(\"[]{}[]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()[][]<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}[][]<>\")\n    correct_bracket = correct_bracket.strip(\"[][][]<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"()()()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}()()<>\")\n    correct_bracket = correct_bracket.strip(\"[]()()<>\")\n    correct_bracket\
    \ = correct_bracket.strip(\"(){}()<>\")\n    correct_bracket = correct_bracket.strip(\"\
    {}{}()<>\")\n    correct_bracket = correct_bracket.strip(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuhhe4fs.jl:49\nin expression starting at\
    \ /tmp/tmpwuhhe4fs.jl:49\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xrr_x4e.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xrr_x4e.jl:1\n\
    in expression starting at /tmp/tmp5xrr_x4e.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"#\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    `\", \"\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihmft40k.jl:21\nin expression starting at\
    \ /tmp/tmpihmft40k.jl:21\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing || true\n        else if\
    \ bracket == \">\" \n            correct_bracketing = correct_bracketing || true\n\
    \        else \n            correct_bracketing = correct_bracketing || false\n\
    \    \n    return correct_bracketing\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    </\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"</\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vlsslqi.jl:12\nin expression starting at\
    \ /tmp/tmp5vlsslqi.jl:12\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckvpxer4.jl:20\nin expression starting at\
    \ /tmp/tmpckvpxer4.jl:20\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    Checks whether brackets\
    \ are correctly nested.\n    \n    brackets is a string of \"<\" and \">\".\n\
    \    return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nmpmu8u.jl:1\nin expression starting at /tmp/tmp0nmpmu8u.jl:1\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    brackets = brackets \n    \n    for bracket in brackets\
    \ \n        \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing || true\n        else \n            correct_bracketing =\
    \ correct_bracketing || false\n            \n    return correct_bracketing\n \
    \   \n    \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n  \
    \  brackets = brackets \n    \n    for bracket in brackets \n        \n      \
    \  if bracket == \"<\" \n            correct_bracketing = correct_bracketing ||\
    \ true\n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \n    \n    \"\"\"\
    \n    \n    correct_bracketing::Bool = false \n    \n    brackets = brackets \n\
    \    \n    for bracket in brackets \n        \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing || true\n        else if\
    \ bracket == \">\" \n            correct_bracketing = correct_bracketing || true\n\
    \        else \n            correct_bracketing = correct_bracketing || false\n\
    \            \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n \
    \   correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n\
    \    for bracket in brackets \n        \n        if bracket == \"<\" \n      \
    \      correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \          \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n   \
    \ correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n  \
    \  for bracket in brackets \n        \n        if bracket == \"<\" \n        \
    \    correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing || true\n   \
    \     else \n            correct_bracketing = correct_bracketing || false\n  \
    \          \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n   \
    \ correct_bracketing::Bool = false \n    \n    brackets = brackets \n    \n  \
    \  for bracket in brackets \n        \n        if bracket == \"<\" \n        \
    \    correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mgnjng2.jl:15\nin expression starting at\
    \ /tmp/tmp1mgnjng2.jl:15\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else \n            correct_bracketing = correct_bracketing\
    \ or false\n    \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n\
    \    correct_bracketing::Bool = false \n    \n    for bracket in brackets \n \
    \       \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing or true\n        else \n            correct_bracketing =\
    \ correct_bracketing or false\n    \n    return correct_bracketing\n    \n   \
    \ \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n    for bracket\
    \ in brackets \n        \n        if bracket == \"<\" \n            correct_bracketing\
    \ = correct_bracketing or true\n        else if bracket == \">\" \n          \
    \  correct_bracketing = correct_bracketing or true\n        else \n          \
    \  correct_bracketing = correct_bracketing or false\n    \n    return correct_bracketing\n\
    \    \n    \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n \
    \   for bracket in brackets \n        \n        if bracket == \"<\" \n       \
    \     correct_bracketing = correct_bracketing or true\n        else if bracket\
    \ == \">\" \n            correct_bracketing = correct_bracketing or true\n   \
    \     else \n            correct_bracketing = correct_bracketing or false\n  \
    \  \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else \n            correct_bracketing = correct_bracketing\
    \ or false\n    \n    return correct_bracketing\n    \n    \n    \"\"\"\n    \n\
    \    correct_bracketing::Bool = false \n    \n    for bracket in brackets \n \
    \       \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ or true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing or true\n        else \n            correct_bracketing =\
    \ correct_bracketing or false\n    \n    return correct_bracketing\n    \n   \
    \ \n    \"\"\"\n    \n    correct_bracketing::Bool = false \n    \n    for bracket\
    \ in brackets \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpthalxgzr.jl:12\nin expression starting at /tmp/tmpthalxgzr.jl:12\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = false\n        end\n    end\n    \n    return correct_bracketing\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprptml29e.jl:17\nin expression starting at\
    \ /tmp/tmprptml29e.jl:17\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n \
    \   \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wbgdx9x.jl:1\nin expression starting at /tmp/tmp6wbgdx9x.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_open\
    \ = brackets.find(\"<\")\n    bracket_close = brackets.find(\">\")\n    if bracket_open\
    \ < bracket_close \n        bracket_open = brackets.find(\"<\", bracket_close)\n\
    \        bracket_close = brackets.find(\">\", bracket_open)\n        if bracket_open\
    \ < bracket_close \n            bracket_open = brackets.find(\"<\", bracket_close)\n\
    \            bracket_close = brackets.find(\">\", bracket_open)\n            if\
    \ bracket_open < bracket_close \n                bracket_open = brackets.find(\"\
    <\", bracket_close)\n                bracket_close = brackets.find(\">\", bracket_open)\n\
    \                if bracket_open < bracket_close \n                    bracket_open\
    \ = brackets.find(\"<\", bracket_close)\n                    bracket_close = brackets.find(\"\
    >\", bracket_open)\n                    if bracket_open < bracket_close \n   \
    \                     bracket_open = brackets.find(\"<\", bracket_close)\n   \
    \                     bracket_close = brackets.find(\">\", bracket_open)\n   \
    \                     if bracket_open < bracket_close \n                     \
    \       bracket_open = brackets.find(\"<\", bracket_close)\n                 \
    \           bracket_close = brackets.find(\">\", bracket_open)\n             \
    \               if bracket_open < bracket_close \n                           \
    \     return True\n                            else \n                       \
    \         return False\n                        else \n                      \
    \      return False\n                    else \n                        return\
    \ False\n                else \n                    return False\n           \
    \ else \n                return False\n        else \n            return False\n\
    \    else \n        return False\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpiygl35c2.jl:26 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiygl35c2.jl:30\n\
    in expression starting at /tmp/tmpiygl35c2.jl:30\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        else if bracket == \">\" \n \
    \           correct_bracketing = true \n        else \n            correct_bracketing\
    \ = false \n    \n    return correct_bracketing \n    \n    \n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5xyr4b8.jl:12\nin expression starting at\
    \ /tmp/tmpv5xyr4b8.jl:12\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = (brackets == \"<\")\n    \n    return correct_bracketing\n    \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gu2qq8g.jl:12\nin expression starting at\
    \ /tmp/tmp2gu2qq8g.jl:12\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\)\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\)\", \"\")\n    brackets = brackets \nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgmglz8is.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgmglz8is.jl:1\n\
    in expression starting at /tmp/tmpgmglz8is.jl:1\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqfsjzr7i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqfsjzr7i.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749154
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a function that takes a string of \"<\" and \">\" and\
    \ returns True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwum_5s3i.jl:1\nin expression starting at /tmp/tmpwum_5s3i.jl:1\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l_6ouh2.jl:19\nin expression starting at\
    \ /tmp/tmp9l_6ouh2.jl:19\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replace(\"<\"\
    , \"\") |> String.replace(\"<\", \"\") |> String.replace(\"<\", \"\") |> String.replace(\"\
    <\", \"\") |> String.replace(\"<\", \"\")\n    brackets = brackets |> String.replace(\"\
    >\", \"\") |> String.replace(\">\", \"\") |> String.replace(\">\", \"\") |> String.replace(\"\
    >\", \"\") |> String.replace(\">\", \"\")\n    brackets = brackets |> String.replace(\"\
    (\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"\
    (\", \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\")\n   \
    \ brackets = brackets |> String.replace(\")\", \"\") |> String.replace(\")\",\
    \ \"\") |> String.replace(\")\", \"\") |> String.replace(\")\", \"\") |> String.replace(\"\
    )\", \"\")\n    brackets = brackets |> String.replace(\"{\", \"\") |> String.replace(\"\
    {\", \"\") |> String.replace(\"{\", \"\") |> String.replace(\"{\", \"\") |> String.replace(\"\
    {\", \"\") |> String.replace(\"{\", \"\")\n    brackets = brackets |> String.replace(\"\
    }\", \"\") |> String.replace(\"}\", \"\") |> String.replace(\"}\", \"\") |> String.replace(\"\
    }\", \"\") |> String.replace(\"}\", \"\")\n    brackets = brackets |> String.replace(\"\
    [\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"\
    [\", \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\")\n   \
    \ brackets = brackets |> String.replace(\"]\", \"\") |> String.replace(\"]\",\
    \ \"\") |> String.replace(\"]\", \"\") |> String.replace(\"]\", \"\") |> String.replace(\"\
    ]\", \"\")\n    brackets = brackets |> String.replace(\",\", \"\") |> String.replace(\"\
    ,\", \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\") |> String.replace(\"\
    ,\", \"\")\n    brackets = brackets |> String.replace(\";\", \"\") |> String.replace(\"\
    ;\", \"\") |> String.replace(\";\", \"\") |> String.replace(\";\", \"\") |> String.replace(\"\
    ;\", \"\")\n    brackets = brackets |> String.replace(\":\", \"\") |> String.replace(\"\
    :\", \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\") |> String.replace(\"\
    :\", \"\")\n    brackets = brackets |> String.replace(\"=\", \"\") |> String.replace(\"\
    =\", \"\") |> String.replace(\"=\", \"\") |> String.replace(\"=\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kxv_5sd.jl:19\nin expression starting at\
    \ /tmp/tmp4kxv_5sd.jl:19\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvs46t4u.jl:1\nin expression starting at /tmp/tmpsvs46t4u.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\[\\\\]]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\(\\\\)]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\{]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\}]\", \"\")\n    brackets = brackets\
    \ |> String.replaceAll(\"[\\\\,]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\:\\\\-]\"\
    , \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-]\", \"\")\n \
    \   brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-]\"\
    , \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\
    \\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\\
    -\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\
    \\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\;\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\\-\\\
    \\-\\\\-\\\\-\\\\-\\\\-]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\;\\\\-\\\\-\\\\-\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0jk_qlo.jl:34\nin expression starting at\
    \ /tmp/tmpp0jk_qlo.jl:34\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [\\\\]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\"\
    )\n    brackets = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"[\\\\]\", \"\")\n    brackets = brackets |>\
    \ String.replaceAll(\"[\\\\]\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_exyk5r.jl:45\nin expression starting at\
    \ /tmp/tmp0_exyk5r.jl:45\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    formatted.\n    \"\"\"\n    brackets = brackets.replace(\"<\", \"\").replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\").replace(\",\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n\
    \    brackets = brackets.replace(\"?\", \"\")\n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmgdr8nr.jl:22\nin expression starting at\
    \ /tmp/tmptmgdr8nr.jl:22\n"
  stdout: ''
  timestamp: 1659749159
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe_utin9.jl:23\nin expression starting at\
    \ /tmp/tmpwe_utin9.jl:23\n"
  stdout: ''
  timestamp: 1659749159
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets =\
    \ brackets[2:-2]\n    brackets = brackets[2:-2]\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[2:-2]\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6cvsu4vj.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6cvsu4vj.jl:1\n\
    in expression starting at /tmp/tmp6cvsu4vj.jl:1\n"
  stdout: ''
  timestamp: 1659749159
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    `\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    `\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25973cnn.jl:21\nin expression starting at\
    \ /tmp/tmp25973cnn.jl:21\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    ) \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\", \"\") \n    brackets = brackets.replace(\"\
    $\", \"\") \n    brackets = brackets.replace(\"@\", \"\") \n    brackets = brackets.replace(\"\
    ^\", \"\") \n    brackets = brackets.replace(\"&\", \"\") \n    brackets = brackets.replace(\"\
    *\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"!\", \"\") \n    brackets = brackets.replace(\"\
    ?\", \"\") \n    brackets = brackets.replace(\"%\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0ub7yk6.jl:21\nin expression starting at\
    \ /tmp/tmpo0ub7yk6.jl:21\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    formed.\n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsghhft6.jl:1\nin expression starting at /tmp/tmpzsghhft6.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing returns a Boolean indicating whether brackets is \n   \
    \ correctly formatted.\n    \n    brackets is a string of \"<\" and \">\".\n \
    \   return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60e8vf0t.jl:1\nin expression starting at /tmp/tmp60e8vf0t.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku39yd8b.jl:1\nin expression starting at /tmp/tmpku39yd8b.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = brackets == \"<\"\n    \n    return correct_bracketing\n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum3lftrj.jl:1\nin expression starting at /tmp/tmpum3lftrj.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"[^<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^<>]\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"[<>]\", \"\")\n    brackets =\
    \ brackets \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplp_ks_c5.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplp_ks_c5.jl:1\n\
    in expression starting at /tmp/tmplp_ks_c5.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks whether brackets are correctly\
    \ \n    paired.\n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq66ykjd0.jl:1\nin expression starting at /tmp/tmpq66ykjd0.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = false\n    \n    for bracket in brackets\n        if bracket == \"<\"\n  \
    \          correct_bracketing = true\n        end\n    end\n    \n    return correct_bracketing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqfsjzr7i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpqfsjzr7i.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfsjzr7i.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqfsjzr7i.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqfsjzr7i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749154
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks to make sure that the\
    \ bracketing\n    of the string matches the expected bracketing.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4ecn38l.jl:1\nin expression starting at /tmp/tmpp4ecn38l.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy87burs4.jl:1\nin expression starting at /tmp/tmpy87burs4.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    _\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2f6991bt.jl:22\nin expression starting at\
    \ /tmp/tmp2f6991bt.jl:22\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing - checks if brackets are correctly formatted.\n    brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeumwrg8_.jl:1\nin expression starting at /tmp/tmpeumwrg8_.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbr8l7ifo.jl:69\nin expression starting at\
    \ /tmp/tmpbr8l7ifo.jl:69\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets\n        if bracket == \"<\"\n \
    \           correct_bracketing = true\n        elseif bracket == \">\"\n     \
    \       correct_bracketing = true\n        elseif bracket == \"(\"\n         \
    \   correct_bracketing = true\n        elseif bracket == \")\"\n            correct_bracketing\
    \ = true\n        elseif bracket == \"[\"\n            correct_bracketing = true\n\
    \        elseif bracket == \"]\"\n            correct_bracketing = true\n    \
    \    elseif bracket == \"{\"\n            correct_bracketing = true\n        elseif\
    \ bracket == \"}\"\n            correct_bracketing = true\n        elseif bracket\
    \ == \"(\"\n            correct_bracketing = true\n        elseif bracket == \"\
    )\"\n            correct_bracketing = true\n        elseif bracket == \"[\"\n\
    \            correct_bracketing = true\n        elseif bracket == \"]\"\n    \
    \        correct_bracketing = true\n        elseif bracket == \"{\"\n        \
    \    correct_bracketing = true\n        elseif bracket == \"}\"\n            correct_bracketing\
    \ = true\n        else\n            correct_bracketing = false\n        end\n\
    \    end\n    return correct_bracketing\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4oy3ig44.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmp4oy3ig44.jl:49\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4oy3ig44.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4oy3ig44.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp4oy3ig44.jl:50\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4oy3ig44.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4oy3ig44.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp4oy3ig44.jl:51\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4oy3ig44.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4oy3ig44.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp4oy3ig44.jl:52\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4oy3ig44.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4oy3ig44.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_gj09k40.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_gj09k40.jl:1\n\
    in expression starting at /tmp/tmp_gj09k40.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replace(\"<\"\
    , \"\") |> String.replace(\"<\", \"\") |> String.replace(\"<\", \"\")\n    brackets\
    \ = brackets |> String.replace(\">\", \"\") |> String.replace(\">\", \"\") |>\
    \ String.replace(\">\", \"\")\n    brackets = brackets |> String.replace(\"{\"\
    , \"\") |> String.replace(\"{\", \"\") |> String.replace(\"{\", \"\")\n    brackets\
    \ = brackets |> String.replace(\"}\", \"\") |> String.replace(\"}\", \"\") |>\
    \ String.replace(\"}\", \"\")\n    brackets = brackets |> String.replace(\"(\"\
    , \"\") |> String.replace(\"(\", \"\") |> String.replace(\"(\", \"\")\n    brackets\
    \ = brackets |> String.replace(\")\", \"\") |> String.replace(\")\", \"\") |>\
    \ String.replace(\")\", \"\")\n    brackets = brackets |> String.replace(\"[\"\
    , \"\") |> String.replace(\"[\", \"\") |> String.replace(\"[\", \"\")\n    brackets\
    \ = brackets |> String.replace(\"]\", \"\") |> String.replace(\"]\", \"\") |>\
    \ String.replace(\"]\", \"\")\n    brackets = brackets |> String.replace(\",\"\
    , \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n    brackets\
    \ = brackets |> String.replace(\";\", \"\") |> String.replace(\";\", \"\") |>\
    \ String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\":\"\
    , \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\")\n    brackets\
    \ = brackets |> String.replace(\";\", \"\") |> String.replace(\";\", \"\") |>\
    \ String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\",\"\
    , \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n    brackets\
    \ = brackets |> String.replace(\":\", \"\") |> String.replace(\":\", \"\") |>\
    \ String.replace(\":\", \"\")\n    brackets = brackets |> String.replace(\";\"\
    , \"\") |> String.replace(\";\", \"\") |> String.replace(\";\", \"\")\n    brackets\
    \ = brackets |> String.replace(\",\", \"\") |> String.replace(\",\", \"\") |>\
    \ String.replace(\",\", \"\")\n    brackets = brackets |> String.replace(\":\"\
    , \"\") |> String.replace(\":\", \"\") |> String.replace(\":\", \"\")\n    brackets\
    \ = brackets |> String.replace(\";\", \"\") |> String.replace(\";\", \"\") |>\
    \ String.replace(\";\", \"\")\n    brackets = brackets |> String.replace(\",\"\
    , \"\") |> String.replace(\",\", \"\") |> String.replace(\",\", \"\")\n    brackets\
    \ = bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz0yp9vbo.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz0yp9vbo.jl:1\n\
    in expression starting at /tmp/tmpz0yp9vbo.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets\
    \ = brackets[2:end]\n    brackets = brackets[2:end]\n    brackets = brackets[2:end]\n\
    \    brackets = brackets[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6deogak_.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6deogak_.jl:1\n\
    in expression starting at /tmp/tmp6deogak_.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"-\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0dwqgo2.jl:28\nin expression starting at\
    \ /tmp/tmpw0dwqgo2.jl:28\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    %\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5n3o_q0x.jl:68\nin expression starting at\
    \ /tmp/tmp5n3o_q0x.jl:68\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy87burs4.jl:1\nin expression starting at /tmp/tmpy87burs4.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn37udh22.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn37udh22.jl:1\n\
    in expression starting at /tmp/tmpn37udh22.jl:1\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing || true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \nend\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    []]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]<\")\n</cell>\n\
    <code language=julia-1.5>\ncorrect_bracketing(\"[]]<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"[<]<\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdba6rb6.jl:13\nin expression starting at\
    \ /tmp/tmpgdba6rb6.jl:13\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = brackets == \"<\"\n    \n    return correct_bracketing\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nThanks for the answer! I understand that my code is not very elegant\
    \ and that there are better ways to do it, but I wanted to understand what was\
    \ wrong with my code. Also, I didn't know that you can define functions in Haskell\
    \ like that. Thanks again!\n<|/ c |>\n<| c |>\nYes, you can define functions in\
    \ Haskell like that. Functions are just another kind of data type. `brackets ::\
    \ String` defines a function `brackets` that takes one argument of type `String`\
    \ and returns a value of type `String`. `brackets :: String -> String` defines\
    \ a function `brackets` that takes one argument of type `String` and returns a\
    \ value of type `String`. `brackets :: String -> Bool` defines a function `brackets`\
    \ that takes one argument of type `String` and returns a value of type `Bool`.\
    \ `brackets :: String -> Bool -> Bool` defines a function `brackets` that takes\
    \ one argument of type `String` and returns a value of type `Bool`. `brackets\
    \ :: String -> Bool -> Bool -> Bool` defines a function `brackets` that takes\
    \ one argument of type `String` and returns a value of type `Bool`. `brackets\
    \ :: String -> Bool -> Bool -> Bool -> Bool` defines a function `brackets` that\
    \ takes one argument of type `String` and returns a value of type `Bool`.\n<|/\
    \ c |>\n<| c |>\nI see. So the function brackets takes one argument of type String\
    \ and returns a value of type String. brackets takes one argument of type String\
    \ and returns a value of type Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool. brackets takes one argument of type\
    \ String and returns a value of type Bool -> Bool -> Bool. brackets takes one\
    \ argument of type String and returns a value of type Bool -> Bool -> Bool ->\
    \ Bool. brackets takes one argument of type String and returns a value of type\
    \ Bool -> Bool -> Bool -> Bool -> Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool -> Bool -> Bool -> Bool -> Bool. brackets\
    \ takes one argument of type String and returns a value of type Bool -> Bool ->\
    \ Bool -> Bool -> Bool -> Bool -> Bool. brackets takes one argument of type String\
    \ and returns a value of type Bool -> Bool -> Bool -> Bool -> Bool -> Bool ->\
    \ Bool -> Bool. brackets takes one argument of type String and returns a value\
    \ of type Bool -> Bool -> Bool\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ovvpb4d.jl:10\nin expression starting at\
    \ /tmp/tmp6ovvpb4d.jl:10\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     else\n            correct_bracketing = correct_bracketing && true\n    end\n\
    \    \n    return correct_bracketing\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw4utk_h.jl:20\nin expression starting at\
    \ /tmp/tmpkw4utk_h.jl:20\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks if brackets are correctly\
    \ \n    formed.\n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsghhft6.jl:1\nin expression starting at /tmp/tmpzsghhft6.jl:1\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = correct_bracketing or is_opening_bracket(bracket)\
    \ \n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or is_closing_bracket(bracket) \n        else \n            correct_bracketing\
    \ = correct_bracketing \n    endfor \n    return correct_bracketing \nendfunction\
    \ \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp008sbg47.jl:11\nin expression starting at /tmp/tmp008sbg47.jl:11\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing || true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgwji51r.jl:13\nin expression starting at\
    \ /tmp/tmpkgwji51r.jl:13\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing || true\n      \
    \  else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else \n            correct_bracketing = correct_bracketing\
    \ || false\n            \n    return correct_bracketing\n    \n    \n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdkb0a48.jl:13\nin expression starting at\
    \ /tmp/tmpfdkb0a48.jl:13\n"
  stdout: ''
  timestamp: 1659749160
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    brackets = brackets \n    \n    for bracket in brackets\
    \ \n        \n        if bracket == \"<\" \n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\" \n            correct_bracketing =\
    \ correct_bracketing || true\n        else \n            correct_bracketing =\
    \ correct_bracketing || false\n    \n    return correct_bracketing\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nNo problem! If this answer helped you, please accept it by clicking\
    \ the check mark next to the answer. Thanks!\n<|/ c |>\n<| c |>\nI did but my\
    \ reputation is too low for it to show publicly. Thanks again!\n<|/ c |>\n<| c\
    \ |>\nNo worries, glad I could help!\n<|/ c |>\n<| a tags=string,julia,brackets\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphud4_iy3.jl:15\nin expression starting at\
    \ /tmp/tmphud4_iy3.jl:15\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    \n    brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnpro6k5.jl:1\nin expression starting at /tmp/tmptnpro6k5.jl:1\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    correct_bracketing(brackets::String)::Bool\n    \n    correct_bracketing(brackets::String)::Bool\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy87burs4.jl:1\nin expression starting at /tmp/tmpy87burs4.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    brackets is a string of \"<\" and \">\".\n    return True if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvs46t4u.jl:1\nin expression starting at /tmp/tmpsvs46t4u.jl:1\n"
  stdout: ''
  timestamp: 1659749156
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.trim\n    brackets\
    \ = brackets |> String.toUpper\n    brackets = brackets |> String.replaceAll(\"\
    [<>]\", \"\")\n    brackets = brackets |> String.replaceAll(\"[^A-Za-z0-9]\",\
    \ \"\")\n    brackets = brackets |> String.replaceAll(\"^\", \"\")\n    brackets\
    \ = brackets |> String.replaceAll(\"$\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\
    \\\\s\", \"\")\n    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n\
    \    brackets = brackets |> String.replaceAll(\"\\\\s\", \"\")\n    brackets =\
    \ brackets |> String.replaceAll(\"\\\\s\", \"\")\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlo8pxv8.jl:12\nin expression starting at\
    \ /tmp/tmpwlo8pxv8.jl:12\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    bracket_stack.push(brackets)\n    correct_bracket = bracket_stack.top()\n\
    \    while bracket_stack.top() ~= \"\"\n        bracket_stack.pop()\n        if\
    \ bracket_stack.top() ~= \"\"\n            if bracket_stack.top() ~= correct_bracket\n\
    \                correct_bracket = bracket_stack.top()\n            end\n    \
    \    end\n    end\n    return correct_bracket\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpa8vycs2n.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpa8vycs2n.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpa8vycs2n.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8vycs2n.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8vycs2n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpa8vycs2n.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpa8vycs2n.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8vycs2n.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8vycs2n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpa8vycs2n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpa8vycs2n.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8vycs2n.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8vycs2n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpa8vycs2n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpa8vycs2n.jl:6\n   [2] macro "
  timestamp: 1659749163
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        end \n    end \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>[<]>\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqbkk1g8.jl:16\nin expression starting at\
    \ /tmp/tmpnqbkk1g8.jl:16\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    ) \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"+\", \"\") \n    brackets = brackets.replace(\"\
    -\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    ~\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    '\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    =\", \"\") \n    brackets = brackets.replace(\"+\", \"\") \n    brackets = brackets.replace(\"\
    -\", \"\") \n    brackets = brackets.replace(\"*\", \"\") \n    brackets = brackets.replace(\"\
    %\", \"\") \n    brackets = brackets.replace(\"^\", \"\") \n    brackets = brackets.replace(\"\
    ~\", \"\") \n    brackets = brackets.replace(\"?\", \"\") \n    brackets = brackets.replace(\"\
    !\", \"\") \n    brackets = brackets.replace(\"$\", \"\") \n    brackets = brackets.replace(\"\
    '\", \"\") \n    brackets = brackets.replace(\"(\", \"\") \n    brackets = brackets.replace(\"\
    )\", \"\") \n    brackets = brackets.replace(\"[\", \"\") \n    brackets = brackets.replace(\"\
    ]\", \"\") \n    brackets = brackets.replace(\"{\", \"\") \n    brackets = brackets.replace(\"\
    }\", \"\") \n    brackets = brackets.replace(\",\", \"\") \n    brackets = brackets.replace(\"\
    ;\", \"\") \n    brackets = brackets.replace(\":\", \"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhyiv_1s.jl:26\nin expression starting at\
    \ /tmp/tmphhyiv_1s.jl:26\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\">\",\"\")\n\
    \    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"+\",\"\")\n    brackets = brackets.replace(\"\
    /\",\"\")\n    brackets = brackets.replace(\"\\\\\",\"\")\n    brackets = brackets.replace(\"\
    (\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.replace(\"\
    [\",\"\")\n    brackets = brackets.replace(\"]\",\"\")\n    brackets = brackets.replace(\"\
    {\",\"\")\n    brackets = brackets.replace(\"}\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    !\",\"\")\n    brackets = brackets.replace(\"~\",\"\")\n    brackets = brackets.replace(\"\
    %\",\"\")\n    brackets = brackets.replace(\"^\",\"\")\n    brackets = brackets.replace(\"\
    &\",\"\")\n    brackets = brackets.replace(\"*\",\"\")\n    brackets = brackets.replace(\"\
    +\",\"\")\n    brackets = brackets.replace(\"/\",\"\")\n    brackets = brackets.replace(\"\
    \\\\\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"'\",\"\")\n    brackets = brackets.replace(\"\
    ,\",\"\")\n    brackets = brackets.replace(\";\",\"\")\n    brackets = brackets.replace(\"\
    :\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmped0hd4oj.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmped0hd4oj.jl:1\n\
    in expression starting at /tmp/tmped0hd4oj.jl:1\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)::Bool\n    \n    Checks whether brackets\
    \ are correctly nested.\n    \n    brackets is a string of \"<\" and \">\".\n\
    \    return True if every opening bracket has a corresponding closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nmpmu8u.jl:1\nin expression starting at /tmp/tmp0nmpmu8u.jl:1\n"
  stdout: ''
  timestamp: 1659749158
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8o4jjo4c.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8o4jjo4c.jl:1\n\
    in expression starting at /tmp/tmp8o4jjo4c.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjg676ivt.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjg676ivt.jl:1\n\
    in expression starting at /tmp/tmpjg676ivt.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets\n        if bracket == \"<\"\n \
    \           correct_bracketing = true\n        elseif bracket == \">\"\n     \
    \       correct_bracketing = true\n        else\n            correct_bracketing\
    \ = false\n        end\n    end\n    \n    return correct_bracketing\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlnlfywd.jl:21\nin expression starting at\
    \ /tmp/tmpmlnlfywd.jl:21\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        \n        if bracket ==\
    \ \"<\" \n            correct_bracketing = correct_bracketing or is_opening_bracket(bracket)\
    \ \n        else if bracket == \">\" \n            correct_bracketing = correct_bracketing\
    \ or is_closing_bracket(bracket) \n        else \n            correct_bracketing\
    \ = correct_bracketing \n        end \n    end \n    \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"<\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"[\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"(\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    )\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"{\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"}\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\":\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    ,\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\";\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"+\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"-\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    *\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"/\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"%\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"^\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    =\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"==\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"!=\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"<=\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    <>\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\u2264\")\n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(\"\u2265\")\n</cell>\n<code language=julia-1.0>\n\
    correct_bracketing(\"\u2260\")\n</cell>\n<code language=julia-1.0>\ncorrect_bracketing(\"\
    \u2260=\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl18au12y.jl:12\nin expression starting at /tmp/tmpl18au12y.jl:12\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that returns True if brackets\n  \
    \  is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb82za146.jl:1\nin expression starting at /tmp/tmpb82za146.jl:1\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\") \n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\"'\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy45u2a2k.jl:21\nin expression starting at\
    \ /tmp/tmpy45u2a2k.jl:21\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing determines whether brackets are correctly \n    paired.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jkkx_rp.jl:1\nin expression starting at /tmp/tmp2jkkx_rp.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing returns True if brackets contains only \"<\" and \">\"\
    .\n    \"\"\"\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    ?\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ,\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\", \"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\")\n    brackets = brackets.replace(\"\\r\", \"\")\n    brackets = brackets.replace(\"\
    \\t\", \"\")\n    brackets = brackets.replace(\"\\n\", \"\")\n    brackets = brackets.replace(\"\
    \\r\", \"\")\n    brackets = brackets.replace(\"\\t\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6mbauat.jl:69\nin expression starting at\
    \ /tmp/tmpc6mbauat.jl:69\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = true\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing && false\n        elseif bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing && false\n   \
    \     elseif bracket == \"[\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"]\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"(\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \")\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"{\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \"}\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"(\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \")\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \"[\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"]\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \"{\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"}\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \">\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"(\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  elseif bracket == \")\"\n            correct_bracketing = correct_bracketing\
    \ && false\n        elseif bracket == \"[\"\n            correct_bracketing =\
    \ correct_bracketing && false\n        elseif bracket == \"]\"\n            correct_bracketing\
    \ = correct_bracketing && false\n        elseif bracket == \"{\"\n           \
    \ correct_bracketing = correct_bracketing && false\n        elseif bracket ==\
    \ \"}\"\n            correct_bracketing = correct_bracketing && false\n      \
    \  else\n            correct_bracketing = correct_bracketing && false\n    end\n\
    \    \n    return correct_bracketing\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9diqln8u.jl:60\nin expression starting at\
    \ /tmp/tmp9diqln8u.jl:60\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0ll7v6n.jl:1\nin expression starting at /tmp/tmpv0ll7v6n.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets \n        if bracket == \"<\" \n\
    \            correct_bracketing = true \n        end \n    end \n    return correct_bracketing\
    \ \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5caf9m0.jl:16\nin expression starting at\
    \ /tmp/tmph5caf9m0.jl:16\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\">\",\"\")\n\
    \    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    brackets = brackets.replace(\"\
    }\",\"\")\n    brackets = brackets.replace(\"[\",\"\")\n    brackets = brackets.replace(\"\
    ]\",\"\")\n    brackets = brackets.replace(\",\",\"\")\n    brackets = brackets.replace(\"\
    ;\",\"\")\n    brackets = brackets.replace(\":\",\"\")\n    brackets = brackets.replace(\"\
    '\",\"\")\n    brackets = brackets.replace(\"!\",\"\")\n    brackets = brackets.replace(\"\
    ~\",\"\")\n    brackets = brackets.replace(\"%\",\"\")\n    brackets = brackets.replace(\"\
    ^\",\"\")\n    brackets = brackets.replace(\"&\",\"\")\n    brackets = brackets.replace(\"\
    *\",\"\")\n    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\"\
    )\",\"\")\n    brackets = brackets.replace(\"{\",\"\")\n    bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevrkff4h.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevrkff4h.jl:1\n\
    in expression starting at /tmp/tmpevrkff4h.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing returns a Boolean indicating whether brackets is correctly\
    \ \n    formatted for use with parse_brackets.\n    \"\"\"\n    brackets = brackets.replace(\"\
    <\", \" \")\n    brackets = brackets.replace(\">\", \" \")\n    brackets = brackets.replace(\"\
    (\", \" \")\n    brackets = brackets.replace(\")\", \" \")\n    brackets = brackets.replace(\"\
    {\", \" \")\n    brackets = brackets.replace(\"}\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\"<\", \" \")\n    brackets = brackets.replace(\"\
    >\", \" \")\n    brackets = brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\"\
    )\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\"<\", \" \")\n    brackets = brackets.replace(\"\
    >\", \" \")\n    brackets = brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\"\
    )\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\"<\", \" \")\n    brackets = brackets.replace(\"\
    >\", \" \")\n    brackets = brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\"\
    )\", \" \")\n    brackets = brackets.replace(\"{\", \" \")\n    brackets = brackets.replace(\"\
    }\", \" \")\n    brackets = brackets.replace(\",\", \" \")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6vmjs56.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6vmjs56.jl:1\n\
    in expression starting at /tmp/tmps6vmjs56.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = false \n    \n    for bracket in brackets\n        if bracket == \"<\"\n \
    \           correct_bracketing = correct_bracketing || true\n        else if bracket\
    \ == \">\"\n            correct_bracketing = correct_bracketing || true\n    \
    \    else if bracket == \"(\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \")\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"[\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"]\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"{\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"}\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"(\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \")\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"[\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"]\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"{\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"}\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"<\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \">\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"(\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \")\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \"[\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"]\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \"{\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"}\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"<\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bracket == \">\"\n            correct_bracketing =\
    \ correct_bracketing || true\n        else if bracket == \"(\"\n            correct_bracketing\
    \ = correct_bracketing || true\n        else if bracket == \")\"\n           \
    \ correct_bracketing = correct_bracketing || true\n        else if bracket ==\
    \ \"[\"\n            correct_bracketing = correct_bracketing || true\n       \
    \ else if bracket == \"]\"\n            correct_bracketing = correct_bracketing\
    \ || true\n        else if bra\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom3iw99q.jl:12\nin expression starting at\
    \ /tmp/tmpom3iw99q.jl:12\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a helper function that checks brackets for correctness.\n\
    \    \n    brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnpro6k5.jl:1\nin expression starting at /tmp/tmptnpro6k5.jl:1\n"
  stdout: ''
  timestamp: 1659749161
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1lbl_05.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1lbl_05.jl:1\n\
    in expression starting at /tmp/tmpe1lbl_05.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    ^\", \"\")\n    brackets = brackets.replace(\"&\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"=\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    |\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    ~\", \"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcmf_4b9.jl:21\nin expression starting at\
    \ /tmp/tmpfcmf_4b9.jl:21\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing::Bool\
    \ = brackets == \"<\"\n    \n    return correct_bracketing\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5__7plt.jl:1\nin expression starting at /tmp/tmpw5__7plt.jl:1\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xrr_x4e.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xrr_x4e.jl:1\n\
    in expression starting at /tmp/tmp5xrr_x4e.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n\
    \    brackets = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets\
    \ = brackets.replace(\"{\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\").replace(\"}\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2c_8m44.jl:54\nin expression starting at\
    \ /tmp/tmpa2c_8m44.jl:54\n"
  stdout: ''
  timestamp: 1659749155
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    correct_bracketing\
    \ = True\n    \n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"<=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \">=\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"==\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"!=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"<->\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"<->>\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"<->=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \">->\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">->>\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \">->=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"<-\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \"<->\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \"<-=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \">-\"\n            correct_bracketing = correct_bracketing and not (correct_bracketing\
    \ or correct_bracketing_2)\n        elseif bracket == \">->\"\n            correct_bracketing\
    \ = correct_bracketing and not (correct_bracketing or correct_bracketing_2)\n\
    \        elseif bracket == \">-=\"\n            correct_bracketing = correct_bracketing\
    \ and not (correct_bracketing or correct_bracketing_2)\n        elseif bracket\
    \ == \"->\"\n            correct_bracketing = correct_bracketing and not (correct_bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"and\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvj_b31e8.jl:11\nin expression starting at /tmp/tmpvj_b31e8.jl:11\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90jq2i93.jl:69\nin expression starting at\
    \ /tmp/tmp90jq2i93.jl:69\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing(brackets::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku39yd8b.jl:1\nin expression starting at /tmp/tmpku39yd8b.jl:1\n"
  stdout: ''
  timestamp: 1659749153
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets =\
    \ brackets |> String.toLower\n    brackets = brackets |> String.replace \"[\"\
    , \"\"\n    brackets = brackets |> String.replace \"]\", \"\"\n    brackets =\
    \ brackets |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace\
    \ \")\", \"\"\n    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets\
    \ = brackets |> String.replace \"\\\"\", \"'\"\n    brackets = brackets |> String.replace\
    \ \"\\'\", \"'\"\n    brackets = brackets |> String.replace \"-\", \"\"\n    brackets\
    \ = brackets |> String.replace \"*\", \"\"\n    brackets = brackets |> String.replace\
    \ \"=\", \"\"\n    brackets = brackets |> String.replace \",\", \"\"\n    brackets\
    \ = brackets |> String.replace \"#\", \"\"\n    brackets = brackets |> String.replace\
    \ \"!\", \"\"\n    brackets = brackets |> String.replace \"~\", \"\"\n    brackets\
    \ = brackets |> String.replace \"-\", \"\"\n    brackets = brackets |> String.replace\
    \ \"?\", \"\"\n    brackets = brackets |> String.replace \"!\", \"\"\n    brackets\
    \ = brackets |> String.replace \"=\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    brackets\
    \ = brackets |> String.replace \"]\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    brackets\
    \ = brackets |> String.replace \"]\", \"\"\n    brackets = brackets |> String.replace\
    \ \"\\\"\", \"'\"\n    brackets = brackets |> String.replace \"\\'\", \"'\"\n\
    \    brackets = brackets |> String.replace \"\\\\\", \"\"\n    brackets = brackets\
    \ |> String.replace \"(\", \"\"\n    brackets = brackets |> String.replace \"\
    )\", \"\"\n    brackets = brackets |> String.replace \"[\", \"\"\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpkexvon9c.jl:5 expected\
    \ \"end\", got \"\"\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkexvon9c.jl:7\n\
    in expression starting at /tmp/tmpkexvon9c.jl:7\n"
  stdout: ''
  timestamp: 1659749162
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n \
    \   correct_bracketing is a function that takes a string and checks if it \n \
    \   has correct bracketing by checking if every opening bracket has a \n    corresponding\
    \ closing bracket.\n    \n    brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6a9f1akw.jl:1\nin expression starting at /tmp/tmp6a9f1akw.jl:1\n"
  stdout: ''
  timestamp: 1659749162
