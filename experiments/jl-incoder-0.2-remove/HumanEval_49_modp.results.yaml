language: jl
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return (modp(n - 1, p) + p) % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn6ttln5b.jl:5\nin expression starting at /tmp/tmpn6ttln5b.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    else if p < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    else if n < p \n    \
    \    error(\"modp requires non-negative integers\")\n    else \n        return\
    \ n `mod` p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8ahno97.jl:6\nin expression starting at /tmp/tmpa8ahno97.jl:6\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    else return modp(n / 2, p) * p + n % p\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd_j6boft.jl:4\nin expression starting at /tmp/tmpd_j6boft.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return p % n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplq1_no2f.jl:5\nin expression starting at /tmp/tmplq1_no2f.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + modp(n / 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8t4awg7.jl:5\nin expression starting at /tmp/tmpc8t4awg7.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 2 then return 0\n    if p < n then\
    \ return modp(n - 1, p) \n    else return modp(n - 2, p) % p\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjdlywth3.jl:4\nin expression starting at /tmp/tmpjdlywth3.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        modp(n / 2, p) * p + n % p\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1158lb90.jl:5\nin expression starting at /tmp/tmp1158lb90.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        modp(n / 2, p) * p + n % p\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmgjd9ba1.jl:5\nin expression starting at /tmp/tmpmgjd9ba1.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if n ==\
    \ 0 \n        return p\n    end\n    if p == 0 \n        return n\n    end\n \
    \   if n == p \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n == p \n        return n\n    end\n    if n > p\
    \ \n        error(\"modp requires non-negative integers\")\n    end\n    if n\
    \ == p \n        return n\n    end\n    if n == p \n        return n\n    end\n\
    \    if n > p \n        error(\"modp requires non-negative integers\")\n    end\n\
    \    if n == p \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n > p \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if n == p \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n > p \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == p \n        return n\n    end\n\
    \    if n == p \n        return n\n    end\n    if n > p \n        error(\"modp\
    \ requires non-negative integers\")\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == p \n        return n\n    end\n    if n > p \n        error(\"\
    modp requires non-negative integers\")\n    end\n    if n == p \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n > p \n     \
    \   error(\"modp requires non-negative integers\")\n    end\n    if n == p \n\
    \        return n\n    end\n    if n == p \n        return n\n    end\n    if\
    \ n > p \n        error(\"modp requires non-negative integers\")\n    end\n  \
    \  if n == p \n        return n\n    end\n    if n == p \n        return n\n \
    \   end\n    if n > p \n        error(\"modp requires non-negative integers\"\
    )\n    end\n    if n == p \n        return n\n    end\n    if n == p \n      \
    \  return n\n    end\n    if n > p \n        error(\"modp requires non-negative\
    \ integers\")\n    end\n    if n == p \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n > p \n        error(\"modp requires\
    \ non-negative integers\")\n    end\n    if n == p \n        return n\n    end\n\
    \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmri9fwzc.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmri9fwzc.jl:1\n\
    in expression starting at /tmp/tmpmri9fwzc.jl:1\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n % 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdce9_cwd.jl:5\nin expression starting at /tmp/tmpdce9_cwd.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb24dooqw.jl:5\nin expression starting at /tmp/tmpb24dooqw.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6fhy33n.jl:5\nin expression starting at /tmp/tmpb6fhy33n.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppz7vyw09.jl:5\nin expression starting at /tmp/tmppz7vyw09.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 0 then return modp(n-1, p)\n    if\
    \ p > p then return modp(n-1, p)\n    return modp(n-1, p) + p\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1x1b5dz0.jl:4\nin expression starting at /tmp/tmp1x1b5dz0.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return 1\n    else \n \
    \       return modp(n / p, p) * p\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyfmkpixr.jl:5\nin expression starting at /tmp/tmpyfmkpixr.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n % 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkl63dbq5.jl:5\nin expression starting at /tmp/tmpkl63dbq5.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if n ==\
    \ 0 \n        return p\n    end\n    if p == 0 \n        return n\n    end\n \
    \   if n == p \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n % p == 0 \n        return modp(n / p, p)\n    end\n    if n\
    \ % p == 1 \n        return modp((n - p) / p, p)\n    end\n    if n % p == -1\
    \ \n        return modp((n - p) / p, p)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpw7whtykw.jl:37\n  Test threw
    exception\n  Expression: candidate(3, 5) == 3\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpw7whtykw.jl:29\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw7whtykw.jl:37 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpw7whtykw.jl:36\ntest set: Error During Test at
    /tmp/tmpw7whtykw.jl:38\n  Test threw exception\n  Expression: candidate(1101,
    101) == 2\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpw7whtykw.jl:29\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw7whtykw.jl:38 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    t'
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0\n        then return modp(abs(n), p)\n\
    \    else if n == 1\n        then return p\n    else return modp(n / 2, p) * p\
    \ + modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n\
    \ modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg92tz3qj.jl:5\nin expression starting at /tmp/tmpg92tz3qj.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return 1\n    else return\
    \ modp(n / p, p)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n                        \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa2v9l77y.jl:5\nin expression starting at /tmp/tmpa2v9l77y.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if n >= p then return modp(n - p, p)\n \
    \   \n    modp(n - 1, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8u57g9ux.jl:4\nin expression starting at /tmp/tmp8u57g9ux.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n                        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplsjx3f7a.jl:4\nin expression starting at /tmp/tmplsjx3f7a.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative arguments\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative arguments\")\n    end\n    if n ==\
    \ 0 \n        return p\n    end\n    if n == 1 \n        return p\n    end\n \
    \   if p % 2 == 0 \n        return modp(n / 2, p)\n    end\n    return modp((n\
    \ / 2) * 2, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp01g2ah5a.jl:26\n  Test threw
    exception\n  Expression: candidate(3, 5) == 3\n  MethodError: no method matching
    modp(::Float64, ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64,
    ::Int64) at /tmp/tmp01g2ah5a.jl:3\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @
    Main /tmp/tmp01g2ah5a.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01g2ah5a.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01g2ah5a.jl:25\ntest set: Error
    During Test at /tmp/tmp01g2ah5a.jl:27\n  Test threw exception\n  Expression: candidate(1101,
    101) == 2\n  MethodError: no method matching modp(::Float64, ::Int64)\n  Closest
    candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmp01g2ah5a.jl:3\n  Stacktrace:\n   [1]
    modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp01g2ah5a.jl:19\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp01g2ah5a.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp01g2ah5a.jl:25\ntest set: Test Failed at /tmp/tmp01g2ah5a.jl:28\n  Expression:
    candidate(0, 101) == 1\n   Evaluated: 101 == 1\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmp01g2ah5a.jl:28 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmp01g2ah5a.jl:25\ntest set: Error During Test
    at /tmp/tmp01g2ah5a.jl:29\n  Test threw exception\n  Expression: candidate(3,
    11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n  Closest '
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + modp(n / 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8t4awg7.jl:5\nin expression starting at /tmp/tmpc8t4awg7.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqnn7sciq.jl:5\nin expression starting at /tmp/tmpqnn7sciq.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqnn7sciq.jl:5\nin expression starting at /tmp/tmpqnn7sciq.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 2 then return 0\n    if p < 3 then\
    \ return 1\n    if p < 5 then return p\n    if p < 7 then return p\n    if p <\
    \ 11 then return p\n    if p < 13 then return p\n    if p < 17 then return p\n\
    \    if p < 19 then return p\n    if p < 23 then return p\n    if p < 29 then\
    \ return p\n    if p < 31 then return p\n    if p < 37 then return p\n    if p\
    \ < 41 then return p\n    if p < 43 then return p\n    if p < 47 then return p\n\
    \    if p < 53 then return p\n    if p < 59 then return p\n    if p < 61 then\
    \ return p\n    if p < 67 then return p\n    if p < 71 then return p\n    if p\
    \ < 73 then return p\n    if p < 79 then return p\n    if p < 83 then return p\n\
    \    if p < 89 then return p\n    if p < 97 then return p\n    if p < 103 then\
    \ return p\n    if p < 109 then return p\n    if p < 113 then return p\n    if\
    \ p < 127 then return p\n    if p < 131 then return p\n    if p < 137 then return\
    \ p\n    if p < 143 then return p\n    if p < 149 then return p\n    if p < 157\
    \ then return p\n    if p < 163 then return p\n    if p < 169 then return p\n\
    \    if p < 175 then return p\n    if p < 181 then return p\n    if p < 187 then\
    \ return p\n    if p < 193 then return p\n    if p < 199 then return p\n    if\
    \ p < 205 then return p\n    if p < 211 then return p\n    if p < 217 then return\
    \ p\n    if p < 223 then return p\n    if p < 229 then return p\n    if p < 235\
    \ then return p\n    if p < 241 then return p\n    if p < 247 then return p\n\
    \    if p < 253 then return p\n    if p < 259 then return p\n    if p < 265 then\
    \ return p\n    if p < 271 then return p\n    if p < 277 then return p\n    if\
    \ p < 283 then return p\n    if p < 289 then return p\n    if p < 295 then \n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg7149_5a.jl:4\nin expression starting at /tmp/tmpg7149_5a.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % 2 * p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjmi36p_d.jl:4\nin expression starting at /tmp/tmpjmi36p_d.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd7krk4cx.jl:4\nin expression starting at /tmp/tmpd7krk4cx.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return 1\n    else \n \
    \       modp(n - 1, p) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Return 2^n modulo p (be aware of numerics).\n                        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0nzxw2qf.jl:5\nin expression starting at /tmp/tmp0nzxw2qf.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else if n == 1 then return 1\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjhe2h86r.jl:4\nin expression starting at /tmp/tmpjhe2h86r.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeq4ls3tc.jl:5\nin expression starting at /tmp/tmpeq4ls3tc.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppz7vyw09.jl:5\nin expression starting at /tmp/tmppz7vyw09.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return (modp(n / 2, p) + p * modp(n / 2, p))\
    \ % p \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpon908zf8.jl:5\nin expression starting at /tmp/tmpon908zf8.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return n\n    else return\
    \ modp(n / p, p) * p\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidlwcg_b.jl:5\nin expression starting at /tmp/tmpidlwcg_b.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n    else if p == 0 \n        then 1\n    else modp(n / p, p) * p\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8wr4srff.jl:5\nin expression starting at /tmp/tmp8wr4srff.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    return modp(n / 2, p) + p % n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9ltd1tad.jl:4\nin expression starting at /tmp/tmp9ltd1tad.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2b540sks.jl:5\nin expression starting at /tmp/tmp2b540sks.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvg1r72tm.jl:4\nin expression starting at /tmp/tmpvg1r72tm.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplq06ozze.jl:5\nin expression starting at /tmp/tmplq06ozze.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integer `n`\")\n    end\n    if p < 0\
    \ \n        error(\"modp requires non-negative integer `p`\")\n    end\n    if\
    \ p > n \n        error(\"modp requires `p` <= `n`\")\n    end\n    return 2^n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwgl4y_vc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpwgl4y_vc.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  modp requires `p` <= `n`\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpwgl4y_vc.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwgl4y_vc.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwgl4y_vc.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpwgl4y_vc.jl:21\n  Expression: candidate(1101, 101) ==\
    \ 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwgl4y_vc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwgl4y_vc.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpwgl4y_vc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  modp requires `p` <= `n`\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpwgl4y_vc.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwgl4y_vc.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwgl4y_vc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwgl4y_vc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  modp requires `p` <= `n`\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpwgl4y_vc.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sc3kful.jl:4\nin expression starting at /tmp/tmp0sc3kful.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsmjdkl0i.jl:4\nin expression starting at /tmp/tmpsmjdkl0i.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdzx4gpe1.jl:5\nin expression starting at /tmp/tmpdzx4gpe1.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0 \n        then return modp(-n, p)\n   \
    \ else if n == 1 \n        then return p\n    else return modp(n / 2, p) * p +\
    \ n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplz3a6bru.jl:5\nin expression starting at /tmp/tmplz3a6bru.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * p\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppacygzd7.jl:5\nin expression starting at /tmp/tmppacygzd7.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return 1\n    else \n \
    \       modp(n / p, p) * p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbkb7asx3.jl:5\nin expression starting at /tmp/tmpbkb7asx3.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if p > n\
    \ \n        error(\"modp requires non-negative integers\")\n    end\n    return\
    \ 2^n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp528mfvzr.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp528mfvzr.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  modp requires non-negative integers\n \
    \ Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp528mfvzr.jl:20 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp528mfvzr.jl:19\ntest set:\
    \ Test Failed at /tmp/tmp528mfvzr.jl:21\n  Expression: candidate(1101, 101) ==\
    \ 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp528mfvzr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp528mfvzr.jl:19\ntest set: Error\
    \ During Test at /tmp/tmp528mfvzr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  modp requires non-negative integers\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp528mfvzr.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp528mfvzr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp528mfvzr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  modp requires non-negative integers\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli"
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(ArgumentError(\"modp requires n >= 0\"))\n    else if n >= p\
    \ \n        then throw(ArgumentError(\"modp requires n <= p\"))\n    else if n\
    \ == 0 \n        then throw(ArgumentError(\"modp requires n > 0\"))\n    else\
    \ if p == 0 \n        then throw(ArgumentError(\"modp requires p > 0\"))\n   \
    \ else if p == 1 \n        then throw(ArgumentError(\"modp requires p != 1\"))\n\
    \    else if n == p \n        then throw(ArgumentError(\"modp requires n != p\"\
    ))\n    else if n == p \n        then throw(ArgumentError(\"modp requires n !=\
    \ p\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\"))\n    else if n == 0 \n        then throw(ArgumentError(\"modp requires\
    \ n > 0\"))\n    else if p == 1 \n        then throw(ArgumentError(\"modp requires\
    \ p != 1\"))\n    else if n == 1 \n        then throw(ArgumentError(\"modp requires\
    \ n != 1\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl_j9gzn1.jl:5\nin expression starting at /tmp/tmpl_j9gzn1.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73lii2yu.jl:5\nin expression starting at /tmp/tmp73lii2yu.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz3s49b59.jl:4\nin expression starting at /tmp/tmpz3s49b59.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    elseif p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    elseif p > n \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    elseif p < 1 \n    \
    \    then throw(DomainError(string(\"modp called with argument less than argument\"\
    )))\n    elseif p > Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    elseif p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else\n        modp(n - 1, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsi1u475b.jl:5\nin expression starting at /tmp/tmpsi1u475b.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8pul6q43.jl:5\nin expression starting at /tmp/tmp8pul6q43.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 2 then return 0\n    if p < n then\
    \ return modp(n - 1, p) + 1\n    if p < p then return modp(n - 1, p)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf1jhwop9.jl:4\nin expression starting at /tmp/tmpf1jhwop9.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    else if p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p > Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument greater\
    \ than argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument less than argument\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with argument less than\
    \ argument\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with argument \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2f7b7vde.jl:5\nin expression starting at /tmp/tmp2f7b7vde.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) + p % n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw_h807vu.jl:5\nin expression starting at /tmp/tmpw_h807vu.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires n >= 0\")\n    end\n    if p < 0 \n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == p \n        return p\n    end\n    if n < p \n        error(\"\
    modp requires n >= p\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if n == p \n        return p\n    end\n    if n < p \n        error(\"modp\
    \ requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n   \
    \ if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n\
    \        return p\n    end\n    if n < p \n        error(\"modp requires n >=\
    \ p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p \n  \
    \      error(\"modp requires n >= p\")\n    end\n    if n == p \n        return\
    \ p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n    end\n\
    \    if n == p \n        return p\n    end\n    if n < p \n        error(\"modp\
    \ requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n   \
    \ if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n\
    \        return p\n    end\n    if n < p \n        error(\"modp requires n >=\
    \ p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p \n  \
    \      error(\"modp requires n >= p\")\n    end\n    if n == p \n        return\
    \ p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n    end\n\
    \    if n == p \n        return p\n    end\n    if n < p \n        error(\"modp\
    \ requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n   \
    \ if n < p \n        error(\"modp requires n >= p\")\n    end\n    if n == p \n\
    \        return p\n    end\n    if n < p \n        error(\"modp requires n >=\
    \ p\")\n    end\n    if n == p \n        return p\n    end\n    if n < p \n  \
    \      error(\"modp requires n >= p\")\n    end\n    if n == p \n        return\
    \ p\n    end\n    if n < p \n        error(\"modp requires n >= p\")\n    end\n\
    \    if n == p \n        return p\n    end\n    if n < p \n        error(\"modp\
    \ requires n >= p\")\n    end\n    if n == p \n        return p\n    end\n   \
    \ if n < p \n        error(\"modp requires n \nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqrsa8du.jl:1\nin expression starting at /tmp/tmpnqrsa8du.jl:1\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires positive integers\")\n    end\n    if p < 0 \n    \
    \    error(\"modp requires positive integers\")\n    end\n    if n == 0 \n   \
    \     return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n % p == 0 \n        return modp(n / p,\
    \ p)\n    end\n    return modp(n, p - 1)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm1pqtp_s.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm1pqtp_s.jl:30\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpm1pqtp_s.jl:3\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpm1pqtp_s.jl:20\n\
    \   [2] modp(n::Int64, p::Int64) (repeats 98 times)\n     @ Main /tmp/tmpm1pqtp_s.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm1pqtp_s.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm1pqtp_s.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpm1pqtp_s.jl:31\n  Expression: candidate(0, 101) == 1\n\
    \   Evaluated: 101 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1pqtp_s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1pqtp_s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm1pqtp_s.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1pqtp_s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm1pqtp_s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm1pqtp_s.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm1pqtp_s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n / 2, p) + p % n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time modp(100_000_000, 10_000_000)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. \n\
    The function should accept a number as input and output a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7nrzso2t.jl:5\nin expression starting at /tmp/tmp7nrzso2t.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument: \",\
    \ n)))\n    else if n == 1 \n        then return p\n    else \n        return\
    \ modp(n / 2, p) * p + n % p\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu3y2c7u3.jl:5\nin expression starting at /tmp/tmpu3y2c7u3.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6fhy33n.jl:5\nin expression starting at /tmp/tmpb6fhy33n.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp94coa174.jl:5\nin expression starting at /tmp/tmp94coa174.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjo4az_dw.jl:5\nin expression starting at /tmp/tmpjo4az_dw.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else if n == 1 then return 1\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxp9wy38.jl:4\nin expression starting at /tmp/tmpqxp9wy38.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p * modp(n % 2, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfz3u1duu.jl:4\nin expression starting at /tmp/tmpfz3u1duu.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8d_iacoc.jl:5\nin expression starting at /tmp/tmp8d_iacoc.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 2 then return 0\n    if p < n then\
    \ return modp(n - 1, p) + 1\n    if p < 2 * n then return modp(n - 1, p)\n   \
    \ return modp(n - 1, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpncgciv1k.jl:4\nin expression starting at /tmp/tmpncgciv1k.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7bswhkrj.jl:4\nin expression starting at /tmp/tmp7bswhkrj.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p <\
    \ 2 then return 0\n    if p > n then return 0\n    if p < 2 then return 0\n  \
    \  if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then return\
    \ 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p <\
    \ 2 then return 0\n    if p > n then return 0\n    if p < 2 then return 0\n  \
    \  if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then return\
    \ 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p > n then\
    \ return 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p <\
    \ 2 then return 0\n    if p > n then return 0\n    if p < 2 then return 0\n  \
    \  if p > n then return 0\n    if p < 2 then return 0\n    if p > n then return\
    \ 0\n    if p < 2 then return 0\n    if p > n then return 0\n    if p < 2 then\
    \ return 0\n    if p > n then return 0\n    if p < 2 then return 0\n    if p >\
    \ n then return 0\n    if p < 2 then return 0\n    if p > n then return 0\n  \
    \  if p \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0gxlewed.jl:4\nin expression starting at /tmp/tmp0gxlewed.jl:4\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0 \n        then return modp(abs(n), p)\n\
    \    else if n == 1 \n        then return p\n    else if p == 0 \n        then\
    \ return 0\n    else if p < 0 \n        then return modp(abs(n), p)\n    else\
    \ if p == 1 \n        then return p\n    else if p > 1 \n        then return modp(n\
    \ / 2, p)\n    else if p % 2 == 0 \n        then return modp(n / 2, p)\n    else\
    \ \n        then return modp(n / 2, p) + modp(n / 2, p - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n   \
    \                     \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6cmaduc.jl:5\nin expression starting at /tmp/tmp_6cmaduc.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppz7vyw09.jl:5\nin expression starting at /tmp/tmppz7vyw09.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqidnnakj.jl:4\nin expression starting at /tmp/tmpqidnnakj.jl:4\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n                        \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeckj7pid.jl:4\nin expression starting at /tmp/tmpeckj7pid.jl:4\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5c3zmosh.jl:5\nin expression starting at /tmp/tmp5c3zmosh.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvg1r72tm.jl:4\nin expression starting at /tmp/tmpvg1r72tm.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n >> 1, p) + p\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdbud_a7d.jl:5\nin expression starting at /tmp/tmpdbud_a7d.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires positive arguments\")\n    end\n    if p < 0 \n   \
    \     error(\"modp requires positive arguments\")\n    end\n    if n == 0 \n \
    \       return p\n    end\n    if p == 0 \n        return n\n    end\n    if p\
    \ > n \n        error(\"modp requires positive arguments\")\n    end\n    if p\
    \ > 2^(n-1) \n        error(\"modp requires positive arguments\")\n    end\n \
    \   return 2^(n-1) % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0648_obn.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp0648_obn.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  modp requires positive arguments\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp0648_obn.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0648_obn.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0648_obn.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp0648_obn.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  modp requires positive arguments\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp0648_obn.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0648_obn.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0648_obn.jl:28\ntest set:\
    \ Test Failed at /tmp/tmp0648_obn.jl:31\n  Expression: candidate(0, 101) == 1\n\
    \   Evaluated: 101 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0648_obn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0648_obn.jl:28\ntest set: Error\
    \ During Test at /tmp/tmp0648_obn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  modp requires positive arguments\n  Stacktrace:\n \
    \  [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp0648_obn.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  timestamp: 1659749335
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n    else if p == 0 \n        then return 1 \n    else if\
    \ p < 0 \n        then return modp(-n, -p) \n    else if p > 0 \n        then\
    \ return modp(n, p) \n    else \n        modp(n-1, p) + modp(n-1, -p) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6h8h3ht.jl:5\nin expression starting at /tmp/tmpb6h8h3ht.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    \n    if p < 2 then return 0\n    \n   \
    \ if p % 2 == 1 then return modp(n / 2, p)\n    \n    return modp(n / 2, p) *\
    \ p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsbnjo2w2.jl:4\nin expression starting at /tmp/tmpsbnjo2w2.jl:4\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n / 2, p) + p % n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0lia1f9e.jl:5\nin expression starting at /tmp/tmp0lia1f9e.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n % 2, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkp1f3u8a.jl:5\nin expression starting at /tmp/tmpkp1f3u8a.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuk96pb4t.jl:4\nin expression starting at /tmp/tmpuk96pb4t.jl:4\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n / 2, p) + p % n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n   \
    \                     \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplorwprj5.jl:5\nin expression starting at /tmp/tmplorwprj5.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n % 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkl63dbq5.jl:5\nin expression starting at /tmp/tmpkl63dbq5.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % 2 * p \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn82cqzeb.jl:4\nin expression starting at /tmp/tmpn82cqzeb.jl:4\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) + p % n\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprkn348yn.jl:5\nin expression starting at /tmp/tmprkn348yn.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires positive arguments\")\n    end\n    if p < 0 \n   \
    \     error(\"modp requires positive arguments\")\n    end\n    return 2^n % p\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfknv4tye.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpfknv4tye.jl:18\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfknv4tye.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfknv4tye.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfknv4tye.jl:21\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfknv4tye.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfknv4tye.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) + p % n \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzzog0265.jl:5\nin expression starting at /tmp/tmpzzog0265.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfckxegr3.jl:5\nin expression starting at /tmp/tmpfckxegr3.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n / 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpph0lfuoy.jl:5\nin expression starting at /tmp/tmpph0lfuoy.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n >> 1, p)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6fzmvhlh.jl:5\nin expression starting at /tmp/tmp6fzmvhlh.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    else if p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(DomainError(string(\"modp called with argument less than or equal\
    \ to 2\"))) \n    else if p < 2 \n        then throw(DomainError(string(\"modp\
    \ called with argument less than or equal to 2\"))) \n    else if p < 2 \n   \
    \     then throw(Domain\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2kk6f6w.jl:5\nin expression starting at /tmp/tmpv2kk6f6w.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p % n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiadksyk4.jl:4\nin expression starting at /tmp/tmpiadksyk4.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0\n    \
    \    error(\"modp requires n >= 0\")\n    end\n    if p <= 0\n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0\n        return 0\n    end\n \
    \   if p == 0\n        return 1\n    end\n    if p > n\n        error(\"modp requires\
    \ p <= n\")\n    end\n    if n <= 1\n        return n\n    end\n    if n == 1\n\
    \        return p\n    end\n    if p <= 2\n        return modp(n - 1, p * 2)\n\
    \    end\n    if p <= 4\n        return modp(n - 1, p * 4)\n    end\n    if p\
    \ <= 8\n        return modp(n - 1, p * 8)\n    end\n    if p <= 16\n        return\
    \ modp(n - 1, p * 16)\n    end\n    if p <= 32\n        return modp(n - 1, p *\
    \ 32)\n    end\n    if p <= 64\n        return modp(n - 1, p * 64)\n    end\n\
    \    if p <= 128\n        return modp(n - 1, p * 128)\n    end\n    if p <= 256\n\
    \        return modp(n - 1, p * 256)\n    end\n    if p <= 512\n        return\
    \ modp(n - 1, p * 512)\n    end\n    if p <= 1024\n        return modp(n - 1,\
    \ p * 1024)\n    end\n    if p <= 2048\n        return modp(n - 1, p * 2048)\n\
    \    end\n    if p <= 4096\n        return modp(n - 1, p * 4096)\n    end\n  \
    \  if p <= 8192\n        return modp(n - 1, p * 8192)\n    end\n    if p <= 16384\n\
    \        return modp(n - 1, p * 16384)\n    end\n    if p <= 32768\n        return\
    \ modp(n - 1, p * 32768)\n    end\n    if p <= 65536\n        return modp(n -\
    \ 1, p * 65536)\n    end\n    if p <= 131072\n        return modp(n - 1, p * 131072)\n\
    \    end\n    if p <= 262144\n        return modp(n - 1, p * 262144)\n    end\n\
    \    if p <= 524288\n        return modp(n - 1, p * 524288)\n    end\n    if p\
    \ <= 1048576\n        return modp(n - 1, p * 1048576)\n    end\n    if p <= 2097152\n\
    \        return modp(n - 1, p * 2097152)\n    end\n    if p <= 4194304\n     \
    \   return modp(n - 1, p * 4194304)\n    end\n    if p <= 8388608\n        return\
    \ modp(n - 1, p * 8388608)\n    end\n    if p <= 16777216\n        return modp(n\
    \ - 1, p * 16777216)\n    end\n    if p <= 33554432\n        return modp(n - 1,\
    \ p * 33554432)\n    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphecx3n19.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphecx3n19.jl:1\n\
    in expression starting at /tmp/tmphecx3n19.jl:1\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p % n\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsnv5sw7n.jl:4\nin expression starting at /tmp/tmpsnv5sw7n.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplq06ozze.jl:5\nin expression starting at /tmp/tmplq06ozze.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with n <= 0\")))\n    else if\
    \ n == 1\n        then return p\n    else if p <= 0 \n        then throw(DomainError(string(\"\
    modp called with p <= 0\")))\n    else if p == 1\n        then return 1\n    else\
    \ if p > n\n        then throw(DomainError(string(\"modp called with p > n\")))\n\
    \    else return modp(n / 2, p * p) % p\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp50hq2kve.jl:5\nin expression starting at /tmp/tmp50hq2kve.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp31utojft.jl:5\nin expression starting at /tmp/tmp31utojft.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        modp(n / 2, p) * p + n % p\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt2_ghefe.jl:5\nin expression starting at /tmp/tmpt2_ghefe.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p == 0 then return 0\n    if p == 1 then\
    \ return n\n    \n    local n2 = n\n    local p2 = p\n    \n    while n2 > 0 do\n\
    \        n2 = n2 >> 1\n        p2 = p2 >> 1\n    end\n    \n    return p2 * modpow(2,\
    \ n2, p)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp7_41arr.jl:4\nin expression starting at /tmp/tmpp7_41arr.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfckxegr3.jl:5\nin expression starting at /tmp/tmpfckxegr3.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n % 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmy8kykkv.jl:5\nin expression starting at /tmp/tmpmy8kykkv.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr6q74vhf.jl:4\nin expression starting at /tmp/tmpr6q74vhf.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        modp(n / 2, p) * p + n % p\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps6oujhsh.jl:5\nin expression starting at /tmp/tmps6oujhsh.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p else modp(n - 1, p) \n    else if n == 1 then return p else modp(n - 2, p\
    \ + 1) \n    else modp(n - 3, p + 2) end\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppikv10yi.jl:4\nin expression starting at /tmp/tmppikv10yi.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9dr77y9y.jl:4\nin expression starting at /tmp/tmp9dr77y9y.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + modp((n / 2) * 2, p)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr8dnk7fy.jl:5\nin expression starting at /tmp/tmpr8dnk7fy.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n                        \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzckvzfol.jl:4\nin expression starting at /tmp/tmpzckvzfol.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    return modp(n / 2, p) * p + n % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7wueq2jr.jl:4\nin expression starting at /tmp/tmp7wueq2jr.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoek3wl73.jl:5\nin expression starting at /tmp/tmpoek3wl73.jl:5\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires n >= 0\")\n    else if n == 0 \n        1\n    else\
    \ \n        modp(n - 1, p) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpllyqbkg7.jl:6\nin expression starting at /tmp/tmpllyqbkg7.jl:6\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8pul6q43.jl:5\nin expression starting at /tmp/tmp8pul6q43.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p % n\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3s8zbsq0.jl:4\nin expression starting at /tmp/tmp3s8zbsq0.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else return modp(n / 2, p) * p + n % p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp38ooaufk.jl:4\nin expression starting at /tmp/tmp38ooaufk.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if p == 0 \n        then return 1\n    else \n \
    \       return modp(n / p, p) * p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgpc2to_2.jl:5\nin expression starting at /tmp/tmpgpc2to_2.jl:5\n"
  stdout: ''
  timestamp: 1659749335
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else if n == 1 then return 1\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjhe2h86r.jl:4\nin expression starting at /tmp/tmpjhe2h86r.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) + p %\
    \ n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpstcmy00v.jl:4\nin expression starting at /tmp/tmpstcmy00v.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     error(\"modp requires n >= 0\")\n    else if p <= 0\n        error(\"modp\
    \ requires p >= 0\")\n    else if n >= p\n        error(\"modp requires n <= p\"\
    )\n    else\n        return modpow2(n,p)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzrg0jxn.jl:6\nin expression starting at /tmp/tmpqzrg0jxn.jl:6\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9dr77y9y.jl:4\nin expression starting at /tmp/tmp9dr77y9y.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt3zte06r.jl:5\nin expression starting at /tmp/tmpt3zte06r.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr56cm442.jl:5\nin expression starting at /tmp/tmpr56cm442.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p % n\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfbmsg1bq.jl:4\nin expression starting at /tmp/tmpfbmsg1bq.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5c3zmosh.jl:5\nin expression starting at /tmp/tmp5c3zmosh.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires n >= 0\")\n    end\n    if p < 0 \n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n < p \n        return modp(n + p - 1, p)\n    end\n    if n\
    \ > p \n        return modp(n, p - 1)\n    end\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3xergttk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp3xergttk.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 7 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xergttk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xergttk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3xergttk.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1101 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xergttk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xergttk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3xergttk.jl:34\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 101 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xergttk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xergttk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3xergttk.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 13 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xergttk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xergttk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3xergttk.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 200 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/"
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3pr6xcej.jl:5\nin expression starting at /tmp/tmp3pr6xcej.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5hq8wmwz.jl:4\nin expression starting at /tmp/tmp5hq8wmwz.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2mn0c5fk.jl:5\nin expression starting at /tmp/tmp2mn0c5fk.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if p == 0 \n        then return 1\n    else if p\
    \ == 1 \n        then return n\n    else \n        return modp(n / 2, p) * p +\
    \ n % p\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppqhzttxn.jl:5\nin expression starting at /tmp/tmppqhzttxn.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p else modp(n / 2, p) * p + n % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy2smhvbh.jl:4\nin expression starting at /tmp/tmpy2smhvbh.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0\n        then return modp(-n, p)\n    else\
    \ if n == 1\n        then return p\n    else if p == 0\n        then return 0\n\
    \    else if p == 1\n        then return 1\n    else if p < 0\n        then return\
    \ modp(-n, p)\n    else if p > 1\n        then return modp(n, p - 1)\n    else\
    \ if p < n\n        then return modp(n, p)\n    else return modp(n + p - 1, p)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp75jgi928.jl:5\nin expression starting at /tmp/tmp75jgi928.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n % 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkl63dbq5.jl:5\nin expression starting at /tmp/tmpkl63dbq5.jl:5\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp only works on positive numbers\")\n    end\n    if p < 0 \n\
    \        error(\"modp only works on positive numbers\")\n    end\n    return mod(n,\
    \ p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdss2km7q.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpdss2km7q.jl:18\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdss2km7q.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdss2km7q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdss2km7q.jl:19\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdss2km7q.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdss2km7q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdss2km7q.jl:20\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdss2km7q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdss2km7q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdss2km7q.jl:21\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdss2km7q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdss2km7q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdss2km7q.jl:22\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd"
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    else if p == 0 \n        then throw(DomainError(string(\"modp called with\
    \ zero argument\")))\n    else if n == 1 \n        then 1\n    else if p == 1\
    \ \n        then 0\n    else if p == -1 \n        then modp(n - 1, p + 1)\n  \
    \  else modp(n - 1, p + modp(n - 1, p))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6n20u33k.jl:5\nin expression starting at /tmp/tmp6n20u33k.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9hkyjwsk.jl:5\nin expression starting at /tmp/tmp9hkyjwsk.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphzke76qd.jl:5\nin expression starting at /tmp/tmphzke76qd.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpixfz6mn3.jl:5\nin expression starting at /tmp/tmpixfz6mn3.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n % 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4gjz72dy.jl:5\nin expression starting at /tmp/tmp4gjz72dy.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if p == 0 \n        then return 1\n    else if p\
    \ < 0 \n        then return modp(abs(n), abs(p))\n    else if p > 0 \n       \
    \ then return modp(n >> 1, p)\n    else return modp(n >> 1, -p)\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2nvbqvhz.jl:5\nin expression starting at /tmp/tmp2nvbqvhz.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvg1r72tm.jl:4\nin expression starting at /tmp/tmpvg1r72tm.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_49a5dz.jl:4\nin expression starting at /tmp/tmpk_49a5dz.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73lii2yu.jl:5\nin expression starting at /tmp/tmp73lii2yu.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n >> 1, p) + p\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_skcpzh.jl:5\nin expression starting at /tmp/tmps_skcpzh.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative number\")))\n\
    \    else if p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative divisor\")))\n    else if p > n \n        then throw(DomainError(string(\"\
    modp called with divisor greater than number\")))\n    else if p > Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor greater than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    else if p < Int64(Int64(log2(n))) \n        then throw(DomainError(string(\"\
    modp called with divisor less than 2**64\")))\n    else if p < Int64(Int64(log2(n)))\
    \ \n        then throw(DomainError(string(\"modp called with divisor less than\
    \ 2**64\")))\n    \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyvq87bl4.jl:5\nin expression starting at /tmp/tmpyvq87bl4.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n <= p \n        then return 1\n    else return\
    \ modp(n / 2, p) * modp((n / 2) * (n / 2), p)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpappryos5.jl:5\nin expression starting at /tmp/tmpappryos5.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n                        \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp76o5gonj.jl:5\nin expression starting at /tmp/tmp76o5gonj.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8d_iacoc.jl:5\nin expression starting at /tmp/tmp8d_iacoc.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjo4az_dw.jl:5\nin expression starting at /tmp/tmpjo4az_dw.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaopr090c.jl:5\nin expression starting at /tmp/tmpaopr090c.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n                        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplsjx3f7a.jl:4\nin expression starting at /tmp/tmplsjx3f7a.jl:4\n"
  stdout: ''
  timestamp: 1659749328
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpixfz6mn3.jl:5\nin expression starting at /tmp/tmpixfz6mn3.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjawtmh1i.jl:5\nin expression starting at /tmp/tmpjawtmh1i.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_49a5dz.jl:4\nin expression starting at /tmp/tmpk_49a5dz.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p * modp(n / 2, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpph0lfuoy.jl:5\nin expression starting at /tmp/tmpph0lfuoy.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    Return 2^n modulo p (be aware of numerics).\n                        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5s9b3ecr.jl:4\nin expression starting at /tmp/tmp5s9b3ecr.jl:4\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % 2 * p\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6aa8sjsv.jl:4\nin expression starting at /tmp/tmp6aa8sjsv.jl:4\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    if p == 0 then return 0\n    if p == 1 then\
    \ return 1\n    if p == -1 then return -1\n    if p == -2 then return -2\n   \
    \ if p == -3 then return -3\n    if p == -4 then return -4\n    if p == -5 then\
    \ return -5\n    if p == -6 then return -6\n    if p == -7 then return -7\n  \
    \  if p == -8 then return -8\n    if p == -9 then return -9\n    if p == -10 then\
    \ return -10\n    if p == -11 then return -11\n    if p == -12 then return -12\n\
    \    if p == -13 then return -13\n    if p == -14 then return -14\n    if p ==\
    \ -15 then return -15\n    if p == -16 then return -16\n    if p == -17 then return\
    \ -17\n    if p == -18 then return -18\n    if p == -19 then return -19\n    if\
    \ p == -20 then return -20\n    if p == -21 then return -21\n    if p == -22 then\
    \ return -22\n    if p == -23 then return -23\n    if p == -24 then return -24\n\
    \    if p == -25 then return -25\n    if p == -26 then return -26\n    if p ==\
    \ -27 then return -27\n    if p == -28 then return -28\n    if p == -29 then return\
    \ -29\n    if p == -30 then return -30\n    if p == -31 then return -31\n    if\
    \ p == -32 then return -32\n    if p == -33 then return -33\n    if p == -34 then\
    \ return -34\n    if p == -35 then return -35\n    if p == -36 then return -36\n\
    \    if p == -37 then return -37\n    if p == -38 then return -38\n    if p ==\
    \ -39 then return -39\n    if p == -40 then return -40\n    if p == -41 then return\
    \ -41\n    if p == -42 then return -42\n    if p == -43 then return -43\n    if\
    \ p == -44 then return -44\n    if p == -45 then return -45\n    if p == -46 then\
    \ return -46\n    if p == -47 then return -47\n    if p == -48 then return -48\n\
    \    if p == -49 then return -49\n    if p == -50 then return -50\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmploxn8d1o.jl:4\nin expression starting at /tmp/tmploxn8d1o.jl:4\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0\n    \
    \    error(\"modp requires n >= 0\")\n    end\n    if p <= 0\n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0\n        return p\n    end\n \
    \   if p == 0\n        return n\n    end\n    if p < n\n        error(\"modp requires\
    \ p >= n\")\n    end\n    if p % 2 == 0\n        return modp(n / 2, p)\n    end\n\
    \    return modp(n / 2, p) + modp((n / 2) * (n / 2), p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpb4rrclyr.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpb4rrclyr.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpb4rrclyr.jl:3\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb4rrclyr.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb4rrclyr.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4rrclyr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpb4rrclyr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  modp requires p >= n\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb4rrclyr.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb4rrclyr.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb4rrclyr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpb4rrclyr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  modp requires n >= 0\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpb4rrclyr.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb4rrclyr.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb4rrclyr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpb4rrclyr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matchi"
  timestamp: 1659749340
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_a2bx5hr.jl:5\nin expression starting at /tmp/tmp_a2bx5hr.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    else if p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if p < 2\n        then throw(DomainError(string(\"\
    modp called with argument less than 2\"))) \n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p < 2\n    \
    \    then throw(DomainError(string(\"modp called with argument less than 2\")))\
    \ \n    else if p > n\n        then throw(DomainError(string(\"modp called with\
    \ argument greater than argument\")))\n    else if \nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiz2_sazt.jl:5\nin expression starting at /tmp/tmpiz2_sazt.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7bswhkrj.jl:4\nin expression starting at /tmp/tmp7bswhkrj.jl:4\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    if n == 1 then return p\n    \n    modp <- modp(n-1, p)\n    modp <-\
    \ modp*p % p\n    return modp\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj7pz3tvb.jl:4\nin expression starting at /tmp/tmpj7pz3tvb.jl:4\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2mn0c5fk.jl:5\nin expression starting at /tmp/tmp2mn0c5fk.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_49a5dz.jl:4\nin expression starting at /tmp/tmpk_49a5dz.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3pr6xcej.jl:5\nin expression starting at /tmp/tmp3pr6xcej.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sc3kful.jl:4\nin expression starting at /tmp/tmp0sc3kful.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if p > n\
    \ \n        error(\"modp requires non-negative integers\")\n    end\n    return\
    \ 2^n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp528mfvzr.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp528mfvzr.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  modp requires non-negative integers\n \
    \ Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp528mfvzr.jl:20 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp528mfvzr.jl:19\ntest set:\
    \ Test Failed at /tmp/tmp528mfvzr.jl:21\n  Expression: candidate(1101, 101) ==\
    \ 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp528mfvzr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp528mfvzr.jl:19\ntest set: Error\
    \ During Test at /tmp/tmp528mfvzr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  modp requires non-negative integers\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp528mfvzr.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp528mfvzr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp528mfvzr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  modp requires non-negative integers\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmp528mfvzr.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli"
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) + p % n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyx3g31t3.jl:5\nin expression starting at /tmp/tmpyx3g31t3.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires n >= 0\")\n    end\n    if p < 0 \n        error(\"\
    modp requires p >= 0\")\n    end\n    if n == 0 \n        return p\n    end\n\
    \    if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n % p == 0 \n        return modp(n / p, p)\n    end\n    return\
    \ modp(n % p, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659749342
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9dr77y9y.jl:4\nin expression starting at /tmp/tmp9dr77y9y.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n < 0 \n    \
    \    error(\"modp requires non-negative integers\")\n    end\n    if p < 0 \n\
    \        error(\"modp requires non-negative integers\")\n    end\n    if n ==\
    \ 0 \n        return p\n    end\n    if p == 0 \n        return n\n    end\n \
    \   if n == p \n        return n\n    end\n    if n > p \n        error(\"modp\
    \ requires non-negative integers\")\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n == 0 \n    \
    \    return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n == 0 \n        return p\n    end\n \
    \   if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n == 0 \n    \
    \    return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n == 0 \n        return p\n    end\n \
    \   if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n == 0 \n    \
    \    return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n == 0 \n        return p\n    end\n \
    \   if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n == 0 \n    \
    \    return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n == 0 \n        return p\n    end\n \
    \   if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\n    end\n    if p == 0 \n        return\
    \ n\n    end\n    if n == p \n        return n\n    end\n    if n == 0 \n    \
    \    return p\n    end\n    if p == 0 \n        return n\n    end\n    if n ==\
    \ p \n        return n\n    end\n    if n == 0 \n        return p\n    end\n \
    \   if p == 0 \n        return n\n    end\n    if n == p \n        return n\n\
    \    end\n    if n == 0 \n        return p\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmv9y3ts.jl:1\nin expression starting at /tmp/tmpzmv9y3ts.jl:1\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) * p + n % 2 * p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1cyaeur3.jl:5\nin expression starting at /tmp/tmp1cyaeur3.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjo4az_dw.jl:5\nin expression starting at /tmp/tmpjo4az_dw.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5c3zmosh.jl:5\nin expression starting at /tmp/tmp5c3zmosh.jl:5\n"
  stdout: ''
  timestamp: 1659749332
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) + p * modp(n\
    \ / 2, p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps7c2hnlt.jl:4\nin expression starting at /tmp/tmps7c2hnlt.jl:4\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr6q74vhf.jl:4\nin expression starting at /tmp/tmpr6q74vhf.jl:4\n"
  stdout: ''
  timestamp: 1659749334
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_a2bx5hr.jl:5\nin expression starting at /tmp/tmp_a2bx5hr.jl:5\n"
  stdout: ''
  timestamp: 1659749337
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p % n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd818u4kn.jl:5\nin expression starting at /tmp/tmpd818u4kn.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) + p % 2 \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp56gtcd3x.jl:5\nin expression starting at /tmp/tmp56gtcd3x.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       modp(n / 2, p) + p * modp(n / 2, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplq06ozze.jl:5\nin expression starting at /tmp/tmplq06ozze.jl:5\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0 \n    else if n == 1 then return p \n    else return modp(n / 2, p) * p +\
    \ n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvg1r72tm.jl:4\nin expression starting at /tmp/tmpvg1r72tm.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else if n == 1 \n        then return 1\n    else \n \
    \       return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqifilofm.jl:5\nin expression starting at /tmp/tmpqifilofm.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sc3kful.jl:4\nin expression starting at /tmp/tmp0sc3kful.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if p == 0 \n        then return 1\n    else if p\
    \ > n \n        then return modp(n, p - 1)\n    else \n        return modp(n /\
    \ p, p) * p\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo\
    \ p (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx3ubbrmj.jl:5\nin expression starting at /tmp/tmpx3ubbrmj.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0 \n        then return modp(-n, p)\n   \
    \ else if p == 0 \n        then return 1\n    else if p < 0 \n        then return\
    \ modp(-n, p)\n    else if p > 0 \n        then return modp(n / p, p)\n    else\
    \ return modp(n / p, p)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjuxffqow.jl:5\nin expression starting at /tmp/tmpjuxffqow.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp089x5n82.jl:4\nin expression starting at /tmp/tmp089x5n82.jl:4\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then 0\
    \ else n % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_49a5dz.jl:4\nin expression starting at /tmp/tmpk_49a5dz.jl:4\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8d_iacoc.jl:5\nin expression starting at /tmp/tmp8d_iacoc.jl:5\n"
  stdout: ''
  timestamp: 1659749331
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n <= 0 \n   \
    \     then throw(DomainError(string(\"modp called with negative argument\")))\n\
    \    else if p <= 0 \n        then throw(DomainError(string(\"modp called with\
    \ negative argument\")))\n    else if p > n\n        then throw(DomainError(string(\"\
    modp called with argument greater than argument\")))\n    else if p == 0 \n  \
    \      then throw(DomainError(string(\"modp called with argument equal to zero\"\
    )))\n    else if n == 0 \n        then throw(DomainError(string(\"modp called\
    \ with argument equal to zero\")))\n    else if p == 1 \n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == 1 \n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -1 \n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -1 \n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -2\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if n == -2\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if p == -3\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == -3\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -4\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -4\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -5\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if n == -5\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if p == -6\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if n == -6\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to one\")))\n   \
    \ else if p == -7\n        then throw(DomainError(string(\"modp called with argument\
    \ equal to one\")))\n    else if n == -7\n        then throw(DomainError(string(\"\
    modp called with argument equal to one\")))\n    else if p == -8\n        then\
    \ throw(DomainError(string(\"modp called with argument equal to \nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyr6v03p9.jl:5\nin expression starting at /tmp/tmpyr6v03p9.jl:5\n"
  stdout: ''
  timestamp: 1659749338
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then 0\n        else modp(n / 2, p) + p % n\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn0eyt4yx.jl:5\nin expression starting at /tmp/tmpn0eyt4yx.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return p\n    else \n \
    \       return modp(n / 2, p) + p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk2imvwoc.jl:5\nin expression starting at /tmp/tmpk2imvwoc.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnl_m3ma4.jl:5\nin expression starting at /tmp/tmpnl_m3ma4.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return p * modp(n / p, p) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphqjvvmyd.jl:5\nin expression starting at /tmp/tmphqjvvmyd.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) + p % n \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzzog0265.jl:5\nin expression starting at /tmp/tmpzzog0265.jl:5\n"
  stdout: ''
  timestamp: 1659749333
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ 0\n    else if n == 1 then return p\n    else return modp(n / 2, p) * p + n\
    \ % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sc3kful.jl:4\nin expression starting at /tmp/tmp0sc3kful.jl:4\n"
  stdout: ''
  timestamp: 1659749329
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return 2^n modulo p (be aware of numerics).\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkb4jc3zv.jl:5\nin expression starting at /tmp/tmpkb4jc3zv.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n    else if n == 1 \n        then return p \n    else \n\
    \        modp(n / 2, p) * p + n % 2 * modp(n / 2, p)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpij7pr7y6.jl:5\nin expression starting at /tmp/tmpij7pr7y6.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0\n    else if n < 0\n        then return modp(-n, p)\n    else\
    \ if p == 0\n        then return 1\n    else if p < 0\n        then return modp(-n,\
    \ p)\n    else if p < n\n        then return modp(n - p, p)\n    else return modp(n\
    \ - p, p)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return 2^n modulo p\
    \ (be aware of numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjsuv98zc.jl:5\nin expression starting at /tmp/tmpjsuv98zc.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"Return 2^n modulo p (be aware of\
    \ numerics).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpymzft7j7.jl:5\nin expression starting at /tmp/tmpymzft7j7.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return p\n    else \n        return modp(n / 2, p) * p + n % p\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3pr6xcej.jl:5\nin expression starting at /tmp/tmp3pr6xcej.jl:5\n"
  stdout: ''
  timestamp: 1659749336
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 \n   \
    \     then return 0 \n        else return modp(n / 2, p) * p + n % p\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw6bfthnl.jl:5\nin expression starting at /tmp/tmpw6bfthnl.jl:5\n"
  stdout: ''
  timestamp: 1659749339
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n                  \
    \      \"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n    if n == 0 then return\
    \ p\n    else return modp(n / 2, p) * p + n % p\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return 2^n modulo p (be aware of numerics).\n                        \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3rfhq3l1.jl:4\nin expression starting at /tmp/tmp3rfhq3l1.jl:4\n"
  stdout: ''
  timestamp: 1659749339
