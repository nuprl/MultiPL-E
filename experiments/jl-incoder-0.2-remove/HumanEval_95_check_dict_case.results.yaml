language: jl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true = false\n        for key in dict\n            if islower(key)\n\
    \                true = true\n            else\n                true = true\n\
    \            end\n        end\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe557fei5.jl:7\nin expression starting at /tmp/tmpe557fei5.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"B\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"B\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"B\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"B\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"B\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"B\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"B\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnv8eovl0.jl:7\nin expression starting at /tmp/tmpnv8eovl0.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((islower(k) || isupper(k)) for k in keys(dict))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprvc7foc7.jl:7\nin expression starting at /tmp/tmprvc7foc7.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcvzot0e3.jl:7\nin expression starting at /tmp/tmpcvzot0e3.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfzz04ox.jl:7\nin expression starting at /tmp/tmpsfzz04ox.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     for (key, value) in dict\n            if islower(key)\n                return\
    \ false\n            else\n                return true\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"\
    , \"C\" => \"C\", \"a\" => \"a\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\"\
    \ => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\"\
    \ => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"\
    d\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"\
    \ => \"A\", \"B\" => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\", \"\
    c\" => \"c\", \"d\" => \"d\", \"e\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\", \"a\" =>\
    \ \"a\", \"b\" => \"b\", \"c\" => \"c\", \"d\" => \"d\", \"e\" => \"e\", \"f\"\
    \ => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" =>\
    \ \"A\", \"B\" => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\", \"c\"\
    \ => \"c\", \"d\" => \"d\", \"e\" => \"e\", \"f\" => \"f\", \"g\" => \"g\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\"\
    \ => \"b\", \"C\" => \"C\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"\
    d\" => \"d\", \"e\" => \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5pg9aoj1.jl:7\nin expression starting at /tmp/tmp5pg9aoj1.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return true\n    end\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   end\n        if isupper(key)\n            return false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf5hd7f4r.jl:7\nin expression starting at /tmp/tmpf5hd7f4r.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"=>\"C\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"b\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"B\"=>\"b\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"=>\"c\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"b\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"B\"=>\"b\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"=>\"c\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"b\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"B\"=>\"b\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_myx609z.jl:7\nin expression starting at /tmp/tmp_myx609z.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"h\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"\
    g\", \"H\" => \"h\", \"I\" => \"i\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"h\", \"I\" => \"i\", \"J\" => \"\
    j\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\"\
    , \"B\" => \"b\", \"C\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpckppy3sa.jl:7\nin expression starting at /tmp/tmpckppy3sa.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}() \n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    =>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"\
    h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"\
    g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\
    \ \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"\
    =>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"\
    =>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\"\
    , \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\"))\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvv9fbhjg.jl:7\nin expression starting at /tmp/tmpvv9fbhjg.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a dictionary, return True if all keys\
    \ are strings in lower \n    case or all keys are strings in upper case, else\
    \ return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n                        \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa1oq7pc7.jl:7\nin expression starting at /tmp/tmpa1oq7pc7.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for key in dict\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8npibde0.jl:7\nin expression starting at /tmp/tmp8npibde0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        else\n            true = true\n        end\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb5osfpw1.jl:7\nin expression starting at /tmp/tmpb5osfpw1.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsetmre85.jl:7\nin expression starting at /tmp/tmpsetmre85.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmngjr3c9.jl:7\nin expression starting at /tmp/tmpmngjr3c9.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(dict1)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict2)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict3)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict4)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict5)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict6)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict7)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict8)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict9)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict10)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict11)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict12)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict13)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict14)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict15)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict16)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict17)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict18)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict19)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict20)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict21)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict22)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict23)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict24)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict25)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict26)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict27)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict28)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqvp2wim0.jl:7\nin expression starting at /tmp/tmpqvp2wim0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    else\n        true =\
    \ false\n        for key in dict\n            if islower(key)\n              \
    \  true = true\n            else\n                true = false\n        end\n\
    \        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp40oz1xev.jl:7\nin expression starting at /tmp/tmp40oz1xev.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    if length(dict) == 0\n        return false\n    end\n    \n\
    \    for k in keys(dict)\n        if islower(k)\n            return true\n   \
    \     elseif isupper(k)\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk5eldqnc.jl:7\nin expression starting at /tmp/tmpk5eldqnc.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoyjok3dm.jl:7\nin expression starting at /tmp/tmpoyjok3dm.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true = false\n        for key in dict\n\
    \            if islower(key)\n                true = true\n            else if\
    \ isupper(key)\n                true = true\n            else\n              \
    \  throw(ArgumentError(\"The dictionary contains keys that are not strings in\
    \ lower or upper case\"))\n        end\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_t18kp1t.jl:7\nin expression starting at /tmp/tmp_t18kp1t.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for key in keys(dict)\n        if islower(key)\n            return false\n\
    \        elseif isupper(key)\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8yg2q9jk.jl:7\nin expression starting at /tmp/tmp8yg2q9jk.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k)) keys(dict) == false \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyyr65q0n.jl:7\nin expression starting at /tmp/tmpyyr65q0n.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_b55lv0.jl:7\nin expression starting at /tmp/tmpq_b55lv0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxhkbuak8.jl:7\nin expression starting at /tmp/tmpxhkbuak8.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(:a => \"A\", :b => \"B\", :c => \"\
    C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(:a => \"A\", :b\
    \ => \"B\", :c => \"C\", :d => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict())\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary has keys that are not strings\
    \ or values that are not strings.\nExamples:\n                        \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf7yy9up2.jl:7\nin expression starting at /tmp/tmpf7yy9up2.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaek2vbh.jl:7\nin expression starting at /tmp/tmpwaek2vbh.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkeyrorn0.jl:7\nin expression starting at /tmp/tmpkeyrorn0.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        true\n    else\n        false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6pfjfayv.jl:7\nin expression starting at /tmp/tmp6pfjfayv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n    end\n    \n    for key in keys(dict)\n        if isupper(key)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpulc1bugm.jl:7\nin expression starting at /tmp/tmpulc1bugm.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_o4rwckj.jl:7\nin expression starting at /tmp/tmp_o4rwckj.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk7_5h3b2.jl:7\nin expression starting at /tmp/tmpk7_5h3b2.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgi0mawzc.jl:7\nin expression starting at /tmp/tmpgi0mawzc.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k)) k for k in dict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgslvlijj.jl:7\nin expression starting at /tmp/tmpgslvlijj.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( is_string(x) || is_string(y) for (x, y) in dict )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp44p35kr7.jl:7\nin expression starting at /tmp/tmp44p35kr7.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((key in keys(dict) for key in keys(dict))) == true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbr9k98ne.jl:7\nin expression starting at /tmp/tmpbr9k98ne.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if !is_empty(dict)\n        all(map(is_string, dict))\n    else\n    \
    \    false\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"\
    B\", \"C\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"\
    B\", \"C\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"\
    h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"\
    g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\",\
    \ \"B\"=>\"B\", \"C\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"\
    =>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptfsg_v3d.jl:7\nin expression starting at /tmp/tmptfsg_v3d.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true = false\n        for key in dict\n\
    \            if islower(key)\n                true = true\n            elseif\
    \ isupper(key)\n                true = true\n            else\n              \
    \  @warn \"The given dictionary has keys that are not strings in lower case or\
    \ upper case.\"\n                false\n            end\n        end\n       \
    \ return true\n    else\n        @warn \"The given dictionary is empty.\"\n  \
    \      false\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ takes a dictionary and returns a new dictionary where all keys are strings in\
    \ lower case and all keys are strings in upper case.\nThe function should return\
    \ a new dictionary that has the same keys as the given dictionary, but where all\
    \ keys are strings in lower case and all keys are strings in upper case.\nExamples:\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vr5w6gf.jl:7\nin expression starting at /tmp/tmp1vr5w6gf.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(dict1)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict2)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict3)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict4)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict5)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict6)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict7)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict8)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict9)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict10)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict11)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict12)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict13)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict14)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict15)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict16)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict17)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict18)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict19)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict20)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict21)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict22)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict23)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict24)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict25)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(dict26)\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(dict27)\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(dict28)\n</cell>\n<code language=julia-1.5>\n\
    check_dict_\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqvp2wim0.jl:7\nin expression starting at /tmp/tmpqvp2wim0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( is_string(x) || is_string(y) || is_string(z) || is_string(w) for\
    \ x,y,z,w in dict.values() )\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp27j76lnx.jl:7\nin expression starting at /tmp/tmp27j76lnx.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaek2vbh.jl:7\nin expression starting at /tmp/tmpwaek2vbh.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpff9lvjtv.jl:7\nin expression starting at /tmp/tmpff9lvjtv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp72_g9vtz.jl:7\nin expression starting at /tmp/tmp72_g9vtz.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for k in keys(dict)\n        if islower(k)\n            return false\n   \
    \     elseif isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as input and returns a new dictionary where all keys are strings in lower case\
    \ and all values are strings in upper case. \nThe function should return an empty\
    \ dictionary if the given dictionary is empty.\nExamples:\n                  \
    \      \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpng4lpatg.jl:7\nin expression starting at /tmp/tmpng4lpatg.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxhkbuak8.jl:7\nin expression starting at /tmp/tmpxhkbuak8.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" \n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp08h5k3hk.jl:7\nin expression starting at /tmp/tmp08h5k3hk.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0k24tb5k.jl:7\nin expression starting at /tmp/tmp0k24tb5k.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7m1w2bw1.jl:7\nin expression starting at /tmp/tmp7m1w2bw1.jl:7\n"
  stdout: ''
  timestamp: 1660015417
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxlp6tyf.jl:7\nin expression starting at /tmp/tmpwxlp6tyf.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6xmuiif.jl:7\nin expression starting at /tmp/tmp_6xmuiif.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        else\n            true = false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg5i1x68d.jl:7\nin expression starting at /tmp/tmpg5i1x68d.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1e80sr7h.jl:7\nin expression starting at /tmp/tmp1e80sr7h.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmngjr3c9.jl:7\nin expression starting at /tmp/tmpmngjr3c9.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp52eptau5.jl:7\nin expression starting at /tmp/tmp52eptau5.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0fgvudgx.jl:7\nin expression starting at /tmp/tmp0fgvudgx.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkpqlbihy.jl:7\nin expression starting at /tmp/tmpkpqlbihy.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpff9lvjtv.jl:7\nin expression starting at /tmp/tmpff9lvjtv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpes900pvo.jl:7\nin expression starting at /tmp/tmpes900pvo.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn6ioc39t.jl:7\nin expression starting at /tmp/tmpn6ioc39t.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"\
    h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"\
    g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\
    \ \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"\
    =>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"\
    =>\"C\", \"d\"=>\"D\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz84z4o94.jl:7\nin expression starting at /tmp/tmpz84z4o94.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7m1w2bw1.jl:7\nin expression starting at /tmp/tmp7m1w2bw1.jl:7\n"
  stdout: ''
  timestamp: 1660015417
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true = true\n        for key in dict\n\
    \            if islower(key)\n                true = false\n            elseif\
    \ isupper(key)\n                true = false\n            else\n             \
    \   true = false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp85b2h99o.jl:7\nin expression starting at /tmp/tmp85b2h99o.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpff9lvjtv.jl:7\nin expression starting at /tmp/tmpff9lvjtv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptl0z16r5.jl:7\nin expression starting at /tmp/tmptl0z16r5.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0k24tb5k.jl:7\nin expression starting at /tmp/tmp0k24tb5k.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjnsrt8ve.jl:7\nin expression starting at /tmp/tmpjnsrt8ve.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"h\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" \nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6yad7p2x.jl:7\nin expression starting at /tmp/tmp6yad7p2x.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for key in dict\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" =>\
    \ \"K\"))\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp654f_lg4.jl:7\nin expression starting at /tmp/tmp654f_lg4.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp01nc52ry.jl:7\nin expression starting at /tmp/tmp01nc52ry.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbxrnd28_.jl:7\nin expression starting at /tmp/tmpbxrnd28_.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        elseif isupper(key)\n            return false\n        end\n\
    \    end\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3mh75ghf.jl:7\nin expression starting at /tmp/tmp3mh75ghf.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   true = false\n    for key in keys(dict)\n        if islower(key)\n       \
    \     true = true\n        elseif isupper(key)\n            true = true\n    \
    \    else\n            true = false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdzfau338.jl:7\nin expression starting at /tmp/tmpdzfau338.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmngjr3c9.jl:7\nin expression starting at /tmp/tmpmngjr3c9.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((islower(k) || isupper(k)) for k in keys(dict))\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncheck_dict_case(dict1)\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(dict2)\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(dict3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary as an argument\
    \ and returns a dictionary with the keys in lower case and in upper case.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwvxvit_4.jl:7\nin expression starting at /tmp/tmpwvxvit_4.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k)) k for k in dict\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(:a => 1, :b => 2, :c => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => 1, \"b\" => 2, \"c\" => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => 1, \"B\" => 2, \"C\" => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"b\" => 2, \"C\" => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" =>\
    \ 2, \"c\" => 3))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3, \"A\" =>\
    \ 1, \"B\" => 2, \"C\" => 3))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3, \"A\" =>\
    \ 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3,\
    \ \"a\" => 1, \"b\" => 2, \"c\" => 3, \"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\"\
    \ => 1, \"b\" => 2, \"c\" => 3, \"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 1,\
    \ \"b\" => 2, \"c\" => 3))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3, \"A\" =>\
    \ 1, \"B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3, \"A\" => 1, \"\
    B\" => 2, \"C\" => 3, \"a\" => 1, \"b\" => 2, \"c\" => 3))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjnkspfky.jl:7\nin expression starting at /tmp/tmpjnkspfky.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsahf1t_0.jl:7\nin expression starting at /tmp/tmpsahf1t_0.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpes900pvo.jl:7\nin expression starting at /tmp/tmpes900pvo.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiepg9t4v.jl:7\nin expression starting at /tmp/tmpiepg9t4v.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   else \n        \n        for (key, value) in dict\n            if islower(key)\n\
    \                return false\n            else\n                return true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1kyeifu6.jl:7\nin expression starting at /tmp/tmp1kyeifu6.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfzz04ox.jl:7\nin expression starting at /tmp/tmpsfzz04ox.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"\
    C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"\
    b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"\
    C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\",\"k\"\
    =>\"K\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"\
    G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\",\"k\"=>\"K\",\"l\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsvt_cc5o.jl:7\nin expression starting at /tmp/tmpsvt_cc5o.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprq3owdjk.jl:7\nin expression starting at /tmp/tmprq3owdjk.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) )\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnlx655bd.jl:7\nin expression starting at /tmp/tmpnlx655bd.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn6ioc39t.jl:7\nin expression starting at /tmp/tmpn6ioc39t.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyzgt70_v.jl:7\nin expression starting at /tmp/tmpyzgt70_v.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        elseif isupper(key)\n            return false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5zjgmw1_.jl:7\nin expression starting at /tmp/tmp5zjgmw1_.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkpqlbihy.jl:7\nin expression starting at /tmp/tmpkpqlbihy.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcvzot0e3.jl:7\nin expression starting at /tmp/tmpcvzot0e3.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return false\n    else\n        true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0iqi27bc.jl:7\nin expression starting at /tmp/tmp0iqi27bc.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp52eptau5.jl:7\nin expression starting at /tmp/tmp52eptau5.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for k in keys(dict)\n        if islower(k)\n            return false\n   \
    \     elseif isupper(k)\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\", \"C\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"\
    , \"C\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgcmern4g.jl:7\nin expression starting at /tmp/tmpgcmern4g.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"A\"=>\"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"b\", \"A\"=>\"\
    B\", \"C\"=>\"D\", \"e\"=>\"f\", \"g\"=>\"h\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"\
    g\"=>\"h\", \"i\"=>\"j\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"g\"=>\"h\", \"i\"=>\"\
    j\", \"l\"=>\"m\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"g\"=>\"h\", \"i\"=>\"\
    j\", \"l\"=>\"m\", \"n\"=>\"o\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"g\"=>\"h\", \"i\"=>\"\
    j\", \"l\"=>\"m\", \"n\"=>\"o\", \"p\"=>\"q\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"b\", \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"\
    g\"=>\"h\", \"i\"=>\"j\", \"l\"=>\"m\", \"n\"=>\"o\", \"p\"=>\"q\", \"r\"=>\"\
    s\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"b\",\
    \ \"A\"=>\"B\", \"C\"=>\"D\", \"e\"=>\"f\", \"g\"=>\"h\", \"i\"=>\"j\", \"l\"\
    =>\"m\", \"n\"=>\"o\", \"p\"=>\"q\", \"r\"=>\"s\", \"t\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9jj7ba88.jl:7\nin expression starting at /tmp/tmp9jj7ba88.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp91c1tufw.jl:7\nin expression starting at /tmp/tmp91c1tufw.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}() \n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp25dtrr_w.jl:7\nin expression starting at /tmp/tmp25dtrr_w.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                false\n            elseif isupper(key)\n\
    \                false\n            else\n                true\n        end\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqiuv4ll6.jl:7\nin expression starting at /tmp/tmpqiuv4ll6.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for k in keys(dict)\n        if islower(k)\n            return false\n   \
    \     if isupper(k)\n            return false\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp75v95jut.jl:7\nin expression starting at /tmp/tmp75v95jut.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n<code language=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4xrpcte7.jl:7\nin expression starting at /tmp/tmp4xrpcte7.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    if dict == Dict{String, String}()\n        return true\n \
    \   end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqptaj__n.jl:7\nin expression starting at /tmp/tmpqptaj__n.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprq3owdjk.jl:7\nin expression starting at /tmp/tmprq3owdjk.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfzz04ox.jl:7\nin expression starting at /tmp/tmpsfzz04ox.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppof31tf7.jl:7\nin expression starting at /tmp/tmppof31tf7.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmngjr3c9.jl:7\nin expression starting at /tmp/tmpmngjr3c9.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_o4rwckj.jl:7\nin expression starting at /tmp/tmp_o4rwckj.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd8kxk5js.jl:7\nin expression starting at /tmp/tmpd8kxk5js.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if !is_empty(dict)\n        all(map(is_string, keys(dict)))\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"A\", \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4p4bjesk.jl:7\nin expression starting at /tmp/tmp4p4bjesk.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbl8uc362.jl:7\nin expression starting at /tmp/tmpbl8uc362.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for key\
    \ in keys(dict)\n        if islower(key)\n            return false\n        end\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3x8rork.jl:7\nin expression starting at /tmp/tmpo3x8rork.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsahf1t_0.jl:7\nin expression starting at /tmp/tmpsahf1t_0.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpff9lvjtv.jl:7\nin expression starting at /tmp/tmpff9lvjtv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as an argument\
    \ and returns a new dictionary with the keys in lower case and all values converted\
    \ to upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nExamples:\n                        \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnh1o7hib.jl:7\nin expression starting at /tmp/tmpnh1o7hib.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( is_string(x) || is_string(x) for x \u2208 dict )\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"\
    =>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"\
    =>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"\
    C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"\
    =>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\",\"i\"\
    =>\"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"\
    G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\",\"k\"\
    =>\"K\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"\
    A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"\
    G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\",\"k\"=>\"K\",\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptqh2oqto.jl:7\nin expression starting at /tmp/tmptqh2oqto.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( is_string(x) || is_string(y) for (x, y) in dict )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp44p35kr7.jl:7\nin expression starting at /tmp/tmp44p35kr7.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for key\
    \ in keys(dict)\n        if islower(key)\n            return false\n        end\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67vzmcpv.jl:7\nin expression starting at /tmp/tmp67vzmcpv.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((islower(k) || isupper(k)) for k in keys(dict))\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(:a => 1, :b => 2, :c => 3))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\"\
    \ => 3))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => 1,\
    \ \"b\" => 2, \"c\" => 3))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\"\
    \ => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" =>\
    \ 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\"\
    \ => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" =>\
    \ 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\"\
    \ => 3, \"a\" => 4, \"b\" => 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => 1, \"B\" => 2, \"C\" => 3, \"a\" => 4, \"b\" =>\
    \ 5, \"c\" => 6))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => 1, \"B\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp950_q3ng.jl:7\nin expression starting at /tmp/tmp950_q3ng.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for k in keys(dict)\n        if islower(k)\n            return false\n   \
    \     else if isupper(k)\n            return false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvwrxz1pl.jl:7\nin expression starting at /tmp/tmpvwrxz1pl.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"\
    a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"\
    \ => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"\
    F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptuopf_x_.jl:7\nin expression starting at /tmp/tmptuopf_x_.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxa_rx4k9.jl:7\nin expression starting at /tmp/tmpxa_rx4k9.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"A\" => \"\
    a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n\
    </cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n\
    </cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"A\"\
    \ => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"\
    F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnc9bavxu.jl:7\nin expression starting at /tmp/tmpnc9bavxu.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a dictionary as an argument and\
    \ returns a new dictionary where all keys are strings in lower case and all keys\
    \ are strings in upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj1gv1hr7.jl:7\nin expression starting at /tmp/tmpj1gv1hr7.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sqtejac.jl:7\nin expression starting at /tmp/tmp3sqtejac.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzxo_0o19.jl:7\nin expression starting at /tmp/tmpzxo_0o19.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            else\n                return true\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptqzj2pmi.jl:7\nin expression starting at /tmp/tmptqzj2pmi.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((is_string(key) || is_string(key)) for key in dict)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9es6i0y.jl:7\nin expression starting at /tmp/tmpm9es6i0y.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"\
    \ => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm0iddvwx.jl:7\nin expression starting at /tmp/tmpm0iddvwx.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for key in keys(dict)\n        if islower(key)\n            return false\n\
    \        if isupper(key)\n            return false\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnzcrx8dk.jl:7\nin expression starting at /tmp/tmpnzcrx8dk.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"b\"=>\"B\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"b\"=>\"B\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"A\", \"b\"=>\"B\", \"C\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"A\", \"b\"=>\"B\", \"C\"\
    =>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    A\", \"b\"=>\"B\", \"c\"=>\"C\"))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnn_934zp.jl:7\nin expression starting at /tmp/tmpnn_934zp.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\"))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all keys are strings\
    \ in upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnumo8lac.jl:7\nin expression starting at /tmp/tmpnumo8lac.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_b55lv0.jl:7\nin expression starting at /tmp/tmpq_b55lv0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \    end\n    \n    for k in keys(dict)\n        if isupper(k)\n            return\
    \ false\n        end\n    end\n    \n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjwjaaldm.jl:7\nin expression starting at /tmp/tmpjwjaaldm.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return true\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        elseif\
    \ isupper(k)\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpojfl_bzo.jl:7\nin expression starting at /tmp/tmpojfl_bzo.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4r3v3ozh.jl:7\nin expression starting at /tmp/tmp4r3v3ozh.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code\
    \ language=julia-1.3>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"\
    c\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"\
    B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\"))\n</cell>\n<code\
    \ language=julia-1.3>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"\
    c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\",\"k\"\
    =>\"K\"))\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8xodmhk8.jl:7\nin expression starting at /tmp/tmp8xodmhk8.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"\
    B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\", \"f\"=>\"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"\
    F\", \"g\"=>\"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"\
    F\", \"g\"=>\"G\", \"h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"\
    F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"\
    e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\
    \ \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"\
    =>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"\
    =>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbao01_c2.jl:7\nin expression starting at /tmp/tmpbao01_c2.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k) || isdigit(k)) for k in keys(dict)\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"\
    B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"\
    =>\"C\",\"d\"=>\"D\",\"e\"=>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"\
    C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\
    g\"=>\"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"A\",\"\
    b\"=>\"B\",\"c\"=>\"C\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"\
    h\"=>\"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbmz5hyo1.jl:7\nin expression starting at /tmp/tmpbmz5hyo1.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0k24tb5k.jl:7\nin expression starting at /tmp/tmp0k24tb5k.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true = false\n        for key in dict\n            if islower(key)\n\
    \                true = true\n            else\n                true = true\n\
    \        end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm20vgs46.jl:7\nin expression starting at /tmp/tmpm20vgs46.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    else\n        for (key,\
    \ value) in dict\n            if islower(key)\n                return true\n \
    \           elseif isupper(key)\n                return true\n            else\n\
    \                return false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpspjhiw8j.jl:7\nin expression starting at /tmp/tmpspjhiw8j.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnd7n1b4u.jl:7\nin expression starting at /tmp/tmpnd7n1b4u.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjnsrt8ve.jl:7\nin expression starting at /tmp/tmpjnsrt8ve.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"A\",\"b\"=>\"B\",\"c\"=>\"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"\
    =>\"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"\
    =>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"\
    c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"\
    =>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\",\"i\"\
    =>\"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"\
    a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"=>\"E\",\"f\"=>\"F\",\"g\"=>\"\
    G\",\"h\"=>\"H\",\"i\"=>\"I\",\"j\"=>\"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\"=>\"a\",\"B\"=>\"b\",\"C\"=>\"c\",\"d\"=>\"D\",\"e\"\
    =>\"E\",\"f\"=>\"F\",\"g\"=>\"G\",\"h\"=>\"H\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwai_9fnl.jl:7\nin expression starting at /tmp/tmpwai_9fnl.jl:7\n"
  stdout: ''
  timestamp: 1660015425
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq5f4d0yp.jl:7\nin expression starting at /tmp/tmpq5f4d0yp.jl:7\n"
  stdout: ''
  timestamp: 1660015427
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaek2vbh.jl:7\nin expression starting at /tmp/tmpwaek2vbh.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa7bczxr7.jl:7\nin expression starting at /tmp/tmpa7bczxr7.jl:7\n"
  stdout: ''
  timestamp: 1660015427
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpff9lvjtv.jl:7\nin expression starting at /tmp/tmpff9lvjtv.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all(x in keys(dict) for x in [\"upper\", \"lower\"])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfmhz73wn.jl:7\nin expression starting at /tmp/tmpfmhz73wn.jl:7\n"
  stdout: ''
  timestamp: 1660015427
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\"\
    \ => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgi0mawzc.jl:7\nin expression starting at /tmp/tmpgi0mawzc.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6xmuiif.jl:7\nin expression starting at /tmp/tmp_6xmuiif.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   true = false\n    for key in keys(dict)\n        if islower(key)\n       \
    \     true = true\n        elseif isupper(key)\n            true = true\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"A\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9ofmccz_.jl:7\nin expression starting at /tmp/tmp9ofmccz_.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"\
    a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"\
    \ => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"\
    F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"h\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4x7fw74.jl:7\nin expression starting at /tmp/tmpe4x7fw74.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbl8uc362.jl:7\nin expression starting at /tmp/tmpbl8uc362.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            true = false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" =>\
    \ \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq2d_hdjq.jl:7\nin expression starting at /tmp/tmpq2d_hdjq.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k)) keys(dict) == false || \n        all (islower(k)\
    \ || isupper(k)) values(dict) == false\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary as input\
    \ and returns a dictionary where all keys are strings in lower case and all values\
    \ are strings in upper case. \nThe function should return an empty dictionary\
    \ if the given dictionary is empty.\nExamples:\n                        \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd338_uad.jl:7\nin expression starting at /tmp/tmpd338_uad.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfzz04ox.jl:7\nin expression starting at /tmp/tmpsfzz04ox.jl:7\n"
  stdout: ''
  timestamp: 1660015413
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true = false\n        for key in dict\n            if islower(key)\n\
    \                true = true\n            else\n                true = true\n\
    \        end\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjj4wygru.jl:7\nin expression starting at /tmp/tmpjj4wygru.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppof31tf7.jl:7\nin expression starting at /tmp/tmppof31tf7.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiy0zsxjf.jl:7\nin expression starting at /tmp/tmpiy0zsxjf.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxlp6tyf.jl:7\nin expression starting at /tmp/tmpwxlp6tyf.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv34n8asj.jl:7\nin expression starting at /tmp/tmpv34n8asj.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv0yrno05.jl:7\nin expression starting at /tmp/tmpv0yrno05.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all((key in keys(dict) for key in keys(dict))) \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return False.\n    The function\
    \ should return False is the given dictionary is empty.\n    Examples:\n     \
    \                   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfjghykt0.jl:7\nin expression starting at /tmp/tmpfjghykt0.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    true = false\n\
    \    for key in dict\n        if islower(key)\n            true = true\n     \
    \   elseif isupper(key)\n            true = true\n        else\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbsfh3b3r.jl:7\nin expression starting at /tmp/tmpbsfh3b3r.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    \n \
    \   for k in keys(dict)\n        if islower(k)\n            return false\n   \
    \     elseif isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</cell>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2525_ga8.jl:7\nin expression starting at /tmp/tmp2525_ga8.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=julia,dictionary |>\nI came up with this solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn84liglj.jl:7\nin expression starting at /tmp/tmpn84liglj.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all(x in keys(dict) for x in [\"upper\", \"lower\"])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfmhz73wn.jl:7\nin expression starting at /tmp/tmpfmhz73wn.jl:7\n"
  stdout: ''
  timestamp: 1660015427
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuckhff1n.jl:7\nin expression starting at /tmp/tmpuckhff1n.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbl8uc362.jl:7\nin expression starting at /tmp/tmpbl8uc362.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            error(\"The given dictionary is not in lower or upper case.\")\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc1wp2pq6.jl:7\nin expression starting at /tmp/tmpc1wp2pq6.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n            break\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" =>\
    \ \"K\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsuct7m0i.jl:7\nin expression starting at /tmp/tmpsuct7m0i.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpis3p9592.jl:7\nin expression starting at /tmp/tmpis3p9592.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"h\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" \nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6yad7p2x.jl:7\nin expression starting at /tmp/tmp6yad7p2x.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"=>\"b\", \"c\"=>\"\
    d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"A\"=>\"b\",\
    \ \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\"=>\"b\", \"C\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\"=>\"b\", \"c\"=>\"d\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdtsne5ld.jl:7\nin expression starting at /tmp/tmpdtsne5ld.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    \n    if dict == Dict{String, String}()\n        return true\n \
    \   end\n    \n    for k in keys(dict)\n        if islower(k)\n            return\
    \ false\n        end\n        if isupper(k)\n            return false\n      \
    \  end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"E\" => \"e\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\",\
    \ \"F\" => \"f\", \"G\" => \"g\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpulvew7ov.jl:7\nin expression starting at /tmp/tmpulvew7ov.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n            break\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\",\
    \ \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa4lj38lz.jl:7\nin expression starting at /tmp/tmpa4lj38lz.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            else\n                if isupper(key)\n        \
    \            return false\n                else\n                    return true\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string with all the characters in lower\
    \ case and all the characters in upper case.\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_re755my.jl:7\nin expression starting at /tmp/tmp_re755my.jl:7\n"
  stdout: ''
  timestamp: 1660015428
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaek2vbh.jl:7\nin expression starting at /tmp/tmpwaek2vbh.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_b55lv0.jl:7\nin expression starting at /tmp/tmpq_b55lv0.jl:7\n"
  stdout: ''
  timestamp: 1660015414
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all( islower(k) || isupper(k) for k in keys(dict) ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ the number of keys that are strings in lower case or upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1n_s60eu.jl:7\nin expression starting at /tmp/tmp1n_s60eu.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp52eptau5.jl:7\nin expression starting at /tmp/tmp52eptau5.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if length(dict) == 0\n        return false\n    else\n        for (k,v)\
    \ in dict\n            if islower(k)\n                return false\n         \
    \   elseif isupper(k)\n                return false\n            else\n      \
    \          return true\n        end\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,dictionary |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqz5y22bp.jl:7\nin expression starting at /tmp/tmpqz5y22bp.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \    end\n    \n    for k in keys(dict)\n        if isupper(k)\n            return\
    \ false\n        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"\
    C\" => \"c\", \"D\" => \"d\"))\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns the number of keys that are\
    \ strings in lower case and upper case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw1oqhpst.jl:7\nin expression starting at /tmp/tmpw1oqhpst.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaek2vbh.jl:7\nin expression starting at /tmp/tmpwaek2vbh.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in dict\n        if islower(key)\n    \
    \        true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprq3owdjk.jl:7\nin expression starting at /tmp/tmprq3owdjk.jl:7\n"
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    all (islower(k) || isupper(k)) for k in keys(dict)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"\
    c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the values in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the keys are not strings or if the values are strings. \nExamples:\n    \
    \                    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpns3ga2mv.jl:7\nin expression starting at /tmp/tmpns3ga2mv.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn6ioc39t.jl:7\nin expression starting at /tmp/tmpn6ioc39t.jl:7\n"
  stdout: ''
  timestamp: 1660015419
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n\
    <code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n</cell>\n\
    <code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    , \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"\
    F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n</cell>\n\
    <code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n</\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgj8vxtvj.jl:7\nin expression starting at /tmp/tmpgj8vxtvj.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true = true\n        for key in dict\n\
    \            if islower(key)\n                true = false\n            elseif\
    \ isupper(key)\n                true = false\n            end\n        end\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all keys are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty. \nExamples:\n\
    \                        \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo0czvwc7.jl:7\nin expression starting at /tmp/tmpo0czvwc7.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        elseif\
    \ isupper(k)\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict{String, String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" =>\
    \ \"C\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict{String, String}(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code\
    \ language=julia-1.4>\ncheck_dict_case(Dict{String, String}(\"a\" => \"A\", \"\
    b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n</cell>\n<code\
    \ language=julia-1.4>\ncheck_dict_case(Dict{String, String}(\"a\" => \"A\", \"\
    b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict{String, String}(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict{String, String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" =>\
    \ \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\"\
    \ => \"H\", \"i\" => \"I\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"\
    j\" => \"J\"))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuaho7c_l.jl:7\nin expression starting at /tmp/tmpuaho7c_l.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    if dict == Dict{String, String}()\n        return true\n    else\n   \
    \     true\n    end\nend\n</code>\n<|/ a tags=julia,dictionary |>\n<| c |>\nI\
    \ like this solution, because it doesn't require any additional packages. However,\
    \ it seems that it only works with strings. I tried to make it work with numbers,\
    \ but it didn't work. Do you know why this is?\n<|/ c |>\n<| c |>\nI believe that\
    \ `Dict{String, String}` is actually `Dict{String, Any}`, so `Any` can be anything.\
    \ `Any` can be `Int`, `Float`, `Bool`, or `String`. So `Dict{String, Any}` will\
    \ work for any `String` key. `Dict{String, String}` will only work for `String`\
    \ keys. So `Dict{String, String}` will work for `Int`, `Float`, and `Bool` keys,\
    \ but not `String` keys.\n<|/ c |>\n<| c |>\nI see. Thank you very much for the\
    \ explanation!\n<|/ c |>\n<| a dscore=2 |>\nI like using isstring and isuppercase\
    \ to check whether a key is a string or a key. \n<code>\njulia> d = Dict(\"a\"\
    \ => 1, \"b\" => 2)\nDict{String,Int64} with 2 entries:\n  \"a\" => 1\n  \"b\"\
    \ => 2\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgix9naep.jl:7\nin expression starting at /tmp/tmpgix9naep.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiw_pmorp.jl:7\nin expression starting at /tmp/tmpiw_pmorp.jl:7\n"
  stdout: ''
  timestamp: 1660015416
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"\
    A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\"))\n</cell\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppefjhi61.jl:7\nin expression starting at /tmp/tmppefjhi61.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        false\n    else\n        true\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5vzldyoc.jl:7\nin expression starting at /tmp/tmp5vzldyoc.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        end\n        if isupper(key)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\"))\n\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw4dn9uwo.jl:7\nin expression starting at /tmp/tmpw4dn9uwo.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"A\" => \"a\", \"B\" => \"b\"\
    , \"C\" => \"c\"))\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxchl5bcz.jl:7\nin expression starting at /tmp/tmpxchl5bcz.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{}\n        return true\n    end\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            true = false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String, String}())\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String, String}(\"a\"\
    \ => \"A\", \"b\" => \"B\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict{String, String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" =>\
    \ \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\", \"f\" => \"F\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\", \"f\" => \"F\", \"g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict{String, String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" =>\
    \ \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\"\
    \ => \"H\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String,\
    \ String}(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\"\
    \ => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict{String, String}(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgda1rsat.jl:7\nin expression starting at /tmp/tmpgda1rsat.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if length(dict) == 0\n        return true\n    end\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            error(\"The dictionary keys should be strings in lower case or upper\
    \ case.\")\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\"\
    \ => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"\
    f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" =>\
    \ \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\"\
    \ => \"I\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"A\", \"b\"\
    \ => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"\
    g\" => \"G\", \"h\" => \"H\", \"i\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp04hvil59.jl:7\nin expression starting at /tmp/tmp04hvil59.jl:7\n"
  stdout: ''
  timestamp: 1660015430
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    else\n\
    \        \n        for (key, value) in dict\n            if islower(key)\n   \
    \             return false\n            elseif isupper(key)\n                return\
    \ false\n            end\n        end\n        return true\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpptizwypb.jl:7\nin expression starting at /tmp/tmpptizwypb.jl:7\n"
  stdout: ''
  timestamp: 1660015430
