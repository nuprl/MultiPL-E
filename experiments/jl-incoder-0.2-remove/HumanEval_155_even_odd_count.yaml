name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num / 10, 1)\n    elseif num < 1000 then \n\
    \        return (num / 100, 2)\n    elseif num < 10000 then \n        return (num\
    \ / 1000, 3)\n    elseif num < 100000 then \n        return (num / 10000, 4)\n\
    \    elseif num < 1000000 then \n        return (num / 100000, 5)\n    elseif\
    \ num < 10000000 then \n        return (num / 1000000, 6)\n    elseif num < 100000000\
    \ then \n        return (num / 10000000, 7)\n    elseif num < 1000000000 then\
    \ \n        return (num / 100000000, 8)\n    elseif num < 10000000000 then \n\
    \        return (num / 1000000000, 9)\n    elseif num < 100000000000 then \n \
    \       return (num / 10000000000, 10)\n    elseif num < 1000000000000 then \n\
    \        return (num / 100000000000, 11)\n    elseif num < 10000000000000 then\
    \ \n        return (num / 1000000000000, 12)\n    elseif num < 100000000000000\
    \ then \n        return (num / 10000000000000, 13)\n    elseif num < 1000000000000000\
    \ then \n        return (num / 100000000000000, 14)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 23)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 24)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 26)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 27)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000000", "    if num < 10\
    \ then return (num, 0)\n    even, odd = 0, 0\n    \n    for i in 2..num\n    \
    \    if num % i == 0 then\n            even += i\n        else\n            odd\
    \ += i\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-3)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-4)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-5)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-6)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-7)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-8)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-9)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(11)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(13)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(14)\n</cell>\n<code language=julia-1.5>\neven_odd_count(15)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(16)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(17)\n</cell>\n<code language=julia-1.5>\neven_odd_count(18)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(19)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(20)\n</cell>\n<code language=julia-1.5>\neven_odd_count(21)\n</cell>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    else\
    \ if num == 0\n        (0, 0) \n    else \n        even_odd_count(num / 10) +\
    \ (1, num % 10)\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(-2)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(0)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000001)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000000002)\n</cell>\n<code language=julia-1.0>\neven_odd_count(10000000000003)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000004)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000005)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000000006)\n</cell>\n<code language=julia-1.0>\neven_odd_count(10000000000007)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000008)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000009)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        error(\"The input must be positive\")\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            even = even + 1\
    \ \n            num = num / 10\n        end\n        while num > 0\n         \
    \   odd = odd + 1\n            num = num / 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(8)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(9)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(14)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(18)\n</cell>\n<code language=", "    if num < 10\
    \ \n        return (num, 0) \n    else \n        odd_count = even_odd_count(num\
    \ / 10)\n        even_count = num % 10\n        return (even_count + odd_count,\
    \ odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_count(147)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(14", "    if num < 10 then\
    \ \n        return (num, 0)\n    elseif num < 100 then \n        return (num /\
    \ 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100, num %\
    \ 100)\n    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n\
    \    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n  \
    \  elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n \
    \   elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    \n    even = 0\n\
    \    odd = 0\n    \n    for i in num:\n        if i%2==0 then\n            even\
    \ = even+1\n        else\n            odd = odd+1\n        end\n    end\n    \n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    even_count = 0\n    odd_count\
    \ = 0\n    \n    if num < 0\n        return 0, 0\n    end\n    \n    while num\
    \ > 0\n        if num % 2 == 0\n            even_count += 1\n        else\n  \
    \          odd_count += 1\n        end\n        num /= 10\n    end\n    \n   \
    \ return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000001)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000003)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000005)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000007)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000009)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    even = 0\n    odd = 0\n    \n    for i in num\n\
    \        if i%2 == 0\n            even = even+1\n        else\n            odd\
    \ = odd+1\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    elseif num == 0\n        error(\"The\
    \ given number must be positive\")\n    else\n        even_odd_count_helper(num)\n\
    \    end\nend", "    \n    even = 0\n    odd = 0\n    \n    for i in num:\n  \
    \      if i%2==0 then\n            even = even + 1\n        else\n           \
    \ odd = odd + 1 \n        end\n    end\n    \n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=juli", "    if num < 10 then return (1, 0)\n    even,\
    \ odd = 0, 0\n    for i in num:\n        if i%2 == 0 then even += 1 \n       \
    \ else odd += 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(1) == (1, 0)\n@assert even_odd_count(10) == (1, 1)\n@assert\
    \ even_odd_count(100) == (1, 2)\n@assert even_odd_count(1000) == (1, 3)\n@assert\
    \ even_odd_count(10000) == (1, 4)\n@assert even_odd_count(100000) == (1, 5)\n\
    @assert even_odd_count(1000000) == (1, 6)\n@assert even_odd_count(10000000) ==\
    \ (1, 7)\n@assert even_odd_count(100000000) == (1, 8)\n@assert even_odd_count(1000000000)\
    \ == (1, 9)\n@assert even_odd_count(10000000000) == (2, 0)\n@assert even_odd_count(100000000000)\
    \ == (2, 1)\n@assert even_odd_count(1000000000000) == (2, 2)\n@assert even_odd_count(10000000000000)\
    \ == (2, 3)\n@assert even_odd_count(100000000000000) == (2, 4)\n@assert even_odd_count(1000000000000000)\
    \ == (2, 5)\n@assert even_odd_count(10000000000000000) == (2, 6)\n@assert even_odd_count(100000000000000000)\
    \ == (2, 7)\n@assert even_odd_count(1000000000000000000) == (2, 8)\n@assert even_odd_count(10000000000000000000)\
    \ == (2, 9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:", "    \n\
    \    even = num % 2 == 0\n    odd = num % 2 != 0\n    \n    if even\n        even\
    \ = num / 2\n    else\n        odd = num / 2\n    end\n    \n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5", "    if num < 10 then \n        return (num, 0)\n \
    \   elseif num < 100 then \n        return (num / 10, num % 10)\n    elseif num\
    \ < 1000 then \n        return (num / 100, num % 100)\n    elseif num < 10000\
    \ then \n        return (num / 1000, num % 1000)\n    elseif num < 100000 then\
    \ \n        return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n\
    \        return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n\
    \        return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then\
    \ \n        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ return (num, 0)\n    even, odd = 0, 0\n    while num > 0 do\n        even =\
    \ num % 10\n        odd = even + odd\n        num = num / 10\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100", "    if num < 10 \n        then return (0,0)\n    else if\
    \ num < 100 \n        then return (1,0)\n    else if num < 1000 \n        then\
    \ return (2,0)\n    else if num < 10000 \n        then return (3,0)\n    else\
    \ if num < 100000 \n        then return (4,0)\n    else if num < 1000000 \n  \
    \      then return (5,0)\n    else if num < 10000000 \n        then return (6,0)\n\
    \    else if num < 100000000 \n        then return (7,0)\n    else if num < 1000000000\
    \ \n        then return (8,0)\n    else if num < 10000000000 \n        then return\
    \ (9,0)\n    else if num < 100000000000 \n        then return (10,0)\n    else\
    \ if num < 1000000000000 \n        then return (11,0)\n    else if num < 10000000000000\
    \ \n        then return (12,0)\n    else if num < 100000000000000 \n        then\
    \ return (13,0)\n    else if num < 1000000000000000 \n        then return (14,0)\n\
    \    else if num < 10000000000000000 \n        then return (15,0)\n    else if\
    \ num < 100000000000000000 \n        then return (16,0)\n    else if num < 1000000000000000000\
    \ \n        then return (17,0)\n    else if num < 10000000000000000000 \n    \
    \    then return (18,0)\n    else if num < 100000000000000000000 \n        then\
    \ return (19,0)\n    else if num < 1000000000000000000000 \n        then return\
    \ (20,0)\n    else if num < 10000000000000000000000 \n        then return (21,0)\n\
    \    else if num < 100000000000000000000000 \n        then return (22,0)\n   \
    \ else if num < 1000000000000000000000000 \n        then return (23,0)\n    else\
    \ if num < 10000000000000000000000000 \n        then return (24,0)\n    else if\
    \ num < 100000000000000000000000000 \n        then return (25,0)\n    else if\
    \ num < 1000000000000000000000000000 \n        then return (26,0)\n    else if\
    \ num < 10000000000000000000000000000 \n        then return (27,0)\n    else if\
    \ num < 100000000000000000000000000000 \n        then return (28,0)\n    else\
    \ if num < 1000000000000000000000000000000 \n        then return (29,0)\n    else\
    \ if num < 10000000000000000000000000000000 \n        then return (30,0)\n   \
    \ else if num < 100000000000000000000000000000000 \n        then return (31,0)\n",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num / 10, num % 10)\n    elseif num < 1000 then \n        return\
    \ (num / 100, num % 100)\n    elseif num < 10000 then \n        return (num /\
    \ 1000, num % 1000)\n    elseif num < 100000 then \n        return (num / 10000,\
    \ num % 10000)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ num % 1000000)\n    elseif num < 100000000 then \n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then \n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then \n        return (num /\
    \ 1000000000, num % 1000000000)\n    elseif num < 100000000000 then \n       \
    \ return (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ then \n        return (num / 100000000000, num % 100000000000)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, num % 1000000000000)\n\
    \    elseif num < 100000000000000 then \n        return (num / 10000000000000,\
    \ num % 10000000000000)\n    elseif num < 1000000000000000 then \n        return\
    \ (num / 100000000000000, num % 100000000000000)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, num % 1000000000000000)\n   \
    \ elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 100000000000000000 then \n      \
    \  return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 1000000000000000000 then \n        return (num / 100000000000000000, num %\
    \ 100000000000000000)\n    elseif num < 10000000000000000000 then \n        return\
    \ (num / 1000000000000000000, num % 1000000000000000000)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, num % 10000000000000000000)\n\
    \    elseif num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 10000000000000000000000, num % 10000000000000000000000)\n\
    \    elseif num < 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ num % 100000000000000000000000)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000, num % 1000000000000000000000000)\n\
    \    elseif num < ", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num\
    \ / 2)\n        even_odd_count(num % 2)\nend", "    if num < 10 then return (1,\
    \ 0)\n    even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1 \n     \
    \   end\n        num = num / 2\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(123)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(124)\n</cell>\n<code language=julia-1.4>\neven_odd_count(125)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(126)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(127)\n</cell>\n<code language=julia-1.4>\neven_odd_count(128)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(129)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(130)\n</cell>\n<code language=julia-1.4>\neven_odd_count(131)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(132)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(133)\n</cell>\n<code language=julia-1.4>\neven_odd_count(134)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(135)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(136)\n</cell>\n<code language=julia-1.4>\neven_odd_count(137)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(138)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(139)\n</cell>\n<code language=julia-1.4>\neven_odd_count(140)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(141)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(142)\n</cell>\n<code language=julia-1.4>\neven_odd_count(143)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(144)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(145)\n</cell>\n<code language=julia-1.4>\neven_odd_count(146)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(147)\n</", "    if num < 10\
    \ then \n        return (num, 0)\n    elseif num < 100 then \n        return (num\
    \ / 10, 1)\n    elseif num < 1000 then \n        return (num / 100, 2)\n    elseif\
    \ num < 10000 then \n        return (num / 1000, 3)\n    elseif num < 100000 then\
    \ \n        return (num / 10000, 4)\n    elseif num < 1000000 then \n        return\
    \ (num / 100000, 5)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ 6)\n    elseif num < 100000000 then \n        return (num / 10000000, 7)\n \
    \   elseif num < 1000000000 then \n        return (num / 100000000, 8)\n    elseif\
    \ num < 10000000000 then \n        return (num / 1000000000, 9)\n    elseif num\
    \ < 100000000000 then \n        return (num / 10000000000, 10)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num / 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num / 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ 16)\n    elseif num < 100000000000000000 then \n        return (num / 100000000000000000,\
    \ 17)\n    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ 18)\n    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ 19)\n    elseif num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ 20)\n    elseif num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ 21)\n    elseif num < 10000000000000000000000 then \n        return (num / 1000000000000000000000,\
    \ 22)\n    elseif num < 100000000000000000000000 then \n        return (num /\
    \ 10000000000000000000000, 23)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000, 25)\n    elseif num\
    \ < 100000000000000000000000000 then \n        return (num / 10000000000000000000000000,\
    \ 26)\n    elseif num < 1000000000000000000000000000 then \n        return (num\
    \ / 100000000000000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000000, 28)\n    elseif num\
    \ < 100000000000000000000000000000 then \n        return (num / 100000000000000000000000000",
  "    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n        num = num / 2\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_count(147)\n\
    </cell", "    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 1000000000000000000000,\
    \ num % 1000000000000000000000)\n    elseif num < 100000000000000000000000 then\
    \ \n        return (num / 10000000000000000000000, num % 10000000000000000000000)\
    \ \n    elseif num < 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ num % 100000000000000000000000)\n    elseif num", "    if num < 10 then \n \
    \       return (num, 0)\n    elseif num < 100 then\n        return (num / 10,\
    \ num % 10)\n    else\n        return (num / 100, num % 100)\n    end\nend\n\"\
    \"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(100)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(1000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000001)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000002)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000003)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000004)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000005)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000006)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000007)\n</cell>\n<code language=julia-1.5>\n@code_warn",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num / 10, num % 10)\n    elseif num < 1000 then \n        return\
    \ (num / 100, num % 100)\n    elseif num < 10000 then \n        return (num /\
    \ 1000, num % 1000)\n    elseif num < 100000 then \n        return (num / 10000,\
    \ num % 10000)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ num % 1000000)\n    elseif num < 100000000 then \n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then \n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then \n        return (num /\
    \ 1000000000, num % 1000000000)\n    elseif num < 100000000000 then \n       \
    \ return (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ then \n        return (num / 100000000000, num % 100000000000)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, num % 1000000000000)\n\
    \    elseif num < 100000000000000 then \n        return (num / 10000000000000,\
    \ num % 10000000000000)\n    elseif num < 1000000000000000 then \n        return\
    \ (num / 100000000000000, num % 100000000000000)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, num % 1000000000000000)\n   \
    \ elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 1000000000000000000 then \n     \
    \   return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 10000000000000000000 then \n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n     \
    \   return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ \n        return (num, 0)\n    else\n        odd_count = even_odd_count(num\
    \ / 10)\n        even_count = num % 10\n        return (even_count + odd_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(124)\n</cell>\n<code language=julia-1.5>\neven_odd_count(125)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(126)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(127)\n</cell>\n<code language=julia-1.5>\neven_odd_count(128)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(129)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(130)\n</cell>\n<code language=julia-1.5>\neven_odd_count(131)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(132)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(133)\n</cell>\n<code language=julia-1.5>\neven_odd_count(134)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(135)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(136)\n</cell>\n<code language=julia-1.5>\neven_odd_count(137)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(138)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(139)\n</cell>\n<code language=julia-1.5>\neven_odd_count(140)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(141)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(142)\n</cell>\n<code language=julia-1.5>\neven_odd_count(143)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(144)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(145)\n</cell>\n<code language=julia-1.5>\neven_odd_count(146)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_", "    \n    even_count = 0\n  \
    \  odd_count = 0\n    \n    if num < 0\n        return (0, 0) \n    end\n    \n\
    \    while num > 0\n        if num % 2 == 0\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = num / 2\n    end\n    \n    return (even_count, odd_count)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000002)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000006)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000009)", "    if num < 0\n     \
    \   error(\"The input must be positive\")\n    elseif num == 0\n        error(\"\
    The input must be positive\")\n    else\n        even, odd = 0, 0\n        for\
    \ i in 2..num\n            if num % i == 0\n                even += i\n      \
    \      else\n                odd += i\n        end\n        return (even, odd)\n\
    \    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(-10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(3)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(8)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(9)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(11)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(14)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(16)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(17)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num / 10, num % 10)\n    elseif num < 1000 then \n        return\
    \ (num / 100, num % 100)\n    elseif num < 10000 then \n        return (num /\
    \ 1000, num % 1000)\n    elseif num < 100000 then \n        return (num / 10000,\
    \ num % 10000)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ num % 1000000)\n    elseif num < 100000000 then \n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then \n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then \n        return (num /\
    \ 1000000000, num % 1000000000)\n    elseif num < 100000000000 then \n       \
    \ return (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ then \n        return (num / 100000000000, num % 100000000000)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, num % 1000000000000)\n\
    \    elseif num < 100000000000000 then \n        return (num / 10000000000000,\
    \ num % 10000000000000)\n    elseif num < 1000000000000000 then \n        return\
    \ (num / 100000000000000, num % 100000000000000)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, num % 1000000000000000)\n   \
    \ elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 100000000000000000 then \n      \
    \  return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 1000000000000000000 then \n        return (num / 100000000000000000, num %\
    \ 100000000000000000)\n    elseif num < 10000000000000000000 then \n        return\
    \ (num / 1000000000000000000, num % 1000000000000000000)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, num % 10000000000000000000)\n\
    \    elseif num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 10000000000000000000000, num % 10000000000000000000000)\n\
    \    elseif num < 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ num % 100000000000000000000000)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000, num % 1000000000000000000000000)\n\
    \    elseif num < ", "    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n\
    \        if x % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in a given number.", "    if num < 10 then return\
    \ (num, 0)\n    even, odd = 0, 0\n    for i in 2 to num\n        if num % i ==\
    \ 0 then even += 1 \n        else odd += 1 \n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_", "    if num < 10 \n        return\
    \ (num, 0) \n    else \n        odd_count = even_odd_count(num/10)\n        return\
    \ (odd_count[0]+num, odd_count[1]+1)\nend", "    if num < 10 then \n        return\
    \ (num, 0)\n    elseif num < 100 then \n        return (num / 10, num % 10)\n\
    \    elseif num < 1000 then \n        return (num / 100, num % 100)\n    elseif\
    \ num < 10000 then \n        return (num / 1000, num % 1000)\n    elseif num <\
    \ 100000 then \n        return (num / 10000, num % 10000)\n    elseif num < 1000000\
    \ then \n        return (num / 100000, num % 100000)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, num % 1000000)\n    elseif num < 100000000\
    \ then \n        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num", "    if num < 0\n       \
    \ error(\"The number should be positive\")\n    elseif num == 0\n        (0, 2)\n\
    \    else\n        even, odd = 0, 0\n        for n in num\n            if n %\
    \ 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000\
    \ then \n        return (num / 100, num % 100)\n    elseif num < 10000 then \n\
    \        return (num / 1000, num % 1000)\n    elseif num < 100000 then \n    \
    \    return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n     \
    \   return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n   \
    \     return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000", "    if num < 10 then return (num, 0)\n    even, odd = 0,\
    \ 0\n    while num > 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = num\
    \ / 2\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(12345)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a number. \nThe factorial of a number $n$ is defined as:",
  "    even::Int64 = 0\n    odd::Int64 = 0\n    \n    for i in num\n        if i %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(10) == (2, 1)\n@assert even_odd_count(11) == (3, 1)\n@assert\
    \ even_odd_count(12) == (2, 2)\n@assert even_odd_count(13) == (3, 2)\n@assert\
    \ even_odd_count(14) == (2, 3)\n@assert even_odd_count(15) == (3, 3)\n@assert\
    \ even_odd_count(16) == (2, 4)\n@assert even_odd_count(17) == (3, 4)\n@assert\
    \ even_odd_count(18) == (2, 5)\n@assert even_odd_count(19) == (3, 5)\n@assert\
    \ even_odd_count(20) == (2, 6)\n@assert even_odd_count(21) == (3, 6)\n@assert\
    \ even_odd_count(22) == (2, 7)\n@assert even_odd_count(23) == (3, 7)\n@assert\
    \ even_odd_count(24) == (2, 8)\n@assert even_odd_count(25) == (3, 8)\n@assert\
    \ even_odd_count(26) == (2, 9)\n@assert even_odd_count(27) == (3, 9)\n@assert\
    \ even_odd_count(28) == (2, 10)\n@assert even_odd_count(29) == (3, 10)\n@assert\
    \ even_odd_count(30) == (2, 11)\n@assert even_odd_count(31) == (3, 11)\n@assert\
    \ even_odd_count(32) == (2, 12)\n@assert even_odd_count(33) == (3, 12)\n@assert\
    \ even_odd_count(34) == (2, 13)\n@assert even_odd_count(35) == (3, 13)\n@assert\
    \ even_odd_count(36) == (2, 14)\n@assert even_odd_count(37) == (3, 14)\n@assert\
    \ even_odd_count(38) == (2, 15)\n@assert even_odd_count(39) == (3, 15)\n@assert\
    \ even_odd_count(40) == (2, 16)\n@assert even_odd_count(41) == (3, 16)\n@assert\
    \ even_odd_count(42) == (2, 17)\n@assert even_odd_count(43) == (3, 17)\n@assert\
    \ even_odd_count(44) == (2, 18)\n@assert even_odd_count(45) == (3, 18)\n@assert\
    \ even_odd_count(46) == (2, 19)\n@assert even_odd_count(47) == (3, 19", "    if\
    \ num < 0\n        error(\"The input number must be positive\")\n    elseif num\
    \ == 0\n        error(\"The input number must be positive\")\n    else\n     \
    \   even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n   \
    \             even += 1\n            else\n                odd += 1\n        \
    \    end \n            num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 10 then \n     \
    \   return (num, 0)\n    else \n        odd_count = 0\n        even_count = 0\n\
    \        \n        for i in num:\n            if i%2 == 0 then\n             \
    \   even_count = even_count + 1\n            else \n                odd_count\
    \ = odd_count + 1\n        \n        return (even_count, odd_count)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000001)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000002)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000003)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000004)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000005)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000006)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000007)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000008)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000009)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000010)\n</cell>\n", "    if\
    \ num < 0 \n        error(\"The given number must be positive\")\n    else if\
    \ num == 0\n        (0, 0) \n    else \n        even_odd_count(num/10) + even_odd_count(num%10)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>", "    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ \n        return (num, 0)\n    elseif num < 100 then \n        return (num /\
    \ 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100, num %\
    \ 100)\n    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n\
    \    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n  \
    \  elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n \
    \   elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000\
    \ then \n        return (num / 100, num % 100)\n    elseif num < 10000 then \n\
    \        return (num / 1000, num % 1000)\n    elseif num < 100000 then \n    \
    \    return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n     \
    \   return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n   \
    \     return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 0\n    \
    \    error(\"The given number should be positive\")\n    end\n    even, odd =\
    \ 0, 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n  \
    \      else\n            odd += 1\n        end\n        num /= 10\n    end\n \
    \   return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5",
  "    if num < 10 then return (num, 0)\n    else if num < 100 then return (num, 0)\n\
    \    else if num < 1000 then return (num, 0)\n    else if num < 10000 then return\
    \ (num, 0)\n    else if num < 100000 then return (num, 0)\n    else if num < 1000000\
    \ then return (num, 0)\n    else if num < 10000000 then return (num, 0)\n    else\
    \ if num < 100000000 then return (num, 0)\n    else if num < 1000000000 then return\
    \ (num, 0)\n    else if num < 10000000000 then return (num, 0)\n    else if num\
    \ < 100000000000 then return (num, 0)\n    else if num < 1000000000000 then return\
    \ (num, 0)\n    else if num < 10000000000000 then return (num, 0)\n    else if\
    \ num < 100000000000000 then return (num, 0)\n    else if num < 1000000000000000\
    \ then return (num, 0)\n    else if num < 10000000000000000 then return (num,\
    \ 0)\n    else if num < 100000000000000000 then return (num, 0)\n    else if num\
    \ < 1000000000000000000 then return (num, 0)\n    else return (num, 0)\nend",
  "    if num < 10 then\n        return (num, 0)\n    elseif num < 100 then\n    \
    \    return (num / 10, num % 10)\n    elseif num < 1000 then\n        return (num\
    \ / 100, num % 100)\n    elseif num < 10000 then\n        return (num / 1000,\
    \ num % 1000)\n    elseif num < 100000 then\n        return (num / 10000, num\
    \ % 10000)\n    elseif num < 1000000 then\n        return (num / 100000, num %\
    \ 100000)\n    elseif num < 10000000 then\n        return (num / 1000000, num\
    \ % 1000000)\n    elseif num < 100000000 then\n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then\n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then\n        return (num / 1000000000,\
    \ num % 1000000000)\n    elseif num < 100000000000 then\n        return (num /\
    \ 10000000000, num % 10000000000)\n    elseif num < 1000000000000 then\n     \
    \   return (num / 100000000000, num % 100000000000)\n    elseif num < 10000000000000\
    \ then\n        return (num / 1000000000000, num % 1000000000000)\n    elseif\
    \ num < 100000000000000 then\n        return (num / 10000000000000, num % 10000000000000)\n\
    \    elseif num < 1000000000000000 then\n        return (num / 100000000000000,\
    \ num % 100000000000000)\n    elseif num < 10000000000000000 then\n        return\
    \ (num / 1000000000000000, num % 1000000000000000)\n    elseif num < 100000000000000000\
    \ then\n        return (num / 10000000000000000, num % 10000000000000000)\n  \
    \  elseif num < 100000000000000000 then\n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000 then\n     \
    \   return (num / 100000000000000000, num % 100000000000000000)\n    else\n  \
    \      return (num / 1000000000000000000, num % 1000000000000000000)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.", "    if num < 0 \n\
    \        error(\"The given number must be positive\")\n    else if num == 0\n\
    \        (0, 0) \n    else\n        even_odd_count(num / 10) + (num % 10 == 0\
    \ ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(0)\
    \ == (0, 0)\n@assert even_odd_count(1) == (0, 1)\n@assert even_odd_count(2) ==\
    \ (1, 1)\n@assert even_odd_count(3) == (1, 0)\n@assert even_odd_count(4) == (0,\
    \ 1)\n@assert even_odd_count(5) == (1, 1)\n@assert even_odd_count(6) == (1, 0)\n\
    @assert even_odd_count(7) == (0, 1)\n@assert even_odd_count(8) == (1, 1)\n@assert\
    \ even_odd_count(9) == (1, 0)\n@assert even_odd_count(10) == (0, 1)\n@assert even_odd_count(11)\
    \ == (1, 1)\n@assert even_odd_count(12) == (1, 0)\n@assert even_odd_count(13)\
    \ == (0, 1)\n@assert even_odd_count(14) == (1, 1)\n@assert even_odd_count(15)\
    \ == (1, 0)\n@assert even_odd_count(16) == (0, 1)\n@assert even_odd_count(17)\
    \ == (1, 1)\n@assert even_odd_count(18) == (1, 0)\n@assert even_odd_count(19)\
    \ == (0, 1)\n@assert even_odd_count(20) == (1, 1)\n@assert even_odd_count(21)\
    \ == (1, 0)\n@assert even_odd_count(22) == (0, 1)\n@assert even_odd_count(23)\
    \ == (1, 1)\n@assert even_odd_count(24) == (1, 0)\n@assert even_odd_count(25)\
    \ == (0, 1)\n@assert even_odd_count(26) == (1, 1)\n@assert even_odd_count(27)\
    \ == (1, 0)\n@assert even_odd_count(28) == (0, 1)\n@assert even_odd_count(29)\
    \ == (1, 1)\n@assert even_odd_count(30) == (1, 0)\n@assert even_odd_count(31)\
    \ == (0, 1)\n@assert even_odd_count(32) == (1, 1)\n@assert even_odd_count(33)\
    \ == (1, 0)\n@assert even_odd_count(34) == (0, 1)\n@assert even_odd_count(35)\
    \ == (1, 1)\n@assert even_odd_count(36) == (1, 0)\n@assert even_odd_count(37)\
    \ == (0, 1)\n@assert even_odd_count(38) == (1, 1)\n@", "    if num < 10 then return\
    \ (num, 0)\n    even, odd = 0, 0\n    while num > 0 do\n        even = even +\
    \ num % 10\n        odd = odd + num % 10\n        num = num / 10\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[2]\n\
    </cell>\n<code language=julia-1.5>", "    if num < 10 then \n        return (num,\
    \ 0)\n    else\n        even, odd = 0, 0\n        for n in num:\n            if\
    \ n % 2 == 0 then\n                even += n\n            else\n             \
    \   odd += n\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788999999999999)\n</cell",
  "    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    digits = num.to_digits()\n\
    \    for d in digits\n        if d % 2 == 0 then even += 1 \n        else odd\
    \ += 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(1234)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.0>\neven_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(123456789012)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(1234567890123)\n</cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788", "   \
    \ if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n   \
    \     return (num / 10, num % 10)\n    elseif num < 1000 then \n        return\
    \ (num / 100, num % 100)\n    elseif num < 10000 then \n        return (num /\
    \ 1000, num % 1000)\n    elseif num < 100000 then \n        return (num / 10000,\
    \ num % 10000)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ num % 1000000)\n    elseif num < 100000000 then \n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then \n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then \n        return (num /\
    \ 1000000000, num % 1000000000)\n    elseif num < 100000000000 then \n       \
    \ return (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ then \n        return (num / 100000000000, num % 100000000000)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, num % 1000000000000)\n\
    \    elseif num < 100000000000000 then \n        return (num / 10000000000000,\
    \ num % 10000000000000)\n    elseif num < 1000000000000000 then \n        return\
    \ (num / 100000000000000, num % 100000000000000)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, num % 1000000000000000)\n   \
    \ elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 1000000000000000000 then \n     \
    \   return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 10000000000000000000 then \n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n     \
    \   return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num", "    if num < 10 then \n\
    \        return (num, 0)\n    elseif num < 100 then \n        return (num / 10,\
    \ num % 10)\n    elseif num < 1000 then \n        return (num / 100, num % 100)\n\
    \    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n    elseif\
    \ num < 100000 then \n        return (num / 10000, num % 10000)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, num % 100000)\n    elseif num\
    \ < 10000000 then \n        return (num / 1000000, num % 1000000)\n    elseif\
    \ num < 100000000 then \n        return (num / 10000000, num % 10000000)\n   \
    \ elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 \n  \
    \      return (num, 0)\n    else \n        return (even_odd_count(num/10), num%10\
    \ + even_odd_count(num%10))\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(12321)\n</cell>\n<code language=julia-1.4>",
  "    if num < 10 then return (1,0)\n    even, odd = 0, 0\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1 \n        num = num / 2\n    return (even, odd)\nend",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even_odd_count_tuple\
    \ = Tuple{Int64, Int64}()\n    even_count = 0\n    odd_count = 0\n    for n in\
    \ num\n        if n % 2 == 0\n            even_count += 1\n        else\n    \
    \        odd_count += 1\n        end\n    end\n    even_odd_count_tuple = (even_count,\
    \ odd_count)\n    return even_odd_count_tuple\nend", "    if num < 0 \n      \
    \  error(\"The given number must be positive\")\n    else if num == 0\n      \
    \  (0, 0) \n    else \n        even, odd = even_odd_count(num / 2)\n        (even\
    \ + odd, num - even * 2)\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    if num < 10 then\n        return (num,\
    \ 0)\n    else\n        even, odd = 0, 0\n        for n in num:\n            if\
    \ n % 2 == 0 then\n                even += n\n            else\n             \
    \   odd += n\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=juli", "    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ i in num\n        if i rem 2 == 0\n            even::Int64 = even + 1\n    \
    \    else\n            odd::Int64 = odd + 1 \n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n\
    <code language=julia-1.5>", "    if num < 10 then\n        return (num, 0)\n \
    \   elseif num < 100 then\n        return (num - 10, 1)\n    elseif num < 1000\
    \ then\n        return (num - 100, 2)\n    elseif num < 10000 then\n        return\
    \ (num - 1000, 3)\n    elseif num < 100000 then\n        return (num - 10000,\
    \ 4)\n    elseif num < 1000000 then\n        return (num - 100000, 5)\n    elseif\
    \ num < 10000000 then\n        return (num - 1000000, 6)\n    elseif num < 100000000\
    \ then\n        return (num - 10000000, 7)\n    elseif num < 1000000000 then\n\
    \        return (num - 100000000, 8)\n    elseif num < 10000000000 then\n    \
    \    return (num - 1000000000, 9)\n    elseif num < 100000000000 then\n      \
    \  return (num - 10000000000, 10)\n    elseif num < 1000000000000 then\n     \
    \   return (num - 100000000000, 11)\n    elseif num < 10000000000000 then\n  \
    \      return (num - 1000000000000, 12)\n    elseif num < 100000000000000 then\n\
    \        return (num - 10000000000000, 13)\n    elseif num < 1000000000000000\
    \ then\n        return (num - 100000000000000, 14)\n    elseif num < 10000000000000000\
    \ then\n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then\n        return (num - 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ then\n        return (num - 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ then\n        return (num - 100000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ then\n        return (num - 100000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ then\n        return (num - 100000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ then\n        return (num - 100000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ then\n        return (num - 100000000000000000, 22)\n    elseif num < 1000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 28)\n    elseif num < 1000000000000000000000000000000\
    \ then\n        return (num - ", "    if num < 10 then \n        return (num,\
    \ 0)\n    elseif num < 100 then \n        return (num / 10, 1)\n    elseif num\
    \ < 1000 then \n        return (num / 100, 2)\n    elseif num < 10000 then \n\
    \        return (num / 1000, 3)\n    elseif num < 100000 then \n        return\
    \ (num / 10000, 4)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ 5)\n    elseif num < 10000000 then \n        return (num / 1000000, 6)\n   \
    \ elseif num < 100000000 then \n        return (num / 10000000, 7)\n    elseif\
    \ num < 1000000000 then \n        return (num / 100000000, 8)\n    elseif num\
    \ < 10000000000 then \n        return (num / 1000000000, 9)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, 10)\n    elseif num <\
    \ 1000000000000 then \n        return (num / 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num / 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num / 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ 16)\n    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ 17)\n    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ 18)\n    elseif num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ 19)\n    elseif num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ 20)\n    elseif num < 10000000000000000000000 then \n        return (num / 1000000000000000000000,\
    \ 21)\n    elseif num < 100000000000000000000000 then \n        return (num /\
    \ 10000000000000000000000, 22)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000, 24)\n    elseif num\
    \ < 100000000000000000000000000 then \n        return (num / 10000000000000000000000000,\
    \ 25)\n    elseif num < 1000000000000000000000000000 then \n        return (num\
    \ / 100000000000000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000000, 27)\n    elseif num\
    \ < 100000000000000000000000000000 then \n        return (num / 10000000000000000000000000000,\
    \ 28)\n    elseif num < 1000000000000000000000000000000 then \n        return\
    \ (num / 100000000000000000000000000", "    if num < 10 then \n        return\
    \ (num, 0)\n    else \n        odd_count = 0\n        even_count = 0\n       \
    \ digit = num % 10\n        while digit > 0\n            if digit % 2 == 1\n \
    \               even_count += 1\n            else\n                odd_count +=\
    \ 1\n            digit = digit / 10\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12321)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>", "    \n    even_count = 0\n    odd_count = 0\n    \n    for n in num\n\
    \        if n % 2 == 0\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n    end\n    \n    return (even_count,\
    \ odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The given\
    \ number should be positive\")\n    end\n    even, odd = 0, 0\n    for i in 1:num\n\
    \        if i % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(13)\n</cell>\n<code language=julia-1.5>\neven_odd_count(14)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(15)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(16)\n</cell>\n<code language=julia-1.5>\neven_odd_count(17)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(18)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(19)\n</cell>\n<code language=julia-1.5>\neven_odd_count(20)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(21)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(22)\n</cell>\n<code language=julia-1.5>\neven_odd_count(23)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_", "    if num < 10 then return (0,0)\n  \
    \  even, odd = 0, 0\n    for i in reverse(String(num))::Int do\n        if i mod\
    \ 2 == 0 then even += 1 else odd += 1\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num / 10, 1)\n    elseif num < 1000 then \n        return (num\
    \ / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n  \
    \  elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 23)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 24)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 26)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 27)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000000", "    \n    even =\
    \ 0\n    odd = 0\n    \n    for i in num\n        if i%2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n    end\n    \n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000\
    \ then \n        return (num / 100, num % 100)\n    elseif num < 10000 then \n\
    \        return (num / 1000, num % 1000)\n    elseif num < 100000 then \n    \
    \    return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n     \
    \   return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n   \
    \     return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000", "    if num < 10 then return (num, 0)\n    even, odd = 0,\
    \ 0\n    for i in reverse(String(num))\n        if i == '0' then even += 1 else\
    \ odd += 1\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(10) == (1, 1)\n@assert even_odd_count(11) == (0, 0)\n@assert\
    \ even_odd_count(12) == (1, 0)\n@assert even_odd_count(13) == (0, 1)\n@assert\
    \ even_odd_count(14) == (1, 1)\n@assert even_odd_count(15) == (0, 0)\n@assert\
    \ even_odd_count(16) == (1, 0)\n@assert even_odd_count(17) == (0, 1)\n@assert\
    \ even_odd_count(18) == (1, 1)\n@assert even_odd_count(19) == (0, 0)\n@assert\
    \ even_odd_count(20) == (1, 0)\n@assert even_odd_count(21) == (0, 1)\n@assert\
    \ even_odd_count(22) == (1, 1)\n@assert even_odd_count(23) == (0, 0)\n@assert\
    \ even_odd_count(24) == (1, 0)\n@assert even_odd_count(25) == (0, 1)\n@assert\
    \ even_odd_count(26) == (1, 1)\n@assert even_odd_count(27) == (0, 0)\n@assert\
    \ even_odd_count(28) == (1, 0)\n@assert even_odd_count(29) == (0, 1)\n@assert\
    \ even_odd_count(30) == (1, 1)\n@assert even_odd_count(31) == (0, 0)\n@assert\
    \ even_odd_count(32) == (1, 0)\n@assert even_odd_count(33) == (0, 1)\n@assert\
    \ even_odd_count(34) == (1, 1)\n@assert even_odd_count(35) == (0, 0)\n@assert\
    \ even_odd_count(36) == (1, 0)\n@assert even_odd_count(37) == (0, 1)\n@assert\
    \ even_odd_count(38) == (1, 1)\n@assert even_odd_count(39) == (0, 0)\n@assert\
    \ even_odd_count(40) == (1, 0)\n@assert even_odd_count(41) == (0, 1)\n@assert\
    \ even_odd_count(42) == (1, 1)\n@assert even_odd_count(43) == (0, 0)\n@assert\
    \ even_odd_count(44) == (1, 0)\n@assert even_odd_count(45) == (0, 1)\n@assert\
    \ even_odd_count(46) == (1, 1)\n@assert even_odd_count(47) == (0, 0)\n@assert\
    \ even_odd_count(48) == (1, 0)\n@assert even_odd_count(49) == (0, 1)\n", "   \
    \ if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n   \
    \     return (num - 10, 1)\n    elseif num < 1000 then \n        return (num -\
    \ 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n    elseif\
    \ num < 100000 then \n        return (num - 10000, 4)\n    elseif num < 1000000\
    \ then \n        return (num - 100000, 5)\n    elseif num < 10000000 then \n \
    \       return (num - 1000000, 6)\n    elseif num < 100000000 then \n        return\
    \ (num - 10000000, 7)\n    elseif num < 1000000000 then \n        return (num\
    \ - 100000000, 8)\n    elseif num < 10000000000 then \n        return (num - 1000000000,\
    \ 9)\n    elseif num < 100000000000 then \n        return (num - 10000000000,\
    \ 10)\n    elseif num < 1000000000000 then \n        return (num - 100000000000,\
    \ 11)\n    elseif num < 10000000000000 then \n        return (num - 1000000000000,\
    \ 12)\n    elseif num < 100000000000000 then \n        return (num - 10000000000000,\
    \ 13)\n    elseif num < 1000000000000000 then \n        return (num - 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num - 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num - 10000000000000000,\
    \ 16)\n    elseif num < 100000000000000000 then \n        return (num - 100000000000000000,\
    \ 17)\n    elseif num < 1000000000000000000 then \n        return (num - 100000000000000000,\
    \ 18)\n    elseif num < 10000000000000000000 then \n        return (num - 100000000000000000,\
    \ 19)\n    elseif num < 100000000000000000000 then \n        return (num - 100000000000000000,\
    \ 20)\n    elseif num < 1000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 21)\n    elseif num < 10000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 22)\n    elseif num < 100000000000000000000000 then \n        return (num -\
    \ 100000000000000000, 23)\n    elseif num < 1000000000000000000000000 then \n\
    \        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 then \n        return (num,\
    \ 0)\n    elseif num < 100 then \n        return (num / 10, num % 10)\n    elseif\
    \ num < 1000 then \n        return (num / 100, num % 100)\n    elseif num < 10000\
    \ then \n        return (num / 1000, num % 1000)\n    elseif num < 100000 then\
    \ \n        return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n\
    \        return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n\
    \        return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then\
    \ \n        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 0 \n   \
    \     error(\"The given number must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    for x in reverse(split(string(num), \"\"))\n        if x % 2 == 0\n \
    \           even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789", "    if num < 10\
    \ then return (1, 0)\n    even, odd = 0, 0\n    for x in num:\n        if x %\
    \ 2 == 0 then even += 1 \n        else odd += 1 \n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789", "    if num < 10 then return\
    \ (num, 0)\n    \n    even, odd = 0, 0\n    \n    for i in reverse(String(num))\n\
    \        if i == '0' then even += 1 else odd += 1 \n    \n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(0) == (0, 0)\n\
    @assert even_odd_count(1) == (0, 1)\n@assert even_odd_count(10) == (1, 1)\n@assert\
    \ even_odd_count(99) == (1, 1)\n@assert even_odd_count(100) == (1, 0)\n@assert\
    \ even_odd_count(1000) == (1, 1)\n@assert even_odd_count(10000) == (2, 1)\n@assert\
    \ even_odd_count(100000) == (2, 2)\n@assert even_odd_count(1000000) == (3, 2)\n\
    @assert even_odd_count(10000000) == (3, 3)\n@assert even_odd_count(100000000)\
    \ == (4, 3)\n@assert even_odd_count(1000000000) == (4, 4)\n@assert even_odd_count(10000000000)\
    \ == (5, 4)\n@assert even_odd_count(100000000000) == (5, 5)\n@assert even_odd_count(1000000000000)\
    \ == (6, 5)\n@assert even_odd_count(10000000000000) == (6, 6)\n@assert even_odd_count(100000000000000)\
    \ == (7, 6)\n@assert even_odd_count(1000000000000000) == (7, 7)\n@assert even_odd_count(10000000000000000)\
    \ == (8, 7)\n@assert even_odd_count(100000000000000000) == (8, 8)\n@assert even_odd_count(1000000000000000000)\
    \ == (9, 8)\n@assert even_odd_count(10000000000000000000) == (9, 9)\n@assert even_odd_count(100000000000000000000)\
    \ == (10, 9)\n@assert even_odd_count(1000000000000000000000) == (10, 10)\n@assert\
    \ even_odd_count(10000000000000000000000) == (11, 10)\n@assert even_odd_count(100000000000000000000000)\
    \ == (11, 11)\n@assert even_odd_count(1000000000000000000000000) == (12, 11)\n\
    @assert even_odd_count(10000000000000000000000000) == (12, 12)\n@assert even_odd_count(100000000000000000000000000)\
    \ == (13, 12)\n@assert even_odd_count(1000000000000000000000000000) == (13, 13)\n\
    @assert even_odd_count(10000000000000000000000000000) == (14, 13)\n@assert even_odd_count(100000000000000000000000000000)\
    \ == (14, 14)\n@assert even_odd_count(1000000000000000000000000000000) == ", " \
    \   if num < 10 then \n        return (num, 0)\n    elseif num < 100 then\n  \
    \      return (num / 10, num % 10)\n    else\n        odd_count = even_odd_count(num\
    \ / 10)\n        return (odd_count[0] + 1, odd_count[1] + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nThe function should ignore spaces and punctuation.", "    if\
    \ num < 0 \n        error(\"The input must be positive\")\n    else if num ==\
    \ 0\n        return (0,0)\n    else\n        even, odd = 0, 0\n        for i in\
    \ 1:num\n            if i%2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.", "    \n    even =\
    \ 0\n    odd = 0\n    \n    for i in num:\n        if i%2==0 then\n          \
    \  even = even+1\n        else\n            odd = odd+1\n        end\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n", "    if num < 10 then return (1, 0)\n \
    \   even, odd = 0, 0\n    for i in reverse(String(num))\n        if i == '0' then\
    \ even += 1 else odd += 1\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(124)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(125)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(126)\n</cell>\n<code language=julia-1.5>\neven_odd_count(127)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(128)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(129)\n</cell>\n<code language=julia-1.5>\neven_odd_count(130)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(131)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(132)\n</cell>\n<code language=julia-1.5>\neven_odd_count(133)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(134)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(135)\n</cell>\n<code language=julia-1.5>\neven_odd_count(136)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(137)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(138)\n</cell>\n<code language=julia-1.5>\neven_odd_count(139)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(140)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(141)\n</cell>\n<code language=julia-1.5>\neven_odd_count(142)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(143)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(144)\n</cell>\n<code language=julia-1.5>\neven_odd_count(145)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(146)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(147)\n</cell>\n<code language=julia-1.5>\neven_odd_count(148)\n\
    </cell>\n", "    if num < 0 \n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        (0, 0) \n    else\n        even, odd = even_odd_count(num/10)\n\
    \        (even+num%10, odd+num%10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n", "    if num < 10 then \n        return (num, 0)\n    elseif num <\
    \ 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n\
    \        return (num / 100, num % 100)\n    elseif num < 10000 then \n       \
    \ return (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return\
    \ (num / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num\
    \ / 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ \n        return (num, 0)\n    elseif num < 100 then \n        return (num -\
    \ num % 10, 1)\n    elseif num < 1000 then \n        return (num - num % 100,\
    \ (num - num % 10) / 2)\n    elseif num < 10000 then \n        return (num - num\
    \ % 1000, (num - num % 1000 - num % 10) / 3)\n    elseif num < 100000 then \n\
    \        return (num - num % 10000, (num - num % 10000 - num % 10) / 4)\n    elseif\
    \ num < 1000000 then \n        return (num - num % 100000, (num - num % 100000\
    \ - num % 1000 - num % 10) / 5)\n    elseif num < 10000000 then \n        return\
    \ (num - num % 1000000, (num - num % 1000000 - num % 100000 - num % 1000 - num\
    \ % 10) / 6)\n    elseif num < 100000000 then \n        return (num - num % 10000000,\
    \ (num - num % 10000000 - num % 1000000 - num % 100000 - num % 1000 - num % 10)\
    \ / 7)\n    elseif num < 1000000000 then \n        return (num - num % 100000000,\
    \ (num - num % 100000000 - num % 10000000 - num % 1000000 - num % 100000 - num\
    \ % 1000 - num % 10) / 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - num % 1000000000, (num - num % 1000000000 - num % 100000000 - num % 10000000\
    \ - num % 1000000 - num % 100000 - num % 1000 - num % 10 - num % 10) / 9)\n  \
    \  elseif num < 100000000000 then \n        return (num - num % 10000000000, (num\
    \ - num % 10000000000 - num % 1000000000 - num % 100000000 - num % 10000000 -\
    \ num % 1000000 - num % 100000 - num % 1000 - num % 10 - num % 100 - num % 10)\
    \ / 10)\n    elseif num < 1000000000000 then \n        return (num - num % 100000000000,\
    \ (num - num % 100000000000 - num % 10000000000 - num % 1000000000 - num % 100000000\
    \ - num % 10000000 - num % 1000000 - num % 100000 - num % 1000 - num % 10 - num\
    \ % 1000 - num % 100 - num % 10) / 11)\n    elseif num < 10000000000000 then \n\
    \        return (num - num % 1000000000000, (num - num % 1000000000000 - num %\
    \ 100000000000 - num % 10000000000 - num % 1000000000 - num % 100000000 - num\
    \ % 10000000 - num % 1000000 - num % 100000 - num % 1000 - num % 10 - num % 1000\
    \ - num % 1000 - num % 100 - ", "    \n    even = 0\n    odd = 0\n    \n    for\
    \ x in num\n        if x % 2 == 0\n            even = even + 1\n        else\n\
    \            odd = odd + 1 \n    end\n    \n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:", "    if num < 0 \n        error(\"The input must be positive\")\n    end\n\
    \    even_count = 0\n    odd_count = 0\n    \n    for i in 1:num\n        if i\
    \ % 2 == 0\n            even_count = even_count + 1\n        else\n          \
    \  odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    if num < 0 \n        error(\"The given number must be positive\")\n\
    \    elseif num == 0\n        (0, 0) \n    else\n        odd_count = sum(num %\
    \ i | i <- [1..Int(sqrt(num))], i % 2 == 1)\n        even_count = sum(num % i\
    \ | i <- [1..Int(sqrt(num))], i % 2 != 1)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(0)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-10)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.3>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(10000000000000000000)\n</cell", "  \
    \  if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n        num = num / 2\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.", "    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of vowels present in the string.", " \
    \   if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    for i in reverse(String(num)):\n\
    \        if i == '0' then even += 1 else odd += 1\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(1234) == (6, 2)\n@assert\
    \ even_odd_count(0) == (0, 0)\n@assert even_odd_count(1) == 0\n@assert even_odd_count(2)\
    \ == (1, 1)\n@assert even_odd_count(3) == (1, 1)\n@assert even_odd_count(4) ==\
    \ (2, 2)\n@assert even_odd_count(5) == (2, 2)\n@assert even_odd_count(6) == (3,\
    \ 3)\n@assert even_odd_count(7) == (3, 3)\n@assert even_odd_count(8) == (4, 4)\n\
    @assert even_odd_count(9) == (4, 4)\n@assert even_odd_count(10) == (5, 5)\n@assert\
    \ even_odd_count(11) == (5, 5)\n@assert even_odd_count(12) == (6, 6)\n@assert\
    \ even_odd_count(13) == (6, 6)\n@assert even_odd_count(14) == (7, 7)\n@assert\
    \ even_odd_count(15) == (7, 7)\n@assert even_odd_count(16) == (8, 8)\n@assert\
    \ even_odd_count(17) == (8, 8)\n@assert even_odd_count(18) == (9, 9)\n@assert\
    \ even_odd_count(19) == (9, 9)\n@assert even_odd_count(20) == (10, 10)\n@assert\
    \ even_odd_count(21) == (10, 10)\n@assert even_odd_count(22) == (11, 11)\n@assert\
    \ even_odd_count(23) == (11, 11)\n@assert even_odd_count(24) == (12, 12)\n@assert\
    \ even_odd_count(25) == (12, 12)\n@assert even_odd_count(26) == (13, 13)\n@assert\
    \ even_odd_count(27) == (13, 13)\n@assert even_odd_count(28) == (14, 14)\n@assert\
    \ even_odd_count(29) == (14, 14)\n@assert even_odd_count(30) == (15, 15)\n@assert\
    \ even_odd_count(31) == (15, 15)\n@assert even_odd_count(32) == (16, 16)\n@assert\
    \ even_odd_count(33) == (16, 16)\n@assert even_odd_count(34) == (17, 17)\n@assert\
    \ even_odd_count(35) == ", "    if num < 10 then return (num, 0)\n    else \n\
    \        odd_count = even_odd_count(num/10)\n        return (num%10, odd_count[1]\
    \ + odd_count[0])\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-", "    even = 0\n    odd = 0\n    for x in num\n       \
    \ if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called count_digits(num::Int64)\
    \ that returns the number of digits in num.", "    if num < 10 then return (0,0)\n\
    \    even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then even\
    \ += 1 end\n        if num % 2 != 0 then odd += 1 end\n        num /= 10\n   \
    \ return (even, odd)\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_", "    if num < 0 \n        error(\"\
    The input number must be positive.\")\n    else if num == 0\n        return (0,0)\n\
    \    else\n        even = num % 2 == 0\n        odd = num % 2 != 0\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(-10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(2)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(3)\n</cell>\n<code language=julia-1.4>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(5)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(6)\n</cell>\n<code language=julia-1.4>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(8)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(9)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(11)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(13)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(14)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(15)\n</cell>\n<code language=julia-1.4>\neven_odd_count(16)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(17)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(18)\n</cell>\n<code language=julia-1.4>\neven_odd_count(19)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(20)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(21)\n</cell>\n<code language=julia-1.4>\neven_odd_count(22)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(23)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_", "    if num < 10 then \n        return (num, 0)\n    else \n     \
    \   odd_count = even_odd_count(num / 10)\n        return (odd_count[0] + 1, odd_count[1]\
    \ + 1) \nend\n\"\"\"\n</cell>\n<code language=julia-1.4>", "    if num < 0\n \
    \       error(\"The given number must be positive\")\n    end\n    even, odd =\
    \ 0, 0\n    for i in 1:num\n        if i % 2 == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(3)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(4)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(5)\n</cell>\n<code language=julia-1.5>\neven_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(8)\n</cell>\n<code language=julia-1.5>\neven_odd_count(9)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(11)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(13)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(14)\n</cell>\n<code language=julia-1.5>\neven_odd_count(15)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(16)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(17)\n</cell>\n<code language=julia-1.5>\neven_odd_count(18)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(19)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(20)\n</cell>\n<code language=julia-1.5>\neven_odd_count(21)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(22)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(23)\n</cell>\n<code language=julia-1.5>\neven_odd_", "    if num\
    \ < 10 then\n        return (0,0)\n    elseif num < 100 then\n        return (0,1)\n\
    \    elseif num < 1000 then\n        return (1,0)\n    elseif num < 10000 then\n\
    \        return (1,1)\n    elseif num < 100000 then\n        return (2,0)\n  \
    \  elseif num < 1000000 then\n        return (2,1)\n    elseif num < 10000000\
    \ then\n        return (3,0)\n    elseif num < 100000000 then\n        return\
    \ (3,1)\n    elseif num < 1000000000 then\n        return (4,0)\n    elseif num\
    \ < 10000000000 then\n        return (4,1)\n    elseif num < 100000000000 then\n\
    \        return (5,0)\n    elseif num < 1000000000000 then\n        return (5,1)\n\
    \    elseif num < 10000000000000 then\n        return (6,0)\n    elseif num <\
    \ 100000000000000 then\n        return (6,1)\n    elseif num < 1000000000000000\
    \ then\n        return (7,0)\n    elseif num < 10000000000000000 then\n      \
    \  return (7,1)\n    elseif num < 100000000000000000 then\n        return (8,0)\n\
    \    elseif num < 100000000000000000 then\n        return (8,1)\n    elseif num\
    \ < 1000000000000000000 then\n        return (9,0)\n    elseif num < 10000000000000000000\
    \ then\n        return (9,1)\n    else\n        return (0,0)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 10 then \n     \
    \   return (num, 0)\n    else \n        odd_count = even_odd_count(num / 10)\n\
    \        even_count = num % 10\n        return (even_count + odd_count, odd_count)\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n", "    if num\
    \ < 10 then return (num, 0) \n    else \n        even_odd_count(num / 10) + \n\
    \        (num % 10 % 2 == 0 ? 1 : 0, num % 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[2]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number. \nThe factorial\
    \ of a number $n$ is defined as $n!$, where $n$ is an integer and $!$ is the factorial\
    \ operator. \nThe factorial of a number $n$ can be represented as a product of\
    \ smaller factorials, i.e., $n! = n \\times n-1 \\times n-2 \\times ...$. \nFor\
    \ example, 6! = 6 \\times 5! = 720.", "    if num < 10 then return (num, 0)\n\
    \    even, odd = 0, 0\n    for i in 2 to num\n        if num % i == 0 then even\
    \ += 1 \n        else odd += 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_", "    \n    even = 0\n    odd =\
    \ 0\n    \n    for n in num\n        if n % 2 == 0\n            even += 1\n  \
    \      else\n            odd += 1\n    end\n    \n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a number as input and returns the sum of the\
    \ digits of that number.", "    if num < 10 then \n        return (num, 0)\n \
    \   elseif num < 100 then \n        return (num - 10, 1)\n    elseif num < 1000\
    \ then \n        return (num - 100, 2)\n    elseif num < 10000 then \n       \
    \ return (num - 1000, 3)\n    elseif num < 100000 then \n        return (num -\
    \ 10000, 4)\n    elseif num < 1000000 then \n        return (num - 100000, 5)\n\
    \    elseif num < 10000000 then \n        return (num - 1000000, 6)\n    elseif\
    \ num < 100000000 then \n        return (num - 10000000, 7)\n    elseif num <\
    \ 1000000000 then \n        return (num - 100000000, 8)\n    elseif num < 10000000000\
    \ then \n        return (num - 1000000000, 9)\n    elseif num < 100000000000 then\
    \ \n        return (num - 10000000000, 10)\n    elseif num < 1000000000000 then\
    \ \n        return (num - 100000000000, 11)\n    elseif num < 10000000000000 then\
    \ \n        return (num - 1000000000000, 12)\n    elseif num < 100000000000000\
    \ then \n        return (num - 10000000000000, 13)\n    elseif num < 1000000000000000\
    \ then \n        return (num - 100000000000000, 14)\n    elseif num < 10000000000000000\
    \ then \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 then return (num, 0)\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0 then even += 1 end\n        if digit % 2 != 0 then odd += 1 end\n   \
    \     num /= 10\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:", "    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)[2]\n\
    </cell>\n<code language=julia-1.5>", "    \n    even = 0\n    odd = 0\n    \n\
    \    for i in num\n        if i rem 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 10 then \n        return (num, 0)\n    elseif num < 100 then \n        return\
    \ (num / 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100,\
    \ num % 100)\n    elseif num < 10000 then \n        return (num / 1000, num %\
    \ 1000)\n    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n\
    \    elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n\
    \    elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ return (num, 0)\n    even, odd = 0, 0\n    while num > 0 do\n        if num\
    \ % 2 == 0 then even += 1 end\n        if num % 2 != 0 then odd += 1 end\n   \
    \     num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)[2]\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a positive integer and returns the number\
    \ of digits in that number.", "    if num < 0\n        error(\"Invalid input\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer and returns the sum of the\
    \ digits of that integer. \nThe function should work for negative numbers as well.",
  "    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for i in 1:num\n\
    \        if num % i == 0 then\n            even += 1\n        else\n         \
    \   odd += 1\n        end\n    end\n    return (even, odd)\nend", "    if num\
    \ < 10 then return (num, 0) \n    else \n        even, odd = 0, 0\n        \n\
    \        for i in 2..num\n            if num % i == 0 then even += 1 \n      \
    \      else odd += 1 \n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(124)\n</cell>\n<code language=julia-1.3>\neven_odd_count(125)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(126)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(127)\n</cell>\n<code language=julia-1.3>\neven_odd_count(128)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(129)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(130)\n</cell>\n<code language=julia-1.3>\neven_odd_count(131)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(132)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(133)\n</cell>\n<code language=julia-1.3>\neven_odd_count(134)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(135)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(136)\n</cell>\n<code language=julia-1.3>\neven_odd_count(137)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(138)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(139)\n</cell>\n<code language=julia-1.3>\neven_odd_count(140)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(141)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(142)\n</cell>\n<code language=julia-1.3>\neven_odd_count(143)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(144)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(145)\n</cell>\n<code language=julia-1.3>\neven_odd_count(146)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(147)\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even = 0\n    odd = 0\n    digits = Int64[]\n    while num > 0\n        push!(digits,\
    \ num % 10)\n        num = num / 10\n    end\n    for i in digits\n        if\
    \ i%2 == 0\n            even += i\n        else\n            odd += i\n      \
    \  end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12345)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(0)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-0)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-1)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-2)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(3)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-3)\n</cell>\n<code language=julia-1.3>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-4)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(5)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-5)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(6)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-6)\n</cell>\n<code language=julia-1.3>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-7)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(8)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-8)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(9)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-9)\n</cell>\n<code language=julia-1.3>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-10)\n</cell>\n<code language=", " \
    \   if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while num > 0\
    \ do\n        if num % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = num / 2\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_", "    even::Int64 = 0\n    odd::Int64 = 0\n    for n in num\n     \
    \   if n % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called even_odd_count_2 that has\
    \ two parameters. One parameter is the integer and the other parameter is the\
    \ length of the integer.", "    if num < 0 \n        error(\"The given number\
    \ must be positive\")\n    elseif num == 0\n        error(\"The given number must\
    \ be positive\")\n    elseif num == 1\n        return (1,0)\n    else\n      \
    \  even = num / 2\n        odd = num - even\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\neven_odd_count(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as", "    \n    even = 0\n    odd = 0\n\
    \    \n    for i in num\n        if i %2 == 0\n            even += 1\n       \
    \ else\n            odd += 1\n    end\n    \n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</", "    if num < 10 then return (num, 0)\n    even, odd\
    \ = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1 \n        end\n        num\
    \ = num / 2\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1234567891)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels in it.", "    if num < 10 then\n        return (num, 0)\n\
    \    else\n        odd_count = 0\n        even_count = 0\n        for i in 1:num\n\
    \            if num % i == 0 then\n                even_count = even_count + 1\n\
    \            elseif num % i != 0 then\n                odd_count = odd_count +\
    \ 1\n            end\n        end\n        return (even_count, odd_count)\n  \
    \  end\nend\n\"\"\"\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a number. \nThe factorial of a number $n$ is defined as:",
  "    if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        error(\"The given number should be zero\")\n    else\n   \
    \     even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n \
    \               even += 1\n            else\n                odd += 1\n      \
    \      end \n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(3)\n</cell>\n<code language=julia-1.5>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(6)\n</cell>\n<code language=julia-1.5>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(8)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(9)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(11)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(13)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(14)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(15)\n</cell>\n<code language=julia-1.5>\neven_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(18)\n</cell>\n<code language=julia-1.5>\neven_odd_count(19)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(20)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(21)\n</cell>\n<code language=julia-1.5>\neven_odd_count(22)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(23)\n</cell>\n<code language=julia-",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then\n   \
    \     return (num - 10, 1)\n    elseif num < 1000 then\n        return (num -\
    \ 100, 2)\n    elseif num < 10000 then\n        return (num - 1000, 3)\n    elseif\
    \ num < 100000 then\n        return (num - 10000, 4)\n    elseif num < 1000000\
    \ then\n        return (num - 100000, 5)\n    elseif num < 10000000 then\n   \
    \     return (num - 1000000, 6)\n    elseif num < 100000000 then\n        return\
    \ (num - 10000000, 7)\n    elseif num < 1000000000 then\n        return (num -\
    \ 100000000, 8)\n    elseif num < 10000000000 then\n        return (num - 1000000000,\
    \ 9)\n    else\n        return (num - 10000000000, 10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 10 then return (num,\
    \ 0)\n    else if num < 100 then return (num, 0)\n    else if num < 1000 then\
    \ return (num, 0)\n    else if num < 10000 then return (num, 0)\n    else if num\
    \ < 100000 then return (num, 0)\n    else if num < 1000000 then return (num, 0)\n\
    \    else if num < 10000000 then return (num, 0)\n    else if num < 100000000\
    \ then return (num, 0)\n    else if num < 1000000000 then return (num, 0)\n  \
    \  else if num < 10000000000 then return (num, 0)\n    else if num < 100000000000\
    \ then return (num, 0)\n    else if num < 1000000000000 then return (num, 0)\n\
    \    else if num < 10000000000000 then return (num, 0)\n    else if num < 100000000000000\
    \ then return (num, 0)\n    else if num < 1000000000000000 then return (num, 0)\n\
    \    else if num < 10000000000000000 then return (num, 0)\n    else if num < 100000000000000000\
    \ then return (num, 0)\n    else if num < 1000000000000000000 then return (num,\
    \ 0)\n    else return (num, 0)\nend", "    if num < 10 then return (num, 0)\n\
    \    even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then even\
    \ += 1 end\n        if num % 2 != 0 then odd += 1 end\n        num /= 10\n   \
    \ end\n    return (even, odd)\nend", "    if num < 0 \n        error(\"The given\
    \ number must be positive\")\n    else if num == 0\n        (0, 0) \n    else\n\
    \        even_odd_count(num / 10) + (num % 10 == 0 ? 0 : 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 10 then\n      \
    \  return (num, 0)\n    else\n        even, odd = 0, 0\n        for i in 2..num\n\
    \            if num % i == 0 then\n                even += i\n            else\n\
    \                odd += i\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(", "    \n    even_count = 0\n    odd_count = 0\n    \n    for\
    \ i in num:\n        if i%2==0 then\n            even_count = even_count+1\n \
    \       else\n            odd_count = odd_count+1\n        end\n    end\n    \n\
    \    return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels in it.", "    if num < 10 \n     \
    \   then return (num, 0) \n    else \n        even_odd_count(num / 10)\n     \
    \   even_odd_count(num % 10)\nend", "    if num < 10 then \n        return (num,\
    \ 0)\n    else\n        odd_count = 0\n        even_count = 0\n        digit =\
    \ num % 10\n        while digit > 0\n            if digit % 2 == 0\n         \
    \       even_count += 1\n            else\n                odd_count += 1\n  \
    \          digit = num % 10\n        return (even_count, odd_count)\n    end\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of the digits of that integer. \nThe function should work for negative\
    \ integers as well.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num\
    \ / 10) + (1, num % 10)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Given\
    \ an integer. return a tuple that has the number of even and odd digits respectively.",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num - 10, 1)\n    elseif num < 1000 then \n        return (num\
    \ - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n  \
    \  elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 then return (num, 0)\n    even,\
    \ odd = 0, 0\n    while num > 0 do\n        odd = num % 10\n        even = even\
    \ + odd\n        num = num / 10\n    end\n    return (even, odd)\nend", "    if\
    \ num < 10 then \n        return (num, 0)\n    elseif num < 100 then\n       \
    \ return (num / 10, num % 10)\n    elseif num < 1000 then\n        return (num\
    \ / 100, num % 100)\n    elseif num < 10000 then\n        return (num / 1000,\
    \ num % 1000)\n    elseif num < 100000 then\n        return (num / 10000, num\
    \ % 10000)\n    elseif num < 1000000 then\n        return (num / 100000, num %\
    \ 100000)\n    elseif num < 10000000 then\n        return (num / 1000000, num\
    \ % 1000000)\n    elseif num < 100000000 then\n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then\n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then\n        return (num / 1000000000,\
    \ num % 1000000000)\n    elseif num < 100000000000 then\n        return (num /\
    \ 10000000000, num % 10000000000)\n    elseif num < 1000000000000 then\n     \
    \   return (num / 100000000000, num % 100000000000)\n    elseif num < 10000000000000\
    \ then\n        return (num / 1000000000000, num % 1000000000000)\n    elseif\
    \ num < 100000000000000 then\n        return (num / 10000000000000, num % 10000000000000)\n\
    \    elseif num < 1000000000000000 then\n        return (num / 100000000000000,\
    \ num % 100000000000000)\n    elseif num < 10000000000000000 then\n        return\
    \ (num / 1000000000000000, num % 1000000000000000)\n    elseif num < 100000000000000000\
    \ then\n        return (num / 10000000000000000, num % 10000000000000000)\n  \
    \  elseif num < 100000000000000000 then\n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000 then\n     \
    \   return (num / 100000000000000000, num % 100000000000000000)\n    else\n  \
    \      return (num / 1000000000000000000, num % 1000000000000000000)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.", "    \n    even_count\
    \ = 0\n    odd_count = 0\n    \n    for x in num\n        if x % 2 == 0\n    \
    \        even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    \n    return (even_count, odd_count)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num - 10, 1)\n    elseif num < 1000 then \n\
    \        return (num - 100, 2)\n    elseif num < 10000 then \n        return (num\
    \ - 1000, 3)\n    elseif num < 100000 then \n        return (num - 10000, 4)\n\
    \    elseif num < 1000000 then \n        return (num - 100000, 5)\n    elseif\
    \ num < 10000000 then \n        return (num - 1000000, 6)\n    elseif num < 100000000\
    \ then \n        return (num - 10000000, 7)\n    elseif num < 1000000000 then\
    \ \n        return (num - 100000000, 8)\n    elseif num < 10000000000 then \n\
    \        return (num - 1000000000, 9)\n    elseif num < 100000000000 then \n \
    \       return (num - 10000000000, 10)\n    elseif num < 1000000000000 then \n\
    \        return (num - 100000000000, 11)\n    elseif num < 10000000000000 then\
    \ \n        return (num - 1000000000000, 12)\n    elseif num < 100000000000000\
    \ then \n        return (num - 10000000000000, 13)\n    elseif num < 1000000000000000\
    \ then \n        return (num - 100000000000000, 14)\n    elseif num < 10000000000000000\
    \ then \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    elseif num == 0\n        (0, 0) \n    else\n      \
    \  even, odd = even_odd_count(num/10)\n        even += num%10 == 0 ? 1 : 0\n \
    \       odd += num%10 != 0 ? 1 : 0\n        (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 10 \n        return (num, 0)\n    else \n        return (even_odd_count(num/10),\
    \ num%10 + even_odd_count(num%10))\nend", "    if num < 10 then \n        return\
    \ (num, 0)\n    elseif num < 100 then \n        return (num - 10, 1)\n    elseif\
    \ num < 1000 then \n        return (num - 100, 2)\n    elseif num < 10000 then\
    \ \n        return (num - 1000, 3)\n    elseif num < 100000 then \n        return\
    \ (num - 10000, 4)\n    elseif num < 1000000 then \n        return (num - 100000,\
    \ 5)\n    elseif num < 10000000 then \n        return (num - 1000000, 6)\n   \
    \ elseif num < 100000000 then \n        return (num - 10000000, 7)\n    elseif\
    \ num < 1000000000 then \n        return (num - 100000000, 8)\n    elseif num\
    \ < 10000000000 then \n        return (num - 1000000000, 9)\n    elseif num <\
    \ 100000000000 then \n        return (num - 10000000000, 10)\n    elseif num <\
    \ 1000000000000 then \n        return (num - 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num - 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num - 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num - 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num - 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num - 10000000000000000,\
    \ 16)\n    elseif num < 100000000000000000 then \n        return (num - 100000000000000000,\
    \ 17)\n    elseif num < 1000000000000000000 then \n        return (num - 100000000000000000,\
    \ 18)\n    elseif num < 10000000000000000000 then \n        return (num - 100000000000000000,\
    \ 19)\n    elseif num < 100000000000000000000 then \n        return (num - 100000000000000000,\
    \ 20)\n    elseif num < 1000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 21)\n    elseif num < 10000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 22)\n    elseif num < 100000000000000000000000 then \n        return (num -\
    \ 100000000000000000, 23)\n    elseif num < 1000000000000000000000000 then \n\
    \        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 then return (num, 0)\n    even,\
    \ odd = 0, 0\n    digits = num.to_digits()\n    for i in digits\n        if i\
    \ mod 2 == 0 then even += 1 else odd += 1\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The number\
    \ should be positive\")\n    else if num == 0\n        return (0,0)\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n                num -= 2\n            else\n     \
    \           odd += 1\n                num -= 2\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer.\
    \ return a tuple that has the number of even and odd digits respectively.", " \
    \   if num < 10 \n        return (num, 0) \n    else \n        odd_count = 0 \n\
    \        even_count = 0 \n        digits = num % 10 \n        while digits !=\
    \ 0 \n            digits = digits % 10 \n            even_count = even_count +\
    \ 1 \n            digits = digits / 10 \n        while digits != 0 \n        \
    \    digits = digits % 10 \n            odd_count = odd_count + 1 \n         \
    \   digits = digits / 10 \n        return (even_count, odd_count) \nend\n\"\"\"\
    \n</cell>\n<code language=julia-1.5>", "    if num < 10 then \n        return\
    \ (num, 0)\n    elseif num < 100 then \n        return (num - 10, 1)\n    elseif\
    \ num < 1000 then \n        return (num - 100, 2)\n    elseif num < 10000 then\
    \ \n        return (num - 1000, 3)\n    elseif num < 100000 then \n        return\
    \ (num - 10000, 4)\n    elseif num < 1000000 then \n        return (num - 100000,\
    \ 5)\n    elseif num < 10000000 then \n        return (num - 1000000, 6)\n   \
    \ elseif num < 100000000 then \n        return (num - 10000000, 7)\n    elseif\
    \ num < 1000000000 then \n        return (num - 100000000, 8)\n    elseif num\
    \ < 10000000000 then \n        return (num - 1000000000, 9)\n    elseif num <\
    \ 100000000000 then \n        return (num - 10000000000, 10)\n    elseif num <\
    \ 1000000000000 then \n        return (num - 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num - 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num - 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num - 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num - 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num - 10000000000000000,\
    \ 16)\n    elseif num < 100000000000000000 then \n        return (num - 100000000000000000,\
    \ 17)\n    elseif num < 1000000000000000000 then \n        return (num - 100000000000000000,\
    \ 18)\n    elseif num < 10000000000000000000 then \n        return (num - 100000000000000000,\
    \ 19)\n    elseif num < 100000000000000000000 then \n        return (num - 100000000000000000,\
    \ 20)\n    elseif num < 1000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 21)\n    elseif num < 10000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 22)\n    elseif num < 100000000000000000000000 then \n        return (num -\
    \ 100000000000000000, 23)\n    elseif num < 1000000000000000000000000 then \n\
    \        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 \n        then \n         \
    \   (num, 0)\n    elseif num < 100 \n        then \n            (num / 10, num\
    \ % 10)\n    elseif num < 1000 \n        then \n            (num / 100, num %\
    \ 100)\n    elseif num < 10000 \n        then \n            (num / 1000, num %\
    \ 1000)\n    elseif num < 100000 \n        then \n            (num / 10000, num\
    \ % 10000)\n    elseif num < 1000000 \n        then \n            (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 \n        then \n            (num /\
    \ 1000000, num % 1000000)\n    elseif num < 100000000 \n        then \n      \
    \      (num / 10000000, num % 10000000)\n    elseif num < 1000000000 \n      \
    \  then \n            (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ \n        then \n            (num / 1000000000, num % 1000000000)\n    elseif\
    \ num < 100000000000 \n        then \n            (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 \n        then \n            (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 \n        then \n     \
    \       (num / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000\
    \ \n        then \n            (num / 10000000000000, num % 10000000000000)\n\
    \    elseif num < 1000000000000000 \n        then \n            (num / 100000000000000,\
    \ num % 100000000000000)\n    elseif num < 10000000000000000 \n        then \n\
    \            (num / 1000000000000000, num % 1000000000000000)\n    elseif num\
    \ < 100000000000000000 \n        then \n            (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 1000000000000000000 \n        then\
    \ \n            (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000 \n        then \n            (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 \n      \
    \  then \n            (num / 10000000000000000000, num % 10000000000000000000)\n\
    \    elseif num < 1000000000000000000000 \n        then \n            (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 \n  \
    \      then \n            (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 \n        then \n            (num /\
    \ 10000000000000000000000, num % 10000000000000000000000)\n    elseif num < 1000000000000000000",
  "    if num < 0 \n        error(\"The number must be positive\")\n    elseif num\
    \ == 0\n        (0, 0) \n    else\n        even_odd_count(num / 10) + (num % 10\
    \ == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_od", "    if num < 0 \n        error(\"The number\
    \ must be positive\")\n    elseif num == 0\n        error(\"The number must be\
    \ positive\")\n    else\n        even, odd = 0, 0\n        while num > 0\n   \
    \         if num % 2 == 0\n                even += 1\n            else\n     \
    \           odd += 1\n            end\n            num /= 10\n        end\n  \
    \      return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.", "    if num < 10 then \n        return (num, 0)\n    elseif\
    \ num < 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000\
    \ then \n        return (num / 100, num % 100)\n    elseif num < 10000 then \n\
    \        return (num / 1000, num % 1000)\n    elseif num < 100000 then \n    \
    \    return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n     \
    \   return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n   \
    \     return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num", "    if num < 10 then return\
    \ (0,0)\n    even, odd = 0, 0\n    for n in num:\n        if n % 2 == 0 then even\
    \ += 1 else odd += 1\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 10 \n        then \n            (0,0)\n    else\n        even_odd_count(num/10)\n\
    \        even_odd_count(num%10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.", "    if num < 10 then return (1, 0)\n    if num < 100 then return\
    \ (0, 1)\n    if num < 1000 then return (1, 1)\n    if num < 10000 then return\
    \ (2, 0)\n    if num < 100000 then return (2, 1)\n    if num < 1000000 then return\
    \ (3, 0)\n    if num < 10000000 then return (3, 1)\n    if num < 100000000 then\
    \ return (4, 0)\n    if num < 1000000000 then return (4, 1)\n    if num < 10000000000\
    \ then return (5, 0)\n    if num < 100000000000 then return (5, 1)\n    if num\
    \ < 1000000000000 then return (6, 0)\n    if num < 10000000000000 then return\
    \ (6, 1)\n    if num < 100000000000000 then return (7, 0)\n    if num < 1000000000000000\
    \ then return (7, 1)\n    if num < 10000000000000000 then return (8, 0)\n    if\
    \ num < 100000000000000000 then return (8, 1)\n    if num < 1000000000000000000\
    \ then return (9, 0)\n    if num < 10000000000000000000 then return (9, 1)\nend",
  "    even, odd = 0, 0\n    \n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n    end\n    \n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(10) ==\
    \ (2, 1)\n@assert even_odd_count(11) == (3, 2)\n@assert even_odd_count(12) ==\
    \ (4, 3)\n@assert even_odd_count(13) == (5, 4)\n@assert even_odd_count(14) ==\
    \ (6, 5)\n@assert even_odd_count(15) == (7, 6)\n@assert even_odd_count(16) ==\
    \ (8, 7)\n@assert even_odd_count(17) == (9, 8)\n@assert even_odd_count(18) ==\
    \ (10, 9)\n@assert even_odd_count(19) == (11, 10)\n@assert even_odd_count(20)\
    \ == (12, 11)\n@assert even_odd_count(21) == (13, 12)\n@assert even_odd_count(22)\
    \ == (14, 13)\n@assert even_odd_count(23) == (15, 14)\n@assert even_odd_count(24)\
    \ == (16, 15)\n@assert even_odd_count(25) == (17, 16)\n@assert even_odd_count(26)\
    \ == (18, 17)\n@assert even_odd_count(27) == (19, 18)\n@assert even_odd_count(28)\
    \ == (20, 19)\n@assert even_odd_count(29) == (21, 20)\n@assert even_odd_count(30)\
    \ == (22, 21)\n@assert even_odd_count(31) == (23, 22)\n@assert even_odd_count(32)\
    \ == (24, 23)\n@assert even_odd_count(33) == (25, 24)\n@assert even_odd_count(34)\
    \ == (26, 25)\n@assert even_odd_count(35) == (27, 26)\n@assert even_odd_count(36)\
    \ == (28, 27)\n@assert even_odd_count(37) == (29, 28)\n@assert even_odd_count(38)\
    \ == (30, 29)\n@assert even_odd_count(39) == (31, 30)\n@assert even_odd_count(40)\
    \ == (32, 31)\n@assert even_odd_count(41) == (33, 32)\n@assert even_odd_count(42)\
    \ == (34, 33)\n@assert even_odd_count(43) == (35, 34)\n@assert even_odd_count(44)\
    \ == (36, 35)\n@", "    if num < 10 \n        (1, 0)\n    elseif num < 100 \n\
    \        (2, 0)\n    elseif num < 1000 \n        (3, 0)\n    elseif num < 10000\
    \ \n        (4, 0)\n    elseif num < 100000 \n        (5, 0)\n    elseif num <\
    \ 1000000 \n        (6, 0)\n    elseif num < 10000000 \n        (7, 0)\n    elseif\
    \ num < 100000000 \n        (8, 0)\n    elseif num < 1000000000 \n        (9,\
    \ 0)\n    else\n        (10, 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234567889)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890",
  "    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if i%2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n    end\n    \n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_", "    if num < 10 then \n     \
    \   return (num, 0)\n    elseif num < 100 then \n        return (num / 10, num\
    \ % 10)\n    elseif num < 1000 then \n        return (num / 100, num % 100)\n\
    \    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n    elseif\
    \ num < 100000 then \n        return (num / 10000, num % 10000)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, num % 100000)\n    elseif num\
    \ < 10000000 then \n        return (num / 1000000, num % 1000000)\n    elseif\
    \ num < 100000000 then \n        return (num / 10000000, num % 10000000)\n   \
    \ elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    even = 0\n    odd\
    \ = 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(123456789)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(1234567890)\n</cell>\n<code language=julia-1.0>\neven_odd_count(12345678901)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789012)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(1234567890123)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901234)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(1234567890123456788)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788", "   \
    \ \n    even_count = 0\n    odd_count = 0\n    \n    for x in num\n        if\
    \ x % 2 == 0\n            even_count = even_count + 1\n        else\n        \
    \    odd_count = odd_count + 1\n    end\n    \n    return (even_count, odd_count)\n\
    end", "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then\
    \ \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n       \
    \ return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ \n        return (num, 0)\n    elseif num < 100 then \n        return (num /\
    \ 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100, num %\
    \ 100)\n    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n\
    \    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n  \
    \  elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n \
    \   elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 0 \n   \
    \     error(\"The given number cannot be negative\")\n    else if num == 0\n \
    \       (0, 0) \n    else \n        even_odd_count(num / 2)\n        even_odd_count(num\
    \ % 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.", "    if num\
    \ < 0\n        error(\"The given number should be positive\")\n    elseif num\
    \ == 0\n        (0, 2)\n    else\n        even, odd = 0, 0\n        while num\
    \ > 0\n            if num % 2 == 0\n                even += 1\n              \
    \  num -= 2\n            else\n                odd += 1\n                num -=\
    \ 2\n        end\n        return (even, odd)\n    end\nend", "    if num < 0 \n\
    \        error(\"The given number must be positive\")\n    elseif num == 0\n \
    \       (0, 0) \n    else\n        odd_count = sum(num % i | i <- [1..num], i\
    \ % 2 == 1)\n        even_count = sum(num % i | i <- [1..num], i % 2 != 1)\n \
    \       return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.4>\neven_odd_count(2)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000000000000)\n</cell>\n<code language=", "    if num\
    \ < 10 then return (num, 0)\n    even, odd = 0, 0\n    while num > 0 do\n    \
    \    if num % 2 == 0 then even += 1 \n        else odd += 1 \n        num /= 10\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@time even_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number. \nThe factorial of a number $n$ is defined as:", "    if num < 0 \n\
    \        error(\"The input must be positive\")\n    else if num == 0\n       \
    \ return (0, 0)\n    else\n        even, odd = 0, 0\n        for i in 1:num\n\
    \            if i%2 == 0\n                even += 1\n            else\n      \
    \          odd += 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 10 then return (1,\
    \ 0)\n    \n    even::Int64 = 0\n    odd::Int64 = 0\n    \n    for i in reverse(String(num))\
    \ do\n        if i == '0' then even += 1 else odd += 1\n    end\n    \n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nIf the string has less than 10 characters,\
    \ return 0.", "    if num < 10 then \n        return (num, 0)\n    else\n    \
    \    odd_count = 0\n        even_count = 0\n        for i in 2..num\n        \
    \    if num % i == 0\n                even_count = even_count + 1\n          \
    \  else\n                odd_count = odd_count + 1\n        end\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(124)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(125)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(126)\n</cell>\n<code language=julia-1.5>\neven_odd_count(127)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(128)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(129)\n</cell>\n<code language=julia-1.5>\neven_odd_count(130)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(131)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(132)\n</cell>\n<code language=julia-1.5>\neven_odd_count(133)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(134)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(135)\n</cell>\n<code language=julia-1.5>\neven_odd_count(136)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(137)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(138)\n</cell>\n<code language=julia-1.5>\neven_odd_count(139)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(140)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(141)\n</cell>\n<code language=julia-1.5>\neven_odd_count(142)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(143)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(144)\n</cell>\n<code language=julia-1.5>\neven_odd_count(145)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(146)\n</cell>\n<code language=julia-1.5>\n\
    even_od", "    if num < 10 then \n        return (num, 0)\n    else\n        odd_count\
    \ = 0\n        even_count = 0\n        for n in num:\n            if n % 2 ==\
    \ 0 then\n                even_count = even_count + 1\n            else\n    \
    \            odd_count = odd_count + 1\n        end\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    if num < 10 then \n        return\
    \ (num, 0)\n    else \n        odd_count = 0\n        even_count = 0\n       \
    \ \n        for i in reverse(String(num))\n            if i == '0' \n        \
    \        even_count += 1\n            else \n                odd_count += 1\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The input must be positive\")\n    else if num == 0\n  \
    \      return (0,0)\n    else\n        even = num % 10\n        odd = num - even\n\
    \        return (even,odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(13)\n</cell>\n<code language=julia-1.5>\neven_odd_count(14)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(15)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(16)\n</cell>\n<code language=julia-1.5>\neven_odd_count(17)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(18)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(19)\n</cell>\n<code language=julia-1.5>\neven_odd_count(20)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(21)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(22)\n</cell>\n<code language=julia-1.5>\neven_odd_count(23)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(24)", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    else if num == 0\n        error(\"The input\
    \ must be positive\")\n    else\n        even, odd = 0, 0\n        while num >\
    \ 0\n            if num % 2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5", "    if num < 10 then\
    \ return (1, 0)\n    even, odd = 0, 0\n    for i in reverse(String(num))\n   \
    \     if i mod 2 == 0 then even += 1 else odd += 1\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5>\neven_od", "    if num < 0\n        error(\"\
    The input number should be positive\")\n    elseif num == 0\n        error(\"\
    The input number should be positive\")\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(-5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000000000000)\n</cell", "    if\
    \ num < 0 \n        error(\"The number should be positive\")\n    else if num\
    \ == 0\n        error(\"The number should be positive\")\n    else if num == 1\n\
    \        return (1,0)\n    else\n        even, odd = 0, 0\n        for i in 2..num\n\
    \            if num % i == 0\n                even += i\n            else\n  \
    \              odd += i\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Given an integer. return a tuple that has the number\
    \ of even and odd digits respectively.", "    \n    even_count = 0\n    odd_count\
    \ = 0\n    \n    if num < 10\n        return (0, num)\n    end\n    \n    for\
    \ i in 1:num\n        if i % 2 == 0\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   \n    return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in that string.", "    if num <\
    \ 10 then \n        return (num, 0)\n    else \n        odd_count = 0\n      \
    \  even_count = 0\n        digit = num % 10\n        while digit > 0 \n      \
    \      odd_count = odd_count + 1\n            digit = num % 10\n        end\n\
    \        while digit != 0\n            even_count = even_count + 1\n         \
    \   digit = num % 10\n        end\n        return (even_count, odd_count)\n  \
    \  end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number as input and\
    \ returns the number of digits in that number.", "    if num < 10 then return\
    \ (0,0)\n    even, odd = 0, 0\n    for n in num:\n        if n % 2 == 0 then even\
    \ += 1 else odd += 1\n    return (even, odd)\nend", "    if num < 0 \n       \
    \ error(\"The given number should be positive\")\n    elseif num == 0\n      \
    \  error(\"The given number should be positive\")\n    else\n        even, odd\
    \ = 0, 0\n        \n        for i in 1:num\n            if num % 2 == 0\n    \
    \            even += 1\n            else\n                odd += 1\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(3)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(4)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(5)\n</cell>\n<code language=julia-1.5>\neven_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(8)\n</cell>\n<code language=julia-1.5>\neven_odd_count(9)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(11)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(13)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(14)\n</cell>\n<code language=julia-1.5>\neven_odd_count(15)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(16)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(17)\n</cell>\n<code language=julia-1.5>\neven_odd_count(18)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(19)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(20)\n</cell>\n<code language=julia-1.5>\neven_odd_count(21)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(22)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(23)\n</cell>\n<code language=julia-1.5>\neven_", "    if num <\
    \ 10 then \n        return (num, 0)\n    elseif num < 100 then \n        return\
    \ (num / 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100,\
    \ num % 100)\n    elseif num < 10000 then \n        return (num / 1000, num %\
    \ 1000)\n    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n\
    \    elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n\
    \    elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ \n        return (num, 0)\n    elseif num < 100 then \n        return (num -\
    \ 10, 1)\n    elseif num < 1000 then \n        return (num - 100, 2)\n    elseif\
    \ num < 10000 then \n        return (num - 1000, 3)\n    elseif num < 100000 then\
    \ \n        return (num - 10000, 4)\n    elseif num < 1000000 then \n        return\
    \ (num - 100000, 5)\n    elseif num < 10000000 then \n        return (num - 1000000,\
    \ 6)\n    elseif num < 100000000 then \n        return (num - 10000000, 7)\n \
    \   elseif num < 1000000000 then \n        return (num - 100000000, 8)\n    elseif\
    \ num < 10000000000 then \n        return (num - 1000000000, 9)\n    elseif num\
    \ < 100000000000 then \n        return (num - 10000000000, 10)\n    elseif num\
    \ < 1000000000000 then \n        return (num - 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num - 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num - 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num - 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num - 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num - 10000000000000000,\
    \ 16)\n    elseif num < 1000000000000000000 then \n        return (num - 100000000000000000,\
    \ 17)\n    elseif num < 10000000000000000000 then \n        return (num - 100000000000000000,\
    \ 18)\n    elseif num < 100000000000000000000 then \n        return (num - 100000000000000000,\
    \ 19)\n    elseif num < 1000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 20)\n    elseif num < 10000000000000000000000 then \n        return (num - 100000000000000000,\
    \ 21)\n    elseif num < 100000000000000000000000 then \n        return (num -\
    \ 100000000000000000, 22)\n    elseif num < 1000000000000000000000000 then \n\
    \        return (num - 100000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 1000000000000000000000000000000\
    \ then \n        return (num - ", "    if num < 10 then \n        return (num,\
    \ 0)\n    elseif num < 100 then \n        return (num / 10, num % 10)\n    elseif\
    \ num < 1000 then \n        return (num / 100, num % 100)\n    elseif num < 10000\
    \ then \n        return (num / 1000, num % 1000)\n    elseif num < 100000 then\
    \ \n        return (num / 10000, num % 10000)\n    elseif num < 1000000 then \n\
    \        return (num / 100000, num % 100000)\n    elseif num < 10000000 then \n\
    \        return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then\
    \ \n        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then \n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then \n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then \n        return (num / 10000000000, num % 10000000000)\n\
    \    elseif num < 1000000000000 then \n        return (num / 100000000000, num\
    \ % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    even = 0\n    odd\
    \ = 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</", "    if num <\
    \ 0 \n        error(\"The input must be positive\")\n    else if num == 0\n  \
    \      (0, 0) \n    else\n        even, odd = even_odd_count(num / 2)\n      \
    \  (even + odd, num - even * 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(1) == (0, 1) \n@assert even_odd_count(2) == (1, 2) \n@assert\
    \ even_odd_count(3) == (1, 3) \n@assert even_odd_count(4) == (2, 2) \n@assert\
    \ even_odd_count(5) == (2, 3) \n@assert even_odd_count(6) == (3, 3) \n@assert\
    \ even_odd_count(7) == (3, 4) \n@assert even_odd_count(8) == (4, 4) \n@assert\
    \ even_odd_count(9) == (4, 5) \n@assert even_odd_count(10) == (5, 5) \n@assert\
    \ even_odd_count(11) == (5, 6) \n@assert even_odd_count(12) == (6, 6) \n@assert\
    \ even_odd_count(13) == (6, 7) \n@assert even_odd_count(14) == (7, 7) \n@assert\
    \ even_odd_count(15) == (7, 8) \n@assert even_odd_count(16) == (8, 8) \n@assert\
    \ even_odd_count(17) == (8, 9) \n@assert even_odd_count(18) == (9, 9) \n@assert\
    \ even_odd_count(19) == (9, 10) \n@assert even_odd_count(20) == (10, 10) \n@assert\
    \ even_odd_count(21) == (10, 11) \n@assert even_odd_count(22) == (11, 11) \n@assert\
    \ even_odd_count(23) == (11, 12) \n@assert even_odd_count(24) == (12, 12) \n@assert\
    \ even_odd_count(25) == (12, 13) \n@assert even_odd_count(26) == (13, 13) \n@assert\
    \ even_odd_count(27) == (13, 14) \n@assert even_odd_count(28) == (14, 14) \n@assert\
    \ even_odd_count(29) == (14, 15) \n@assert even_odd_count(30) == (15, 15) \n@assert\
    \ even_odd_count(31) == (15, 16) \n@assert even_odd_count(32) == (16, 16) \n@assert\
    \ even_odd_count(33) == (16, 17) \n@assert even_odd_count(34) == (17, 17) \n@assert\
    \ even_", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even_odd_count_helper(num)\nend", "    \n    even_count = 0\n\
    \    odd_count = 0\n    \n    if num < 0\n        return 0, 0\n    end\n    \n\
    \    while num > 0\n        if num % 2 == 0\n            even_count += 1\n   \
    \     else\n            odd_count += 1\n        end\n        \n        num /=\
    \ 10\n    end\n    \n    return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567891)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    else if num == 0\n        return (0,0)\n    else\n\
    \        even, odd = 0, 0\n        \n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            end\n            num /= 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(12)\
    \ == (3,2)\n@assert even_odd_count(0) == (0,0)\n@assert even_odd_count(10) ==\
    \ (0,1)\n@assert even_odd_count(100) == (0,2)\n@assert even_odd_count(1000) ==\
    \ (0,3)\n@assert even_odd_count(10000) == (0,4)\n@assert even_odd_count(100000)\
    \ == (0,5)\n@assert even_odd_count(1000000) == (0,6)\n@assert even_odd_count(10000000)\
    \ == (0,7)\n@assert even_odd_count(100000000) == (0,8)\n@assert even_odd_count(1000000000)\
    \ == (0,9)\n@assert even_odd_count(10000000000) == (0,10)\n@assert even_odd_count(100000000000)\
    \ == (0,11)\n@assert even_odd_count(1000000000000) == (0,12)\n@assert even_odd_count(10000000000000)\
    \ == (0,13)\n@assert even_odd_count(100000000000000) == (0,14)\n@assert even_odd_count(1000000000000000)\
    \ == (0,15)\n@assert even_odd_count(10000000000000000) == (0,16)\n@assert even_odd_count(100000000000000000)\
    \ == (0,17)\n@assert even_odd_count(1000000000000000000) == (0,18)\n@assert even_odd_count(10000000000000000000)\
    \ == (0,19)\n@assert even_odd_count(100000000000000000000) == (0,20)\n@assert\
    \ even_odd_count(1000000000000000000000) == (0,21)\n@assert even_odd_count(10000000000000000000000)\
    \ == (0,22)\n@assert even_odd_count(100000000000000000000000) == (0,23)\n@assert\
    \ even_odd_count(1000000000000000000000000) == (0,24)\n@assert even_odd_count(10000000000000000000000000)\
    \ == (0,25)\n@assert even_odd_count(100000000000000000000000000) == (0,26)\n@assert\
    \ even_odd_count(1000000000000000000000000000) == (0,27)\n@assert even_odd_count(10000000000000000000000000000)\
    \ == (0,28)\n@assert even_odd_count(100000000000000000000000000000) == (0,29)\n\
    @assert ev", "    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n   \
    \ while num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num\
    \ % 2 != 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5",
  "    if num < 10 \n        return (num, 0)\n    elseif num < 100 \n        return\
    \ (num / 10, 1)\n    elseif num < 1000 \n        return (num / 100, 2)\n    elseif\
    \ num < 10000 \n        return (num / 1000, 3)\n    elseif num < 100000 \n   \
    \     return (num / 10000, 4)\n    elseif num < 1000000 \n        return (num\
    \ / 100000, 5)\n    elseif num < 10000000 \n        return (num / 1000000, 6)\n\
    \    elseif num < 100000000 \n        return (num / 10000000, 7)\n    elseif num\
    \ < 1000000000 \n        return (num / 100000000, 8)\n    elseif num < 10000000000\
    \ \n        return (num / 1000000000, 9)\n    elseif num < 100000000000 \n   \
    \     return (num / 10000000000, 10)\n    elseif num < 1000000000000 \n      \
    \  return (num / 100000000000, 11)\n    elseif num < 10000000000000 \n       \
    \ return (num / 1000000000000, 12)\n    elseif num < 100000000000000 \n      \
    \  return (num / 10000000000000, 13)\n    elseif num < 1000000000000000 \n   \
    \     return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 \n\
    \        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ \n        return (num / 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ \n        return (num / 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ \n        return (num / 1000000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ \n        return (num / 10000000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ \n        return (num / 100000000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ \n        return (num / 1000000000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ \n        return (num / 10000000000000000000000, 22)\n    elseif num < 1000000000000000000000000\
    \ \n        return (num / 100000000000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ \n        return (num / 10000000000000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ \n        return (num / 100000000000000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000000, 27)\n    elseif num <\
    \ 100000000000000000000000000000 \n        return (num / 10000000000000000000000000000,\
    \ 28)\n    elseif num < 1000000000000000000000000000000 \n        return (num\
    \ / 100000000000000000000000000000, 29)\n    elseif num < 10000000000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000000000, 30)\n    elseif num\
    \ < 100", "    if num < 10 \n        then \n            (0,0)\n    else\n    \
    \    even_odd_count(num/10)\n        even_odd_count(num%10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for i in 1:num\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return even,\
    \ odd\nend", "    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1 \n        num = num / 2\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]", "    if num < 0 \n        error(\"The given number cannot\
    \ be negative\")\n    else if num == 0\n        error(\"The given number cannot\
    \ be 0\")\n    else if num == 1\n        (1, 0)\n    else\n        even_odd_count(num\
    \ / 2)\n        even_odd_count(num % 2)\nend", "    if num < 10 \n        then\
    \ return (0,0)\n    else\n        even = num % 10\n        odd = num / 10\n  \
    \      return (even, odd)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.1>",
  "    if num < 10 then \n        return (num, 0)\n    elseif num < 100 then \n  \
    \      return (num / 10, num % 10)\n    elseif num < 1000 then \n        return\
    \ (num / 100, num % 100)\n    elseif num < 10000 then \n        return (num /\
    \ 1000, num % 1000)\n    elseif num < 100000 then \n        return (num / 10000,\
    \ num % 10000)\n    elseif num < 1000000 then \n        return (num / 100000,\
    \ num % 100000)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ num % 1000000)\n    elseif num < 100000000 then \n        return (num / 10000000,\
    \ num % 10000000)\n    elseif num < 1000000000 then \n        return (num / 100000000,\
    \ num % 100000000)\n    elseif num < 10000000000 then \n        return (num /\
    \ 1000000000, num % 1000000000)\n    elseif num < 100000000000 then \n       \
    \ return (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ then \n        return (num / 100000000000, num % 100000000000)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, num % 1000000000000)\n\
    \    elseif num < 100000000000000 then \n        return (num / 10000000000000,\
    \ num % 10000000000000)\n    elseif num < 1000000000000000 then \n        return\
    \ (num / 100000000000000, num % 100000000000000)\n    elseif num < 10000000000000000\
    \ then \n        return (num / 1000000000000000, num % 1000000000000000)\n   \
    \ elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 1000000000000000000 then \n     \
    \   return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 10000000000000000000 then \n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n     \
    \   return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    if num < 10 then\
    \ return (num, 0) \n    else \n        even, odd = 0, 0\n        while num > 0\
    \ do\n            even = even + num % 10\n            num = num / 10\n       \
    \ end\n        while num > 0 do\n            odd = odd + num % 10\n          \
    \  num = num / 10\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[2]\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of words in the string.", "    if num < 10 then \n        return (num,\
    \ 0)\n    elseif num < 100 then\n        return (num / 10, num % 10)\n    elseif\
    \ num < 1000 then\n        return (num / 100, num % 100)\n    elseif num < 10000\
    \ then\n        return (num / 1000, num % 1000)\n    elseif num < 100000 then\n\
    \        return (num / 10000, num % 10000)\n    elseif num < 1000000 then\n  \
    \      return (num / 100000, num % 100000)\n    elseif num < 10000000 then\n \
    \       return (num / 1000000, num % 1000000)\n    elseif num < 100000000 then\n\
    \        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then\n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then\n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then\n        return (num / 10000000000, num % 10000000000)\n \
    \   elseif num < 1000000000000 then\n        return (num / 100000000000, num %\
    \ 100000000000)\n    elseif num < 10000000000000 then\n        return (num / 1000000000000,\
    \ num % 1000000000000)\n    elseif num < 100000000000000 then\n        return\
    \ (num / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000\
    \ then\n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then\n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then\n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then\n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then\n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then\n  \
    \      return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then\n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\n\
    \        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then\n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then\n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then\n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num", "    \n    even = 0\n   \
    \ odd = 0\n    \n    for n in num\n        if n % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n    end\n    \n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    else if num == 0\n        error(\"The input must be positive\"\
    )\n    else if num == 1\n        return (1,0)\n    else\n        even::Int64 =\
    \ 0\n        odd::Int64 = 0\n        for i in 2..num\n            if num % i ==\
    \ 0\n                even += 1\n            else\n                odd += 1\n \
    \       return (even,odd)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(-10)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(8)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(9)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(-10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(3)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(5)\n</cell>", "    if\
    \ num < 10 \n        return (1, 0)\n    elseif num < 100 \n        return (num\
    \ % 10, 1)\n    elseif num < 1000 \n        return (num % 100, (num % 10)/10)\n\
    \    elseif num < 10000 \n        return (num % 1000, (num % 100)/100)\n    elseif\
    \ num < 100000 \n        return (num % 10000, (num % 1000)/1000)\n    elseif num\
    \ < 1000000 \n        return (num % 100000, (num % 10000)/10000)\n    elseif num\
    \ < 10000000 \n        return (num % 1000000, (num % 100000)/100000)\n    elseif\
    \ num < 100000000 \n        return (num % 10000000, (num % 1000000)/1000000)\n\
    \    elseif num < 1000000000 \n        return (num % 100000000, (num % 10000000)/10000000)\n\
    \    elseif num < 10000000000 \n        return (num % 1000000000, (num % 100000000)/100000000)\n\
    \    elseif num < 100000000000 \n        return (num % 10000000000, (num % 1000000000)/1000000000)\n\
    \    elseif num < 1000000000000 \n        return (num % 100000000000, (num % 10000000000)/10000000000)\n\
    \    elseif num < 10000000000000 \n        return (num % 1000000000000, (num %\
    \ 1000000000000)/1000000000000)\n    elseif num < 100000000000000 \n        return\
    \ (num % 10000000000000, (num % 10000000000000)/10000000000000)\n    elseif num\
    \ < 1000000000000000 \n        return (num % 100000000000000, (num % 1000000000000000)/1000000000000000)\n\
    \    elseif num < 10000000000000000 \n        return (num % 10000000000000000,\
    \ (num % 100000000000000000)/10000000000000000)\n    elseif num < 100000000000000000\
    \ \n        return (num % 100000000000000000, (num % 100000000000000000)/100000000000000000)\n\
    \    elseif num < 1000000000000000000 \n        return (num % 1000000000000000000,\
    \ (num % 100000000000000000)/100000000000000000)\n    else\n        return (num\
    \ % 1000000000000000000, (num % 100000000000000000)/100000000000000000)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.", "    if num < 10\
    \ then \n        return (num, 0)\n    elseif num < 100 then \n        return (num\
    \ / 10, num % 10)\n    elseif num < 1000 then \n        return (num / 100, num\
    \ % 100)\n    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n\
    \    elseif num < 100000 then \n        return (num / 10000, num % 10000)\n  \
    \  elseif num < 1000000 then \n        return (num / 100000, num % 100000)\n \
    \   elseif num < 10000000 then \n        return (num / 1000000, num % 1000000)\n\
    \    elseif num < 100000000 then \n        return (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 1000000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num", "    if num < 10 then \n\
    \        return (num, 0)\n    elseif num < 100 then \n        return (num / 10,\
    \ 1)\n    elseif num < 1000 then \n        return (num / 100, 2)\n    elseif num\
    \ < 10000 then \n        return (num / 1000, 3)\n    elseif num < 100000 then\
    \ \n        return (num / 10000, 4)\n    elseif num < 1000000 then \n        return\
    \ (num / 100000, 5)\n    elseif num < 10000000 then \n        return (num / 1000000,\
    \ 6)\n    elseif num < 100000000 then \n        return (num / 10000000, 7)\n \
    \   elseif num < 1000000000 then \n        return (num / 100000000, 8)\n    elseif\
    \ num < 10000000000 then \n        return (num / 1000000000, 9)\n    elseif num\
    \ < 100000000000 then \n        return (num / 10000000000, 10)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, 11)\n    elseif num\
    \ < 10000000000000 then \n        return (num / 1000000000000, 12)\n    elseif\
    \ num < 100000000000000 then \n        return (num / 10000000000000, 13)\n   \
    \ elseif num < 1000000000000000 then \n        return (num / 100000000000000,\
    \ 14)\n    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ 15)\n    elseif num < 100000000000000000 then \n        return (num / 10000000000000000,\
    \ 16)\n    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ 17)\n    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ 18)\n    elseif num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ 19)\n    elseif num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ 20)\n    elseif num < 10000000000000000000000 then \n        return (num / 1000000000000000000000,\
    \ 21)\n    elseif num < 100000000000000000000000 then \n        return (num /\
    \ 10000000000000000000000, 22)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000, 24)\n    elseif num\
    \ < 100000000000000000000000000 then \n        return (num / 10000000000000000000000000,\
    \ 25)\n    elseif num < 1000000000000000000000000000 then \n        return (num\
    \ / 100000000000000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num / 1000000000000000000000000000, 27)\n    elseif num\
    \ < 100000000000000000000000000000 then \n        return (num / 10000000000000000000000000000,\
    \ 28)\n    elseif num < 1000000000000000000000000000000 then \n        return\
    \ (num / 100000000000000000000000000", "    if num < 0 \n        error(\"The input\
    \ number must be positive\")\n    else if num == 0\n        (0, 0) \n    else\
    \ \n        even, odd = even_odd_count(num/10)\n        even = even+num%10\n \
    \       odd = odd+num%10\n        return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(124)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(125)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(126)\n</cell>\n<code language=julia-1.5>\neven_odd_count(127)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(128)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(129)\n</cell>\n<code language=julia-1.5>\neven_odd_count(130)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(131)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(132)\n</cell>\n<code language=julia-1.5>\neven_odd_count(133)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(134)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(135)\n</cell>\n<code language=julia-1.5>\neven_odd_count(136)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(137)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(138)\n</cell>\n<code language=julia-1.5>\neven_odd_count(139)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(140)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(141)\n</cell>\n<code language=julia-1.5>\neven_odd_count(142)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(143)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(144)\n</cell>\n<code language=julia-1.5>\neven_odd_count(145)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(146)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_", "    if num < 10 then \n        return (num, 0)\n    elseif num <\
    \ 100 then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n\
    \        return (num / 100, num % 100)\n    elseif num < 10000 then \n       \
    \ return (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return\
    \ (num / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num\
    \ / 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    \n    even = 0\n\
    \    odd = 0\n    \n    for i in num:\n        if i%2==0: even += 1 \n       \
    \ else: odd += 1 \n    \n    return (even, odd)\nend", "    if num < 10 then \n\
    \        return (num, 0)\n    elseif num < 100 then \n        return (num / 10,\
    \ num % 10)\n    elseif num < 1000 then \n        return (num / 100, num % 100)\n\
    \    elseif num < 10000 then \n        return (num / 1000, num % 1000)\n    elseif\
    \ num < 100000 then \n        return (num / 10000, num % 10000)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, num % 100000)\n    elseif num\
    \ < 10000000 then \n        return (num / 1000000, num % 1000000)\n    elseif\
    \ num < 100000000 then \n        return (num / 10000000, num % 10000000)\n   \
    \ elseif num < 1000000000 then \n        return (num / 100000000, num % 100000000)\n\
    \    elseif num < 10000000000 then \n        return (num / 1000000000, num % 1000000000)\n\
    \    elseif num < 100000000000 then \n        return (num / 10000000000, num %\
    \ 10000000000)\n    elseif num < 1000000000000 then \n        return (num / 100000000000,\
    \ num % 100000000000)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, num % 1000000000000)\n    elseif num < 100000000000000 then\
    \ \n        return (num / 10000000000000, num % 10000000000000)\n    elseif num\
    \ < 1000000000000000 then \n        return (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 then \n        return (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 then \n       \
    \ return (num / 10000000000000000, num % 10000000000000000)\n    elseif num <\
    \ 100000000000000000 then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < ", "    \n    even = num\
    \ % 2 == 0\n    odd = num % 2 != 0\n    \n    if even\n        even = num / 2\n\
    \    else\n        odd = num / 2\n    \n    return even, odd\nend", "    \n  \
    \  even_count = 0\n    odd_count = 0\n    \n    for n in num\n        if n % 2\
    \ == 0\n            even_count += 1\n        else\n            odd_count += 1\n\
    \    end\n    \n    return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5", "    \n    even = num%2 == 0\n    odd = num%2\
    \ != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456789)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567890)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678901)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456789012)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456789012345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890123456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890", "  \
    \  if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        (0, 0) \n    else \n        even_odd_count(num/10)\n        even_odd_count(num%10)\n\
    end\n</cell>\n<code language=julia-1.0>", "    if num < 10 then\n        return\
    \ (num, 0)\n    elseif num < 100 then\n        return (num / 10, num % 10)\n \
    \   elseif num < 1000 then\n        return (num / 100, num % 100)\n    elseif\
    \ num < 10000 then\n        return (num / 1000, num % 1000)\n    elseif num <\
    \ 100000 then\n        return (num / 10000, num % 10000)\n    elseif num < 1000000\
    \ then\n        return (num / 100000, num % 100000)\n    elseif num < 10000000\
    \ then\n        return (num / 1000000, num % 1000000)\n    elseif num < 100000000\
    \ then\n        return (num / 10000000, num % 10000000)\n    elseif num < 1000000000\
    \ then\n        return (num / 100000000, num % 100000000)\n    elseif num < 10000000000\
    \ then\n        return (num / 1000000000, num % 1000000000)\n    elseif num <\
    \ 100000000000 then\n        return (num / 10000000000, num % 10000000000)\n \
    \   elseif num < 1000000000000 then\n        return (num / 100000000000, num %\
    \ 100000000000)\n    elseif num < 10000000000000 then\n        return (num / 1000000000000,\
    \ num % 1000000000000)\n    elseif num < 100000000000000 then\n        return\
    \ (num / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000\
    \ then\n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then\n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then\n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then\n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then\n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then\n    \
    \    return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then\n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then\n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then\n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\n\
    \        return (num / 1000000000000000000000000, num % 1000000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then\n        return (num / 10000000000000000000000000,\
    \ num % 10000000000000000000000000)\n    elseif num < "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
