language: jl
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfty4_6a.jl:56\nin expression starting at\
    \ /tmp/tmphfty4_6a.jl:56\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 23)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 24)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 26)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 27)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jnslpjg.jl:66\nin expression starting at\
    \ /tmp/tmp9jnslpjg.jl:66\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    \n\
    \    for i in 2..num\n        if num % i == 0 then\n            even += i\n  \
    \      else\n            odd += i\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(13)\n</cell>\n<code language=julia-1.5>\neven_odd_count(14)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(15)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(16)\n</cell>\n<code language=julia-1.5>\neven_odd_count(17)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(18)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(19)\n</cell>\n<code language=julia-1.5>\neven_odd_count(20)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(21)\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt68nyp14.jl:6\nin expression starting at /tmp/tmpt68nyp14.jl:6\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num\
    \ / 10) + (1, num % 10)\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(-2)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(0)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.0>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000001)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000000002)\n</cell>\n<code language=julia-1.0>\neven_odd_count(10000000000003)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000004)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000005)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(10000000000006)\n</cell>\n<code language=julia-1.0>\neven_odd_count(10000000000007)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(10000000000008)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(10000000000009)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezgdzdbh.jl:8\nin expression starting at /tmp/tmpezgdzdbh.jl:8\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        error(\"The input must be positive\")\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            even = even + 1\
    \ \n            num = num / 10\n        end\n        while num > 0\n         \
    \   odd = odd + 1\n            num = num / 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(8)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(9)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(14)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(18)\n</cell>\n<code language=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q01jmff.jl:23\nin expression starting at\
    \ /tmp/tmp1q01jmff.jl:23\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0) \n    else \n        odd_count\
    \ = even_odd_count(num / 10)\n        even_count = num % 10\n        return (even_count\
    \ + odd_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_count(147)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(14\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xgp69we.jl:13\nin expression starting at\
    \ /tmp/tmp0xgp69we.jl:13\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num:\n        if\
    \ i%2==0 then\n            even = even+1\n        else\n            odd = odd+1\n\
    \        end\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpskjn960v.jl:11\nin expression starting at\
    \ /tmp/tmpskjn960v.jl:11\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n\
    \        return 0, 0\n    end\n    \n    while num > 0\n        if num % 2 ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n        num /= 10\n    end\n    \n    return (even_count, odd_count)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000002)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000006)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jmu66cw.jl:25\nin expression starting at\
    \ /tmp/tmp8jmu66cw.jl:25\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if\
    \ i%2 == 0\n            even = even+1\n        else\n            odd = odd+1\n\
    \    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqijhk74e.jl:19\nin expression starting at\
    \ /tmp/tmpqijhk74e.jl:19\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        error(\"The given number must be positive\")\n\
    \    else\n        even_odd_count_helper(num)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpl6b0g4ae.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpl6b0g4ae.jl:19\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpl6b0g4ae.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6b0g4ae.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6b0g4ae.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl6b0g4ae.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The given number must be positive\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpl6b0g4ae.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl6b0g4ae.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl6b0g4ae.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl6b0g4ae.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpl6b0g4ae.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6b0g4ae.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6b0g4ae.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl6b0g4ae.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpl6b0g4ae.jl:11\n\
    \   [2] macro "
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num:\n        if\
    \ i%2==0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1 \n        end\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0azye77.jl:11\nin expression starting at\
    \ /tmp/tmps0azye77.jl:11\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for i\
    \ in num:\n        if i%2 == 0 then even += 1 \n        else odd += 1 \n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(1)\
    \ == (1, 0)\n@assert even_odd_count(10) == (1, 1)\n@assert even_odd_count(100)\
    \ == (1, 2)\n@assert even_odd_count(1000) == (1, 3)\n@assert even_odd_count(10000)\
    \ == (1, 4)\n@assert even_odd_count(100000) == (1, 5)\n@assert even_odd_count(1000000)\
    \ == (1, 6)\n@assert even_odd_count(10000000) == (1, 7)\n@assert even_odd_count(100000000)\
    \ == (1, 8)\n@assert even_odd_count(1000000000) == (1, 9)\n@assert even_odd_count(10000000000)\
    \ == (2, 0)\n@assert even_odd_count(100000000000) == (2, 1)\n@assert even_odd_count(1000000000000)\
    \ == (2, 2)\n@assert even_odd_count(10000000000000) == (2, 3)\n@assert even_odd_count(100000000000000)\
    \ == (2, 4)\n@assert even_odd_count(1000000000000000) == (2, 5)\n@assert even_odd_count(10000000000000000)\
    \ == (2, 6)\n@assert even_odd_count(100000000000000000) == (2, 7)\n@assert even_odd_count(1000000000000000000)\
    \ == (2, 8)\n@assert even_odd_count(10000000000000000000) == (2, 9)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8bai6bcp.jl:6\nin expression starting at /tmp/tmp8bai6bcp.jl:6\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = num % 2 == 0\n    odd = num % 2 != 0\n    \n    if\
    \ even\n        even = num / 2\n    else\n        odd = num / 2\n    end\n   \
    \ \n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajpngl4n.jl:18\nin expression starting at\
    \ /tmp/tmpajpngl4n.jl:18\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        even = num % 10\n        odd = even + odd\n        num =\
    \ num / 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(100\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4x42l3uw.jl:6\nin expression starting at /tmp/tmp4x42l3uw.jl:6\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then return (0,0)\n    else if num < 100\
    \ \n        then return (1,0)\n    else if num < 1000 \n        then return (2,0)\n\
    \    else if num < 10000 \n        then return (3,0)\n    else if num < 100000\
    \ \n        then return (4,0)\n    else if num < 1000000 \n        then return\
    \ (5,0)\n    else if num < 10000000 \n        then return (6,0)\n    else if num\
    \ < 100000000 \n        then return (7,0)\n    else if num < 1000000000 \n   \
    \     then return (8,0)\n    else if num < 10000000000 \n        then return (9,0)\n\
    \    else if num < 100000000000 \n        then return (10,0)\n    else if num\
    \ < 1000000000000 \n        then return (11,0)\n    else if num < 10000000000000\
    \ \n        then return (12,0)\n    else if num < 100000000000000 \n        then\
    \ return (13,0)\n    else if num < 1000000000000000 \n        then return (14,0)\n\
    \    else if num < 10000000000000000 \n        then return (15,0)\n    else if\
    \ num < 100000000000000000 \n        then return (16,0)\n    else if num < 1000000000000000000\
    \ \n        then return (17,0)\n    else if num < 10000000000000000000 \n    \
    \    then return (18,0)\n    else if num < 100000000000000000000 \n        then\
    \ return (19,0)\n    else if num < 1000000000000000000000 \n        then return\
    \ (20,0)\n    else if num < 10000000000000000000000 \n        then return (21,0)\n\
    \    else if num < 100000000000000000000000 \n        then return (22,0)\n   \
    \ else if num < 1000000000000000000000000 \n        then return (23,0)\n    else\
    \ if num < 10000000000000000000000000 \n        then return (24,0)\n    else if\
    \ num < 100000000000000000000000000 \n        then return (25,0)\n    else if\
    \ num < 1000000000000000000000000000 \n        then return (26,0)\n    else if\
    \ num < 10000000000000000000000000000 \n        then return (27,0)\n    else if\
    \ num < 100000000000000000000000000000 \n        then return (28,0)\n    else\
    \ if num < 1000000000000000000000000000000 \n        then return (29,0)\n    else\
    \ if num < 10000000000000000000000000000000 \n        then return (30,0)\n   \
    \ else if num < 100000000000000000000000000000000 \n        then return (31,0)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp10p3jhco.jl:7\nin expression starting at /tmp/tmp10p3jhco.jl:7\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num /\
    \ 2)\n        even_odd_count(num % 2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppnbbrj4i.jl:8\nin expression starting at /tmp/tmppnbbrj4i.jl:8\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1 \n        end\n        num = num / 2\n  \
    \  end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(124)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.4>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(127)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.4>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(130)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.4>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(133)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.4>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(136)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.4>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(139)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.4>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(142)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.4>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(145)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.4>\neven_odd_count(147)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxbmcg871.jl:6\nin expression starting at /tmp/tmpxbmcg871.jl:6\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 23)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 24)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 26)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 27)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jnslpjg.jl:66\nin expression starting at\
    \ /tmp/tmp9jnslpjg.jl:66\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = num / 2\n   \
    \ end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_count(147)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoaj4vyjl.jl:6\nin expression starting at /tmp/tmpoaj4vyjl.jl:6\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 1000000000000000000000,\
    \ num % 1000000000000000000000)\n    elseif num < 100000000000000000000000 then\
    \ \n        return (num / 10000000000000000000000, num % 10000000000000000000000)\
    \ \n    elseif num < 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ num % 100000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvwc5q3a.jl:1\nin expression starting at /tmp/tmpmvwc5q3a.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    else\n        return (num / 100,\
    \ num % 100)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1000)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(10000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(100000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000001)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000002)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000003)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000004)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000005)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000006)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(10000000000007)\n</cell>\n<code language=julia-1.5>\n@code_warn\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6cupn63.jl:14\nin expression starting at\
    \ /tmp/tmph6cupn63.jl:14\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else\n        odd_count\
    \ = even_odd_count(num / 10)\n        even_count = num % 10\n        return (even_count\
    \ + odd_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpph0h5i4y.jl:14\nin expression starting at\
    \ /tmp/tmpph0h5i4y.jl:14\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n\
    \        return (0, 0) \n    end\n    \n    while num > 0\n        if num % 2\
    \ == 0\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = num / 2\n    end\n    \n    return\
    \ (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000001)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000003)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000005)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000007)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000009)\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60ab79or.jl:25\nin expression starting at\
    \ /tmp/tmp60ab79or.jl:25\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        error(\"The input must be positive\")\n    else\n \
    \       even, odd = 0, 0\n        for i in 2..num\n            if num % i == 0\n\
    \                even += i\n            else\n                odd += i\n     \
    \   end\n        return (even, odd)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(-10)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(3)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(8)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(9)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(14)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfci6cx1f.jl:1\nin expression starting at /tmp/tmpfci6cx1f.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n       \
    \ if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in a given number.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3snf7o8.jl:16\nin expression starting at\
    \ /tmp/tmpz3snf7o8.jl:16\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    for\
    \ i in 2 to num\n        if num % i == 0 then even += 1 \n        else odd +=\
    \ 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwt0xs7uj.jl:6\nin expression starting at /tmp/tmpwt0xs7uj.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0) \n    else \n        odd_count\
    \ = even_odd_count(num/10)\n        return (odd_count[0]+num, odd_count[1]+1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry68kpr0.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry68kpr0.jl:1\n\
    in expression starting at /tmp/tmpry68kpr0.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkv7gj_0.jl:1\nin expression starting at /tmp/tmpzkv7gj_0.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The number should be positive\")\n\
    \    elseif num == 0\n        (0, 2)\n    else\n        even, odd = 0, 0\n   \
    \     for n in num\n            if n % 2 == 0\n                even += 1\n   \
    \         else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqt87ysf.jl:20\nin expression starting at\
    \ /tmp/tmplqt87ysf.jl:20\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfty4_6a.jl:56\nin expression starting at\
    \ /tmp/tmphfty4_6a.jl:56\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = num / 2\n   \
    \ end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(12345)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl50rvj8k.jl:6\nin expression starting at /tmp/tmpl50rvj8k.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even::Int64 = 0\n    odd::Int64 = 0\n    \n    for i in num\n \
    \       if i % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(10) == (2, 1)\n@assert even_odd_count(11) == (3, 1)\n@assert\
    \ even_odd_count(12) == (2, 2)\n@assert even_odd_count(13) == (3, 2)\n@assert\
    \ even_odd_count(14) == (2, 3)\n@assert even_odd_count(15) == (3, 3)\n@assert\
    \ even_odd_count(16) == (2, 4)\n@assert even_odd_count(17) == (3, 4)\n@assert\
    \ even_odd_count(18) == (2, 5)\n@assert even_odd_count(19) == (3, 5)\n@assert\
    \ even_odd_count(20) == (2, 6)\n@assert even_odd_count(21) == (3, 6)\n@assert\
    \ even_odd_count(22) == (2, 7)\n@assert even_odd_count(23) == (3, 7)\n@assert\
    \ even_odd_count(24) == (2, 8)\n@assert even_odd_count(25) == (3, 8)\n@assert\
    \ even_odd_count(26) == (2, 9)\n@assert even_odd_count(27) == (3, 9)\n@assert\
    \ even_odd_count(28) == (2, 10)\n@assert even_odd_count(29) == (3, 10)\n@assert\
    \ even_odd_count(30) == (2, 11)\n@assert even_odd_count(31) == (3, 11)\n@assert\
    \ even_odd_count(32) == (2, 12)\n@assert even_odd_count(33) == (3, 12)\n@assert\
    \ even_odd_count(34) == (2, 13)\n@assert even_odd_count(35) == (3, 13)\n@assert\
    \ even_odd_count(36) == (2, 14)\n@assert even_odd_count(37) == (3, 14)\n@assert\
    \ even_odd_count(38) == (2, 15)\n@assert even_odd_count(39) == (3, 15)\n@assert\
    \ even_odd_count(40) == (2, 16)\n@assert even_odd_count(41) == (3, 16)\n@assert\
    \ even_odd_count(42) == (2, 17)\n@assert even_odd_count(43) == (3, 17)\n@assert\
    \ even_odd_count(44) == (2, 18)\n@assert even_odd_count(45) == (3, 18)\n@assert\
    \ even_odd_count(46) == (2, 19)\n@assert even_odd_count(47) == (3, 19\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kgz8p6r.jl:18\nin expression starting at\
    \ /tmp/tmp7kgz8p6r.jl:18\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        error(\"The input number must be positive\")\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            end \n            num /= 10\n        return (even, odd)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nnrs56w.jl:22\nin expression starting at\
    \ /tmp/tmp4nnrs56w.jl:22\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = 0\n        even_count = 0\n        \n        for i in num:\n   \
    \         if i%2 == 0 then\n                even_count = even_count + 1\n    \
    \        else \n                odd_count = odd_count + 1\n        \n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000001)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000002)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000003)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000004)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000005)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000006)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000000007)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000008)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10000000000009)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000010)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mbdtzuk.jl:13\nin expression starting at\
    \ /tmp/tmp5mbdtzuk.jl:13\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num/10)\
    \ + even_odd_count(num%10)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa50be2tz.jl:8\nin expression starting at /tmp/tmpa50be2tz.jl:8\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfty4_6a.jl:56\nin expression starting at\
    \ /tmp/tmphfty4_6a.jl:56\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppb13ln4n.jl:20\nin expression starting at\
    \ /tmp/tmppb13ln4n.jl:20\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    else if num < 100 then return\
    \ (num, 0)\n    else if num < 1000 then return (num, 0)\n    else if num < 10000\
    \ then return (num, 0)\n    else if num < 100000 then return (num, 0)\n    else\
    \ if num < 1000000 then return (num, 0)\n    else if num < 10000000 then return\
    \ (num, 0)\n    else if num < 100000000 then return (num, 0)\n    else if num\
    \ < 1000000000 then return (num, 0)\n    else if num < 10000000000 then return\
    \ (num, 0)\n    else if num < 100000000000 then return (num, 0)\n    else if num\
    \ < 1000000000000 then return (num, 0)\n    else if num < 10000000000000 then\
    \ return (num, 0)\n    else if num < 100000000000000 then return (num, 0)\n  \
    \  else if num < 1000000000000000 then return (num, 0)\n    else if num < 10000000000000000\
    \ then return (num, 0)\n    else if num < 100000000000000000 then return (num,\
    \ 0)\n    else if num < 1000000000000000000 then return (num, 0)\n    else return\
    \ (num, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67t7li57.jl:6\nin expression starting at /tmp/tmp67t7li57.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    elseif num < 1000 then\n    \
    \    return (num / 100, num % 100)\n    elseif num < 10000 then\n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then\n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then\n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then\n        return (num /\
    \ 1000000, num % 1000000)\n    elseif num < 100000000 then\n        return (num\
    \ / 10000000, num % 10000000)\n    elseif num < 1000000000 then\n        return\
    \ (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\n    \
    \    return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then\n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then\n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then\n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then\n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\n\
    \        return (num / 100000000000000, num % 100000000000000)\n    elseif num\
    \ < 10000000000000000 then\n        return (num / 1000000000000000, num % 1000000000000000)\n\
    \    elseif num < 100000000000000000 then\n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 100000000000000000 then\n       \
    \ return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 1000000000000000000 then\n        return (num / 100000000000000000, num %\
    \ 100000000000000000)\n    else\n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ryw0xic.jl:48\nin expression starting at\
    \ /tmp/tmp0ryw0xic.jl:48\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else\n        even_odd_count(num\
    \ / 10) + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(0) == (0, 0)\n@assert even_odd_count(1) == (0, 1)\n@assert\
    \ even_odd_count(2) == (1, 1)\n@assert even_odd_count(3) == (1, 0)\n@assert even_odd_count(4)\
    \ == (0, 1)\n@assert even_odd_count(5) == (1, 1)\n@assert even_odd_count(6) ==\
    \ (1, 0)\n@assert even_odd_count(7) == (0, 1)\n@assert even_odd_count(8) == (1,\
    \ 1)\n@assert even_odd_count(9) == (1, 0)\n@assert even_odd_count(10) == (0, 1)\n\
    @assert even_odd_count(11) == (1, 1)\n@assert even_odd_count(12) == (1, 0)\n@assert\
    \ even_odd_count(13) == (0, 1)\n@assert even_odd_count(14) == (1, 1)\n@assert\
    \ even_odd_count(15) == (1, 0)\n@assert even_odd_count(16) == (0, 1)\n@assert\
    \ even_odd_count(17) == (1, 1)\n@assert even_odd_count(18) == (1, 0)\n@assert\
    \ even_odd_count(19) == (0, 1)\n@assert even_odd_count(20) == (1, 1)\n@assert\
    \ even_odd_count(21) == (1, 0)\n@assert even_odd_count(22) == (0, 1)\n@assert\
    \ even_odd_count(23) == (1, 1)\n@assert even_odd_count(24) == (1, 0)\n@assert\
    \ even_odd_count(25) == (0, 1)\n@assert even_odd_count(26) == (1, 1)\n@assert\
    \ even_odd_count(27) == (1, 0)\n@assert even_odd_count(28) == (0, 1)\n@assert\
    \ even_odd_count(29) == (1, 1)\n@assert even_odd_count(30) == (1, 0)\n@assert\
    \ even_odd_count(31) == (0, 1)\n@assert even_odd_count(32) == (1, 1)\n@assert\
    \ even_odd_count(33) == (1, 0)\n@assert even_odd_count(34) == (0, 1)\n@assert\
    \ even_odd_count(35) == (1, 1)\n@assert even_odd_count(36) == (1, 0)\n@assert\
    \ even_odd_count(37) == (0, 1)\n@assert even_odd_count(38) == (1, 1)\n@\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60x7od3w.jl:8\nin expression starting at /tmp/tmp60x7od3w.jl:8\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        even = even + num % 10\n        odd = odd + num % 10\n \
    \       num = num / 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[2]\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb7021dgf.jl:6\nin expression starting at /tmp/tmpb7021dgf.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else\n        even,\
    \ odd = 0, 0\n        for n in num:\n            if n % 2 == 0 then\n        \
    \        even += n\n            else\n                odd += n\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999999)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphokvpcwk.jl:11\nin expression starting at\
    \ /tmp/tmphokvpcwk.jl:11\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    digits\
    \ = num.to_digits()\n    for d in digits\n        if d % 2 == 0 then even += 1\
    \ \n        else odd += 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.0>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(1234567890)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(12345678901234)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123456789012345)\n</cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(1234567890123456788)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(1234567890123456788\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfc3omov.jl:6\nin expression starting at /tmp/tmpsfc3omov.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkv7gj_0.jl:1\nin expression starting at /tmp/tmpzkv7gj_0.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0)\n    else \n        return\
    \ (even_odd_count(num/10), num%10 + even_odd_count(num%10))\nend\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(123)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(12321)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxg04x8f.jl:11\nin expression starting at\
    \ /tmp/tmpkxg04x8f.jl:11\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1,0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1 \n        num = num / 2\n    return (even,\
    \ odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp06u8jjqq.jl:6\nin expression starting at /tmp/tmp06u8jjqq.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even_odd_count_tuple = Tuple{Int64, Int64}()\n    even_count = 0\n\
    \    odd_count = 0\n    for n in num\n        if n % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n    end\n    even_odd_count_tuple\
    \ = (even_count, odd_count)\n    return even_odd_count_tuple\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcpnjv344.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpcpnjv344.jl:27\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  MethodError: no method matching Tuple{Int64,\
    \ Int64}()\n  Closest candidates are:\n    (::Type{T})(!Matched::Tuple) where\
    \ T<:Tuple at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:312\n    (::Type{T})(!Matched::NamedTuple)\
    \ where T<:Tuple at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:147\n\
    \    (::Type{T})(!Matched::Any) where T<:Tuple at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:317\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpcpnjv344.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcpnjv344.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcpnjv344.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcpnjv344.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The input must be positive\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpcpnjv344.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcpnjv344.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcpnjv344.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcpnjv344.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  MethodError: no method matching Tuple{Int64, Int64}()\n\
    \  Closest candidates are:\n    (::Type{T})(!Matched::Tuple) where T<:Tuple at\
    \ ~/.conda/envs/polyglot/share/julia/base/tuple.jl:312\n    (::Type{T})(!Matched::NamedTuple)\
    \ where T<:Tuple at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:147\n\
    \    (::Type{T})(!Matched::Any) where T<:Tuple at ~/.conda/envs/polyglot/share/julia/base/t"
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even, odd = even_odd_count(num\
    \ / 2)\n        (even + odd, num - even * 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyijwvuwv.jl:8\nin expression starting at /tmp/tmpyijwvuwv.jl:8\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    else\n        even,\
    \ odd = 0, 0\n        for n in num:\n            if n % 2 == 0 then\n        \
    \        even += n\n            else\n                odd += n\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic4c3cyi.jl:11\nin expression starting at\
    \ /tmp/tmpic4c3cyi.jl:11\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in num\n       \
    \ if i rem 2 == 0\n            even::Int64 = even + 1\n        else\n        \
    \    odd::Int64 = odd + 1 \n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3wwlogpx.jl:9\nin expression starting at /tmp/tmp3wwlogpx.jl:9\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num - 10, 1)\n    elseif num < 1000 then\n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then\n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then\n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then\n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then\n        return (num - 1000000, 6)\n    elseif num < 100000000 then\n \
    \       return (num - 10000000, 7)\n    elseif num < 1000000000 then\n       \
    \ return (num - 100000000, 8)\n    elseif num < 10000000000 then\n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then\n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then\n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then\n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then\n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then\n       \
    \ return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\n\
    \        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then\n        return (num - 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ then\n        return (num - 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ then\n        return (num - 100000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ then\n        return (num - 100000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ then\n        return (num - 100000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ then\n        return (num - 100000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ then\n        return (num - 100000000000000000, 22)\n    elseif num < 1000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then\n        return (num - 100000000000000000, 28)\n    elseif num < 1000000000000000000000000000000\
    \ then\n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9q17pfm.jl:68\nin expression starting at\
    \ /tmp/tmpp9q17pfm.jl:68\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 22)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 23)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 25)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 26)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000000, 28)\n    elseif\
    \ num < 1000000000000000000000000000000 then \n        return (num / 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x3xzbap.jl:66\nin expression starting at\
    \ /tmp/tmp8x3xzbap.jl:66\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = 0\n        even_count = 0\n        digit = num % 10\n        while\
    \ digit > 0\n            if digit % 2 == 1\n                even_count += 1\n\
    \            else\n                odd_count += 1\n            digit = digit /\
    \ 10\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12321)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12321)[1]\n</cell>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnkdkal8.jl:21\nin expression starting at\
    \ /tmp/tmpjnkdkal8.jl:21\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    for n in num\n\
    \        if n % 2 == 0\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n    end\n    \n    return (even_count,\
    \ odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxrx4t2q.jl:19\nin expression starting at\
    \ /tmp/tmphxrx4t2q.jl:19\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in 1:num\n        if i % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(3)\n</cell>\n<code language=julia-1.5>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(6)\n</cell>\n<code language=julia-1.5>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(8)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(9)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(11)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(13)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(14)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(15)\n</cell>\n<code language=julia-1.5>\neven_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(18)\n</cell>\n<code language=julia-1.5>\neven_odd_count(19)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(20)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(21)\n</cell>\n<code language=julia-1.5>\neven_odd_count(22)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(23)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4q5xgioi.jl:19\nin expression starting at\
    \ /tmp/tmp4q5xgioi.jl:19\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (0,0)\n    even, odd = 0, 0\n    for i\
    \ in reverse(String(num))::Int do\n        if i mod 2 == 0 then even += 1 else\
    \ odd += 1\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpers7cr9k.jl:6\nin expression starting at /tmp/tmpers7cr9k.jl:6\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 23)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 24)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 26)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 27)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jnslpjg.jl:66\nin expression starting at\
    \ /tmp/tmp9jnslpjg.jl:66\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if\
    \ i%2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ogpkk0c.jl:19\nin expression starting at\
    \ /tmp/tmp2ogpkk0c.jl:19\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 1000000000000000000000 then \n \
    \       return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 10000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 100000000000000000000000 then \n\
    \        return (num / 100000000000000000, num % 100000000000000000)\n    elseif\
    \ num < 1000000000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 10000000000\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfty4_6a.jl:56\nin expression starting at\
    \ /tmp/tmphfty4_6a.jl:56\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    for\
    \ i in reverse(String(num))\n        if i == '0' then even += 1 else odd += 1\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(10)\
    \ == (1, 1)\n@assert even_odd_count(11) == (0, 0)\n@assert even_odd_count(12)\
    \ == (1, 0)\n@assert even_odd_count(13) == (0, 1)\n@assert even_odd_count(14)\
    \ == (1, 1)\n@assert even_odd_count(15) == (0, 0)\n@assert even_odd_count(16)\
    \ == (1, 0)\n@assert even_odd_count(17) == (0, 1)\n@assert even_odd_count(18)\
    \ == (1, 1)\n@assert even_odd_count(19) == (0, 0)\n@assert even_odd_count(20)\
    \ == (1, 0)\n@assert even_odd_count(21) == (0, 1)\n@assert even_odd_count(22)\
    \ == (1, 1)\n@assert even_odd_count(23) == (0, 0)\n@assert even_odd_count(24)\
    \ == (1, 0)\n@assert even_odd_count(25) == (0, 1)\n@assert even_odd_count(26)\
    \ == (1, 1)\n@assert even_odd_count(27) == (0, 0)\n@assert even_odd_count(28)\
    \ == (1, 0)\n@assert even_odd_count(29) == (0, 1)\n@assert even_odd_count(30)\
    \ == (1, 1)\n@assert even_odd_count(31) == (0, 0)\n@assert even_odd_count(32)\
    \ == (1, 0)\n@assert even_odd_count(33) == (0, 1)\n@assert even_odd_count(34)\
    \ == (1, 1)\n@assert even_odd_count(35) == (0, 0)\n@assert even_odd_count(36)\
    \ == (1, 0)\n@assert even_odd_count(37) == (0, 1)\n@assert even_odd_count(38)\
    \ == (1, 1)\n@assert even_odd_count(39) == (0, 0)\n@assert even_odd_count(40)\
    \ == (1, 0)\n@assert even_odd_count(41) == (0, 1)\n@assert even_odd_count(42)\
    \ == (1, 1)\n@assert even_odd_count(43) == (0, 0)\n@assert even_odd_count(44)\
    \ == (1, 0)\n@assert even_odd_count(45) == (0, 1)\n@assert even_odd_count(46)\
    \ == (1, 1)\n@assert even_odd_count(47) == (0, 0)\n@assert even_odd_count(48)\
    \ == (1, 0)\n@assert even_odd_count(49) == (0, 1)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzidzbjlr.jl:6\nin expression starting at /tmp/tmpzidzbjlr.jl:6\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for x in reverse(split(string(num), \"\"\
    ))\n        if x % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qx29cr_.jl:19\nin expression starting at\
    \ /tmp/tmp8qx29cr_.jl:19\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for x\
    \ in num:\n        if x % 2 == 0 then even += 1 \n        else odd += 1 \n   \
    \ return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8pwwbue6.jl:6\nin expression starting at /tmp/tmp8pwwbue6.jl:6\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    \n    even, odd = 0, 0\n\
    \    \n    for i in reverse(String(num))\n        if i == '0' then even += 1 else\
    \ odd += 1 \n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(0) == (0, 0)\n@assert even_odd_count(1) == (0, 1)\n@assert\
    \ even_odd_count(10) == (1, 1)\n@assert even_odd_count(99) == (1, 1)\n@assert\
    \ even_odd_count(100) == (1, 0)\n@assert even_odd_count(1000) == (1, 1)\n@assert\
    \ even_odd_count(10000) == (2, 1)\n@assert even_odd_count(100000) == (2, 2)\n\
    @assert even_odd_count(1000000) == (3, 2)\n@assert even_odd_count(10000000) ==\
    \ (3, 3)\n@assert even_odd_count(100000000) == (4, 3)\n@assert even_odd_count(1000000000)\
    \ == (4, 4)\n@assert even_odd_count(10000000000) == (5, 4)\n@assert even_odd_count(100000000000)\
    \ == (5, 5)\n@assert even_odd_count(1000000000000) == (6, 5)\n@assert even_odd_count(10000000000000)\
    \ == (6, 6)\n@assert even_odd_count(100000000000000) == (7, 6)\n@assert even_odd_count(1000000000000000)\
    \ == (7, 7)\n@assert even_odd_count(10000000000000000) == (8, 7)\n@assert even_odd_count(100000000000000000)\
    \ == (8, 8)\n@assert even_odd_count(1000000000000000000) == (9, 8)\n@assert even_odd_count(10000000000000000000)\
    \ == (9, 9)\n@assert even_odd_count(100000000000000000000) == (10, 9)\n@assert\
    \ even_odd_count(1000000000000000000000) == (10, 10)\n@assert even_odd_count(10000000000000000000000)\
    \ == (11, 10)\n@assert even_odd_count(100000000000000000000000) == (11, 11)\n\
    @assert even_odd_count(1000000000000000000000000) == (12, 11)\n@assert even_odd_count(10000000000000000000000000)\
    \ == (12, 12)\n@assert even_odd_count(100000000000000000000000000) == (13, 12)\n\
    @assert even_odd_count(1000000000000000000000000000) == (13, 13)\n@assert even_odd_count(10000000000000000000000000000)\
    \ == (14, 13)\n@assert even_odd_count(100000000000000000000000000000) == (14,\
    \ 14)\n@assert even_odd_count(1000000000000000000000000000000) == \nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8k89njc9.jl:6\nin expression starting at /tmp/tmp8k89njc9.jl:6\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    else\n        odd_count = even_odd_count(num\
    \ / 10)\n        return (odd_count[0] + 1, odd_count[1] + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nThe function should ignore spaces and punctuation.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxfvif32.jl:15\nin expression starting at\
    \ /tmp/tmpgxfvif32.jl:15\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0,0)\n    else\n        even, odd = 0, 0\n\
    \        for i in 1:num\n            if i%2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer.\
    \ return a tuple that has the number of even and odd digits respectively.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx24fw4eg.jl:8\nin expression starting at /tmp/tmpx24fw4eg.jl:8\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num:\n        if\
    \ i%2==0 then\n            even = even+1\n        else\n            odd = odd+1\n\
    \        end\n    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqvm7cqh.jl:11\nin expression starting at\
    \ /tmp/tmpfqvm7cqh.jl:11\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for i\
    \ in reverse(String(num))\n        if i == '0' then even += 1 else odd += 1\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_odd_count(147)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(148)\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4b7db59z.jl:6\nin expression starting at /tmp/tmp4b7db59z.jl:6\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        (0, 0) \n    else\n        even, odd = even_odd_count(num/10)\n\
    \        (even+num%10, odd+num%10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8ryropa.jl:15\nin expression starting at\
    \ /tmp/tmpq8ryropa.jl:15\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - num % 10, 1)\n    elseif num < 1000 then \n   \
    \     return (num - num % 100, (num - num % 10) / 2)\n    elseif num < 10000 then\
    \ \n        return (num - num % 1000, (num - num % 1000 - num % 10) / 3)\n   \
    \ elseif num < 100000 then \n        return (num - num % 10000, (num - num % 10000\
    \ - num % 10) / 4)\n    elseif num < 1000000 then \n        return (num - num\
    \ % 100000, (num - num % 100000 - num % 1000 - num % 10) / 5)\n    elseif num\
    \ < 10000000 then \n        return (num - num % 1000000, (num - num % 1000000\
    \ - num % 100000 - num % 1000 - num % 10) / 6)\n    elseif num < 100000000 then\
    \ \n        return (num - num % 10000000, (num - num % 10000000 - num % 1000000\
    \ - num % 100000 - num % 1000 - num % 10) / 7)\n    elseif num < 1000000000 then\
    \ \n        return (num - num % 100000000, (num - num % 100000000 - num % 10000000\
    \ - num % 1000000 - num % 100000 - num % 1000 - num % 10) / 8)\n    elseif num\
    \ < 10000000000 then \n        return (num - num % 1000000000, (num - num % 1000000000\
    \ - num % 100000000 - num % 10000000 - num % 1000000 - num % 100000 - num % 1000\
    \ - num % 10 - num % 10) / 9)\n    elseif num < 100000000000 then \n        return\
    \ (num - num % 10000000000, (num - num % 10000000000 - num % 1000000000 - num\
    \ % 100000000 - num % 10000000 - num % 1000000 - num % 100000 - num % 1000 - num\
    \ % 10 - num % 100 - num % 10) / 10)\n    elseif num < 1000000000000 then \n \
    \       return (num - num % 100000000000, (num - num % 100000000000 - num % 10000000000\
    \ - num % 1000000000 - num % 100000000 - num % 10000000 - num % 1000000 - num\
    \ % 100000 - num % 1000 - num % 10 - num % 1000 - num % 100 - num % 10) / 11)\n\
    \    elseif num < 10000000000000 then \n        return (num - num % 1000000000000,\
    \ (num - num % 1000000000000 - num % 100000000000 - num % 10000000000 - num %\
    \ 1000000000 - num % 100000000 - num % 10000000 - num % 1000000 - num % 100000\
    \ - num % 1000 - num % 10 - num % 1000 - num % 1000 - num % 100 - \nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeepvhd0r.jl:34\nin expression starting at\
    \ /tmp/tmpeepvhd0r.jl:34\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for x in num\n        if\
    \ x % 2 == 0\n            even = even + 1\n        else\n            odd = odd\
    \ + 1 \n    end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplznfzh6t.jl:19\nin expression starting at\
    \ /tmp/tmplznfzh6t.jl:19\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  end\n    even_count = 0\n    odd_count = 0\n    \n    for i in 1:num\n    \
    \    if i % 2 == 0\n            even_count = even_count + 1\n        else\n  \
    \          odd_count = odd_count + 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpoivds6gp.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpoivds6gp.jl:26\n  Expression: candidate(7)\
    \ == (0, 1)\n   Evaluated: (3, 4) == (0, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoivds6gp.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpoivds6gp.jl:25\ntest set: Error During Test\
    \ at /tmp/tmpoivds6gp.jl:27\n  Test threw exception\n  Expression: candidate(-78)\
    \ == (1, 1)\n  The input must be positive\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n     @ Main /tmp/tmpoivds6gp.jl:7\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoivds6gp.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoivds6gp.jl:25\ntest set:\
    \ Test Failed at /tmp/tmpoivds6gp.jl:28\n  Expression: candidate(3452) == (2,\
    \ 2)\n   Evaluated: (1726, 1726) == (2, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoivds6gp.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpoivds6gp.jl:25\ntest set: Test Failed at /tmp/tmpoivds6gp.jl:29\n\
    \  Expression: candidate(346211) == (3, 3)\n   Evaluated: (173105, 173106) ==\
    \ (3, 3)\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoivds6gp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoivds6gp.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpoivds6gp.jl:30\n  Test threw exception\n  "
  timestamp: 1660014650
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (0, 0) \n    else\n        odd_count = sum(num\
    \ % i | i <- [1..Int(sqrt(num))], i % 2 == 1)\n        even_count = sum(num %\
    \ i | i <- [1..Int(sqrt(num))], i % 2 != 1)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(0)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-10)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(100000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(1000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(10000000000)\n</cell>\n<code\
    \ language=julia-1.3>\neven_odd_count(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(1000000000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(10000000000000000)\n</cell>\n<code language=julia-1.3>\neven_odd_count(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(10000000000000000000)\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwj3rm2i.jl:16\nin expression starting at\
    \ /tmp/tmpiwj3rm2i.jl:16\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = num / 2\n   \
    \ end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiy8zq_7.jl:6\nin expression starting at /tmp/tmpaiy8zq_7.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even::Int64 = 0\n    odd::Int64 = 0\n    for n in num\n       \
    \ if n % 2 == 0\n            even += 1\n        else\n            odd += 1\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels present in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdm_rp47.jl:16\nin expression starting at\
    \ /tmp/tmpcdm_rp47.jl:16\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    for\
    \ i in reverse(String(num)):\n        if i == '0' then even += 1 else odd += 1\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(1234)\
    \ == (6, 2)\n@assert even_odd_count(0) == (0, 0)\n@assert even_odd_count(1) ==\
    \ 0\n@assert even_odd_count(2) == (1, 1)\n@assert even_odd_count(3) == (1, 1)\n\
    @assert even_odd_count(4) == (2, 2)\n@assert even_odd_count(5) == (2, 2)\n@assert\
    \ even_odd_count(6) == (3, 3)\n@assert even_odd_count(7) == (3, 3)\n@assert even_odd_count(8)\
    \ == (4, 4)\n@assert even_odd_count(9) == (4, 4)\n@assert even_odd_count(10) ==\
    \ (5, 5)\n@assert even_odd_count(11) == (5, 5)\n@assert even_odd_count(12) ==\
    \ (6, 6)\n@assert even_odd_count(13) == (6, 6)\n@assert even_odd_count(14) ==\
    \ (7, 7)\n@assert even_odd_count(15) == (7, 7)\n@assert even_odd_count(16) ==\
    \ (8, 8)\n@assert even_odd_count(17) == (8, 8)\n@assert even_odd_count(18) ==\
    \ (9, 9)\n@assert even_odd_count(19) == (9, 9)\n@assert even_odd_count(20) ==\
    \ (10, 10)\n@assert even_odd_count(21) == (10, 10)\n@assert even_odd_count(22)\
    \ == (11, 11)\n@assert even_odd_count(23) == (11, 11)\n@assert even_odd_count(24)\
    \ == (12, 12)\n@assert even_odd_count(25) == (12, 12)\n@assert even_odd_count(26)\
    \ == (13, 13)\n@assert even_odd_count(27) == (13, 13)\n@assert even_odd_count(28)\
    \ == (14, 14)\n@assert even_odd_count(29) == (14, 14)\n@assert even_odd_count(30)\
    \ == (15, 15)\n@assert even_odd_count(31) == (15, 15)\n@assert even_odd_count(32)\
    \ == (16, 16)\n@assert even_odd_count(33) == (16, 16)\n@assert even_odd_count(34)\
    \ == (17, 17)\n@assert even_odd_count(35) == \nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9v0ptoup.jl:6\nin expression starting at /tmp/tmp9v0ptoup.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    else \n        odd_count\
    \ = even_odd_count(num/10)\n        return (num%10, odd_count[1] + odd_count[0])\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(123)\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7t_tozk4.jl:6\nin expression starting at /tmp/tmp7t_tozk4.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for x in num\n        if x % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called count_digits(num::Int64)\
    \ that returns the number of digits in num.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnu6il3u.jl:16\nin expression starting at\
    \ /tmp/tmpdnu6il3u.jl:16\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (0,0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    return (even, odd)\nend\n\"\"\"\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqo3xkbsv.jl:6\nin expression starting at /tmp/tmpqo3xkbsv.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number must be positive.\"\
    )\n    else if num == 0\n        return (0,0)\n    else\n        even = num %\
    \ 2 == 0\n        odd = num % 2 != 0\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-10)\n</cell>\n<code language=julia-1.4>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(1)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.4>\neven_odd_count(3)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(4)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(5)\n</cell>\n<code language=julia-1.4>\neven_odd_count(6)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(7)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(8)\n</cell>\n<code language=julia-1.4>\neven_odd_count(9)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(10)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(11)\n</cell>\n<code language=julia-1.4>\neven_odd_count(12)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(13)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(14)\n</cell>\n<code language=julia-1.4>\neven_odd_count(15)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(16)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(17)\n</cell>\n<code language=julia-1.4>\neven_odd_count(18)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(19)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(20)\n</cell>\n<code language=julia-1.4>\neven_odd_count(21)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(22)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(23)\n</cell>\n<code language=julia-1.4>\neven_odd_\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyngonkl.jl:8\nin expression starting at /tmp/tmptyngonkl.jl:8\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = even_odd_count(num / 10)\n        return (odd_count[0] + 1, odd_count[1]\
    \ + 1) \nend\n\"\"\"\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspy67egt.jl:1\nin expression starting at /tmp/tmpspy67egt.jl:1\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in 1:num\n        if i % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(3)\n</cell>\n<code language=julia-1.5>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(6)\n</cell>\n<code language=julia-1.5>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(8)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(9)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(11)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(13)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(14)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(15)\n</cell>\n<code language=julia-1.5>\neven_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(18)\n</cell>\n<code language=julia-1.5>\neven_odd_count(19)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(20)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(21)\n</cell>\n<code language=julia-1.5>\neven_odd_count(22)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(23)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiabq08ki.jl:19\nin expression starting at\
    \ /tmp/tmpiabq08ki.jl:19\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (0,0)\n    elseif num < 100 then\n\
    \        return (0,1)\n    elseif num < 1000 then\n        return (1,0)\n    elseif\
    \ num < 10000 then\n        return (1,1)\n    elseif num < 100000 then\n     \
    \   return (2,0)\n    elseif num < 1000000 then\n        return (2,1)\n    elseif\
    \ num < 10000000 then\n        return (3,0)\n    elseif num < 100000000 then\n\
    \        return (3,1)\n    elseif num < 1000000000 then\n        return (4,0)\n\
    \    elseif num < 10000000000 then\n        return (4,1)\n    elseif num < 100000000000\
    \ then\n        return (5,0)\n    elseif num < 1000000000000 then\n        return\
    \ (5,1)\n    elseif num < 10000000000000 then\n        return (6,0)\n    elseif\
    \ num < 100000000000000 then\n        return (6,1)\n    elseif num < 1000000000000000\
    \ then\n        return (7,0)\n    elseif num < 10000000000000000 then\n      \
    \  return (7,1)\n    elseif num < 100000000000000000 then\n        return (8,0)\n\
    \    elseif num < 100000000000000000 then\n        return (8,1)\n    elseif num\
    \ < 1000000000000000000 then\n        return (9,0)\n    elseif num < 10000000000000000000\
    \ then\n        return (9,1)\n    else\n        return (0,0)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgftamkhy.jl:50\nin expression starting at\
    \ /tmp/tmpgftamkhy.jl:50\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = even_odd_count(num / 10)\n        even_count = num % 10\n      \
    \  return (even_count + odd_count, odd_count)\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22c4sw4q.jl:1\nin expression starting at /tmp/tmp22c4sw4q.jl:1\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0) \n    else \n        even_odd_count(num\
    \ / 10) + \n        (num % 10 % 2 == 0 ? 1 : 0, num % 10)\nend\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[2]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number. \nThe factorial of a number $n$ is defined as $n!$, where $n$ is an\
    \ integer and $!$ is the factorial operator. \nThe factorial of a number $n$ can\
    \ be represented as a product of smaller factorials, i.e., $n! = n \\times n-1\
    \ \\times n-2 \\times ...$. \nFor example, 6! = 6 \\times 5! = 720.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp30m2v_1w.jl:6\nin expression starting at /tmp/tmp30m2v_1w.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    for\
    \ i in 2 to num\n        if num % i == 0 then even += 1 \n        else odd +=\
    \ 1 \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwt0xs7uj.jl:6\nin expression starting at /tmp/tmpwt0xs7uj.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for n in num\n        if\
    \ n % 2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number as input and\
    \ returns the sum of the digits of that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuw0e5kul.jl:19\nin expression starting at\
    \ /tmp/tmpuw0e5kul.jl:19\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0 then even += 1\
    \ end\n        if digit % 2 != 0 then odd += 1 end\n        num /= 10\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt5t07_0t.jl:6\nin expression starting at /tmp/tmpt5t07_0t.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)[2]\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwngj4jm2.jl:6\nin expression starting at /tmp/tmpwngj4jm2.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if\
    \ i rem 2 == 0\n            even += 1\n        else\n            odd += 1\n  \
    \  end\n    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqy3_jz8_.jl:11\nin expression starting at /tmp/tmpqy3_jz8_.jl:11\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345)[2]\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwg83x8x0.jl:6\nin expression starting at /tmp/tmpwg83x8x0.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            if num % 2 == 0\n                even += 1\n          \
    \      num -= 2\n            else\n                odd += 1\n                num\
    \ -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the digits of that integer.\
    \ \nThe function should work for negative numbers as well.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0xew9yj.jl:23\nin expression starting at\
    \ /tmp/tmps0xew9yj.jl:23\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for i\
    \ in 1:num\n        if num % i == 0 then\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf67uvo3q.jl:6\nin expression starting at /tmp/tmpf67uvo3q.jl:6\n"
  stdout: ''
  timestamp: 1660014647
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0) \n    else \n        even, odd\
    \ = 0, 0\n        \n        for i in 2..num\n            if num % i == 0 then\
    \ even += 1 \n            else odd += 1 \n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(124)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.3>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(127)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.3>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(130)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.3>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(133)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.3>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(136)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.3>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(139)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.3>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(142)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.3>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(145)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.3>\neven_odd_count(147)\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7a1lqnnr.jl:6\nin expression starting at /tmp/tmp7a1lqnnr.jl:6\n"
  stdout: ''
  timestamp: 1660014648
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    digits = Int64[]\n    while num > 0\n\
    \        push!(digits, num % 10)\n        num = num / 10\n    end\n    for i in\
    \ digits\n        if i%2 == 0\n            even += i\n        else\n         \
    \   odd += i\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.3>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-12345)\n</cell>\n<code language=julia-1.3>\neven_odd_count(0)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(-0)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-1)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(2)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-2)\n</cell>\n<code language=julia-1.3>\neven_odd_count(3)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-3)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(4)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-4)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(5)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-5)\n</cell>\n<code language=julia-1.3>\neven_odd_count(6)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-6)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(7)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-7)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(8)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-8)\n</cell>\n<code language=julia-1.3>\neven_odd_count(9)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-9)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.3>\neven_odd_count(-10)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpperujtgw.jl:25\nin expression starting at\
    \ /tmp/tmpperujtgw.jl:25\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = num / 2\n   \
    \ end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnkigzpsd.jl:6\nin expression starting at /tmp/tmpnkigzpsd.jl:6\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even::Int64 = 0\n    odd::Int64 = 0\n    for n in num\n       \
    \ if n % 2 == 0\n            even += 1\n        else\n            odd += 1\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called even_odd_count_2 that has\
    \ two parameters. One parameter is the integer and the other parameter is the\
    \ length of the integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qq5g0a7.jl:16\nin expression starting at\
    \ /tmp/tmp7qq5g0a7.jl:16\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        error(\"The given number must be positive\")\n\
    \    elseif num == 1\n        return (1,0)\n    else\n        even = num / 2\n\
    \        odd = num - even\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nThe factorial of\
    \ a number $n$ is defined as\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf1ldn25.jl:18\nin expression starting at\
    \ /tmp/tmplf1ldn25.jl:18\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if\
    \ i %2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple65u1ni.jl:19\nin expression starting at\
    \ /tmp/tmple65u1ni.jl:19\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1 \n        end\n        num = num / 2\n  \
    \  end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1234567891)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk4jce4a_.jl:6\nin expression starting at /tmp/tmpk4jce4a_.jl:6\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    else\n        odd_count\
    \ = 0\n        even_count = 0\n        for i in 1:num\n            if num % i\
    \ == 0 then\n                even_count = even_count + 1\n            elseif num\
    \ % i != 0 then\n                odd_count = odd_count + 1\n            end\n\
    \        end\n        return (even_count, odd_count)\n    end\nend\n\"\"\"\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number. \n\
    The factorial of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$ \"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphzyo2eo.jl:26\nin expression starting at\
    \ /tmp/tmpphzyo2eo.jl:26\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        error(\"The given number should be zero\")\n \
    \   else\n        even, odd = 0, 0\n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            end \n            num /= 10\n        return (even, odd)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(11)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(13)\n</cell>\n<code language=julia-1.5>\neven_odd_count(14)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(15)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(16)\n</cell>\n<code language=julia-1.5>\neven_odd_count(17)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(18)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(19)\n</cell>\n<code language=julia-1.5>\neven_odd_count(20)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(21)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(22)\n</cell>\n<code language=julia-1.5>\neven_odd_count(23)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21818w0s.jl:22\nin expression starting at\
    \ /tmp/tmp21818w0s.jl:22\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num - 10, 1)\n    elseif num < 1000 then\n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then\n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then\n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then\n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then\n        return (num - 1000000, 6)\n    elseif num < 100000000 then\n \
    \       return (num - 10000000, 7)\n    elseif num < 1000000000 then\n       \
    \ return (num - 100000000, 8)\n    elseif num < 10000000000 then\n        return\
    \ (num - 1000000000, 9)\n    else\n        return (num - 10000000000, 10)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3e4vua1n.jl:30\nin expression starting at\
    \ /tmp/tmp3e4vua1n.jl:30\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    else if num < 100 then return\
    \ (num, 0)\n    else if num < 1000 then return (num, 0)\n    else if num < 10000\
    \ then return (num, 0)\n    else if num < 100000 then return (num, 0)\n    else\
    \ if num < 1000000 then return (num, 0)\n    else if num < 10000000 then return\
    \ (num, 0)\n    else if num < 100000000 then return (num, 0)\n    else if num\
    \ < 1000000000 then return (num, 0)\n    else if num < 10000000000 then return\
    \ (num, 0)\n    else if num < 100000000000 then return (num, 0)\n    else if num\
    \ < 1000000000000 then return (num, 0)\n    else if num < 10000000000000 then\
    \ return (num, 0)\n    else if num < 100000000000000 then return (num, 0)\n  \
    \  else if num < 1000000000000000 then return (num, 0)\n    else if num < 10000000000000000\
    \ then return (num, 0)\n    else if num < 100000000000000000 then return (num,\
    \ 0)\n    else if num < 1000000000000000000 then return (num, 0)\n    else return\
    \ (num, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67t7li57.jl:6\nin expression starting at /tmp/tmp67t7li57.jl:6\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkv65lxv8.jl:6\nin expression starting at /tmp/tmpkv65lxv8.jl:6\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else\n        even_odd_count(num\
    \ / 10) + (num % 10 == 0 ? 0 : 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rt3u9rj.jl:8\nin expression starting at /tmp/tmp3rt3u9rj.jl:8\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    else\n        even,\
    \ odd = 0, 0\n        for i in 2..num\n            if num % i == 0 then\n    \
    \            even += i\n            else\n                odd += i\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c_wgof3.jl:19\nin expression starting at\
    \ /tmp/tmp8c_wgof3.jl:19\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in num:\n\
    \        if i%2==0 then\n            even_count = even_count+1\n        else\n\
    \            odd_count = odd_count+1\n        end\n    end\n    \n    return (even_count,\
    \ odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels in it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtyejsp8.jl:11\nin expression starting at\
    \ /tmp/tmpmtyejsp8.jl:11\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then return (num, 0) \n    else \n      \
    \  even_odd_count(num / 10)\n        even_odd_count(num % 10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwidh8djr.jl:7\nin expression starting at /tmp/tmpwidh8djr.jl:7\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else\n        odd_count\
    \ = 0\n        even_count = 0\n        digit = num % 10\n        while digit >\
    \ 0\n            if digit % 2 == 0\n                even_count += 1\n        \
    \    else\n                odd_count += 1\n            digit = num % 10\n    \
    \    return (even_count, odd_count)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the sum of the digits of that integer. \n\
    The function should work for negative integers as well.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx23g_cf.jl:1\nin expression starting at /tmp/tmpcx23g_cf.jl:1\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num /\
    \ 10) + (1, num % 10)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Given an\
    \ integer. return a tuple that has the number of even and odd digits respectively.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsa_h1oez.jl:8\nin expression starting at /tmp/tmpsa_h1oez.jl:8\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        odd = num % 10\n        even = even + odd\n        num =\
    \ num / 10\n    end\n    return (even, odd)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprx6p89w9.jl:6\nin expression starting at /tmp/tmprx6p89w9.jl:6\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    elseif num < 1000 then\n    \
    \    return (num / 100, num % 100)\n    elseif num < 10000 then\n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then\n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then\n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then\n        return (num /\
    \ 1000000, num % 1000000)\n    elseif num < 100000000 then\n        return (num\
    \ / 10000000, num % 10000000)\n    elseif num < 1000000000 then\n        return\
    \ (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\n    \
    \    return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then\n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then\n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then\n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then\n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\n\
    \        return (num / 100000000000000, num % 100000000000000)\n    elseif num\
    \ < 10000000000000000 then\n        return (num / 1000000000000000, num % 1000000000000000)\n\
    \    elseif num < 100000000000000000 then\n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 100000000000000000 then\n       \
    \ return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 1000000000000000000 then\n        return (num / 100000000000000000, num %\
    \ 100000000000000000)\n    else\n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9j6mwim.jl:48\nin expression starting at\
    \ /tmp/tmpl9j6mwim.jl:48\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    for x in num\n\
    \        if x % 2 == 0\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    \n    return\
    \ (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3dam0ne.jl:20\nin expression starting at\
    \ /tmp/tmpo3dam0ne.jl:20\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (0, 0) \n    else\n        even, odd = even_odd_count(num/10)\n\
    \        even += num%10 == 0 ? 1 : 0\n        odd += num%10 != 0 ? 1 : 0\n   \
    \     (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0834obro.jl:17\nin expression starting at\
    \ /tmp/tmp0834obro.jl:17\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0)\n    else \n        return\
    \ (even_odd_count(num/10), num%10 + even_odd_count(num%10))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpapxu6i49.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapxu6i49.jl:1\n\
    in expression starting at /tmp/tmpapxu6i49.jl:1\n"
  stdout: ''
  timestamp: 1660014649
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    digits\
    \ = num.to_digits()\n    for i in digits\n        if i mod 2 == 0 then even +=\
    \ 1 else odd += 1\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe3utch0a.jl:6\nin expression starting at /tmp/tmpe3utch0a.jl:6\n"
  stdout: ''
  timestamp: 1660014650
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The number should be positive\")\n\
    \    else if num == 0\n        return (0,0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 2\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qfrmr2d.jl:8\nin expression starting at /tmp/tmp6qfrmr2d.jl:8\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0) \n    else \n        odd_count\
    \ = 0 \n        even_count = 0 \n        digits = num % 10 \n        while digits\
    \ != 0 \n            digits = digits % 10 \n            even_count = even_count\
    \ + 1 \n            digits = digits / 10 \n        while digits != 0 \n      \
    \      digits = digits % 10 \n            odd_count = odd_count + 1 \n       \
    \     digits = digits / 10 \n        return (even_count, odd_count) \nend\n\"\"\
    \"\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj60z7bjw.jl:1\nin expression starting at /tmp/tmpj60z7bjw.jl:1\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2ba8m96.jl:68\nin expression starting at\
    \ /tmp/tmpd2ba8m96.jl:68\n"
  stdout: ''
  timestamp: 1660014646
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then \n            (num, 0)\n    elseif num\
    \ < 100 \n        then \n            (num / 10, num % 10)\n    elseif num < 1000\
    \ \n        then \n            (num / 100, num % 100)\n    elseif num < 10000\
    \ \n        then \n            (num / 1000, num % 1000)\n    elseif num < 100000\
    \ \n        then \n            (num / 10000, num % 10000)\n    elseif num < 1000000\
    \ \n        then \n            (num / 100000, num % 100000)\n    elseif num <\
    \ 10000000 \n        then \n            (num / 1000000, num % 1000000)\n    elseif\
    \ num < 100000000 \n        then \n            (num / 10000000, num % 10000000)\n\
    \    elseif num < 1000000000 \n        then \n            (num / 100000000, num\
    \ % 100000000)\n    elseif num < 10000000000 \n        then \n            (num\
    \ / 1000000000, num % 1000000000)\n    elseif num < 100000000000 \n        then\
    \ \n            (num / 10000000000, num % 10000000000)\n    elseif num < 1000000000000\
    \ \n        then \n            (num / 100000000000, num % 100000000000)\n    elseif\
    \ num < 10000000000000 \n        then \n            (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 \n        then \n       \
    \     (num / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000\
    \ \n        then \n            (num / 100000000000000, num % 100000000000000)\n\
    \    elseif num < 10000000000000000 \n        then \n            (num / 1000000000000000,\
    \ num % 1000000000000000)\n    elseif num < 100000000000000000 \n        then\
    \ \n            (num / 10000000000000000, num % 10000000000000000)\n    elseif\
    \ num < 1000000000000000000 \n        then \n            (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 \n        then\
    \ \n            (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 \n        then \n            (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 \n    \
    \    then \n            (num / 100000000000000000000, num % 100000000000000000000)\n\
    \    elseif num < 10000000000000000000000 \n        then \n            (num /\
    \ 1000000000000000000000, num % 1000000000000000000000)\n    elseif num < 100000000000000000000000\
    \ \n        then \n            (num / 10000000000000000000000, num % 10000000000000000000000)\n\
    \    elseif num < 1000000000000000000\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewkiwn1y.jl:1\nin expression starting at /tmp/tmpewkiwn1y.jl:1\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The number must be positive\")\n \
    \   elseif num == 0\n        (0, 0) \n    else\n        even_odd_count(num / 10)\
    \ + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_od\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbo7c68e3.jl:14\nin expression starting at\
    \ /tmp/tmpbo7c68e3.jl:14\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The number must be positive\")\n \
    \   elseif num == 0\n        error(\"The number must be positive\")\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_z4_bwx.jl:23\nin expression starting at\
    \ /tmp/tmp3_z4_bwx.jl:23\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkv7gj_0.jl:1\nin expression starting at /tmp/tmpzkv7gj_0.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (0,0)\n    even, odd = 0, 0\n    for n\
    \ in num:\n        if n % 2 == 0 then even += 1 else odd += 1\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplhzgveco.jl:6\nin expression starting at /tmp/tmplhzgveco.jl:6\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then \n            (0,0)\n    else\n    \
    \    even_odd_count(num/10)\n        even_odd_count(num%10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lpq3gxq.jl:14\nin expression starting at\
    \ /tmp/tmp5lpq3gxq.jl:14\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    if num < 100 then return (0,\
    \ 1)\n    if num < 1000 then return (1, 1)\n    if num < 10000 then return (2,\
    \ 0)\n    if num < 100000 then return (2, 1)\n    if num < 1000000 then return\
    \ (3, 0)\n    if num < 10000000 then return (3, 1)\n    if num < 100000000 then\
    \ return (4, 0)\n    if num < 1000000000 then return (4, 1)\n    if num < 10000000000\
    \ then return (5, 0)\n    if num < 100000000000 then return (5, 1)\n    if num\
    \ < 1000000000000 then return (6, 0)\n    if num < 10000000000000 then return\
    \ (6, 1)\n    if num < 100000000000000 then return (7, 0)\n    if num < 1000000000000000\
    \ then return (7, 1)\n    if num < 10000000000000000 then return (8, 0)\n    if\
    \ num < 100000000000000000 then return (8, 1)\n    if num < 1000000000000000000\
    \ then return (9, 0)\n    if num < 10000000000000000000 then return (9, 1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk2tncxv3.jl:6\nin expression starting at /tmp/tmpk2tncxv3.jl:6\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even, odd = 0, 0\n    \n    for x in num\n        if x % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n    end\n    \n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(10)\
    \ == (2, 1)\n@assert even_odd_count(11) == (3, 2)\n@assert even_odd_count(12)\
    \ == (4, 3)\n@assert even_odd_count(13) == (5, 4)\n@assert even_odd_count(14)\
    \ == (6, 5)\n@assert even_odd_count(15) == (7, 6)\n@assert even_odd_count(16)\
    \ == (8, 7)\n@assert even_odd_count(17) == (9, 8)\n@assert even_odd_count(18)\
    \ == (10, 9)\n@assert even_odd_count(19) == (11, 10)\n@assert even_odd_count(20)\
    \ == (12, 11)\n@assert even_odd_count(21) == (13, 12)\n@assert even_odd_count(22)\
    \ == (14, 13)\n@assert even_odd_count(23) == (15, 14)\n@assert even_odd_count(24)\
    \ == (16, 15)\n@assert even_odd_count(25) == (17, 16)\n@assert even_odd_count(26)\
    \ == (18, 17)\n@assert even_odd_count(27) == (19, 18)\n@assert even_odd_count(28)\
    \ == (20, 19)\n@assert even_odd_count(29) == (21, 20)\n@assert even_odd_count(30)\
    \ == (22, 21)\n@assert even_odd_count(31) == (23, 22)\n@assert even_odd_count(32)\
    \ == (24, 23)\n@assert even_odd_count(33) == (25, 24)\n@assert even_odd_count(34)\
    \ == (26, 25)\n@assert even_odd_count(35) == (27, 26)\n@assert even_odd_count(36)\
    \ == (28, 27)\n@assert even_odd_count(37) == (29, 28)\n@assert even_odd_count(38)\
    \ == (30, 29)\n@assert even_odd_count(39) == (31, 30)\n@assert even_odd_count(40)\
    \ == (32, 31)\n@assert even_odd_count(41) == (33, 32)\n@assert even_odd_count(42)\
    \ == (34, 33)\n@assert even_odd_count(43) == (35, 34)\n@assert even_odd_count(44)\
    \ == (36, 35)\n@\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacr6ld66.jl:17\nin expression starting at\
    \ /tmp/tmpacr6ld66.jl:17\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        (1, 0)\n    elseif num < 100 \n        (2,\
    \ 0)\n    elseif num < 1000 \n        (3, 0)\n    elseif num < 10000 \n      \
    \  (4, 0)\n    elseif num < 100000 \n        (5, 0)\n    elseif num < 1000000\
    \ \n        (6, 0)\n    elseif num < 10000000 \n        (7, 0)\n    elseif num\
    \ < 100000000 \n        (8, 0)\n    elseif num < 1000000000 \n        (9, 0)\n\
    \    else\n        (10, 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(123)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123456788)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(12345678901234567889)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1234567890\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6s1i5rf.jl:28\nin expression starting at\
    \ /tmp/tmp_6s1i5rf.jl:28\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num\n        if\
    \ i%2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupnkej8f.jl:19\nin expression starting at\
    \ /tmp/tmpupnkej8f.jl:19\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for n in num\n        if n % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.0>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(1234567890123456788\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjt7wwnx.jl:16\nin expression starting at\
    \ /tmp/tmpcjt7wwnx.jl:16\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    for x in num\n\
    \        if x % 2 == 0\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n    end\n    \n    return (even_count,\
    \ odd_count)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgm8qu8z7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgm8qu8z7.jl:1\n\
    in expression starting at /tmp/tmpgm8qu8z7.jl:1\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num\
    \ / 2)\n        even_odd_count(num % 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq80jxdhb.jl:8\nin expression starting at /tmp/tmpq80jxdhb.jl:8\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (0, 2)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num -= 2\n            else\n                odd += 1\n      \
    \          num -= 2\n        end\n        return (even, odd)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd_82h2wg.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd_82h2wg.jl:1\n\
    in expression starting at /tmp/tmpd_82h2wg.jl:1\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (0, 0) \n    else\n        odd_count = sum(num\
    \ % i | i <- [1..num], i % 2 == 1)\n        even_count = sum(num % i | i <- [1..num],\
    \ i % 2 != 1)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(100)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.4>\neven_odd_count(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(1000000000000000000000)\n</cell>\n\
    <code language=\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppivpwzwb.jl:16\nin expression starting at\
    \ /tmp/tmppivpwzwb.jl:16\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 \n        else odd += 1 \n\
    \        num /= 10\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number. \nThe factorial of a number $n$ is defined\
    \ as:\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj79499b_.jl:6\nin expression starting at /tmp/tmpj79499b_.jl:6\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        for i in 1:num\n            if i%2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given an integer.\
    \ return a tuple that has the number of even and odd digits respectively.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp416tsn98.jl:8\nin expression starting at /tmp/tmp416tsn98.jl:8\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    \n    even::Int64 = 0\n   \
    \ odd::Int64 = 0\n    \n    for i in reverse(String(num)) do\n        if i ==\
    \ '0' then even += 1 else odd += 1\n    end\n    \n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nIf the string has less than 10 characters, return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbo85ci9h.jl:6\nin expression starting at /tmp/tmpbo85ci9h.jl:6\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else\n        odd_count\
    \ = 0\n        even_count = 0\n        for i in 2..num\n            if num % i\
    \ == 0\n                even_count = even_count + 1\n            else\n      \
    \          odd_count = odd_count + 1\n        end\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(124)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(125)\n</cell>\n<code language=julia-1.5>\neven_odd_count(126)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(127)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(128)\n</cell>\n<code language=julia-1.5>\neven_odd_count(129)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(130)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(131)\n</cell>\n<code language=julia-1.5>\neven_odd_count(132)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(133)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(134)\n</cell>\n<code language=julia-1.5>\neven_odd_count(135)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(136)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(137)\n</cell>\n<code language=julia-1.5>\neven_odd_count(138)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(139)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(140)\n</cell>\n<code language=julia-1.5>\neven_odd_count(141)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(142)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(143)\n</cell>\n<code language=julia-1.5>\neven_odd_count(144)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(145)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(146)\n</cell>\n<code language=julia-1.5>\neven_od\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo3aqynt.jl:20\nin expression starting at\
    \ /tmp/tmpqo3aqynt.jl:20\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else\n        odd_count\
    \ = 0\n        even_count = 0\n        for n in num:\n            if n % 2 ==\
    \ 0 then\n                even_count = even_count + 1\n            else\n    \
    \            odd_count = odd_count + 1\n        end\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqctosr4d.jl:12\nin expression starting at\
    \ /tmp/tmpqctosr4d.jl:12\n"
  stdout: ''
  timestamp: 1660014651
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = 0\n        even_count = 0\n        \n        for i in reverse(String(num))\n\
    \            if i == '0' \n                even_count += 1\n            else \n\
    \                odd_count += 1\n        return (even_count, odd_count)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqucxgun.jl:20\nin expression starting at\
    \ /tmp/tmpuqucxgun.jl:20\n"
  stdout: ''
  timestamp: 1660014652
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0,0)\n    else\n        even = num % 10\n\
    \        odd = num - even\n        return (even,odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-456)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(2)\n</cell>\n<code language=julia-1.5>\neven_odd_count(3)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(4)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(5)\n</cell>\n<code language=julia-1.5>\neven_odd_count(6)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(7)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(8)\n</cell>\n<code language=julia-1.5>\neven_odd_count(9)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(11)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(13)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(14)\n</cell>\n<code language=julia-1.5>\neven_odd_count(15)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(16)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(17)\n</cell>\n<code language=julia-1.5>\neven_odd_count(18)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(19)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(20)\n</cell>\n<code language=julia-1.5>\neven_odd_count(21)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(22)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(23)\n</cell>\n<code language=julia-1.5>\neven_odd_count(24)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkrifizj.jl:8\nin expression starting at /tmp/tmpkkrifizj.jl:8\n"
  stdout: ''
  timestamp: 1660014652
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        error(\"The input must be positive\")\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(124)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(125)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(126)\n</cell>\n<code language=julia-1.5>\neven_odd_count(127)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(128)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(129)\n</cell>\n<code language=julia-1.5>\neven_odd_count(130)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(131)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(132)\n</cell>\n<code language=julia-1.5>\neven_odd_count(133)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(134)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(135)\n</cell>\n<code language=julia-1.5>\neven_odd_count(136)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(137)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(138)\n</cell>\n<code language=julia-1.5>\neven_odd_count(139)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(140)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(141)\n</cell>\n<code language=julia-1.5>\neven_odd_count(142)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(143)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(144)\n</cell>\n<code language=julia-1.5>\neven_odd_count(145)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(146)\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgtylfwi.jl:8\nin expression starting at /tmp/tmpmgtylfwi.jl:8\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    for i\
    \ in reverse(String(num))\n        if i mod 2 == 0 then even += 1 else odd +=\
    \ 1\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(123456789012345678899)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456788999)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5>\neven_od\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt89gbhk4.jl:6\nin expression starting at /tmp/tmpt89gbhk4.jl:6\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number should be positive\"\
    )\n    elseif num == 0\n        error(\"The input number should be positive\"\
    )\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n            end\n            num /= 10\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-5)\n</cell>\n<code language=julia-1.5>\neven_odd_count(0)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000000000)\n</cell\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqcj67yg.jl:23\nin expression starting at\
    \ /tmp/tmpiqcj67yg.jl:23\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The number should be positive\")\n\
    \    else if num == 0\n        error(\"The number should be positive\")\n    else\
    \ if num == 1\n        return (1,0)\n    else\n        even, odd = 0, 0\n    \
    \    for i in 2..num\n            if num % i == 0\n                even += i\n\
    \            else\n                odd += i\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju89rah7.jl:8\nin expression starting at /tmp/tmpju89rah7.jl:8\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 10\n\
    \        return (0, num)\n    end\n    \n    for i in 1:num\n        if i % 2\
    \ == 0\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    \n    return (even_count, odd_count)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfthx3eb.jl:24\nin expression starting at\
    \ /tmp/tmptfthx3eb.jl:24\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    else \n       \
    \ odd_count = 0\n        even_count = 0\n        digit = num % 10\n        while\
    \ digit > 0 \n            odd_count = odd_count + 1\n            digit = num %\
    \ 10\n        end\n        while digit != 0\n            even_count = even_count\
    \ + 1\n            digit = num % 10\n        end\n        return (even_count,\
    \ odd_count)\n    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a number as input and returns the number of digits in that number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8jc6su5.jl:23\nin expression starting at\
    \ /tmp/tmpv8jc6su5.jl:23\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (0,0)\n    even, odd = 0, 0\n    for n\
    \ in num:\n        if n % 2 == 0 then even += 1 else odd += 1\n    return (even,\
    \ odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps628659z.jl:6\nin expression starting at /tmp/tmps628659z.jl:6\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        error(\"The given number should be positive\"\
    )\n    else\n        even, odd = 0, 0\n        \n        for i in 1:num\n    \
    \        if num % 2 == 0\n                even += 1\n            else\n      \
    \          odd += 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(2)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(3)\n</cell>\n<code language=julia-1.5>\neven_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(6)\n</cell>\n<code language=julia-1.5>\neven_odd_count(7)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(8)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(9)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(11)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(13)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(14)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(15)\n</cell>\n<code language=julia-1.5>\neven_odd_count(16)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(17)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(18)\n</cell>\n<code language=julia-1.5>\neven_odd_count(19)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(20)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(21)\n</cell>\n<code language=julia-1.5>\neven_odd_count(22)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(23)\n</cell>\n<code language=julia-1.5>\n\
    even_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_a4v8_5.jl:22\nin expression starting at\
    \ /tmp/tmps_a4v8_5.jl:22\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num - 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num - 100, 2)\n    elseif num < 10000 then \n        return (num - 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num - 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num - 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num - 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num - 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num - 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num - 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ - 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ - 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ - 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num - 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num - 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num - 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num - 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ then \n        return (num - 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ then \n        return (num - 100000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ then \n        return (num - 100000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num - 100000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num - 100000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num - 100000000000000000, 22)\n    elseif num < 1000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num - 100000000000000000, 28)\n    elseif num < 1000000000000000000000000000000\
    \ then \n        return (num - \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmffhvxhv.jl:68\nin expression starting at\
    \ /tmp/tmpmffhvxhv.jl:68\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for n in num\n        if n % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vy_6y4c.jl:16\nin expression starting at\
    \ /tmp/tmp9vy_6y4c.jl:16\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (0, 0) \n    else\n        even, odd = even_odd_count(num\
    \ / 2)\n        (even + odd, num - even * 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(1) == (0, 1) \n@assert even_odd_count(2) == (1, 2) \n@assert\
    \ even_odd_count(3) == (1, 3) \n@assert even_odd_count(4) == (2, 2) \n@assert\
    \ even_odd_count(5) == (2, 3) \n@assert even_odd_count(6) == (3, 3) \n@assert\
    \ even_odd_count(7) == (3, 4) \n@assert even_odd_count(8) == (4, 4) \n@assert\
    \ even_odd_count(9) == (4, 5) \n@assert even_odd_count(10) == (5, 5) \n@assert\
    \ even_odd_count(11) == (5, 6) \n@assert even_odd_count(12) == (6, 6) \n@assert\
    \ even_odd_count(13) == (6, 7) \n@assert even_odd_count(14) == (7, 7) \n@assert\
    \ even_odd_count(15) == (7, 8) \n@assert even_odd_count(16) == (8, 8) \n@assert\
    \ even_odd_count(17) == (8, 9) \n@assert even_odd_count(18) == (9, 9) \n@assert\
    \ even_odd_count(19) == (9, 10) \n@assert even_odd_count(20) == (10, 10) \n@assert\
    \ even_odd_count(21) == (10, 11) \n@assert even_odd_count(22) == (11, 11) \n@assert\
    \ even_odd_count(23) == (11, 12) \n@assert even_odd_count(24) == (12, 12) \n@assert\
    \ even_odd_count(25) == (12, 13) \n@assert even_odd_count(26) == (13, 13) \n@assert\
    \ even_odd_count(27) == (13, 14) \n@assert even_odd_count(28) == (14, 14) \n@assert\
    \ even_odd_count(29) == (14, 15) \n@assert even_odd_count(30) == (15, 15) \n@assert\
    \ even_odd_count(31) == (15, 16) \n@assert even_odd_count(32) == (16, 16) \n@assert\
    \ even_odd_count(33) == (16, 17) \n@assert even_odd_count(34) == (17, 17) \n@assert\
    \ even_\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdaw2r68.jl:8\nin expression starting at /tmp/tmphdaw2r68.jl:8\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even_odd_count_helper(num)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpe5gruupd.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpe5gruupd.jl:16\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpe5gruupd.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe5gruupd.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe5gruupd.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe5gruupd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The given number must be positive\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpe5gruupd.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe5gruupd.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe5gruupd.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe5gruupd.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpe5gruupd.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe5gruupd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe5gruupd.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe5gruupd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpe5gruupd.jl:9\n\
    \   [2] macro exp"
  timestamp: 1660014655
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n\
    \        return 0, 0\n    end\n    \n    while num > 0\n        if num % 2 ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n        \n        num /= 10\n    end\n    \n    return (even_count,\
    \ odd_count)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567891)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-1)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-2)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-3)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-4)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-5)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-6)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-7)\n</cell>\n<code language=julia-1.5>\neven_odd_count(-8)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-9)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlzrbm54.jl:26\nin expression starting at\
    \ /tmp/tmpvlzrbm54.jl:26\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0,0)\n    else\n        even, odd = 0, 0\n\
    \        \n        while num > 0\n            if num % 2 == 0\n              \
    \  even += 1\n            else\n                odd += 1\n            end\n  \
    \          num /= 10\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(12) == (3,2)\n@assert\
    \ even_odd_count(0) == (0,0)\n@assert even_odd_count(10) == (0,1)\n@assert even_odd_count(100)\
    \ == (0,2)\n@assert even_odd_count(1000) == (0,3)\n@assert even_odd_count(10000)\
    \ == (0,4)\n@assert even_odd_count(100000) == (0,5)\n@assert even_odd_count(1000000)\
    \ == (0,6)\n@assert even_odd_count(10000000) == (0,7)\n@assert even_odd_count(100000000)\
    \ == (0,8)\n@assert even_odd_count(1000000000) == (0,9)\n@assert even_odd_count(10000000000)\
    \ == (0,10)\n@assert even_odd_count(100000000000) == (0,11)\n@assert even_odd_count(1000000000000)\
    \ == (0,12)\n@assert even_odd_count(10000000000000) == (0,13)\n@assert even_odd_count(100000000000000)\
    \ == (0,14)\n@assert even_odd_count(1000000000000000) == (0,15)\n@assert even_odd_count(10000000000000000)\
    \ == (0,16)\n@assert even_odd_count(100000000000000000) == (0,17)\n@assert even_odd_count(1000000000000000000)\
    \ == (0,18)\n@assert even_odd_count(10000000000000000000) == (0,19)\n@assert even_odd_count(100000000000000000000)\
    \ == (0,20)\n@assert even_odd_count(1000000000000000000000) == (0,21)\n@assert\
    \ even_odd_count(10000000000000000000000) == (0,22)\n@assert even_odd_count(100000000000000000000000)\
    \ == (0,23)\n@assert even_odd_count(1000000000000000000000000) == (0,24)\n@assert\
    \ even_odd_count(10000000000000000000000000) == (0,25)\n@assert even_odd_count(100000000000000000000000000)\
    \ == (0,26)\n@assert even_odd_count(1000000000000000000000000000) == (0,27)\n\
    @assert even_odd_count(10000000000000000000000000000) == (0,28)\n@assert even_odd_count(100000000000000000000000000000)\
    \ == (0,29)\n@assert ev\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4rd0ysw.jl:8\nin expression starting at /tmp/tmpg4rd0ysw.jl:8\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then even += 1 end\n        if num % 2 !=\
    \ 0 then odd += 1 end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(0)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(10000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(100000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(100000000000000)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(10000000000000000000)\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkw9wpdsm.jl:6\nin expression starting at /tmp/tmpkw9wpdsm.jl:6\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (num, 0)\n    elseif num < 100 \n\
    \        return (num / 10, 1)\n    elseif num < 1000 \n        return (num / 100,\
    \ 2)\n    elseif num < 10000 \n        return (num / 1000, 3)\n    elseif num\
    \ < 100000 \n        return (num / 10000, 4)\n    elseif num < 1000000 \n    \
    \    return (num / 100000, 5)\n    elseif num < 10000000 \n        return (num\
    \ / 1000000, 6)\n    elseif num < 100000000 \n        return (num / 10000000,\
    \ 7)\n    elseif num < 1000000000 \n        return (num / 100000000, 8)\n    elseif\
    \ num < 10000000000 \n        return (num / 1000000000, 9)\n    elseif num < 100000000000\
    \ \n        return (num / 10000000000, 10)\n    elseif num < 1000000000000 \n\
    \        return (num / 100000000000, 11)\n    elseif num < 10000000000000 \n \
    \       return (num / 1000000000000, 12)\n    elseif num < 100000000000000 \n\
    \        return (num / 10000000000000, 13)\n    elseif num < 1000000000000000\
    \ \n        return (num / 100000000000000, 14)\n    elseif num < 10000000000000000\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ \n        return (num / 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ \n        return (num / 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ \n        return (num / 1000000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ \n        return (num / 10000000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ \n        return (num / 100000000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ \n        return (num / 1000000000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ \n        return (num / 10000000000000000000000, 22)\n    elseif num < 1000000000000000000000000\
    \ \n        return (num / 100000000000000000000000, 23)\n    elseif num < 10000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ \n        return (num / 10000000000000000000000000, 25)\n    elseif num < 1000000000000000000000000000\
    \ \n        return (num / 100000000000000000000000000, 26)\n    elseif num < 10000000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000000, 27)\n    elseif num <\
    \ 100000000000000000000000000000 \n        return (num / 10000000000000000000000000000,\
    \ 28)\n    elseif num < 1000000000000000000000000000000 \n        return (num\
    \ / 100000000000000000000000000000, 29)\n    elseif num < 10000000000000000000000000000000\
    \ \n        return (num / 1000000000000000000000000000000, 30)\n    elseif num\
    \ < 100\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3f7juz_.jl:1\nin expression starting at /tmp/tmpb3f7juz_.jl:1\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then \n            (0,0)\n    else\n    \
    \    even_odd_count(num/10)\n        even_odd_count(num%10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogfn0cdq.jl:14\nin expression starting at\
    \ /tmp/tmpogfn0cdq.jl:14\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for i in 1:num\n        if num % 2 == 0\n   \
    \         even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqkxj5981.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpqkxj5981.jl:24\n  Expression: candidate(7)\
    \ == (0, 1)\n   Evaluated: (0, 7) == (0, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqkxj5981.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqkxj5981.jl:23\ntest set: Error During Test\
    \ at /tmp/tmpqkxj5981.jl:25\n  Test threw exception\n  Expression: candidate(-78)\
    \ == (1, 1)\n  The input must be positive\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n     @ Main /tmp/tmpqkxj5981.jl:7\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqkxj5981.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqkxj5981.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpqkxj5981.jl:26\n  Expression: candidate(3452) == (2,\
    \ 2)\n   Evaluated: (3452, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqkxj5981.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqkxj5981.jl:23\ntest set: Test Failed at /tmp/tmpqkxj5981.jl:27\n\
    \  Expression: candidate(346211) == (3, 3)\n   Evaluated: (0, 346211) == (3, 3)\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqkxj5981.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqkxj5981.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpqkxj5981.jl:28\n  Test threw exception\n  Expressi"
  timestamp: 1660014655
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (1, 0)\n    even, odd = 0, 0\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1 \n        num = num / 2\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)[1]\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi0c8qdah.jl:6\nin expression starting at /tmp/tmpi0c8qdah.jl:6\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    else if num == 0\n        error(\"The given number cannot be 0\")\n   \
    \ else if num == 1\n        (1, 0)\n    else\n        even_odd_count(num / 2)\n\
    \        even_odd_count(num % 2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xbmdaih.jl:8\nin expression starting at /tmp/tmp6xbmdaih.jl:8\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        then return (0,0)\n    else\n        even\
    \ = num % 10\n        odd = num / 10\n        return (even, odd)\n    end\nend\n\
    \"\"\"\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm0q7k037.jl:7\nin expression starting at /tmp/tmpm0q7k037.jl:7\n"
  stdout: ''
  timestamp: 1660014653
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkkiylev.jl:1\nin expression starting at /tmp/tmpmkkiylev.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then return (num, 0) \n    else \n        even, odd\
    \ = 0, 0\n        while num > 0 do\n            even = even + num % 10\n     \
    \       num = num / 10\n        end\n        while num > 0 do\n            odd\
    \ = odd + num % 10\n            num = num / 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.0>\neven_odd_count(123)[1]\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(123)[2]\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbqy24jqb.jl:6\nin expression starting at /tmp/tmpbqy24jqb.jl:6\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    elseif num < 1000 then\n    \
    \    return (num / 100, num % 100)\n    elseif num < 10000 then\n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then\n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then\n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then\n        return (num /\
    \ 1000000, num % 1000000)\n    elseif num < 100000000 then\n        return (num\
    \ / 10000000, num % 10000000)\n    elseif num < 1000000000 then\n        return\
    \ (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\n    \
    \    return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then\n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then\n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then\n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then\n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\n\
    \        return (num / 100000000000000, num % 100000000000000)\n    elseif num\
    \ < 10000000000000000 then\n        return (num / 1000000000000000, num % 1000000000000000)\n\
    \    elseif num < 100000000000000000 then\n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 1000000000000000000 then\n      \
    \  return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 10000000000000000000 then\n        return (num / 1000000000000000000, num\
    \ % 1000000000000000000)\n    elseif num < 100000000000000000000 then\n      \
    \  return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then\n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\n\
    \        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then\n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then\n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then\n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjbhx16v.jl:1\nin expression starting at /tmp/tmprjbhx16v.jl:1\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for n in num\n        if\
    \ n % 2 == 0\n            even += 1\n        else\n            odd += 1\n    end\n\
    \    \n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77b65rn0.jl:19\nin expression starting at\
    \ /tmp/tmp77b65rn0.jl:19\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        error(\"The input must be positive\")\n    else if\
    \ num == 1\n        return (1,0)\n    else\n        even::Int64 = 0\n        odd::Int64\
    \ = 0\n        for i in 2..num\n            if num % i == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        return (even,odd)\n\
    \    end\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(-10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(0)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(1)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(2)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(3)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(4)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(7)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(8)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(9)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(-10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(0)\n</cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(1)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype even_odd_count(2)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype even_odd_count(3)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype even_odd_count(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ even_odd_count(5)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgy_lyq7.jl:8\nin expression starting at /tmp/tmppgy_lyq7.jl:8\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 \n        return (1, 0)\n    elseif num < 100 \n  \
    \      return (num % 10, 1)\n    elseif num < 1000 \n        return (num % 100,\
    \ (num % 10)/10)\n    elseif num < 10000 \n        return (num % 1000, (num %\
    \ 100)/100)\n    elseif num < 100000 \n        return (num % 10000, (num % 1000)/1000)\n\
    \    elseif num < 1000000 \n        return (num % 100000, (num % 10000)/10000)\n\
    \    elseif num < 10000000 \n        return (num % 1000000, (num % 100000)/100000)\n\
    \    elseif num < 100000000 \n        return (num % 10000000, (num % 1000000)/1000000)\n\
    \    elseif num < 1000000000 \n        return (num % 100000000, (num % 10000000)/10000000)\n\
    \    elseif num < 10000000000 \n        return (num % 1000000000, (num % 100000000)/100000000)\n\
    \    elseif num < 100000000000 \n        return (num % 10000000000, (num % 1000000000)/1000000000)\n\
    \    elseif num < 1000000000000 \n        return (num % 100000000000, (num % 10000000000)/10000000000)\n\
    \    elseif num < 10000000000000 \n        return (num % 1000000000000, (num %\
    \ 1000000000000)/1000000000000)\n    elseif num < 100000000000000 \n        return\
    \ (num % 10000000000000, (num % 10000000000000)/10000000000000)\n    elseif num\
    \ < 1000000000000000 \n        return (num % 100000000000000, (num % 1000000000000000)/1000000000000000)\n\
    \    elseif num < 10000000000000000 \n        return (num % 10000000000000000,\
    \ (num % 100000000000000000)/10000000000000000)\n    elseif num < 100000000000000000\
    \ \n        return (num % 100000000000000000, (num % 100000000000000000)/100000000000000000)\n\
    \    elseif num < 1000000000000000000 \n        return (num % 1000000000000000000,\
    \ (num % 100000000000000000)/100000000000000000)\n    else\n        return (num\
    \ % 1000000000000000000, (num % 100000000000000000)/100000000000000000)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return a tuple\
    \ that has the number of even and odd digits respectively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyq99rod.jl:46\nin expression starting at\
    \ /tmp/tmpkyq99rod.jl:46\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 10000000000000000000 then \n        return (num / 1000000000000000000,\
    \ num % 1000000000000000000)\n    elseif num < 100000000000000000000 then \n \
    \       return (num / 10000000000000000000, num % 10000000000000000000)\n    elseif\
    \ num < 1000000000000000000000 then \n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\
    \ \n        return (num / 1000000000000000000000, num % 1000000000000000000000)\n\
    \    elseif num < 100000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000) \n    elseif num < 1000000000000000000000000\
    \ then \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkv7gj_0.jl:1\nin expression starting at /tmp/tmpzkv7gj_0.jl:1\n"
  stdout: ''
  timestamp: 1660014644
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, 1)\n    elseif num < 1000 then \n        return\
    \ (num / 100, 2)\n    elseif num < 10000 then \n        return (num / 1000, 3)\n\
    \    elseif num < 100000 then \n        return (num / 10000, 4)\n    elseif num\
    \ < 1000000 then \n        return (num / 100000, 5)\n    elseif num < 10000000\
    \ then \n        return (num / 1000000, 6)\n    elseif num < 100000000 then \n\
    \        return (num / 10000000, 7)\n    elseif num < 1000000000 then \n     \
    \   return (num / 100000000, 8)\n    elseif num < 10000000000 then \n        return\
    \ (num / 1000000000, 9)\n    elseif num < 100000000000 then \n        return (num\
    \ / 10000000000, 10)\n    elseif num < 1000000000000 then \n        return (num\
    \ / 100000000000, 11)\n    elseif num < 10000000000000 then \n        return (num\
    \ / 1000000000000, 12)\n    elseif num < 100000000000000 then \n        return\
    \ (num / 10000000000000, 13)\n    elseif num < 1000000000000000 then \n      \
    \  return (num / 100000000000000, 14)\n    elseif num < 10000000000000000 then\
    \ \n        return (num / 1000000000000000, 15)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 10000000000000000, 16)\n    elseif num < 1000000000000000000\
    \ then \n        return (num / 100000000000000000, 17)\n    elseif num < 10000000000000000000\
    \ then \n        return (num / 1000000000000000000, 18)\n    elseif num < 100000000000000000000\
    \ then \n        return (num / 10000000000000000000, 19)\n    elseif num < 1000000000000000000000\
    \ then \n        return (num / 100000000000000000000, 20)\n    elseif num < 10000000000000000000000\
    \ then \n        return (num / 1000000000000000000000, 21)\n    elseif num < 100000000000000000000000\
    \ then \n        return (num / 10000000000000000000000, 22)\n    elseif num <\
    \ 1000000000000000000000000 then \n        return (num / 100000000000000000000000,\
    \ 23)\n    elseif num < 10000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000, 24)\n    elseif num < 100000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000, 25)\n    elseif num\
    \ < 1000000000000000000000000000 then \n        return (num / 100000000000000000000000000,\
    \ 26)\n    elseif num < 10000000000000000000000000000 then \n        return (num\
    \ / 1000000000000000000000000000, 27)\n    elseif num < 100000000000000000000000000000\
    \ then \n        return (num / 10000000000000000000000000000, 28)\n    elseif\
    \ num < 1000000000000000000000000000000 then \n        return (num / 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x3xzbap.jl:66\nin expression starting at\
    \ /tmp/tmp8x3xzbap.jl:66\n"
  stdout: ''
  timestamp: 1660014645
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number must be positive\"\
    )\n    else if num == 0\n        (0, 0) \n    else \n        even, odd = even_odd_count(num/10)\n\
    \        even = even+num%10\n        odd = odd+num%10\n        return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(124)\n</cell>\n<code language=julia-1.5>\neven_odd_count(125)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(126)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(127)\n</cell>\n<code language=julia-1.5>\neven_odd_count(128)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(129)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(130)\n</cell>\n<code language=julia-1.5>\neven_odd_count(131)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(132)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(133)\n</cell>\n<code language=julia-1.5>\neven_odd_count(134)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(135)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(136)\n</cell>\n<code language=julia-1.5>\neven_odd_count(137)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(138)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(139)\n</cell>\n<code language=julia-1.5>\neven_odd_count(140)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(141)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(142)\n</cell>\n<code language=julia-1.5>\neven_odd_count(143)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(144)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(145)\n</cell>\n<code language=julia-1.5>\neven_odd_count(146)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ci_d_7z.jl:8\nin expression starting at /tmp/tmp9ci_d_7z.jl:8\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = 0\n    odd = 0\n    \n    for i in num:\n        if\
    \ i%2==0: even += 1 \n        else: odd += 1 \n    \n    return (even, odd)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2gpu8sq.jl:11\nin expression starting at\
    \ /tmp/tmpf2gpu8sq.jl:11\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then \n        return (num, 0)\n    elseif num < 100\
    \ then \n        return (num / 10, num % 10)\n    elseif num < 1000 then \n  \
    \      return (num / 100, num % 100)\n    elseif num < 10000 then \n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then \n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then \n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then \n        return (num\
    \ / 1000000, num % 1000000)\n    elseif num < 100000000 then \n        return\
    \ (num / 10000000, num % 10000000)\n    elseif num < 1000000000 then \n      \
    \  return (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\
    \ \n        return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then \n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then \n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then \n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then \n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\
    \ \n        return (num / 100000000000000, num % 100000000000000)\n    elseif\
    \ num < 10000000000000000 then \n        return (num / 1000000000000000, num %\
    \ 1000000000000000)\n    elseif num < 100000000000000000 then \n        return\
    \ (num / 10000000000000000, num % 10000000000000000)\n    elseif num < 100000000000000000\
    \ then \n        return (num / 100000000000000000, num % 100000000000000000)\n\
    \    elseif num < 1000000000000000000 then \n        return (num / 100000000000000000,\
    \ num % 100000000000000000)\n    elseif num < 10000000000000000000 then \n   \
    \     return (num / 1000000000000000000, num % 1000000000000000000)\n    elseif\
    \ num < 100000000000000000000 then \n        return (num / 10000000000000000000,\
    \ num % 10000000000000000000)\n    elseif num < 1000000000000000000000 then \n\
    \        return (num / 100000000000000000000, num % 100000000000000000000)\n \
    \   elseif num < 10000000000000000000000 then \n        return (num / 10000000000000000000000,\
    \ num % 10000000000000000000000)\n    elseif num < 1000000000000000000000000 then\
    \ \n        return (num / 100000000000000000000000, num % 100000000000000000000000)\n\
    \    elseif num < 10000000000000000000000000 then \n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < \nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqeb4i9b.jl:1\nin expression starting at /tmp/tmpdqeb4i9b.jl:1\n"
  stdout: ''
  timestamp: 1660014642
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = num % 2 == 0\n    odd = num % 2 != 0\n    \n    if\
    \ even\n        even = num / 2\n    else\n        odd = num / 2\n    \n    return\
    \ even, odd\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7afm6szi.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7afm6szi.jl:1\n\
    in expression starting at /tmp/tmp7afm6szi.jl:1\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    for n in num\n\
    \        if n % 2 == 0\n            even_count += 1\n        else\n          \
    \  odd_count += 1\n    end\n    \n    return (even_count, odd_count)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678901234567889)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmh91rze.jl:19\nin expression starting at\
    \ /tmp/tmpnmh91rze.jl:19\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even = num%2 == 0\n    odd = num%2 != 0\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(12345678)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123456789)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(1234567890123456)\n</cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(1234567890123456789)\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(12345678901234567890)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123456789012345678901)\n</cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456789012)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890123)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123456789012345678901234)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(1234567890123456789012345)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890123456)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(12345678901234567890\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9z7_t78c.jl:11\nin expression starting at\
    \ /tmp/tmp9z7_t78c.jl:11\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (0, 0) \n    else \n        even_odd_count(num/10)\n\
    \        even_odd_count(num%10)\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67yrwjqf.jl:8\nin expression starting at /tmp/tmp67yrwjqf.jl:8\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n            \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 10 then\n        return (num, 0)\n    elseif num < 100\
    \ then\n        return (num / 10, num % 10)\n    elseif num < 1000 then\n    \
    \    return (num / 100, num % 100)\n    elseif num < 10000 then\n        return\
    \ (num / 1000, num % 1000)\n    elseif num < 100000 then\n        return (num\
    \ / 10000, num % 10000)\n    elseif num < 1000000 then\n        return (num /\
    \ 100000, num % 100000)\n    elseif num < 10000000 then\n        return (num /\
    \ 1000000, num % 1000000)\n    elseif num < 100000000 then\n        return (num\
    \ / 10000000, num % 10000000)\n    elseif num < 1000000000 then\n        return\
    \ (num / 100000000, num % 100000000)\n    elseif num < 10000000000 then\n    \
    \    return (num / 1000000000, num % 1000000000)\n    elseif num < 100000000000\
    \ then\n        return (num / 10000000000, num % 10000000000)\n    elseif num\
    \ < 1000000000000 then\n        return (num / 100000000000, num % 100000000000)\n\
    \    elseif num < 10000000000000 then\n        return (num / 1000000000000, num\
    \ % 1000000000000)\n    elseif num < 100000000000000 then\n        return (num\
    \ / 10000000000000, num % 10000000000000)\n    elseif num < 1000000000000000 then\n\
    \        return (num / 100000000000000, num % 100000000000000)\n    elseif num\
    \ < 10000000000000000 then\n        return (num / 1000000000000000, num % 1000000000000000)\n\
    \    elseif num < 100000000000000000 then\n        return (num / 10000000000000000,\
    \ num % 10000000000000000)\n    elseif num < 100000000000000000 then\n       \
    \ return (num / 100000000000000000, num % 100000000000000000)\n    elseif num\
    \ < 1000000000000000000 then\n        return (num / 100000000000000000, num %\
    \ 100000000000000000)\n    elseif num < 10000000000000000000 then\n        return\
    \ (num / 1000000000000000000, num % 1000000000000000000)\n    elseif num < 100000000000000000000\
    \ then\n        return (num / 10000000000000000000, num % 10000000000000000000)\n\
    \    elseif num < 1000000000000000000000 then\n        return (num / 100000000000000000000,\
    \ num % 100000000000000000000)\n    elseif num < 10000000000000000000000 then\n\
    \        return (num / 10000000000000000000000, num % 10000000000000000000000)\n\
    \    elseif num < 1000000000000000000000000 then\n        return (num / 1000000000000000000000000,\
    \ num % 1000000000000000000000000)\n    elseif num < 10000000000000000000000000\
    \ then\n        return (num / 10000000000000000000000000, num % 10000000000000000000000000)\n\
    \    elseif num < \nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfhdzw8c.jl:1\nin expression starting at /tmp/tmplfhdzw8c.jl:1\n"
  stdout: ''
  timestamp: 1660014654
