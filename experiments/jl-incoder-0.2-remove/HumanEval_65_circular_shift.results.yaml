language: jl
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n</\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvi65pffo.jl:11\nin expression starting at\
    \ /tmp/tmpvi65pffo.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 8)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 15)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 22)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 26)\n</cell>\n<code language=\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk4c_wnw.jl:11\nin expression starting at\
    \ /tmp/tmpyk4c_wnw.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    if shift > length(digits)\n\
    \        digits = reverse(digits)\n    end\n    digits[shift] = digits[shift]\
    \ .- digits[shift-1]\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkptw410h.jl:13\nin expression starting at\
    \ /tmp/tmpkptw410h.jl:13\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3047xcd7.jl:11\nin expression starting at\
    \ /tmp/tmp3047xcd7.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\n    For example, the string \"hello\" has 4 vowels.\n    Write\
    \ a function that takes a string and returns the number of consonants contained\
    \ in the string.\n    For example, the string \"hello\" has 5 consonants.\n  \
    \  Write a function that takes a string and returns the number of consonants and\
    \ vowels contained in the string.\n    For example, the string \"hello\" has 5\
    \ vowels and 4 consonants.\n    Write a function that takes a string and returns\
    \ the number of vowels and consonants contained in the string.\n    For example,\
    \ the string \"hello\" has 5 consonants and 4 vowels.\n    Write a function that\
    \ takes a string and returns the number of consonants and vowels contained in\
    \ the string.\n    For example, the string \"hello\" has 5 vowels and 4 consonants.\n\
    \    Write a function that takes a string and returns the number of vowels and\
    \ consonants contained in the string.\n    For example, the string \"hello\" has\
    \ 5 consonants and 4 vowels.\n    Write a function that takes a string and returns\
    \ the number of consonants and vowels contained in the string.\n    For example,\
    \ the string \"hello\" has 5 vowels and 4 consonants.\n    Write a function that\
    \ takes a string and returns the number of vowels and consonants contained in\
    \ the string.\n    For example, the string \"hello\" has 5 consonants and 4 vowels.\n\
    \    Write a function that takes a string and returns the number of consonants\
    \ and vowels contained in the string.\n    For example, the string \"hello\" has\
    \ 5 vowels and 4 consonants.\n    Write a function that takes a string and returns\
    \ the number of vowels and consonants contained in the string.\n    For example,\
    \ the string \"hello\" has 5 consonants and 4 vowels.\n    Write a function that\
    \ takes a string and returns the number of consonants and vowels contained in\
    \ the string.\n    For example, the string \"hello\" has 5 vowels and 4 consonants.\n\
    \    Write a function that takes a string and returns the number of vowels and\
    \ consonants contained in the string.\n    For example, the string \"hello\" has\
    \ 5 consonants and 4 vowels.\n    Write a function that takes a string and returns\
    \ the number of consonants and vowels contained in the string.\n    For example,\
    \ the string \"hello\" has 5 vowels and 4 consonants.\n    Write a function that\
    \ \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwdd4f42.jl:11\nin expression starting at\
    \ /tmp/tmpbwdd4f42.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1dmz8t4.jl:11\nin expression starting at\
    \ /tmp/tmpr1dmz8t4.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = split(x, \"\")\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = circular_shift(digits_reversed, shift - 1)\n       \
    \ return join(digits_shifted, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a string to a vector of integers. If the string does not represent\
    \ a vector of integers, raise an error.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6j2d5us.jl:16\nin expression starting at\
    \ /tmp/tmpe6j2d5us.jl:16\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a vector of integers. For example,\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvm3gdx06.jl:11\nin expression starting at\
    \ /tmp/tmpvm3gdx06.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    For example, length(123456789) == 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vvxcets.jl:11\nin expression starting at\
    \ /tmp/tmp4vvxcets.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a string to a vector of integers. If\
    \ the string contains non-numeric characters, return an error.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7lzljz8.jl:11\nin expression starting at\
    \ /tmp/tmpp7lzljz8.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4p6fwj_.jl:11\nin expression starting at\
    \ /tmp/tmpy4p6fwj_.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 28)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 29)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgfc2s_f.jl:11\nin expression starting at\
    \ /tmp/tmprgfc2s_f.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = string(x:digits)\n    digits = digits[digits.length\
    \ - shift:digits.length]\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the string reversed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3l3_wa5t.jl:10\nin expression starting at\
    \ /tmp/tmp3l3_wa5t.jl:10\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nFor example,\
    \ length(123456789) == 10.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc67i4aa.jl:12\nin expression starting at\
    \ /tmp/tmpmc67i4aa.jl:12\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    digits_reversed = reverse(digits)\n\
    \    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return digits_shifted_reversed\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.3>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(1, 29)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql5kyqv_.jl:12\nin expression starting at\
    \ /tmp/tmpql5kyqv_.jl:12\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    if shift > length(digits)\n        digits = reverse(digits)\n        shift\
    \ = shift - length(digits)\n    end\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal integer. For example, given \"011\", return 8.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwz7y20pd.jl:15\nin expression starting at\
    \ /tmp/tmpwz7y20pd.jl:15\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a string to a vector of integers. If\
    \ the string contains non-numeric characters, return an error.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcsvqe57.jl:11\nin expression starting at\
    \ /tmp/tmppcsvqe57.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmperu9x3xt.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmperu9x3xt.jl:1\n\
    in expression starting at /tmp/tmperu9x3xt.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + x[(shift + 1):length(x)]\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqu9y574.jl:11\nin expression starting at\
    \ /tmp/tmpnqu9y574.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw8w25en.jl:11\nin expression starting at\
    \ /tmp/tmplw8w25en.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = split(x,\
    \ \"\")\n        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        digits_shifted_reversed_str\
    \ = join(digits_shifted_reversed, \"\")\n        return digits_shifted_reversed_str\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 25)\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3dbnk07.jl:17\nin expression starting at\
    \ /tmp/tmpr3dbnk07.jl:17\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the string reversed, without using reverse.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr09n0s7c.jl:11\nin expression starting at\
    \ /tmp/tmpr09n0s7c.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    if shift > length(digits)\n\
    \        return reverse(digits)\n    else\n        digits = digits[shift:end]\n\
    \        return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x1j0ffr.jl:13\nin expression starting at\
    \ /tmp/tmp2x1j0ffr.jl:13\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6un05830.jl:11\nin expression starting at\
    \ /tmp/tmp6un05830.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp208iipt2.jl:11\nin expression starting at\
    \ /tmp/tmp208iipt2.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezcdjwdz.jl:11\nin expression starting at\
    \ /tmp/tmpezcdjwdz.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpanauo270.jl:11\nin expression starting at\
    \ /tmp/tmpanauo270.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxxi0ln7t.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxi0ln7t.jl:1\n\
    in expression starting at /tmp/tmpxxi0ln7t.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    digits_reversed = reverse(digits)\n\
    \    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return digits_shifted_reversed\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp3lcv6978.jl:17\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  UndefVarError: digits not
    defined\n  Stacktrace:\n   [1] circular_shift(x::Int64, shift::Int64)\n     @
    Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3lcv6978.jl:17 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error
    During Test at /tmp/tmp3lcv6978.jl:18\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp3lcv6978.jl:18 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error During Test at
    /tmp/tmp3lcv6978.jl:19\n  Test threw exception\n  Expression: candidate(97, 8)
    == "79"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp3lcv6978.jl:19 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error During Test at
    /tmp/tmp3lcv6978.jl:20\n  Test threw exception\n  Expression: candidate(12, 1)
    == "21"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /t'
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmperu9x3xt.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmperu9x3xt.jl:1\n\
    in expression starting at /tmp/tmperu9x3xt.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a string to a vector of integers. If the string cannot be converted\
    \ to a vector of integers, return an empty vector.\nFor example, if the string\
    \ \"123abc\" can be converted to a vector of integers, return [1,2,3]. If the\
    \ string cannot be converted to a vector of integers, return an empty vector.\n\
    \            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1idi_k6.jl:11\nin expression starting at\
    \ /tmp/tmpv1idi_k6.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnsf4plc.jl:11\nin expression starting at\
    \ /tmp/tmpjnsf4plc.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    digits_reversed = reverse(digits)\n\
    \    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return join(digits_shifted_reversed)\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ a number like 1234 has 4 digits, a number like 123 has 3 digits, and a number\
    \ like 123 has 2 digits. Write a function that returns the number of digits in\
    \ an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclze41x1.jl:12\nin expression starting at\
    \ /tmp/tmpclze41x1.jl:12\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6q4_ybm.jl:11\nin expression starting at\
    \ /tmp/tmph6q4_ybm.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 1)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 12)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 16)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 20)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 24)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 28)\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1hn419c.jl:11\nin expression starting at\
    \ /tmp/tmph1hn419c.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $10$ and $12$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay5q9o0f.jl:11\nin expression starting at\
    \ /tmp/tmpay5q9o0f.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsqsuo_h.jl:11\nin expression starting at\
    \ /tmp/tmpbsqsuo_h.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. \nFor example, length(1234)\
    \ = 4.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l20t3sr.jl:11\nin expression starting at\
    \ /tmp/tmp_l20t3sr.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    if shift > length(digits)\n\
    \        digits = reverse(digits)\n    end\n    digits[shift] = digits[shift]\
    \ .- digits[shift-1]\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g233v_s.jl:13\nin expression starting at\
    \ /tmp/tmp1g233v_s.jl:13\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6ju7tnj.jl:11\nin expression starting at\
    \ /tmp/tmpa6ju7tnj.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a vector of integers, using the\n\
    \    following rules:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fijs18q.jl:11\nin expression starting at\
    \ /tmp/tmp9fijs18q.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wwxkyfo.jl:14\nin expression starting at\
    \ /tmp/tmp9wwxkyfo.jl:14\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $x = 123456789$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kenpmy3.jl:11\nin expression starting at\
    \ /tmp/tmp2kenpmy3.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5gvkk50.jl:11\nin expression starting at\
    \ /tmp/tmpo5gvkk50.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        shift = length(x)\n\
    \    end\n    \n    digits = split(x, \"\")\n    digits[1:end-1] = digits[1:end-1].shift(shift)\n\
    \    digits[end] = digits[end].shift(-shift)\n    \n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96__3d7r.jl:16\nin expression starting at\
    \ /tmp/tmp96__3d7r.jl:16\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        shift = length(x)\n\
    \    end\n    digits = split(x, \"\")\n    digits[end] = digits[end]\n    digits[end]\
    \ = digits[end - shift]\n    digits[end - shift] = digits[end]\n    digits = join(digits,\
    \ \"\")\n    return digits\nend\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmphtb40eyj.jl:21\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  MethodError: no method
    matching split(::Int64, ::String)\n  Closest candidates are:\n    split(!Matched::T,
    ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmphtb40eyj.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtb40eyj.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtb40eyj.jl:20\ntest set: Error
    During Test at /tmp/tmphtb40eyj.jl:22\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  MethodError: no method matching split(::Int64, ::String)\n  Closest
    candidates are:\n    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString
    at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmphtb40eyj.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtb40eyj.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtb40eyj.jl:20\ntest set: Error
    During Test at /tmp/tmphtb40eyj.jl:23\n  Test threw exception\n  Expression: candidate(97,
    8) == "79"\n  MethodError: no method matching split(::Int64, ::String)\n  Closest
    candidates are:\n    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString
    at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmphtb40eyj.jl:9\n   [2]
    mac'
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm54g5ujw.jl:11\nin expression starting at\
    \ /tmp/tmpm54g5ujw.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxxi0ln7t.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxi0ln7t.jl:1\n\
    in expression starting at /tmp/tmpxxi0ln7t.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n        x >>= shift\n        x .= reverse(x)\n    end\n    return reverse(x)\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a string to a vector of integers,\
    \ splitting the string at the spaces.\nFor example, converting the string \"1\
    \ 2 3 4\" to a vector of integers [1, 2, 3, 4]\nHint: split() function will be\
    \ useful.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaghmuyyh.jl:13\nin expression starting at\
    \ /tmp/tmpaghmuyyh.jl:13\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n        return reverse(x[shift+1:end-1]) + reverse(x[1:shift])\n    else\n\
    \        return x\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmm4zoje.jl:12\nin expression starting at\
    \ /tmp/tmpjmm4zoje.jl:12\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuoyxdoy.jl:11\nin expression starting at\
    \ /tmp/tmpnuoyxdoy.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + x[1:shift]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpir90pm9t.jl:11\nin expression starting at\
    \ /tmp/tmpir90pm9t.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:])\n    end\n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9st670z.jl:9\nin expression\
    \ starting at /tmp/tmpy9st670z.jl:9\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxxi0ln7t.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxi0ln7t.jl:1\n\
    in expression starting at /tmp/tmpxxi0ln7t.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a string to a vector of integers. If\
    \ the string contains non-numeric characters, return an error.\nWrite a function\
    \ that converts a vector of integers to a string.\nWrite a function that converts\
    \ a vector of integers to a vector of floats.\nWrite a function that converts\
    \ a vector of floats to a vector of integers.\nWrite a function that converts\
    \ a vector of floats to a vector of floats.\nWrite a function that converts a\
    \ vector of strings to a vector of integers.\nWrite a function that converts a\
    \ vector of strings to a vector of floats.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite a function that converts a vector\
    \ of strings to a vector of strings.\nWrite \nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftsg6aba.jl:11\nin expression starting at\
    \ /tmp/tmpftsg6aba.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[(length(x)-shift):end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwibosdbf.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwibosdbf.jl:1\n\
    in expression starting at /tmp/tmpwibosdbf.jl:1\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        shift = length(x)\n\
    \    end\n    digits = split(x, \"\")\n    digits[1:shift] = digits[shift:end]\n\
    \    digits[shift] = digits[end - shift]\n    return join(digits, \"\")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpljixok04.jl:19\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  MethodError: no method
    matching split(::Int64, ::String)\n  Closest candidates are:\n    split(!Matched::T,
    ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmpljixok04.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpljixok04.jl:19 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpljixok04.jl:18\ntest set: Error
    During Test at /tmp/tmpljixok04.jl:20\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  MethodError: no method matching split(::Int64, ::String)\n  Closest
    candidates are:\n    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString
    at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmpljixok04.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpljixok04.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpljixok04.jl:18\n'''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift+1:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccq8lmdt.jl:12\nin expression starting at\
    \ /tmp/tmpccq8lmdt.jl:12\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer. Test it on all integers from 1 to 10, and on negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyksicv7.jl:14\nin expression starting at\
    \ /tmp/tmpmyksicv7.jl:14\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        return reverse(digits(x))[shift:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 1)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 2)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 4)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 5)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 6)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 7)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 8)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 9)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 10)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 11)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 12)\n</cell>\n<code language=julia-1.5>\nx =\
    \ 123456789\ncircular_shift(x, 13)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 14)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 16)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 17)\n</cell>\n\
    <code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 18)\n</cell>\n<code\
    \ language=julia-1.5>\nx = 123456789\ncircular_shift(x, 19)\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 20)\n</cell>\n<code language=julia-1.5>\nx =\
    \ 123456789\ncircular_shift(x, 21)\n</cell>\n<code language=julia-1.5>\nx = 123456789\n\
    circular_shift(x, 22)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x,\
    \ 23)\n</cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 24)\n\
    </cell>\n<code language=julia-1.5>\nx = 123456789\ncircular_shift(x, 25)\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd08v8fb4.jl:11\nin expression starting at\
    \ /tmp/tmpd08v8fb4.jl:11\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = digits(x)\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = shift(digits_reversed, shift)\n        return join(digits_shifted)\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjat3231.jl:16\nin expression starting at\
    \ /tmp/tmppjat3231.jl:16\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + x[(shift+1):length(x)]\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on $10^9$ and $10^10$.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7mzozb7.jl:11\nin expression starting at\
    \ /tmp/tmpy7mzozb7.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8eswgop7.jl:11\nin expression starting at\
    \ /tmp/tmp8eswgop7.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 28)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 29)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgfc2s_f.jl:11\nin expression starting at\
    \ /tmp/tmprgfc2s_f.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise: Write a function that converts a string to a vector of integers. \n\
    \    Each character in the string should be converted to an integer and added\
    \ to the vector.\n    You may assume that the string contains only digits and\
    \ spaces.\n    You may assume that the string has at least 1 digit.\n    You may\
    \ assume that the string has at least 1 space.\n    You may assume that the string\
    \ has at least 2 spaces.\n    You may assume that the string has at least 3 spaces.\n\
    \    You may assume that the string has at least 4 spaces.\n    You may assume\
    \ that the string has at least 5 spaces.\n    You may assume that the string has\
    \ at least 6 spaces.\n    You may assume that the string has at least 7 spaces.\n\
    \    You may assume that the string has at least 8 spaces.\n    You may assume\
    \ that the string has at least 9 spaces.\n    You may assume that the string has\
    \ at least 10 spaces.\n    You may assume that the string has at least 11 spaces.\n\
    \    You may assume that the string has at least 12 spaces.\n    You may assume\
    \ that the string has at least 13 spaces.\n    You may assume that the string\
    \ has at least 14 spaces.\n    You may assume that the string has at least 15\
    \ spaces.\n    You may assume that the string has at least 16 spaces.\n    You\
    \ may assume that the string has at least 17 spaces.\n    You may assume that\
    \ the string has at least 18 spaces.\n    You may assume that the string has at\
    \ least 19 spaces.\n    You may assume that the string has at least 20 spaces.\n\
    \    You may assume that the string has at least 21 spaces.\n    You may assume\
    \ that the string has at least 22 spaces.\n    You may assume that the string\
    \ has at least 23 spaces.\n    You may assume that the string has at least 24\
    \ spaces.\n    You may assume that the string has at least 25 spaces.\n    You\
    \ may assume that the string has at least 26 spaces.\n    You may assume that\
    \ the string has at least 27 spaces.\n    You may assume that the string has at\
    \ least 28 spaces.\n    You may assume that the string has at least 29 spaces.\n\
    \    You may assume that the string has at least 30 spaces.\n    You may assume\
    \ that the string has at least 31 spaces.\n    You may assume that the string\
    \ has at least 32 spaces.\n    You may assume that the string has at least 33\
    \ spaces.\n    You may assume that the string has at least 34 spaces.\n    You\
    \ may assume that the string has at least 35 spaces.\n    You may assume that\
    \ the string has at least 36 spaces.\n    You may assume that the string has at\
    \ least 37 spaces.\n    You may assume \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnun9e6l.jl:11\nin expression starting at\
    \ /tmp/tmpvnun9e6l.jl:11\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezcdjwdz.jl:11\nin expression starting at\
    \ /tmp/tmpezcdjwdz.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4pb7twhg.jl:11\nin expression starting at\
    \ /tmp/tmp4pb7twhg.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:length(x)]\nend\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces and words in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string that are not spaces and words in the string that are not spaces. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces and words in the string that are not spaces and lines in\
    \ the string that are not spaces. \nWrite a function that takes a string and returns\
    \ the number of lines in the string that are not spaces and words in the string\
    \ that are not spaces and characters in the string that are not spaces. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces and words in the string that are not spaces and lines in\
    \ the string that are not spaces and characters in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string that are not spaces and words in the string that are not spaces and characters\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces and words in the string that are not spaces\
    \ and lines in the string that are not spaces and characters in the string that\
    \ are not spaces and characters in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces and words in the string that are not spaces and characters in the string\
    \ that are not spaces and characters in the string that are not spaces and characters\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces and words\
    \ in the string that are not spaces and lines in the string that are not spaces\
    \ and characters in the string that are not spaces and characters in the string\
    \ that are not spaces and characters in the string that are not spaces. \nWrite\
    \ a function that takes a string and returns the number of lines in the string\
    \ that are not spaces and words in the string that are not spaces and characters\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces and characters in the string that are not spaces and characters in the\
    \ string that are not spaces. \nWrite a function that takes a string and \nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9sj1bxq.jl:11\nin expression starting at\
    \ /tmp/tmpd9sj1bxq.jl:11\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6un05830.jl:11\nin expression starting at\
    \ /tmp/tmp6un05830.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    digits_reversed = reverse(digits)\n\
    \    digits_shifted = shift(digits_reversed, shift)\n    digits_shifted_reversed\
    \ = reverse(digits_shifted)\n    return digits_shifted_reversed\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp3lcv6978.jl:17\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  UndefVarError: digits not
    defined\n  Stacktrace:\n   [1] circular_shift(x::Int64, shift::Int64)\n     @
    Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3lcv6978.jl:17 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error
    During Test at /tmp/tmp3lcv6978.jl:18\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp3lcv6978.jl:18 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error During Test at
    /tmp/tmp3lcv6978.jl:19\n  Test threw exception\n  Expression: candidate(97, 8)
    == "79"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp3lcv6978.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp3lcv6978.jl:19 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp3lcv6978.jl:16\ntest set: Error During Test at
    /tmp/tmp3lcv6978.jl:20\n  Test threw exception\n  Expression: candidate(12, 1)
    == "21"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /t'
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5gvkk50.jl:11\nin expression starting at\
    \ /tmp/tmpo5gvkk50.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. Test it on $10^9$ and $10^8$.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o6wv06a.jl:11\nin expression starting at\
    \ /tmp/tmp9o6wv06a.jl:11\n"
  stdout: ''
  timestamp: 1659749036
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        return\
    \ \"\"\n    else\n        return reverse(digits(x))[shift:end]\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <text>\nExercise: Implement a function that returns the sum of the digits of an\
    \ integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc1eaipy.jl:11\nin expression starting at\
    \ /tmp/tmphc1eaipy.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27v3zx3n.jl:12\nin expression starting at\
    \ /tmp/tmp27v3zx3n.jl:12\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a string to a vector of integers. If\
    \ the string contains any non-digit characters, return an error.\nFor example,\
    \ convert(\"123abc\") should return [1,2,3]. convert(\"123abc\") should return\
    \ an error.\nHint: Use isdigit() to test if a character is a digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8d1bzu_.jl:11\nin expression starting at\
    \ /tmp/tmpt8d1bzu_.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer. For example, length(12345) = 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwok9edjq.jl:11\nin expression starting at\
    \ /tmp/tmpwok9edjq.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihmio0pt.jl:11\nin expression starting at\
    \ /tmp/tmpihmio0pt.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    x = 123456789\ncircular_shift(x, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr161d5tj.jl:11\nin expression starting at\
    \ /tmp/tmpr161d5tj.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp431qm5pu.jl:11\nin expression starting at\
    \ /tmp/tmp431qm5pu.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nFor example, 5 is a prime number, since it has no positive\
    \ divisors other than 1 and itself.\nThe function should return the prime numbers\
    \ in ascending order, starting from 2.\nThe function should return an empty array\
    \ if n is less than or equal to 0.\nThe function should return an array of integers\
    \ rather than an array of strings.\nThe function should return an error if n is\
    \ negative or zero.\nThe function should return an error if n is greater than\
    \ the length of the input array.\nThe function should return an error if n is\
    \ less than 2.\nThe function should return an error if n is greater than the number\
    \ of primes less than or equal to n.\nThe function should return an error if n\
    \ is less than 2.\nThe function should return an error if n is greater than the\
    \ number of primes less than or equal to n.\nThe function should return an error\
    \ if n is less than 2.\nThe function should return an error if n is greater than\
    \ the number of primes less than or equal to n.\nThe function should return an\
    \ error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe function should return an error if n is greater\
    \ than the number of primes less than or equal to n.\nThe function should return\
    \ an error if n is less than 2.\nThe \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0brg0tt5.jl:11\nin expression starting at\
    \ /tmp/tmp0brg0tt5.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkcgbqrn.jl:12\nin expression starting at\
    \ /tmp/tmptkcgbqrn.jl:12\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfshyxcxz.jl:20\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  shift must be in range
    0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmpfshyxcxz.jl:7\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfshyxcxz.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfshyxcxz.jl:19\ntest set: Error
    During Test at /tmp/tmpfshyxcxz.jl:21\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  shift must be in range 0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @
    Base ./error.jl:33\n   [2] circular_shift(x::Int64, shift::Int64)\n     @ Main
    /tmp/tmpfshyxcxz.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfshyxcxz.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfshyxcxz.jl:19\ntest set: Error
    During Test at /tmp/tmpfshyxcxz.jl:22\n  Test threw exception\n  Expression: candidate(97,
    8) == "79"\n  shift must be in range 0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @
    Base ./error.jl:33\n   [2] circular_shift(x::Int64, shift::Int64)\n     @ Main
    /tmp/tmpfshyxcxz.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfshyxcxz.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfshyxcxz.jl:19\ntest set: Error
    During Test at /tmp/tmpfshyxcxz.jl:23\n  Test th'
  timestamp: 1659749040
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = string(x:digits)\n    digits = digits[digits.length\
    \ - shift:digits.length]\n    digits = digits[::-1]\n    return digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi1l_t3j1.jl:8\n\
    in expression starting at /tmp/tmpi1l_t3j1.jl:8\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxxi0ln7t.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxi0ln7t.jl:1\n\
    in expression starting at /tmp/tmpxxi0ln7t.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \n    Use this function to write a function count_chars(x::String)::Int64.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuy679js.jl:11\nin expression starting at\
    \ /tmp/tmpeuy679js.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6vhau0b.jl:11\nin expression starting at\
    \ /tmp/tmpg6vhau0b.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n        return reverse(x)\n    else\n        return x[shift:end]\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\ncircular_shift(12345, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, the number 12345 has 5 digits. Write a function that returns the\
    \ number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy1okcws.jl:13\nin expression starting at\
    \ /tmp/tmpfy1okcws.jl:13\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\ncircular_\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdxecnnd.jl:11\nin expression starting at\
    \ /tmp/tmptdxecnnd.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5gvkk50.jl:11\nin expression starting at\
    \ /tmp/tmpo5gvkk50.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdf611aa.jl:13\nin expression starting at\
    \ /tmp/tmpfdf611aa.jl:13\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 5)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 7)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 12)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 14)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 19)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 21)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 26)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswdjxwaj.jl:11\nin expression starting at\
    \ /tmp/tmpswdjxwaj.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Array{Int64,1}\n\
    Return the digits of x in a 1-dimensional array\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19xkqoxd.jl:11\nin expression starting at\
    \ /tmp/tmp19xkqoxd.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[(length(x)-shift):(length(x)-shift-1)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkewtp749.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkewtp749.jl:1\n\
    in expression starting at /tmp/tmpkewtp749.jl:1\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmperu9x3xt.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmperu9x3xt.jl:1\n\
    in expression starting at /tmp/tmperu9x3xt.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv79h9qm.jl:11\nin expression starting at\
    \ /tmp/tmpnv79h9qm.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqz_vwt6.jl:11\nin expression starting at\
    \ /tmp/tmpkqz_vwt6.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfqep3vl.jl:11\nin expression starting at\
    \ /tmp/tmpcfqep3vl.jl:11\n"
  stdout: ''
  timestamp: 1659749040
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxxi0ln7t.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxxi0ln7t.jl:1\n\
    in expression starting at /tmp/tmpxxi0ln7t.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1234, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, the number 1234 has 4 digits, while 12345 has 5 digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xuiry5k.jl:11\nin expression starting at\
    \ /tmp/tmp4xuiry5k.jl:11\n"
  stdout: ''
  timestamp: 1659749040
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[(length(x)-shift):length(x)]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg91emkaf.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg91emkaf.jl:1\n\
    in expression starting at /tmp/tmpg91emkaf.jl:1\n"
  stdout: ''
  timestamp: 1659749040
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1b9hd4l.jl:11\nin expression starting at\
    \ /tmp/tmp_1b9hd4l.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b77d4sd.jl:11\nin expression starting at\
    \ /tmp/tmp_b77d4sd.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. Test it\
    \ on $10$ and $100$.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4g6r2qr.jl:12\nin expression starting at\
    \ /tmp/tmpv4g6r2qr.jl:12\n"
  stdout: ''
  timestamp: 1659749040
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary string to\
    \ a decimal integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvfofxf1.jl:13\nin expression starting at\
    \ /tmp/tmpuvfofxf1.jl:13\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on all integers from 0 to 9 and all integers between 100 and 999.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz833of70.jl:11\nin expression starting at\
    \ /tmp/tmpz833of70.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptles2133.jl:11\nin expression starting at\
    \ /tmp/tmptles2133.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp4er7e8il.jl:17\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  UndefVarError: digits not
    defined\n  Stacktrace:\n   [1] circular_shift(x::Int64, shift::Int64)\n     @
    Main /tmp/tmp4er7e8il.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4er7e8il.jl:17 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4er7e8il.jl:16\ntest set: Error
    During Test at /tmp/tmp4er7e8il.jl:18\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp4er7e8il.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4er7e8il.jl:18 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4er7e8il.jl:16\ntest set: Error During Test at
    /tmp/tmp4er7e8il.jl:19\n  Test threw exception\n  Expression: candidate(97, 8)
    == "79"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /tmp/tmp4er7e8il.jl:6\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4er7e8il.jl:19 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4er7e8il.jl:16\ntest set: Error During Test at
    /tmp/tmp4er7e8il.jl:20\n  Test threw exception\n  Expression: candidate(12, 1)
    == "21"\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] circular_shift(x::Int64,
    shift::Int64)\n     @ Main /t'
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number to\
    \ a string in base 10 and returns the string as a vector of strings. \nFor example,\
    \ \n    convert_base10(123456789, 10)\nshould return a vector of strings:\n  \
    \  [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n</text>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_htbydsd.jl:12\nin expression starting at\
    \ /tmp/tmp_htbydsd.jl:12\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = string(x:digits)\n    digits = digits[digits.length\
    \ - shift:digits.length]\n    digits = digits[::-1]\n    return digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi1l_t3j1.jl:8\n\
    in expression starting at /tmp/tmpi1l_t3j1.jl:8\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ converts a string to a vector of integers using the function split. \n    For\
    \ example, if the string \"1 2 3 4 5\" is passed to the function, the vector [1,2,3,4,5]\
    \ should be returned.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cs2_rai.jl:11\nin expression starting at\
    \ /tmp/tmp3cs2_rai.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = string(x:digits)\n    digits = digits[shift:end]\n\
    \    digits = digits[::-1]\n    return digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4qds5ew0.jl:8\n\
    in expression starting at /tmp/tmp4qds5ew0.jl:8\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5855ncp.jl:14\nin expression starting at\
    \ /tmp/tmpf5855ncp.jl:14\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqepbd9w.jl:11\nin expression starting at\
    \ /tmp/tmpgqepbd9w.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be non-negative and less than number of digits\")\n    elseif shift\
    \ == 0\n        return x\n    else\n        digits = split(x, \"\")\n        digits[shift]\
    \ = digits[shift].reverse()\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.3>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtrrwcbm.jl:15\nin expression starting at\
    \ /tmp/tmpgtrrwcbm.jl:15\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_a85jzd.jl:11\nin expression starting at\
    \ /tmp/tmpj_a85jzd.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 12)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 13)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 17)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 19)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 21)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 25)\n</cell>\n<code language=julia-1.4>\n\
    circular_shift(123456789, 26)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789,\
    \ 27)\n</cell>\n<code language=julia-1.4>\ncircular_shift(123456789, 28)\n</cell>\n\
    <code language=julia-1.4>\ncircular_shift(123456789, 29)\n</cell>\n<code language=julia-1.4>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh5xj6_1.jl:11\nin expression starting at\
    \ /tmp/tmpnh5xj6_1.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnsf4plc.jl:11\nin expression starting at\
    \ /tmp/tmpjnsf4plc.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n# test circular_shift\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3dvxq6a.jl:11\nin expression starting at\
    \ /tmp/tmpc3dvxq6a.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5o5pbtzk.jl:11\nin expression starting at\
    \ /tmp/tmp5o5pbtzk.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.3>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh2k8800.jl:12\nin expression starting at\
    \ /tmp/tmplh2k8800.jl:12\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a vector of integers. If the string\
    \ contains non-numeric characters, return an empty vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1anj52aq.jl:11\nin expression starting at\
    \ /tmp/tmp1anj52aq.jl:11\n"
  stdout: ''
  timestamp: 1659749041
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00std5v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00std5v.jl:1\n\
    in expression starting at /tmp/tmpq00std5v.jl:1\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tq0g6ui.jl:11\nin expression starting at\
    \ /tmp/tmp8tq0g6ui.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 14)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 22)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 26)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 27)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 29)\n</\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvi65pffo.jl:11\nin expression starting at\
    \ /tmp/tmpvi65pffo.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6djfnata.jl:11\nin expression starting at\
    \ /tmp/tmp6djfnata.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfn3necq.jl:13\nin expression starting at\
    \ /tmp/tmpqfn3necq.jl:13\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in that string.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq85sy5r.jl:11\nin expression starting at\
    \ /tmp/tmpzq85sy5r.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $x = 123456789$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhwt7kxj.jl:11\nin expression starting at\
    \ /tmp/tmpfhwt7kxj.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. For example, length(12345) = 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay5oyj_z.jl:11\nin expression starting at\
    \ /tmp/tmpay5oyj_z.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.3>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a string to a vector of integers. If the string contains non-numeric\
    \ characters, return an error.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg110cyl3.jl:11\nin expression starting at\
    \ /tmp/tmpg110cyl3.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 4)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 5)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 6)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 11)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 12)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 13)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 17)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 18)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 20)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 24)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 25)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxrxy3fn.jl:14\nin expression starting at\
    \ /tmp/tmpyxrxy3fn.jl:14\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftmwkho6.jl:11\nin expression starting at\
    \ /tmp/tmpftmwkho6.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxec3oue.jl:11\nin expression starting at\
    \ /tmp/tmpuxec3oue.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = shift(x)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8l0y99_5.jl:12\nin expression starting at\
    \ /tmp/tmp8l0y99_5.jl:12\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:length(x)])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(1234, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) returns 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpby0v8iih.jl:11\nin expression starting at\
    \ /tmp/tmpby0v8iih.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift-1]) + reverse(x[shift:])\n\
    end\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n<code\
    \ language=juli\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzn8k9fr.jl:11\nin expression\
    \ starting at /tmp/tmptzn8k9fr.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $x = 123456789$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeldd2rfz.jl:11\nin expression starting at\
    \ /tmp/tmpeldd2rfz.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise: Circular shift a number by any number of digits\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagum8flo.jl:13\nin expression starting at\
    \ /tmp/tmpagum8flo.jl:13\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        shift = length(x)\n\
    \    end\n    \n    digits = split(x, \"\")\n    digits[1:end-1] = digits[1:end-1].shift(shift)\n\
    \    digits[end] = digits[end].shift(shift)\n    \n    join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number to a string with leading zeros, e.g.\n\
    \    to_str_with_leading_zeros(123456789) = \"0000000001234567\"\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\") = 123456789\nWrite a function\
    \ that converts a string to a number, e.g.\n    to_num_with_leading_zeros(\"0000000001234567\"\
    ) = 123456789\nWrite a function that converts a string to a number, e.g.\n   \
    \ to_num_with_leading_zeros(\"0000000001234567\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nsn_8qz.jl:16\nin expression starting at\
    \ /tmp/tmp3nsn_8qz.jl:16\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        shift = length(x)\n\
    \    end\n    \n    digits = split(x, \"\")\n    \n    digits[1:shift] = digits[1:shift][1:shift]\n\
    \    digits[shift] = digits[shift][shift]\n    \n    digits = join(digits, \"\"\
    )\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 27)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9jnj_0u.jl:19\nin expression starting at\
    \ /tmp/tmpy9jnj_0u.jl:19\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: -1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = split(x,\
    \ \"\")\n        digits = digits[shift:end]\n        digits = join(digits, \"\"\
    )\n        return digits\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpswqv8t0k.jl:20\n  Test threw
    exception\n  Expression: candidate(100, 2) == "001"\n  shift must be in range
    0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2]
    circular_shift(x::Int64, shift::Int64)\n     @ Main /tmp/tmpswqv8t0k.jl:7\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswqv8t0k.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswqv8t0k.jl:19\ntest set: Error
    During Test at /tmp/tmpswqv8t0k.jl:21\n  Test threw exception\n  Expression: candidate(12,
    2) == "12"\n  shift must be in range 0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @
    Base ./error.jl:33\n   [2] circular_shift(x::Int64, shift::Int64)\n     @ Main
    /tmp/tmpswqv8t0k.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswqv8t0k.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswqv8t0k.jl:19\ntest set: Error
    During Test at /tmp/tmpswqv8t0k.jl:22\n  Test threw exception\n  Expression: candidate(97,
    8) == "79"\n  shift must be in range 0 to length(x)\n  Stacktrace:\n   [1] error(s::String)\n     @
    Base ./error.jl:33\n   [2] circular_shift(x::Int64, shift::Int64)\n     @ Main
    /tmp/tmpswqv8t0k.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswqv8t0k.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswqv8t0k.jl:19\n'''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:length(x)])\n\
    end\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 26)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf75ljdx.jl:11\nin expression starting at\
    \ /tmp/tmplf75ljdx.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should accept a parameter that specifies\
    \ the number of prime numbers to return.\nThe function should return an array\
    \ of integers representing the first n prime numbers.\nThe function should return\
    \ nothing if n is less than 1.\nThe function should return nothing if n is greater\
    \ than the number of prime numbers in the array.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than the number of prime numbers in the array.\nThe function should\
    \ return nothing if n is less than or equal to 0.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is greater than the number of prime numbers in the\
    \ array.\nThe function should return nothing if n is less than or equal to 0.\n\
    The function should return nothing if n is greater than the number of prime numbers\
    \ in the array.\nThe function should return nothing if n is less than or equal\
    \ to 0.\nThe function should return nothing if n is greater than the number of\
    \ prime numbers in the array.\nThe function should return nothing if n is less\
    \ than or equal to 0.\nThe function should return nothing if n is greater than\
    \ the number of prime numbers in the array.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than the number of prime numbers in the array.\nThe function should\
    \ return nothing if n is less than or equal to 0.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is greater than the number of prime numbers in the\
    \ array.\nThe function should return nothing if n is less than or equal to 0.\n\
    The function should return nothing if n is greater than the number of prime numbers\
    \ in the array.\nThe function should return nothing if n is less than or equal\
    \ to 0.\nThe function should return nothing if n is greater than the number of\
    \ prime numbers in the array.\nThe function should return nothing if n is less\
    \ than or equal to 0.\nThe function should return nothing if n is greater than\
    \ the number of prime numbers in the array.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than the number of prime numbers in the array.\nThe function should\
    \ return nothing if n is less than or equal to 0.\nThe function should return\
    \ nothing if n is greater than the number of prime numbers in the array.\nThe\
    \ function should return nothing if n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyltb6o5_.jl:11\nin expression starting at\
    \ /tmp/tmpyltb6o5_.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpper9ntk5.jl:11\nin expression starting at\
    \ /tmp/tmpper9ntk5.jl:11\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm54g5ujw.jl:11\nin expression starting at\
    \ /tmp/tmpm54g5ujw.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6djfnata.jl:11\nin expression starting at\
    \ /tmp/tmp6djfnata.jl:11\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[(length(x)-shift):(length(x)-1)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8190neoi.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8190neoi.jl:1\n\
    in expression starting at /tmp/tmp8190neoi.jl:1\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) return reverse(x)\n    else\
    \ return shift(x, shift)\nend\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7nbt3h1.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7nbt3h1.jl:1\n\
    in expression starting at /tmp/tmpy7nbt3h1.jl:1\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 1)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 11)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 12)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 13)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 15)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 19)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 23)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 24)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 25)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 27)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 28)\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwqxq4s_.jl:11\nin expression starting at\
    \ /tmp/tmprwqxq4s_.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\ncircular_shift(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckes7y1r.jl:11\nin expression starting at\
    \ /tmp/tmpckes7y1r.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvoyhogw.jl:12\nin expression starting at\
    \ /tmp/tmptvoyhogw.jl:12\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsuz3gtl.jl:13\nin expression starting at\
    \ /tmp/tmpxsuz3gtl.jl:13\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zg1f3fs.jl:12\nin expression starting at\
    \ /tmp/tmp6zg1f3fs.jl:12\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1234, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_yt6sqy.jl:11\nin expression starting at\
    \ /tmp/tmpv_yt6sqy.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpehxo1o.jl:13\nin expression starting at\
    \ /tmp/tmpdpehxo1o.jl:13\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihmio0pt.jl:11\nin expression starting at\
    \ /tmp/tmpihmio0pt.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a binary string to a decimal integer. For example, if the binary string\
    \ \"1001\" is passed in, return 19 (1001 in base 10 is 19 in base 2). Do not use\
    \ any string functions (i.e. no indexing).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0c7udca.jl:11\nin expression starting at\
    \ /tmp/tmpv0c7udca.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cfcm7pp.jl:11\nin expression starting at\
    \ /tmp/tmp0cfcm7pp.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 5)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 6)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 9)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 13)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 16)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 17)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 18)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 21)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 25)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(12345, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(12345, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345,\
    \ 28)\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 29)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufghny28.jl:11\nin expression starting at\
    \ /tmp/tmpufghny28.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 9)\n</cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiz7c_jnk.jl:11\nin expression starting at\
    \ /tmp/tmpiz7c_jnk.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6vhau0b.jl:11\nin expression starting at\
    \ /tmp/tmpg6vhau0b.jl:11\n"
  stdout: ''
  timestamp: 1659749038
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = digits(x)\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = shift(digits_reversed, shift)\n        return join(digits_shifted)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpho1qcd.jl:17\nin expression starting at\
    \ /tmp/tmphpho1qcd.jl:17\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 9)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 12)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 21)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 24)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 30)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, \n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthmd92i_.jl:11\nin expression starting at\
    \ /tmp/tmpthmd92i_.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpez6llenx.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpez6llenx.jl:1\n\
    in expression starting at /tmp/tmpez6llenx.jl:1\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(123456789) returns 10. You may assume that the integer is\
    \ positive.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn3xb6i4.jl:11\nin expression starting at\
    \ /tmp/tmpwn3xb6i4.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mfi_v9t.jl:15\nin expression starting at\
    \ /tmp/tmp1mfi_v9t.jl:15\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3ddpnr5v.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp3ddpnr5v.jl:20\n  Test threw exception\n\
    \  Expression: candidate(100, 2) == \"001\"\n  shift must be between 0 and length(x)\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] circular_shift(x::Int64,\
    \ shift::Int64)\n     @ Main /tmp/tmp3ddpnr5v.jl:7\n   [3] macro expansion\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ddpnr5v.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ddpnr5v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3ddpnr5v.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(12, 2) == \"12\"\n  shift must be between 0 and length(x)\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] circular_shift(x::Int64,\
    \ shift::Int64)\n     @ Main /tmp/tmp3ddpnr5v.jl:7\n   [3] macro expansion\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ddpnr5v.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ddpnr5v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3ddpnr5v.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(97, 8) == \"79\"\n  shift must be between 0 and length(x)\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] circular_shift(x::Int64,\
    \ shift::Int64)\n     @ Main /tmp/tmp3ddpnr5v.jl:7\n   [3] macro expansion\n \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ddpnr5v.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ddpnr5v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3ddpnr5v.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(12, 1) == \"21\"\n "
  timestamp: 1659749048
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n prime numbers. \n    For example, for n=5, the function\
    \ should return [2, 3, 5, 7, 11].\n    \n    Use a while loop to implement this\
    \ function.\n    \n    Use a for loop to implement this function.\n    \n    Use\
    \ a recursive function to implement this function.\n    \n    Use a while loop\
    \ to implement this function.\n    \n    Use a for loop to implement this function.\n\
    \    \n    Use a recursive function to implement this function.\n    \n    Use\
    \ a while loop to implement this function.\n    \n    Use a for loop to implement\
    \ this function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop to implement this function.\n    \n    Use a recursive\
    \ function to implement this function.\n    \n    Use a while loop to implement\
    \ this function.\n    \n    Use a for loop to implement this function.\n    \n\
    \    Use a recursive function to implement this function.\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop to implement this\
    \ function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop to implement this function.\n    \n    Use a recursive\
    \ function to implement this function.\n    \n    Use a while loop to implement\
    \ this function.\n    \n    Use a for loop to implement this function.\n    \n\
    \    Use a recursive function to implement this function.\n    \n    Use a while\
    \ loop to implement this function.\n    \n    Use a for loop to implement this\
    \ function.\n    \n    Use a recursive function to implement this function.\n\
    \    \n    Use a while loop to implement this function.\n    \n    Use a for loop\
    \ to implement this function.\n    \n    Use a recursive function to implement\
    \ this function.\n    \n    Use a while loop to implement this function.\n   \
    \ \n    Use a for loop\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29nq3tnx.jl:11\nin expression starting at\
    \ /tmp/tmp29nq3tnx.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nThe function\
    \ should return an array. \nThe function should accept a parameter, n, that specifies\
    \ the number of prime numbers to return.\nThe function should return an array\
    \ of prime numbers. \nThe function should return nothing if the number of prime\
    \ numbers to return is less than or equal to 0.\nThe function should return nothing\
    \ if the input is not an integer.\nThe function should return nothing if the input\
    \ is a negative integer.\nThe function should return nothing if the input is a\
    \ floating point number.\nThe function should return nothing if the input is a\
    \ string.\nThe function should return nothing if the input is an array.\nThe function\
    \ should return nothing if the input is an empty array.\nThe function should return\
    \ nothing if the input is an empty string.\nThe function should return nothing\
    \ if the input is an empty dictionary.\nThe function should return nothing if\
    \ the input is an empty set.\nThe function should return nothing if the input\
    \ is an empty tuple.\nThe function should return nothing if the input is an empty\
    \ vector.\nThe function should return nothing if the input is an empty matrix.\n\
    The function should return nothing if the input is an empty dictionary.\nThe function\
    \ should return nothing if the input is an empty set.\nThe function should return\
    \ nothing if the input is an empty tuple.\nThe function should return nothing\
    \ if the input is an empty vector.\nThe function should return nothing if the\
    \ input is an empty matrix.\nThe function should return nothing if the input is\
    \ an empty dictionary.\nThe function should return nothing if the input is an\
    \ empty set.\nThe function should return nothing if the input is an empty tuple.\n\
    The function should return nothing if the input is an empty vector.\nThe function\
    \ should return nothing if the input is an empty matrix.\nThe function should\
    \ return nothing if the input is an empty dictionary.\nThe function should return\
    \ nothing if the input is an empty set.\nThe function should return nothing if\
    \ the input is an empty tuple.\nThe function should return nothing if the input\
    \ is an empty vector.\nThe function should return nothing if the input is an empty\
    \ matrix.\nThe function should return nothing if the input is an empty dictionary.\n\
    The function should return nothing if the input is an empty set.\nThe function\
    \ should return nothing if the input is an empty tuple.\nThe function should return\
    \ nothing if the input is an empty vector.\nThe function should return nothing\
    \ if the input is an empty matrix.\nThe function should return nothing if the\
    \ input is an empty dictionary.\nThe function should return nothing if the input\
    \ is an empty set.\nThe function should return nothing if the input is an empty\
    \ tuple.\nThe function should return nothing if the input is an empty vector.\n\
    The \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1s9unb7.jl:11\nin expression starting at\
    \ /tmp/tmpr1s9unb7.jl:11\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift+1:end]\n    digits = reverse(digits)\n    digits =\
    \ reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcg3xxp0.jl:13\nin expression starting at\
    \ /tmp/tmpgcg3xxp0.jl:13\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjop19wrr.jl:12\nin expression starting at\
    \ /tmp/tmpjop19wrr.jl:12\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    if shift > length(digits)\n        digits = reverse(digits)\n        shift\
    \ = shift - length(digits)\n    end\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9o3zofk.jl:15\nin expression starting at\
    \ /tmp/tmpa9o3zofk.jl:15\n"
  stdout: ''
  timestamp: 1659749047
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1n4mlts.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1n4mlts.jl:1\n\
    in expression starting at /tmp/tmp_1n4mlts.jl:1\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 2)\n\
    </cell>\n<text>\nExercise: Write a function that converts a string to a vector\
    \ of integers, one per character. \n    For example, given \"hello\", the function\
    \ should return [1,2,3,4,5,6,7,8,9].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib3duqzt.jl:12\nin expression starting at\
    \ /tmp/tmpib3duqzt.jl:12\n"
  stdout: ''
  timestamp: 1659749047
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:end])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpez6llenx.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpez6llenx.jl:1\n\
    in expression starting at /tmp/tmpez6llenx.jl:1\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 3)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 12)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 19)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 27)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 28)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 29)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgfc2s_f.jl:11\nin expression starting at\
    \ /tmp/tmprgfc2s_f.jl:11\n"
  stdout: ''
  timestamp: 1659749030
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyounmrtm.jl:11\nin expression starting at\
    \ /tmp/tmpyounmrtm.jl:11\n"
  stdout: ''
  timestamp: 1659749035
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[1:shift]) + reverse(x[shift+1:length(x)])\n\
    end\n</cell>\n<code language=julia-1.5>\ncircular_shift(12345, 2)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_m0zli1p.jl:11\nin expression starting at\
    \ /tmp/tmp_m0zli1p.jl:11\n"
  stdout: ''
  timestamp: 1659749047
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 3)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 6)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 7)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 8)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 9)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 10)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 11)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 12)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 13)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 14)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 15)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 16)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 17)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 18)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 19)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 20)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 21)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 22)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 23)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 24)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 25)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 26)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 27)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 28)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(1, 29)\n</cell>\n<code language=julia-1.5>\ncircular_shift(1, 30)\n\
    </cell>\n<code language=julia-1.5>\ncircular_shift(1, 31)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqfhi9gi.jl:11\nin expression starting at\
    \ /tmp/tmpuqfhi9gi.jl:11\n"
  stdout: ''
  timestamp: 1659749033
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n            \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    digits = digits(x)\n    shift = shift % length(digits)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 4)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789,\
    \ 6)\n</cell>\n<code language=julia-1.5>\ncircular_shift(123456789, 7)\n</cell>\n\
    <code language=julia-1.5>\ncircular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp561wlsbw.jl:13\nin expression starting at\
    \ /tmp/tmp561wlsbw.jl:13\n"
  stdout: ''
  timestamp: 1659749047
