language: jl
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum Pairs\nGiven a list of numbers, return a list of all pairs (a, b) where\
    \ a < b and pairs have the same sum.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc29cw84r.jl:20\nin expression starting at\
    \ /tmp/tmpc29cw84r.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum even numbers\
    \ in an array (Optional)\nWrite a function that takes in a list of integers and\
    \ returns the sum of all of the even elements that are in odd positions.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp946f552u.jl:15\nin expression starting at\
    \ /tmp/tmp946f552u.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(evens)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    </cell>\n<text>\nPart III. Sum All Numbers Disappeared in an Array\nGiven an array\
    \ of integers, find the sum of all of the numbers that do not appear in the array.\
    \ \nFor example, given [5, 8, 7, 1, 3] return 17.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswrryusn.jl:15\nin expression starting at\
    \ /tmp/tmpswrryusn.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48fbev4c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp48fbev4c.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum Pairs\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5q2zkjz.jl:15\nin expression starting at\
    \ /tmp/tmpa5q2zkjz.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n   \
    \ return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function can be defined recursively, which means it calls itself.\
    \ A recursive function can have one or more base cases. A base case is a case\
    \ where the function does not call itself. A recursive function can have one or\
    \ more recursive cases. A recursive case is a case where the function calls itself.\
    \ A recursive function can have one or more base cases and one or more recursive\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglnlbxkm.jl:16\nin expression starting at\
    \ /tmp/tmpglnlbxkm.jl:16\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(odd.+even)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given element appears in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj8_4b2a.jl:16\nin expression starting at\
    \ /tmp/tmpqj8_4b2a.jl:16\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    sum(odd)\n\
    end\n</cell>\n<text>\nPart B: Odd-Even Summation\nWrite a function that takes\
    \ a list of integers and returns the sum of all of the odd elements that are in\
    \ even positions.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5exnz68k.jl:16\nin expression starting at\
    \ /tmp/tmp5exnz68k.jl:16\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Even\
    \ Elements\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy8nfw6z.jl:19\nin expression starting at\
    \ /tmp/tmpsy8nfw6z.jl:19\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp702z5u8e.jl:19\nin expression starting at\
    \ /tmp/tmp702z5u8e.jl:19\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a non-empty list of integers, return the sum\
    \ of the squares of the odd integers. \nThe sum of the squares of the even integers\
    \ is 0. \nThe sum of an empty list is 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpef5d61vw.jl:16\nin expression starting at\
    \ /tmp/tmpef5d61vw.jl:16\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow let's use recursion to solve the problem of finding the sum\
    \ of all even numbers in a list. We'll start by writing a function that takes\
    \ in a list and returns the sum of the even numbers in that list. We'll then use\
    \ this function to solve the problem of finding the sum of all even numbers in\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxo9lgg3.jl:20\nin expression starting at\
    \ /tmp/tmplxo9lgg3.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@test solution([5, 8, 7, 1]) == 12\n\
    @test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart 2: Recursion\nNow\
    \ let's use recursion to solve the problem of finding the sum of all even numbers\
    \ in a list. We'll start by defining a function called sumEven. This function\
    \ will take in a list as an argument, and will return the sum of all even numbers\
    \ in the list. We'll then use recursion to solve the problem by calling sumEven\
    \ on every element in the list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwvsglo0.jl:19\nin expression starting at\
    \ /tmp/tmptwvsglo0.jl:19\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns a list of all numbers from 1 to n that are divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4papc_l2.jl:15\nin expression starting at\
    \ /tmp/tmp4papc_l2.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ call itself as many times as it wants. For example, consider the Fibonacci sequence\
    \ defined as:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8r1p78y.jl:19\nin expression starting at\
    \ /tmp/tmpt8r1p78y.jl:19\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the product of\
    \ all of the odd elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6bmfuaq.jl:15\nin expression starting at\
    \ /tmp/tmpj6bmfuaq.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have one or more base cases. A base case is where a recursive function\
    \ can stop calling itself and return a value.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5vhr7z8.jl:20\nin expression starting at\
    \ /tmp/tmpz5vhr7z8.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Game of Life\nIn this section, you will write your own version of the Game\
    \ of Life algorithm. Your algorithm should take in a square board and return a\
    \ bitboard that indicates when a cell has \"won\" or \"lost\" the game.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfb44x1m.jl:20\nin expression starting at\
    \ /tmp/tmpbfb44x1m.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(odd.+even)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function can be defined using an if statement that calls itself. This\
    \ can be done in Julia by defining a function with the function keyword.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6aie1c5r.jl:15\nin expression starting at\
    \ /tmp/tmp6aie1c5r.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<text>\nPart 3: Recursion\nRecursion is a powerful tool\
    \ for solving problems that involve repeating a problem until a base case is reached.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0l5ry3ro.jl:20\nin expression starting at\
    \ /tmp/tmp0l5ry3ro.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_zz8ui.jl:20\nin expression starting at\
    \ /tmp/tmpnz_zz8ui.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.0>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.0>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are less than or equal to\
    \ each other. \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqaz0xa5l.jl:15\nin expression starting at\
    \ /tmp/tmpqaz0xa5l.jl:15\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    evens_sum = sum(evens)\n\
    \    odds_sum = sum(odds)\n    \n    return evens_sum + odds_sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nNow that we've seen\
    \ how recursion works, let's see how we can implement it ourselves. We'll start\
    \ by writing a function that takes in a list of integers and returns the sum of\
    \ the odd elements that are in even positions.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1hp6fm4.jl:19\nin expression starting at\
    \ /tmp/tmpp1hp6fm4.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III: More on Vectors\n\
    Julia has many different types of vectors. In this notebook, we'll look at three\
    \ of them:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwh25v36.jl:19\nin expression starting at\
    \ /tmp/tmprwh25v36.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the product of the even numbers in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpri9k01dh.jl:15\nin expression starting at\
    \ /tmp/tmpri9k01dh.jl:15\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nPart III: Sum All Even Elements\n\
    Write a function that takes a list of integers and returns the sum of all of the\
    \ even elements that are in odd positions.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmltsfow6.jl:15\nin expression starting at\
    \ /tmp/tmpmltsfow6.jl:15\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    evensum = sum(evens)\n\
    \    oddsum = sum(odds)\n    \n    return evensum + oddsum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. This can make code easier to read and understand.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx348y04.jl:19\nin expression starting at\
    \ /tmp/tmpwx348y04.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Disappeared in an Array\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6omexxs.jl:20\nin expression starting at\
    \ /tmp/tmpv6omexxs.jl:20\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nPart 4\nWrite a function that takes in a string and returns\
    \ the number of words in the string. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f1npuah.jl:15\nin expression starting at\
    \ /tmp/tmp7f1npuah.jl:15\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we've seen the basics of recursion, let's see how we can use it to solve\
    \ a problem that doesn't require a loop!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3m0fl6k2.jl:19\nin expression starting at\
    \ /tmp/tmp3m0fl6k2.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqvkrhhd5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpqvkrhhd5.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Game of Life\nIn this section, we will implement the Game of Life using\
    \ Julia's built-in data structures.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q9im_58.jl:20\nin expression starting at\
    \ /tmp/tmp7q9im_58.jl:20\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all of the odd elements that are in even positions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb3vfeq4.jl:20\nin expression starting at\
    \ /tmp/tmpcb3vfeq4.jl:20\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n   \
    \ return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ be defined recursively, or iteratively. A recursive function calls itself repeatedly\
    \ until it reaches a base case. Recursive functions are often easier to understand\
    \ than iterative functions, but are often less efficient.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvg55jhak.jl:16\nin expression starting at\
    \ /tmp/tmpvg55jhak.jl:16\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq8teknsc.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpq8teknsc.jl:21\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8teknsc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8teknsc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq8teknsc.jl:22\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8teknsc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8teknsc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq8teknsc.jl:23\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8teknsc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8teknsc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq8teknsc.jl:24\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8teknsc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8teknsc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq8teknsc.jl:26\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by using the function keyword.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplu_r7llm.jl:19\nin expression starting at\
    \ /tmp/tmplu_r7llm.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp24br2tb.jl:19\nin expression starting at\
    \ /tmp/tmpp24br2tb.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@test solution([5, 8, 7, 1]) == 12\n\
    @test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem 7\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jeyzuf1.jl:19\nin expression starting at\
    \ /tmp/tmp2jeyzuf1.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(filter(x -> x % 2 != 0, lst))\n    return odd\
    \ + sum(evens)\nend\n</cell>\n<code language=julia-1.3>\n@time solution([5, 8,\
    \ 7, 1])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the product\
    \ of the even elements in a list. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao6ijwm6.jl:15\nin expression starting at\
    \ /tmp/tmpao6ijwm6.jl:15\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the number of even and odd numbers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxa_5gfh.jl:16\nin expression starting at\
    \ /tmp/tmpmxa_5gfh.jl:16\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.0>\n@time solution(vec(primes))\n\
    </cell>\n<text>\nPart 2\nThe second problem involves finding the sum of all the\
    \ even numbers that are less than a specified value.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hm1i35s.jl:15\nin expression starting at\
    \ /tmp/tmp2hm1i35s.jl:15\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. This can\
    \ be done in Julia by using the function keyword.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjwj6iu8.jl:20\nin expression starting at\
    \ /tmp/tmpvjwj6iu8.jl:20\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x%2==0,\
    \ lst)]\n    odd = lst[findall(x -> x%2==1, lst)]\n    return sum(odd)+sum(even)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<text>\n\
    Part 2\nWrite a function that takes a list of numbers and returns the product\
    \ of all of the numbers in the list. Do not use loops (for, while, or iterate).\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94m64_p4.jl:15\nin expression starting at\
    \ /tmp/tmp94m64_p4.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    Recursion is when a function calls itself. This can be done in Julia by using\
    \ the function call operator (::).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee_ppfy_.jl:19\nin expression starting at\
    \ /tmp/tmpee_ppfy_.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Below a Given Number\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslucqaed.jl:20\nin expression starting at\
    \ /tmp/tmpslucqaed.jl:20\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Palindrome Partitioning\nGiven a string, find all possible palindrome partitions\
    \ of that string.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp393096v3.jl:15\nin expression starting at\
    \ /tmp/tmp393096v3.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow let's see how we can use recursion to solve this problem.\
    \ We'll start by writing a function that calculates the factorial of a number.\
    \ We'll then use recursion to solve the problem by calling the function with different\
    \ numbers. We'll then compare our results to those from previous parts to make\
    \ sure we got it right.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_sgge_o.jl:15\nin expression starting at\
    \ /tmp/tmp0_sgge_o.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the product of the even elements\
    \ in a list. \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ebgo1rw.jl:16\nin expression starting at\
    \ /tmp/tmp7ebgo1rw.jl:16\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of inputs:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh5xtwn9.jl:19\nin expression starting at\
    \ /tmp/tmpbh5xtwn9.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be useful in many\
    \ situations, especially in problems where you need to perform an operation on\
    \ all elements of a collection, but also need to keep track of some state between\
    \ calls.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysghs7_8.jl:19\nin expression starting at\
    \ /tmp/tmpysghs7_8.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa258niaw.jl:19\nin expression starting at\
    \ /tmp/tmpa258niaw.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(evens) + sum(odds)\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuc2r3pjz.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpuc2r3pjz.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:21\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:22\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 388 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:23\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:24\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 14 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2]"
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a non-empty list of integers, return a list\
    \ of all pairs (x, y) where x is equal to the sum of the squares of all the numbers\
    \ in the list and y is equal to the sum of the squares of the numbers in the list\
    \ except for x and y where they are equal.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oapbyx4.jl:15\nin expression starting at\
    \ /tmp/tmp1oapbyx4.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Palindrome Partitioning\nGiven a string, return a list of all possible\
    \ palindrome partitioning of that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pl35rj3.jl:15\nin expression starting at\
    \ /tmp/tmp9pl35rj3.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum square difference\n\
    Given a non-empty list of integers, return a list of pairs of integers whose sum\
    \ is equal to the given number. \n    \n    Each pair should consist of a pair\
    \ of integers describing the range of the sum.\n    \n    For example, given [4,\
    \ 6, -2, -5, 7, 3], you should return [(-2, 2), (-5, 3)].\n    \n    You can assume\
    \ that each input would have exactly one solution, and you may not use the same\
    \ element twice.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5i3w87d.jl:15\nin expression starting at\
    \ /tmp/tmpv5i3w87d.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a list of numbers, return a list of all pairs of numbers whose sum is equal\
    \ to a given target.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_wd_2n3.jl:15\nin expression starting at\
    \ /tmp/tmp0_wd_2n3.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes in a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeoi_vsrb.jl:15\nin expression starting at\
    \ /tmp/tmpeoi_vsrb.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(evens[2:end])\n    return odd\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg_ivygp0.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpg_ivygp0.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ivygp0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ivygp0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg_ivygp0.jl:21\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ivygp0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ivygp0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg_ivygp0.jl:22\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 24 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ivygp0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ivygp0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg_ivygp0.jl:23\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ivygp0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ivygp0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg_ivygp0.jl:24\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 12 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum Pairs\nGiven a list of numbers, return a list of all pairs whose sum\
    \ is equal to a given target.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmojxww0o.jl:15\nin expression starting at\
    \ /tmp/tmpmojxww0o.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns a list of all numbers from 1 to n that\
    \ are divisible by 3. \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuo1zqhp.jl:15\nin expression starting at\
    \ /tmp/tmpiuo1zqhp.jl:15\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@test solution([5, 8,\
    \ 7, 1]) == 12\n@test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem\
    \ 8\nWrite a function that returns the product of the even elements in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp118h895e.jl:20\nin expression starting at\
    \ /tmp/tmp118h895e.jl:20\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Vectorized\
    \ Solutions\nThe previous sections showed how we can loop over each element of\
    \ a list and perform some operation on it. We can also vectorize this operation\
    \ by applying the same operation to multiple elements at once.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93rpuzcd.jl:19\nin expression starting at\
    \ /tmp/tmp93rpuzcd.jl:19\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. This can\
    \ be done in Julia by defining a function with one argument (a list) and then\
    \ calling it with the next element of the list as the argument. For example, consider\
    \ the following function that returns the factorial of a number:\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7xpth6q.jl:16\nin expression starting at\
    \ /tmp/tmpi7xpth6q.jl:16\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ list of integers and returns the product of all of the numbers in the list.\
    \ Do not use the reduce function.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gj6nm_n.jl:15\nin expression starting at\
    \ /tmp/tmp1gj6nm_n.jl:15\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(odd.+even)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpd7ogbieq.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpd7ogbieq.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 37 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd7ogbieq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd7ogbieq.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpd7ogbieq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, 3, 3, 3, 3]) == 9\n  DimensionMismatch(\"arrays could not be broadcast\
    \ to a common size; got a dimension with lengths 5 and 0\")\n  Stacktrace:\n \
    \   [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] solution(lst::Vector{Int64})\n      @ Main /tmp/tmpd7ogbieq.jl:13\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpd7ogbieq.jl:21 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpd7ogbieq.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpd7ogbieq.jl:22\n  Expression: candidate([30, 13, 24,\
    \ 321]) == 0\n   Evaluated: 388 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd7ogbieq.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd7ogbieq.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpd7ogbieq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5, 9]) == 5\n  DimensionMismatch"
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem 3\nA palindromic\
    \ number reads the same both ways. The largest palindrome made from the product\
    \ of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfsbf9ri.jl:19\nin expression starting at\
    \ /tmp/tmpjfsbf9ri.jl:19\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function is one that calls itself repeatedly until it reaches a base case. Base\
    \ cases are the simplest cases, where a recursive function stops calling itself\
    \ and returning a value.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyskp0gr.jl:20\nin expression starting at\
    \ /tmp/tmphyskp0gr.jl:20\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the even elements in a list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69fzgdti.jl:20\nin expression starting at\
    \ /tmp/tmp69fzgdti.jl:20\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x\
    \ -> x in even, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a vector of integers, find the sum of square\
    \ differences between every pair of consecutive elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzws8sp73.jl:15\nin expression starting at\
    \ /tmp/tmpzws8sp73.jl:15\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@test solution([5, 8,\
    \ 7, 1]) == 12\n@test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem\
    \ 7\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vl1lqki.jl:20\nin expression starting at\
    \ /tmp/tmp1vl1lqki.jl:20\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa258niaw.jl:19\nin expression starting at\
    \ /tmp/tmpa258niaw.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqvkrhhd5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpqvkrhhd5.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvkrhhd5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvkrhhd5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqvkrhhd5.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(odd.take(even))\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1]) \n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3]) \n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the product of all numbers in a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08yy_l2m.jl:15\nin expression starting at\
    \ /tmp/tmp08yy_l2m.jl:15\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(odds[end-1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99iozkeo.jl:16\nin expression starting at\
    \ /tmp/tmp99iozkeo.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.3>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Even Elements\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwc40ccs6.jl:20\nin expression starting at\
    \ /tmp/tmpwc40ccs6.jl:20\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum Pairs\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2ta38ot.jl:20\nin expression starting at\
    \ /tmp/tmpj2ta38ot.jl:20\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n@test solution([5, 8, 7, 1]) == 12\n\
    @test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart 3: Recursion\nRecursion\
    \ is a powerful tool for solving problems that involve repeating a process over\
    \ and over again. For example, if we wanted to find the factorial of a number,\
    \ we could write a function that would call itself until it reached the number\
    \ 1, and then return the number itself. Here is an example of a recursive function\
    \ that computes the factorial of a number:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5qqouvm.jl:19\nin expression starting at\
    \ /tmp/tmpc5qqouvm.jl:19\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by defining a function with the keyword recursive and calling it with the function\
    \ name as a parameter. For example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojt0wggx.jl:19\nin expression starting at\
    \ /tmp/tmpojt0wggx.jl:19\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the product of the even elements of an input\
    \ list of integers.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkiragtzf.jl:20\nin expression starting at\
    \ /tmp/tmpkiragtzf.jl:20\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nProblem 8\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given condition. For example, the\
    \ number of elements in the list [2, 3, 5, 7, 11, 13] that are greater than 10\
    \ are 5. If a condition isn't provided, it should return 0 instead.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt20aoqm4.jl:15\nin expression starting at\
    \ /tmp/tmpt20aoqm4.jl:15\n"
  stdout: ''
  timestamp: 1659748348
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the sum of the numbers in the list provided as an argument.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwj5pn3be.jl:15\nin expression starting at\
    \ /tmp/tmpwj5pn3be.jl:15\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III: Palindrome Partitioning\nIn this problem, you will write a function that\
    \ takes in a string and returns a list of palindrome partitions. Each partition\
    \ is represented as a list of characters, where each character is either an 'a'\
    \ or an 'e'.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaktaq1r8.jl:16\nin expression starting at\
    \ /tmp/tmpaktaq1r8.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all the odd digits in a number\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphm6o4fep.jl:16\nin expression starting at\
    \ /tmp/tmphm6o4fep.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function can be defined recursively, which means\
    \ it calls itself. A recursive function has two parts:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqy_vuuw.jl:16\nin expression starting at\
    \ /tmp/tmpfqy_vuuw.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48fbev4c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp48fbev4c.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nProblem 8\nWrite a function that returns the\
    \ number of times a given number appears in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jvf8_37.jl:15\nin expression starting at\
    \ /tmp/tmp8jvf8_37.jl:15\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a non-empty list of integers, return the sum\
    \ of the squares of the odd integers. \nThe sum is computed according to the formula:\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplv47sx39.jl:16\nin expression starting at\
    \ /tmp/tmplv47sx39.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the product of the even numbers in a\
    \ list. \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqew0mab.jl:15\nin expression starting at\
    \ /tmp/tmpjqew0mab.jl:15\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(filter(x -> x % 2 != 0, lst))\n    return odd\
    \ + evens\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III.\
    \ Sum all the even numbers in a list\nGiven a non-empty list of integers, return\
    \ a new list containing all of the even numbers from the original list. \n   \
    \ \n    \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizc8_tcb.jl:15\nin expression starting at\
    \ /tmp/tmpizc8_tcb.jl:15\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n   \
    \ return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a vector of numbers, calculate the sum of the squares of the\
    \ numbers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiokv37om.jl:16\nin expression starting at\
    \ /tmp/tmpiokv37om.jl:16\n"
  stdout: ''
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. This can\
    \ be useful in many situations. For example, consider the Fibonacci sequence defined\
    \ as:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprld25gn6.jl:20\nin expression starting at\
    \ /tmp/tmprld25gn6.jl:20\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    Recursion is a powerful tool for solving problems that involve repeating a problem\
    \ with smaller inputs. For example, if we want to find the sum of all elements\
    \ in a list, we can write a function that calls itself to solve the problem for\
    \ smaller inputs. Here is an example of a recursive function that sums the elements\
    \ of an input list:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgax39wr1.jl:19\nin expression starting at\
    \ /tmp/tmpgax39wr1.jl:19\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48fbev4c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp48fbev4c.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 != 0\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all the even numbers in a list\nGiven a non-empty list of integers,\
    \ return a list of all even numbers in the list. \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s4j_pwd.jl:20\nin expression starting at\
    \ /tmp/tmp3s4j_pwd.jl:20\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp24br2tb.jl:19\nin expression starting at\
    \ /tmp/tmpp24br2tb.jl:19\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ product of all even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk53oq28l.jl:15\nin expression starting at\
    \ /tmp/tmpk53oq28l.jl:15\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<text>\nPart III: Sum all the even numbers in a list\nWrite a function\
    \ that takes a list of integers and returns the sum of all the even numbers in\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9xce83f.jl:15\nin expression starting at\
    \ /tmp/tmpv9xce83f.jl:15\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by using the function keyword.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2cg1xok.jl:19\nin expression starting at\
    \ /tmp/tmpr2cg1xok.jl:19\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Except Self\nGiven a non-empty vector of numbers, return\
    \ a vector of the sum of all of the numbers in the vector except the number itself.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtqkbsgm.jl:16\nin expression starting at\
    \ /tmp/tmpgtqkbsgm.jl:16\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph45zq7ww.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmph45zq7ww.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 7 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph45zq7ww.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph45zq7ww.jl:19\ntest set: Test\
    \ Failed at /tmp/tmph45zq7ww.jl:23\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 0 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph45zq7ww.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph45zq7ww.jl:19\ntest set: Test\
    \ Failed at /tmp/tmph45zq7ww.jl:24\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph45zq7ww.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph45zq7ww.jl:19\ntest set: Test\
    \ Failed at /tmp/tmph45zq7ww.jl:25\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 0 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph45zq7ww.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph45zq7ww.jl:19\ntest set: Test\
    \ Failed at /tmp/tmph45zq7ww.jl:26\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 13 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro"
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(odd.+even)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the product of all the numbers in a list. Except the number 1, which is 1\xD7\
    1=1. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdjvbl_4.jl:16\nin expression starting at\
    \ /tmp/tmpzdjvbl_4.jl:16\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have two types of inputs: base cases and recursive cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcik0m6sn.jl:16\nin expression starting at\
    \ /tmp/tmpcik0m6sn.jl:16\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be useful in many\
    \ situations, such as solving problems such as fibonacci numbers. In this section,\
    \ we will see how to use recursion to solve problems such as fibonacci numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5g_fa1z.jl:19\nin expression starting at\
    \ /tmp/tmpf5g_fa1z.jl:19\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptp5zp1wk.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptp5zp1wk.jl:21\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp5zp1wk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp5zp1wk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptp5zp1wk.jl:22\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp5zp1wk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp5zp1wk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptp5zp1wk.jl:23\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp5zp1wk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp5zp1wk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptp5zp1wk.jl:24\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp5zp1wk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp5zp1wk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptp5zp1wk.jl:26\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <text>\nProblem 9\nWrite a function that returns the number of times a given substring\
    \ appears in a given string.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yh99ovz.jl:15\nin expression starting at\
    \ /tmp/tmp6yh99ovz.jl:15\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa258niaw.jl:19\nin expression starting at\
    \ /tmp/tmpa258niaw.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow that we have an understanding of what a recursive function\
    \ is, let's see how we can implement it ourselves. We'll start by writing a function\
    \ that can add up all the numbers in a list:\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4oagcjn.jl:20\nin expression starting at\
    \ /tmp/tmpx4oagcjn.jl:20\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa258niaw.jl:19\nin expression starting at\
    \ /tmp/tmpa258niaw.jl:19\n"
  stdout: ''
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow that we've seen the basics of recursion, let's see how we\
    \ can use it to solve problems more complicated than \"find the sum of all even\
    \ numbers in a list\".  For this problem, we'll need to use recursion to solve\
    \ the problem of \"find the sum of all even numbers in a list\".  Let's start\
    \ with a simple case:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxi9obgd1.jl:20\nin expression starting at\
    \ /tmp/tmpxi9obgd1.jl:20\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns a list of all numbers from 1 to n that are divisible by 3 or 5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlrqsd8y.jl:15\nin expression starting at\
    \ /tmp/tmprlrqsd8y.jl:15\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns a list of all numbers from 1 to n that are divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7nt9qv6.jl:16\nin expression starting at\
    \ /tmp/tmpr7nt9qv6.jl:16\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Except Self\nWrite a function that returns the sum of all\
    \ the numbers in a vector, except the number itself, which you would get if you\
    \ added all the numbers in the vector together.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cqxenh4.jl:20\nin expression starting at\
    \ /tmp/tmp1cqxenh4.jl:20\n"
  stdout: ''
  timestamp: 1659748350
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nRecursion\
    \ is a powerful tool for solving problems that involve repeating a problem until\
    \ a base case is reached.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1rv7bz4.jl:15\nin expression starting at\
    \ /tmp/tmpj1rv7bz4.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum even numbers from 1 to 100 (without loop)\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfs0210ip.jl:16\nin expression starting at\
    \ /tmp/tmpfs0210ip.jl:16\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ product of all of the numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4rst7id.jl:15\nin expression starting at\
    \ /tmp/tmpo4rst7id.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.3>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<text>\nPart 4: Recursion\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw02a25e.jl:16\nin expression starting at\
    \ /tmp/tmpcw02a25e.jl:16\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(odd\
    \ + even)\nend\n</cell>\n<text>\nPart 4\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96w_i57d.jl:15\nin expression starting at\
    \ /tmp/tmp96w_i57d.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprx0bt_4a.jl:20\nin expression starting at\
    \ /tmp/tmprx0bt_4a.jl:20\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_zz8ui.jl:20\nin expression starting at\
    \ /tmp/tmpnz_zz8ui.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48fbev4c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp48fbev4c.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48fbev4c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48fbev4c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48fbev4c.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem 3\n\
    A perfect number is a number for which the sum of its proper divisors is exactly\
    \ equal to the number. For example, the sum of the proper divisors of 28 would\
    \ be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpswl31l.jl:19\nin expression starting at\
    \ /tmp/tmpxpswl31l.jl:19\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all the even-valued elements in a list\nWrite a function that returns\
    \ the sum of all the even-valued elements in a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxx_3zg_.jl:20\nin expression starting at\
    \ /tmp/tmpxxx_3zg_.jl:20\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string is the concatenation of all\
    \ the strings in the original vector, except the string \"and\" which concatenates\
    \ all the strings in the original vector except the string \"and\".\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp028j1nwi.jl:15\nin expression starting at\
    \ /tmp/tmp028j1nwi.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ can be defined recursively, which means it calls itself. This can be done by\
    \ defining a function with a name that starts with an uppercase letter. For example,\
    \ the following function calls itself to compute the factorial:\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7qasqzy.jl:16\nin expression starting at\
    \ /tmp/tmpk7qasqzy.jl:16\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all numbers in a list that are less than 100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4o88og5.jl:20\nin expression starting at\
    \ /tmp/tmpy4o88og5.jl:20\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Palindrome Partitioning\nThe palindrome partitioning problem is one where\
    \ you have a string and you want to split it into two halves while still preserving\
    \ the original string structure. For example, given \"aab\", return [\"aa\", \"\
    ab\"].\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsteeqabx.jl:16\nin expression starting at\
    \ /tmp/tmpsteeqabx.jl:16\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function is\
    \ one that calls itself over and over again until it reaches a base case. For\
    \ example, a recursive function that calculates the factorial of a number might\
    \ look something like this:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vrxoyeg.jl:15\nin expression starting at\
    \ /tmp/tmp1vrxoyeg.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1]) \n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3,\
    \ 3]) \n</cell>\n<text>\nPart 2\nThe second problem involves finding the sum of\
    \ the numbers in the Fibonacci sequence that are less than a million. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonacci sequence and we want to find the sum\
    \ of all the numbers in the Fibonacci sequence that are less than $n$. More formally,\
    \ we are given $n$ numbers in the Fibonac\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79qpwfrj.jl:15\nin expression starting at\
    \ /tmp/tmp79qpwfrj.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all even numbers in a vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21zv39cp.jl:20\nin expression starting at\
    \ /tmp/tmp21zv39cp.jl:20\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nA recursive function is a function that calls itself. This can\
    \ be done in Julia by using the function keyword.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjwj6iu8.jl:20\nin expression starting at\
    \ /tmp/tmpvjwj6iu8.jl:20\n"
  stdout: ''
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum Pairs\nGiven a list of numbers,\
    \ return a list of all pairs (a, b) where a < b and a + b is in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmy_ryr42.jl:16\nin expression starting at\
    \ /tmp/tmpmy_ryr42.jl:16\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(lst[findall(x -> x % 2 != 0, lst)])\n    return\
    \ odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Palindrome Partitioning\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj08swrd0.jl:15\nin expression starting at\
    \ /tmp/tmpj08swrd0.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ number of elements in a list that satisfy a predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dovipx_.jl:15\nin expression starting at\
    \ /tmp/tmp8dovipx_.jl:15\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp22pcg4mm.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp22pcg4mm.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22pcg4mm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22pcg4mm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp22pcg4mm.jl:21\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22pcg4mm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22pcg4mm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp22pcg4mm.jl:22\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 388 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22pcg4mm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22pcg4mm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp22pcg4mm.jl:23\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22pcg4mm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22pcg4mm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp22pcg4mm.jl:24\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 14 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2]"
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: More on loops\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ete3peq.jl:20\nin expression starting at\
    \ /tmp/tmp8ete3peq.jl:20\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of inputs: base cases and recursive cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5523aoz6.jl:19\nin expression starting at\
    \ /tmp/tmp5523aoz6.jl:19\n"
  stdout: ''
  timestamp: 1659748351
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Disappeared in an Array\nGiven a sorted array of integers,\
    \ find the sum of all the numbers appearing more than half the time.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5135ph1.jl:15\nin expression starting at\
    \ /tmp/tmpy5135ph1.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(odd.+even)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Finding the first missing positive integer\nGiven a sorted array of integers,\
    \ find the first missing positive integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5021ldr.jl:16\nin expression starting at\
    \ /tmp/tmpj5021ldr.jl:16\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(evens[2:end])\n    return odd\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nThe previous problem\
    \ was solved using an iterative approach. Now let's see how we could solve this\
    \ problem using recursion.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjmxjio3.jl:15\nin expression starting at\
    \ /tmp/tmphjmxjio3.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow let's see how we can use recursion to solve this problem.\
    \ We'll start by writing a function that can compute the factorial of a number.\
    \ We'll then use that function to write a function that computes the sum of all\
    \ odd integers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lty4f95.jl:20\nin expression starting at\
    \ /tmp/tmp2lty4f95.jl:20\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2==0\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by defining a function with the keyword recursive and calling it with the function\
    \ name followed by the arguments that should be passed to the function as its\
    \ arguments.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcl0ns9q.jl:19\nin expression starting at\
    \ /tmp/tmpgcl0ns9q.jl:19\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have one or more base cases. A base case is a case where the function\
    \ does not call itself. A recursive function can have one or more recursive calls.\
    \ A recursive call can have one or more base cases. A recursive call can have\
    \ one or more recursive calls. A recursive call can have one or more base cases.\
    \ A recursive call can have one or more recursive calls. A recursive call can\
    \ have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more base\
    \ cases. A recursive call can have one or more recursive calls. A recursive call\
    \ can have one or more base cases. A recursive call can have one or more recursive\
    \ calls. A recursive call can have one or more base cases. A recursive call can\
    \ have one or more recursive calls. A recursive call can have one or more \nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hmd_yyz.jl:20\nin expression starting at\
    \ /tmp/tmp1hmd_yyz.jl:20\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers Disappeared\
    \ in an Array\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16193u6x.jl:15\nin expression starting at\
    \ /tmp/tmp16193u6x.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of elements in a list that satisfy a predicate.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcutfuj4y.jl:15\nin expression starting at\
    \ /tmp/tmpcutfuj4y.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. This can be done in Julia by defining a function\
    \ with the function keyword.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ueou3j8.jl:15\nin expression starting at\
    \ /tmp/tmp_ueou3j8.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    Recursion is when a function calls itself. In Julia, this is done by defining\
    \ a function with the keyword function followed by the name of the function, and\
    \ a colon to indicate the end of the function definition.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_55zr10.jl:19\nin expression starting at\
    \ /tmp/tmpp_55zr10.jl:19\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all the even numbers in a vector\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1856uq2.jl:15\nin expression starting at\
    \ /tmp/tmpx1856uq2.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all the even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp174hfso7.jl:15\nin expression starting at\
    \ /tmp/tmp174hfso7.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times the value 1 appears in\
    \ a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwcytjyx9.jl:20\nin expression starting at\
    \ /tmp/tmpwcytjyx9.jl:20\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nProblem 8\nWrite a function that returns the\
    \ product of all of the odd elements in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_kt79e4.jl:16\nin expression starting at\
    \ /tmp/tmpd_kt79e4.jl:16\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ a given substring appears in a given string.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphsrwxafs.jl:15\nin expression starting at\
    \ /tmp/tmphsrwxafs.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III: Recursion\nRecursion is one of the most important and most important concepts\
    \ in programming. It is a way of breaking down problems into smaller pieces and\
    \ solving them one at a time. Recursion is often the most efficient way to solve\
    \ a problem, but there are other ways to solve the same problem.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvit24de.jl:20\nin expression starting at\
    \ /tmp/tmpcvit24de.jl:20\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens)\
    \ + sum(odds)\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9st_3551.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp9st_3551.jl:21\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9st_3551.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9st_3551.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9st_3551.jl:22\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9st_3551.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9st_3551.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9st_3551.jl:23\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 388 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9st_3551.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9st_3551.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9st_3551.jl:24\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9st_3551.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9st_3551.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9st_3551.jl:25\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 14 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2]"
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all odd digits in a number\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nm30ggb.jl:20\nin expression starting at\
    \ /tmp/tmp9nm30ggb.jl:20\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkedpz_oq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkedpz_oq.jl:25\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:26\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:27\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:28\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkedpz_oq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkedpz_oq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpkedpz_oq.jl:30\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748347
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x%2\
    \ == 0, lst)]\n    odd = lst[findall(x -> x%2 != 0, lst)]\n    \n    return sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array\nGiven a sorted array of integers, find the sum of all\
    \ numbers appearing more than half the time.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk64gtldg.jl:16\nin expression starting at\
    \ /tmp/tmpk64gtldg.jl:16\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x%2\
    \ == 0, lst)]\n    odd = lst[findall(x -> x%2 != 0, lst)]\n    \n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Numbers Disappeared in an Array\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhi1p2k7.jl:16\nin expression starting at\
    \ /tmp/tmpjhi1p2k7.jl:16\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<text>\nProblem 8\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlsqhf66.jl:15\nin expression starting at\
    \ /tmp/tmphlsqhf66.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(odd.+even)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the odd numbers in that vector. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfzni7iv.jl:15\nin expression starting at\
    \ /tmp/tmpjfzni7iv.jl:15\n"
  stdout: ''
  timestamp: 1659748352
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    \n    sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of inputs: base cases and recursive cases. Base cases occur when\
    \ the function has finished its task and is ready to accept new inputs. Recursive\
    \ cases occur when the function has finished its task and is ready to accept new\
    \ inputs, but it needs to make use of one or more of the functions it called before\
    \ it can do so. For example, consider the Fibonacci sequence defined recursively\
    \ as follows:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph18j773d.jl:16\nin expression starting at\
    \ /tmp/tmph18j773d.jl:16\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = sum(x -> x % 2 == 1, lst)\n    return odd + sum(x\
    \ -> x in evens, lst)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a vector of numbers, compute the sum of the\
    \ squares of the numbers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyi54gjt.jl:15\nin expression starting at\
    \ /tmp/tmppyi54gjt.jl:15\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: More on functions\n\
    Now that we've seen how to use loops to solve problems, let's see how we can use\
    \ Julia's functional programming tools to solve the same problems.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay81iwgf.jl:19\nin expression starting at\
    \ /tmp/tmpay81iwgf.jl:19\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(evens) + sum(odds)\nend\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuc2r3pjz.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpuc2r3pjz.jl:20\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:21\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:22\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 388 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:23\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuc2r3pjz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuc2r3pjz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpuc2r3pjz.jl:24\n  Expression: candidate([2, 4, 8]) == 0\n\
    \   Evaluated: 14 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2]"
  timestamp: 1659748349
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum all numbers in a range\nGiven a positive integer $N$, return $N$ if\
    \ it is evenly divisible by 3, otherwise return the sum of all numbers from 1\
    \ to $N$ that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bzgj2mt.jl:20\nin expression starting at\
    \ /tmp/tmp5bzgj2mt.jl:20\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum even numbers in a vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh_e82ew.jl:15\nin expression starting at\
    \ /tmp/tmpwh_e82ew.jl:15\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III: Recursion\n\
    A recursive function is a function that calls itself. This can be very useful\
    \ in many situations. For example, consider the Fibonacci sequence defined as:\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3q188aw.jl:19\nin expression starting at\
    \ /tmp/tmpz3q188aw.jl:19\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ II: Recursion\nNow that we've seen how recursion works, let's see how we can\
    \ use it to solve a problem that doesn't require a loop. Let's say we want to\
    \ find the sum of all even numbers in a list. One way to do this is with a loop:\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwmp_epl.jl:20\nin expression starting at\
    \ /tmp/tmpxwmp_epl.jl:20\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_zz8ui.jl:20\nin expression starting at\
    \ /tmp/tmpnz_zz8ui.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Except Self\nWrite a function that returns the sum of all integers except the\
    \ number itself, if it is even.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhcodslp.jl:19\nin expression starting at\
    \ /tmp/tmpkhcodslp.jl:19\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds) +\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum square difference\nGiven a non-empty list of integers, return a list\
    \ of pairs of integers whose sum is equal to the given number. \n    \n    Each\
    \ pair should consist of a pair of integers describing the range of the sum.\n\
    \    \n    For example, given [4, 8, 15, 16, 23, 42], you should return [[0, 3],\
    \ [4, 9]].\n    \n    You can assume that the given numbers will all be unique.\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpvh4bcr.jl:15\nin expression starting at\
    \ /tmp/tmpwpvh4bcr.jl:15\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    The previous problem was solved using loops. Now, let's see how we can solve this\
    \ problem using recursion.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefpy8y6k.jl:15\nin expression starting at\
    \ /tmp/tmpefpy8y6k.jl:15\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n   \
    \ return sum(filter(x -> x % 2 != 0, odds)) + sum(filter(x -> x % 2 == 0, evens))\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the product of\
    \ all elements in a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupcs162s.jl:16\nin expression starting at\
    \ /tmp/tmpupcs162s.jl:16\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a vector of integers and returns a new vector where each element is the\
    \ sum of the elements in the original vector except the element at that index.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2j7fjz8.jl:15\nin expression starting at\
    \ /tmp/tmpu2j7fjz8.jl:15\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a vector of integers, return a new vector where each element is the sum\
    \ of the two numbers directly before it in the original vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoy1wqtp1.jl:15\nin expression starting at\
    \ /tmp/tmpoy1wqtp1.jl:15\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart II: Recursion\n\
    The previous problem was a little bit more challenging than the previous ones.\
    \ Here we go a little bit more challenging, and we will be using recursion to\
    \ solve it.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoowm6opa.jl:15\nin expression starting at\
    \ /tmp/tmpoowm6opa.jl:15\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ftt8_v3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1ftt8_v3.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ftt8_v3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ftt8_v3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1ftt8_v3.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659748346
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum\
    \ all the even numbers in a list\nWrite a function that returns the sum of all\
    \ the even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt5sf7ud.jl:19\nin expression starting at\
    \ /tmp/tmpbt5sf7ud.jl:19\n"
  stdout: ''
  timestamp: 1659748353
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum Pairs\nGiven a collection\
    \ of numbers, return a new collection of numbers where each pair of numbers is\
    \ the sum of the two original numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fuxsdlo.jl:16\nin expression starting at\
    \ /tmp/tmp5fuxsdlo.jl:16\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_zz8ui.jl:20\nin expression starting at\
    \ /tmp/tmpnz_zz8ui.jl:20\n"
  stdout: ''
  timestamp: 1659748345
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 != 0\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqczfbxu_.jl:20\nin expression starting at\
    \ /tmp/tmpqczfbxu_.jl:20\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the product of the even elements of a list of numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztliwl9y.jl:19\nin expression starting at\
    \ /tmp/tmpztliwl9y.jl:19\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart III. Sum all even\
    \ numbers in a vector\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpai362g7u.jl:19\nin expression starting at\
    \ /tmp/tmpai362g7u.jl:19\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have one or more base cases. A base case is a case where the function\
    \ does not call itself recursively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpor0ay2dr.jl:15\nin expression starting at\
    \ /tmp/tmpor0ay2dr.jl:15\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum Pairs\nGiven a list of numbers, return a new list containing all the\
    \ pairs of numbers (i, j)\nsuch that i < j and abs(i - j) <= k. \nFor example,\
    \ given [5, 7, 7, 8, 10] and k = 2, return [5, 7].\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh8dqw66.jl:16\nin expression starting at\
    \ /tmp/tmpjh8dqw66.jl:16\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the product of the even numbers in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm_2_z9r.jl:16\nin expression starting at\
    \ /tmp/tmpnm_2_z9r.jl:16\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nPart\
    \ III. Sum All Odd Elements\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw262ehbd.jl:20\nin expression starting at\
    \ /tmp/tmpw262ehbd.jl:20\n"
  stdout: ''
  timestamp: 1659748354
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
    \ 8, 7, 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\
    \nfunction solution(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@test solution([5, 8, 7, 1]) == 12\n\
    @test solution([3, 3, 3, 3, 3]) == 9\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the product of all of the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8ezbdwm.jl:19\nin expression starting at\
    \ /tmp/tmpp8ezbdwm.jl:19\n"
  stdout: ''
  timestamp: 1659748354
