name: HumanEval_15_string_sequence
language: jl
prompt: "\"\"\" Return a string containing space-delimited numbers starting from 0\
  \ upto n inclusive.\n            \"\"\"\nfunction string_sequence(n::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
  \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0\
  \ 1 2 3 4 5 6 7 8 9 10\")\nend\n"
completions: ["    \n    string_sequence = String()\n    \n    for i = 1:n\n     \
    \   string_sequence = string_sequence + String(i)\n    end\n    \n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ containing all the characters in that string in alphabetical order.", "    string_seq\
    \ = \"\"\n    for i in 0:n-1\n        string_seq = string_seq + string(i)\n  \
    \  end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.0>", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq,i)\n    end\n    return join(\" \",string_seq)\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_", "    string_sequence = \"\"\n  \
    \  for i = 1:n\n        string_sequence = string_sequence + string(i)\n    end\n\
    \    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of occurrences of the character 'a' in the string.", "  \
    \  string_seq = String[]\n    for i = 1:n\n        push!(string_seq, string(i))\n\
    \    end\n    return join(\" \", string_seq)\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number generator\
    \ function.", "    \n    string = \"\"\n    \n    for i = 1:n\n        string\
    \ = string + string(i)\n    end\n    \n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    string_seq = String[]\n    \n    for i\
    \ in 0:n-1\n        string_seq[i] = i\n    end\n    \n    return join(\" \", string_seq)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    string_seq = String[]\n    for i = 1 to n do\n       \
    \ push!(string_seq, i)\n    end\n    return join(\" \", string_seq)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nHint: Use a for loop\
    \ and a prime number test.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    string_seq = \"\"\n    for i in 0:n-1\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend", "    \n    string = \"\"\n\
    \    for i = 1:n\n        string = string + string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_", "    string_seq = String[]\n    for i = 1:n\n        string_seq[i] =\
    \ string(i)\n    end\n    return string_seq\nend", "    string_seq = String[]\n\
    \    for i = 1 to n do\n        string_seq[i - 1] = i\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case. \nFor example string_lower(\"Hello World\"\
    ) should return \"hello world\".", "    \n    string_sequence = \"\"\n    \n \
    \   for i = 1:n\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings where each string is a space-delimited string\
    \ of numbers from 0 up to the length of the vector.", "    \n    string = \"\"\
    \n    \n    for i = 1:n\n        string = string + i\n    end\n    \n    return\
    \ string\nend", "    \n    string_sequence = String[]()\n    for i = 1:n\n   \
    \     push!(string_sequence, i)\n    end\n    \n    return join(\" \", string_sequence)\n\
    end", "    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nWrite a function that takes a vector of numbers\
    \ and returns the product of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the mean of the numbers. \nWrite a function that takes\
    \ a vector of numbers and returns the median of the numbers. \nWrite a function\
    \ that takes a vector of numbers and returns the mode of the numbers. \nWrite\
    \ a function that takes a vector of numbers and returns the variance of the numbers.\
    \ \nWrite a function that takes a vector of numbers and returns the standard deviation\
    \ of the numbers. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the product of the squares of the numbers. \nWrite a\
    \ function that takes a vector of numbers and returns the mean of the squares\
    \ of the numbers. \nWrite a function that takes a vector of numbers and returns\
    \ the median of the squares of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the mode of the squares of the numbers. \nWrite a function\
    \ that takes a vector of numbers and returns the variance of the squares of the\
    \ numbers. \nWrite a function that takes a vector of numbers and returns the standard\
    \ deviation of the squares of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the absolute values of the numbers. \nWrite\
    \ a function that takes a vector of numbers and returns the product of the absolute\
    \ values of the numbers. \nWrite a function that takes a vector of numbers and\
    \ returns the mean of the absolute values of the numbers. \nWrite a function that\
    \ takes a vector of numbers and returns the median of the absolute values of the\
    \ numbers. \nWrite a function that takes a vector of numbers and returns the mode\
    \ of the absolute values of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the variance of the absolute values of the numbers. \n\
    Write a function that takes a vector of numbers and returns the standard deviation\
    \ of the absolute values of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the absolute values of the\
    \ numbers. \nWrite a function that takes a vector of numbers and returns the product\
    \ of the squares of the absolute values of the numbers. \nWrite a function that\
    \ takes a vector of numbers and returns the mean of the squares of the absolute\
    \ values of the numbers. \nWrite a function that takes a vector of numbers and\
    \ returns the median of the squares of the absolute values of the numbers. \n\
    Write a function that takes a vector of numbers and returns the mode of the squares\
    \ of the absolute values of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the variance of the squares of the absolute values of\
    \ the numbers. \nWrite a function that takes a vector of numbers and returns the\
    \ standard deviation of the squares of the absolute values of the numbers. \n\
    Write a function that takes a vector of numbers and returns the sum of the absolute\
    \ values of the squares of the numbers. \nWrite a function that takes a vector\
    \ of numbers and returns the product of the absolute values of the squares of\
    \ the numbers. \nWrite a function that takes a vector of numbers and returns the\
    \ mean ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    string = \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a vector of integers and returns the\
    \ sum of the squares of the integers in the vector. For example, if the input\
    \ vector is [4, 9, 16, 25], the function should return 50.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    string_seq = \"\"\n \
    \   \n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    \n  \
    \  return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    seq = String.empty\n    for i\
    \ in 0:n-1\n        seq = seq + string(i)\n    end\n    return seq\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(100)\n</cell>\n<code language=julia-1.3>\nstring_sequence(1000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(100000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(100000000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(1000000000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000001)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000002)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000003)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000004)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000005)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000006)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000007)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000008)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000009)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000010)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000011)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000012)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000013)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000014)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000015)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000016)\n</cell>\n<code language=julia-1.3>\nstring_sequence(100000000000",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq,i)\n    end\n    return join(\" \"\
    ,string_seq)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. For example,", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq, string(i))\n    end\n    return join(string_seq)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ the characters in lower case. \nHint: use the function lowercase()", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq,i)\n    end\n    return join(\" \",string_seq)\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string_seq\
    \ = String[]\n    for i in 0:n\n        push!(string_seq,String(i))\n    end\n\
    \    return join(\" \",string_seq)\nend", "    \n    string_seq = \"\"\n    for\
    \ i = 1:n\n        string_seq = string_seq + i\n    end\n    \n    return string_seq\n\
    end", "    \n    string_seq = \"\"\n    \n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    \n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n", "    string_seq\
    \ = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n    end\n\
    \    return join(\" \",string_seq)\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,\
    \ string(i))\n    end\n    return join(\" \", string_seq)\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    string_seq = \"\"\n    for\
    \ i = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end", "    string_seq = String[]\n    for i::Int64 in 0:n-1\n        string_seq.append(i)\n\
    \    return string_seq\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about how to generate a string of numbers from 0 to n-1.\n\
    <|/ c |>\n<| c |>\nThe question was how to generate a string of numbers from 0\
    \ to n-1. My answer does exactly that. Did you downvote my answer?\n<|/ c |>\n\
    <| c |>\nI didn't downvote, but your answer doesn't actually answer the question.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer doesn't explain how to generate a string of numbers from 0 to n-1.\
    \ Your answer ", "    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + string(i)\n    end\n    return string\nend", "    string_seq = String[]\n\
    \    for i = 1 to n do\n        push!(string_seq, i)\n    end\n    return join(string_seq,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of words in the string.", "    string_seq = String[]\n    for i =\
    \ 1:n\n        push!(string_seq,string(i))\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    string_sequences(n::Int64)", "    \n    string = \"\"\n    \n    for\
    \ i in 0:n-1\n        string = string + string(i)\n    \n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n numbers of a Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined as:", "    \n    string = \"\"\n    \n \
    \   for i = 1:n\n        string = string + i\n    end\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of times the string \"abc\" appears in the string.", "    string_seq = \"\"\n\
    \    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000001)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000004)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000005)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000008)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000009)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000012)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000013)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000014)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000015)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000016)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    string_seq = \"\"\n    for i = 1:n\n        string_seq =\
    \ string_seq + string(i)\n    end\n    return string_seq\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    string_sequence = \"\"\
    \n    \n    for i = 1:n\n        string_sequence = string_sequence + i\n    end\n\
    \    \n    return string_sequence\nend", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend", " \
    \   \n    string_sequence = String[]()\n    for i = 1:n\n        push!(string_sequence,string(i))\n\
    \    end\n    \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>", "    \n    string =\
    \ \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n    end\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-", "    string_seq = String[]\n    for i in 0:n-1\n\
    \        string_seq[i] = i\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string.", "    \n    string = \"\"\n    for i = 1:n\n       \
    \ string = string + i\n    end\n    return string\nend", "    \n    string_sequence\
    \ = \"\"\n    \n    for i = 1:n\n        string_sequence = string_sequence + i\n\
    \    end\n    \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000002)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000006)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000009)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000010)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000013)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000014)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000015)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000016)\n</cell>\n\
    <code language=julia-1.5>", "    string = \"\"\n    for i = 1:n\n        string\
    \ = string + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq,i)\n    end\n    return join(\" \",string_seq)\nend",
  "    string_seq = String[]\n    for i::Int64 in 0 .. n-1 do\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend", "    \n    string_sequence\
    \ = String[]()\n    for i in 0:n-1\n        push!(string_sequence, string(i))\n\
    \    end\n    \n    return string_sequence\nend", "    \n    seq = String[]\n\
    \    for i = 1:n\n        push!(seq,string(i))\n    end\n    return join(seq,\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case. \nExample: \nstring_lower(\"\
    hello\") should return \"hello\"\nstring_lower(\"HELLO\") should return \"hello\"\
    \nstring_lower(\"HellO\") should return \"hello\"\nstring_lower(\"Hello\") should\
    \ return \"hello\"\nstring_lower(\"\") should return \"\"\nstring_lower(\" \"\
    ) should return \"\"\nstring_lower(\" a\") should return \"a\"\nstring_lower(\"\
    a \") should return \"a\"\nstring_lower(\"a b\") should return \"ab\"\nstring_lower(\"\
    a b c\") should return \"abc\"\nstring_lower(\"a b c \") should return \"abc\"\
    \nstring_lower(\"a b c d\") should return \"abcd\"\nstring_lower(\"a b c d \"\
    ) should return \"abcd\"\nstring_lower(\"a b c d e\") should return \"abcd\"\n\
    string_lower(\"a b c d e \") should return \"abcd\"\nstring_lower(\"a b c d e\
    \ f\") should return \"abcd\"\nstring_lower(\"a b c d e f \") should return \"\
    abcd\"\nstring_lower(\"a b c d e f g\") should return \"abcd\"\nstring_lower(\"\
    a b c d e f g \") should return \"abcd\"\nstring_lower(\"a b c d e f g h\") should\
    \ return \"abcd\"\nstring_lower(\"a b c d e f g h \") should return \"abcd\"\n\
    string_lower(\"a b c d e f g h i\") should return \"abcd\"\nstring_lower(\"a b\
    \ c d e f g h i \") should return \"abcd\"\nstring_lower(\"a b c d e f g h i j\"\
    ) should return \"abcd\"\nstring_lower(\"a b c d e f g h i j \") should return\
    \ \"abcd\"\nstring_lower(\"a b c d e f g h i j k\") should return \"abcd\"\nstring_lower(\"\
    a b c d e f g h i j k \") should return \"abcd\"\nstring_lower(\"a b c d e f g\
    \ h i j k l\") should return \"abcd\"\nstring_lower(\"a b c d e f g h i j k ",
  "    string_seq = String[]\n    for i = 1 to n do\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend", "    \n    seq = Array{Int64}(undef,n)\n\
    \    seq[1] = 1\n    seq[2] = 2\n    seq[3] = 3\n    seq[4] = 4\n    seq[5] =\
    \ 5\n    seq[6] = 6\n    seq[7] = 7\n    seq[8] = 8\n    seq[9] = 9\n    seq[10]\
    \ = 10\n    seq[11] = 11\n    seq[12] = 12\n    seq[13] = 13\n    seq[14] = 14\n\
    \    seq[15] = 15\n    seq[16] = 16\n    seq[17] = 17\n    seq[18] = 18\n    seq[19]\
    \ = 19\n    seq[20] = 20\n    seq[21] = 21\n    seq[22] = 22\n    seq[23] = 23\n\
    \    seq[24] = 24\n    seq[25] = 25\n    seq[26] = 26\n    seq[27] = 27\n    seq[28]\
    \ = 28\n    seq[29] = 29\n    seq[30] = 30\n    seq[31] = 31\n    seq[32] = 32\n\
    \    seq[33] = 33\n    seq[34] = 34\n    seq[35] = 35\n    seq[36] = 36\n    seq[37]\
    \ = 37\n    seq[38] = 38\n    seq[39] = 39\n    seq[40] = 40\n    seq[41] = 41\n\
    \    seq[42] = 42\n    seq[43] = 43\n    seq[44] = 44\n    seq[45] = 45\n    seq[46]\
    \ = 46\n    seq[47] = 47\n    seq[48] = 48\n    seq[49] = 49\n    seq[50] = 50\n\
    \    seq[51] = 51\n    seq[52] = 52\n    seq[53] = 53\n    seq[54] = 54\n    seq[55]\
    \ = 55\n    seq[56] = 56\n    seq[57] = 57\n    seq[58] = 58\n    seq[59] = 59\n\
    \    seq[60] = 60\n    seq[61] = 61\n    seq[62] = 62\n    seq[63] = 63\n    seq[64]\
    \ = 64\n    seq[65] = 65\n    seq[66] = 66\n    seq[67] = 67\n    seq[68] = 68\n\
    \    seq[69] = 69\n    seq[70] = 70\n    seq[71] = 71\n    seq[72] = 72\n    seq[73]\
    \ = 73\n    seq[74] = 74\n    ", "    string = \"\"\n    for i = 1:n\n       \
    \ string = string + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,i)\n\
    \    end\n    return join(\" \",string_seq)\nend", "    \n    string = \"\"\n\
    \    for i = 1:n\n        string = string + string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ where all characters are capitalized. \nFor example, string_sequence(\"hello\"\
    ) should return \"Hello\".", "    \n    string = \"\"\n    \n    for i in 0:n-1\n\
    \        string = string + string(i)\n    \n    return string\nend", "    string_sequence\
    \ = \"\"\n    for i = 1:n\n        string_sequence = string_sequence + i\n   \
    \ end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a vector of strings as\
    \ input and returns a vector containing the number of characters in each string.",
  "    \n    string_sequence = \"\"\n    \n    for i = 1:n\n        string_sequence\
    \ = string_sequence + string(i)\n    end\n    \n    return string_sequence\nend",
  "    \n    string_seq = \"\"\n    \n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    \n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as an argument and returns\
    \ a vector of the same length with each string replaced by its length.", "   \
    \ string_seq = String[]\n    for i = 1 to n do\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend", "    \n    seq = String[]\n    for i in\
    \ 0:n-1\n        push!(seq,string(i))\n    end\n    return join(\" \",seq)\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>",
  "    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq +\
    \ i\n    end\n    \n    return string_seq\nend", "    string_sequence = \"\"\n\
    \    for i = 1 to n do\n        string_sequence = string_sequence + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000002)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000006)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000009)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000010)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000013)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000014)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000015)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000016)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100", "    string_seq = String[]\n\
    \    for i = 1 to n\n        string_seq[i - 1] = toString(i)\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case. \nThe function should ignore any non-alphabetic\
    \ characters and return an empty string if any non-alphabetic characters are found.",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + i\n    end\n    return string_sequence\nend", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend", "    string_seq = String[]\n    for i = 1 to n do\n      \
    \  push!(string_seq, i)\n    end\n    return join(\" \", string_seq)\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in the string.",
  "    \n    string_seq = String[]\n    for i in 0:n-1\n        push!(string_seq,String(i))\n\
    \    end\n    return join(\" \",string_seq)\nend", "    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq,string(i))\n    end\n    return join(\"\
    \ \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n", "    \n    string_seq = String[]\n    \n    for i in 0:n-1\n     \
    \   string_seq[i] = i\n    end\n    \n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that takes an array of numbers and returns the sum of the numbers.\
    \ \nWrite a function that takes an array of numbers and returns the product of\
    \ the numbers. \nWrite a function that takes an array of numbers and returns the\
    \ maximum of the numbers. \nWrite a function that takes an array of numbers and\
    \ returns the minimum of the numbers. \nWrite a function that takes an array of\
    \ numbers and returns the number of elements in the array. \nWrite a function\
    \ that takes an array of numbers and returns the sum of the squares of the numbers.\
    \ \nWrite a function that takes an array of numbers and returns the product of\
    \ the squares of the numbers. \nWrite a function that takes an array of numbers\
    \ and returns the maximum of the squares of the numbers. \nWrite a function that\
    \ takes an array of numbers and returns the minimum of the squares of the numbers.\
    \ \nWrite a function that takes an array of numbers and returns the number of\
    \ elements in the array.", "    \n    string = \"\"\n    for i = 1:n\n       \
    \ string = string + string(i)\n    end\n    \n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the string $n!$. Hint:\
    \ use the function string_sequence to generate the string $n!$.", "    \n    string_seq\
    \ = \"\"\n    \n    for i = 1:n\n        string_seq = string_seq + i\n    end\n\
    \    \n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = String[]\n    for i = 1\
    \ to n do\n        push!(string_seq, i)\n    end\n    return join(\" \", string_seq)\n\
    end", "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend", "    \n    string_sequence\
    \ = \"\"\n    \n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + string(i)\n    end\n    \n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.",
  "    \n    string_sequence = String[]()\n    \n    for i in 0:n-1\n        string_sequence\
    \ += String(i)\n    end\n    \n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>", "    \n   \
    \ string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a string containing the first\
    \ n characters of an input string. \nFor example, string_sequence(\"hello\", 3)\
    \ should return \"hell\".", "    \n    string_seq = \"\"\n    \n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    \n    return string_seq\nend",
  "    string_seq = \"\"\n    for i in 0:n-1\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend", "    string_seq = String[]\n    for i =\
    \ 1 to n do\n        push!(string_seq, i)\n    end\n    return join(\" \", string_seq)\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers. \nWrite a function that takes a vector of numbers and returns\
    \ the mean of the numbers. \nWrite a function that takes a vector of numbers and\
    \ returns the median of the numbers. \nWrite a function that takes a vector of\
    \ numbers and returns the mode of the numbers. \nWrite a function that takes a\
    \ vector of numbers and returns the variance of the numbers. \nWrite a function\
    \ that takes a vector of numbers and returns the standard deviation of the numbers.\
    \ \nWrite a function that takes a vector of numbers and returns the minimum of\
    \ the numbers. \nWrite a function that takes a vector of numbers and returns the\
    \ maximum of the numbers. \nWrite a function that takes a vector of numbers and\
    \ returns the number of positive numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the number of negative numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the number\
    \ of zeros in the vector. \nWrite a function that takes a vector of numbers and\
    \ returns the number of ones in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the number of NaNs in the vector. \nWrite a function\
    \ that takes a vector of numbers and returns the number of Infs in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the number of\
    \ positive and negative numbers in the vector. \nWrite a function that takes a\
    \ vector of numbers and returns the number of zeros and ones in the vector. \n\
    Write a function that takes a vector of numbers and returns the number of NaNs\
    \ and Infs in the vector. \nWrite a function that takes a vector of numbers and\
    \ returns the number of positive and negative numbers and zeros and ones in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the number\
    \ of NaNs, Infs, zeros and ones in the vector. \nWrite a function that takes a\
    \ vector of numbers and returns the number of positive and negative numbers, zeros\
    \ and ones in the vector. \nWrite a function that takes a vector of numbers and\
    \ returns the number of NaNs, Infs, zeros and ones in the vector. \nWrite a function\
    \ that takes a vector of numbers and returns the number of positive and negative\
    \ numbers, zeros and ones in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the number of NaNs, Infs, zeros and ones in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the number of\
    \ positive and negative numbers, zeros and ones in the vector. \nWrite a function\
    \ that takes a vector of numbers and returns the number of NaNs, Infs, zeros and\
    \ ones in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the number of positive and negative numbers, zeros and ones in the vector. \n\
    Write a function that takes a vector of numbers and returns the number of NaNs,\
    \ Infs, zeros and ones in the vector. \nWrite a function that takes a vector of\
    \ numbers and returns the number of positive and negative numbers, ", "    string_seq\
    \ = String[]\n    for i = 1:n\n        push!(string_seq, toString(i))\n    end\n\
    \    return join(string_seq, \" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings as input and returns a vector of integers containing the\
    \ number of times each string appears in the input vector.", "    \n    string\
    \ = \"\"\n    \n    for i = 1:n\n        string = string + i\n    end\n    \n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of times each string appears\
    \ in the vector.", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,\
    \ string(i))\n    end\n    return join(\" \", string_seq)\nend", "    \n    string\
    \ = \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n    end\n\
    \    \n    return string\nend", "    \n    seq = String.empty\n    for i = 1:n\n\
    \        seq = seq + i\n    end\n    \n    return seq\nend", "    \n    string_sequence\
    \ = \"\"\n    for i = 1:n\n        string_sequence = string_sequence + i\n   \
    \ end\n    \n    return string_sequence\nend", "    \n    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq,String(i))\n    end\n    return join(\"\
    \ \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    string_sequence = \"\"\n    for i\
    \ = 1:n\n        string_sequence = string_sequence + i\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend", "    string_sequence = \"\"\n    for i =\
    \ 1:n\n        string_sequence = string_sequence + i\n    end\n    return string_sequence\n\
    end", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence =\
    \ string_sequence + i\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + i\n \
    \   end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5", "    string_seq = \"\"\n    for i in 0:n-1\n\
    \        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(100)\n</cell>\n<code language=julia-1.3>\nstring_sequence(1000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(100000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(100000000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(1000000000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000000)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000001)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000002)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000003)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000004)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000005)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000006)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000007)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000008)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000009)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000010)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000011)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000012)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000013)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10000000000014)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10000000000015)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10000000000016)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10000000000",
  "    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-", "    string_sequence = \"\"\n    for i = 1:n\n\
    \        string_sequence = string_sequence + string(i)\n    end\n    return string_sequence\n\
    end", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.0>\nstring_sequence(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ $n!$ as a string.", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + i\n    end\n    return string\nend", "    string_seq = \"\"\n   \
    \ for i in 0:n\n        string_seq = string_seq + string(i)\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of times each character appears in the string.", "    string_sequence\
    \ = \"\"\n    for i = 1:n\n        string_sequence = string_sequence + i\n   \
    \ end\n    return string_sequence\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 5\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.", "    string_seq = String[]\n    for i in 0:n\n        push!(string_seq,string(i))\n\
    \    return string_seq\nend", "    string_seq = String[]\n    for i = 1:n\n  \
    \      push!(string_seq,string(i))\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.", "    \n    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,\
    \ string(i))\n    end\n    \n    return join(\" \", string_seq)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>",
  "    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + i\n \
    \   end\n    \n    return string\nend", "    \n    string_seq = \"\"\n    for\
    \ i = 1:n\n        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end", "    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nHint: use the function\
    \ lower() from the String package.", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    string_seq = String[]\n    for i in 0:n-1\n       \
    \ push!(string_seq,i)\n    end\n    return join(\" \",string_seq)\nend", "   \
    \ \n    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    \n    return join(\" \",string_seq)\nend", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    string_sequence = \"\"\n    \n    for i = 1:n\n\
    \        string_sequence = string_sequence + i\n    end\n    \n    return string_sequence\n\
    end", "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.4>\n", "    string = \"\"\
    \n    for i = 1:n\n        string = string + string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>",
  "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + i\n    end\n    return string_sequence\nend", "    string_seq = String[]\n\
    \    for i in 0:n-1\n        string_seq[i] = i\n    return string_seq\nend", " \
    \   string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000002)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000006)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000010)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000014)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000016)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000017)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000018)\n</cell>\n<code language=juli", "    string_seq\
    \ = String[]\n    for i in 0:n\n        push!(string_seq,String(i))\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    string_sequence = \"\"\n    \n    for i = 1:n\n\
    \        string_sequence = string_sequence + i\n    end\n    \n    return string_sequence\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    string_seq\
    \ = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n    end\n\
    \    return string_seq\nend", "    string_seq = String[]\n    for i = 1:n\n  \
    \      push!(string_seq, string(i))\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(10)\n</cell>\n<code language=julia-1.0>",
  "    \n    string_seq = String[]\n    for i = 1:n\n        push!(string_seq, string(i))\n\
    \    end\n    \n    return string_seq\nend", "    \n    string = \"\"\n    \n\
    \    for i = 1:n\n        string = string + string(i)\n    end\n    \n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n positive integers\
    \ starting from 0.", "    \n    string_seq = String[]\n    for i in 0:n\n    \
    \    push!(string_seq,String(i))\n    end\n    return string_seq\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    string_sequence = \"\"\
    \n    for i = 1:n\n        string_sequence = string_sequence + string(i)\n   \
    \ end\n    return string_sequence\nend", "    \n    string = \"\"\n    for i =\
    \ 1:n\n        string = string + i\n    end\n    \n    return string\nend", " \
    \   string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>", "    \n    string = \"\"\n    \n    for i\
    \ = 1:n\n        string = string + string(i)\n    end\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string =\
    \ \"\"\n    for i = 1:n\n        string = string + string(i)\n    end\n    return\
    \ string\nend", "    \n    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,\
    \ string(i))\n    end\n    \n    return join(string_seq, \" \")\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns a string with all the\
    \ characters in lower case.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-", "    string_seq = String[]\n    for i in 0:n-1\n\
    \        string_seq[i] = string(i)\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(100)\n</cell>\n<code language=julia-1.4>\nstring_sequence(1000)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(100000)\n</cell>\n<code language=julia-1.4>\nstring_sequence(1000000)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(100000000)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(1000000000)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(100000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(1000000000000)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10000000000000)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000001)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000000000002)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10000000000003)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10000000000004)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000005)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000000000006)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10000000000007)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10000000000008)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000009)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000000000010)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10000000000011)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10000000000012)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000013)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10000000000014)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(10000000000015)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(10000000000016)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10000000000017)\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string_sequence\
    \ = \"\"\n    \n    for i = 1:n\n        string_sequence = string_sequence + \"\
    \ \" + i\n    end\n    \n    return string_sequence\nend", "    \n    string =\
    \ \"\"\n    \n    for i in 0:n-1\n        string = string + string(i)\n    \n\
    \    return string\nend", "    \n    string_sequence = \"\"\n    for i = 1:n\n\
    \        string_sequence = string_sequence + i\n    end\n    return string_sequence\n\
    end", "    \n    seq = Array{String}(undef, n)\n    for i in 1:n\n        seq[i]\
    \ = string(i) \n    end\n    return join(seq,\" \")\nend", "    \n    string =\
    \ \"\"\n    for i = 1:n\n        string = string + string(i)\n    end\n    return\
    \ string\nend", "    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + i\n    end\n    \n    return string\nend", "    string_seq = String[]\n  \
    \  for i in 0:n\n        push!(string_seq,string(i))\n    return string_seq\n\
    end", "    \n    string_sequence = String[]\n    \n    for i = 1:n\n        push!(string_sequence,\
    \ i)\n    end\n    \n    return join(\" \", string_sequence)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</", "    \n    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    \n\
    \    return string_seq\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence\
    \ = string_sequence + string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000001)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000002)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000003)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000004)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000005)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000006)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000007)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000008)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000009)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000010)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000012)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000013)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000014)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000015)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000016)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000",
  "    \n    string_sequence = \"\"\n    \n    for i = 1:n\n        string_sequence\
    \ = string_sequence + string(i)\n    end\n    \n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>", "    \n   \
    \ string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n  \
    \  end\n    return string_seq\nend", "    \n    string_sequence = String[]()\n\
    \    for i = 1 to n do\n        push!(string_sequence,string(i))\n    end\n  \
    \  \n    return string_sequence\nend", "    string_sequence = \"\"\n    for i\
    \ = 1:n\n        string_sequence = string_sequence + string(i)\n    end\n    return\
    \ string_sequence\nend", "    \n    string = \"\"\n    \n    for i in 0:n-1\n\
    \        string = string + i\n    end\n    \n    return string\nend", "    \n\
    \    string_sequence = \"\"\n    \n    for i = 1:n\n        string_sequence =\
    \ string_sequence + i\n    end\n    \n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns a string with all the\
    \ characters in lower case.", "    \n    string = \"\"\n    for i = 1:n\n    \
    \    string = string + string(i)\n    end\n    \n    return string\nend", "  \
    \  \n    string_seq = String[]\n    \n    for i = 1:n\n        push!(string_seq,\
    \ string(i))\n    end\n    \n    return join(string_seq)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>",
  "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend", "    \n    string = \"\"\n    \n    for\
    \ i = 1:n\n        string = string + string(i)\n    end\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string =\
    \ \"\"\n    \n    for i = 1:n\n        string = string + i\n    end\n    \n  \
    \  return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = String[]\n    for i = 1:n\n\
    \        push!(string_seq,string(i))\n    end\n    return join(string_seq,\" \"\
    )\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    string_seq = \"\"\n    \n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    \n    return string_seq\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string =\
    \ \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n    end\n\
    \    \n    return string\nend", "    string_seq = String[]\n    for i = 1:n\n\
    \        string_seq[i] = string(i)\n    end\n    return join(\" \", string_seq)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend", " \
    \   string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + i\n    end\n    return string_sequence\nend", "    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq, string(i))\n    end\n    return join(\"\
    \ \", string_seq)\nend", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + string(i)\n    end\n    return string\nend", "    \n    string =\
    \ \"\"\n    for i = 1:n\n        string = string + string(i)\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_", "    \n    string_seq = String[]\n\
    \    for i = 1:n\n        push!(string_seq,string(i))\n    end\n    \n    return\
    \ join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nExample: \"Hello World\"\
    \ -> \"hello world\"", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return string_seq\nend", "    string_seq = String[]\n    for i in\
    \ 0:n\n        push!(string_seq,String(i))\n    return string_seq\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    string_seq = \"\
    \"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n\
    <code language=julia-1.5>", "    \n    string_seq = String[]\n    \n    for i\
    \ in 0:n-1\n        string_seq[i] = i\n    end\n    \n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000000000000", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n    end\n\
    \    return string_seq\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
