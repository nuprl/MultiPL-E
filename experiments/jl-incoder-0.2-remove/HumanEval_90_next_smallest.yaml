name: HumanEval_90_next_smallest
language: jl
prompt: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    Return None if there is\
  \ no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
  \ Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
  \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
  \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1, 1,\
  \ 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35, 34,\
  \ 12, -45]) == -35)\nend\n"
completions: ["    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            smallest = lst[i]\n        end\n    end\n    return\
    \ smallest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the\
    \ question. He wants to find the 2nd smallest element of a vector, not the 2nd\
    \ smallest element of a list.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to show that you can find the 2nd smallest element of a vector by using the\
    \ function `next_smallest()`.\n<|/ c |>\n<| c |>\nI agree, but your answer does\
    \ not answer the question. He wants to find the 2nd smallest element of a vector,\
    \ not the 2nd smallest element of a list.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to show that you can find the 2nd smallest element of a vector\
    \ by using the function `next_smallest()`.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe function next_smallest() takes in a list of integers and returns\
    \ the 2nd smallest element of the list. \nThe function next_smallest() works by\
    \ iterating through the list and comparing each element to the 2nd smallest element\
    \ in the list. \n<code>", "    if length(lst) == 0 \n        error(\"The list\
    \ is empty\") \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nThe solution using sort! is very elegant\
    \ and efficient, but I wanted to show another way using filter!:\n<code>", " \
    \   if length(lst) == 0 \n        return nothing\n    end\n    smallest = lst[1]\n\
    \    smallest_index = 2\n    for index in 2:length(lst)\n        if lst[index]\
    \ < smallest \n            smallest = lst[index]\n            smallest_index =\
    \ index\n        end\n    end\n    return smallest\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,4,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the 3rd smallest element of the list.\nReturn nothing if there is no\
    \ such element.\nHint: Use a for loop.", "    if length(lst) == 0 \n        error(\"\
    The list is empty\") \n    else \n        smallest = lst[1] \n        for i in\
    \ 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i] \n            end\n        end\n        return smallest\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(lst) == 0 \n        return\
    \ nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5])\n</cell>\n<code language=julia-1.0>\n\
    next_smallest([1,4,3,5,2])\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0])\n</cell>\n<code language=julia-1.0>\n\
    next_smallest([1,4,3,5,2,0,0,0,0])\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,1,",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of the list that satisfies a given condition. For example, if the list contains\
    \ only positive numbers, then the function should return -1 if the list does not\
    \ contain any element that satisfies the condition.", "    if length(lst) == 0\
    \ \n        error(\"The list is empty\") \n    else \n        lst[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>", " \
    \   if length(lst) == 0 \n        return nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\n", "    if length(lst) == 0 \n        return nothing\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smalle", "    if length(lst) == 0 \n\
    \        error(\"The list is empty\")\n    end\n    smallest = lst[1]\n    smallest_index\
    \ = 2\n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n            smallest_index = i\n        end\n    end\n  \
    \  return smallest\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of the list that is larger than the given value.", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.3>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing\n    elseif\
    \ length(lst) == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n   \
    \     return lst[1]\n    elseif length(lst) > 2 \n        smallest = lst[1]\n\
    \        smallest_index = 2\n        for index in 2:length(lst)\n            if\
    \ lst[index] < smallest \n                smallest = lst[index]\n            \
    \    smallest_index = index\n            end\n        end\n        return smallest\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing\n    else if\
    \ length(lst) == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n\
    \        for i in 2:length(lst) \n            if lst[i] < smallest \n        \
    \        smallest = lst[i]\n            end\n        end\n        return smallest\n\
    \    end\nend\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=0 |>\n<code>", " \
    \   if length(lst) == 0 \n        return Nothing\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing\n    else \n\
    \        return lst[findmin(lst)]\n    end\nend", "    if length(lst) == 0 \n\
    \        error(\"The list cannot be empty\")\n    end\n    smallest = lst[1]\n\
    \    smallest_index = 1\n    for index in 2:length(lst)\n        if lst[index]\
    \ < smallest \n            smallest = lst[index]\n            smallest_index =\
    \ index\n        end\n    end\n    return smallest_index == length(lst) ? nothing\
    \ : smallest_index\nend\n</cell>\n<code language=julia-1.4>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else\n        smallest = lst[1]\n        smallest_index = 2\n  \
    \      for i = 2:length(lst)\n            if lst[i] < smallest \n            \
    \    smallest = lst[i]\n                smallest_index = i\n            end\n\
    \        end\n        return smallest\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nThe easiest way is to use sort!\n<code>", "    if length(lst)\
    \ == 0 \n        return nothing\n    else \n        return lst[1]\n    end\nend",
  "    if length(lst) == 0 \n        return nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        error(\"\
    list is empty\") \n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else \n        smallest\
    \ = lst[1]\n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.4>\nnext_smallest([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6])\n</cell>\n<code\
    \ language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.4>\n\
    next_smallest([1,2,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,",
  "    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i] < smallest\n\
    \            smallest = lst[i]\n        end\n    end\n    smallest\nend", "  \
    \  if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function next_largest() that returns the 2nd largest\
    \ element of the list.\nReturn None if there is no such element.\nHint: Use a\
    \ for loop to iterate through the list.", "    smallest = minimum(lst)\n    if\
    \ smallest == lst[1]\n        return smallest\n    else\n        return nothing\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if length(lst) == 0 \n\
    \        error(\"The list is empty\") \n    else \n        smallest = lst[1] \n\
    \        for i in 2:length(lst) \n            if lst[i] < smallest \n        \
    \        smallest = lst[i] \n            end \n        end \n        return smallest\
    \ \n    end \nend \n</cell>\n<code language=julia-1.0>\nnext_smallest([1,5,2,4,3,6,8,7,9,0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a condition. For example, if the list is [1,2,3,4,5,6],\
    \ the function should return 3 if the condition is lst[1] > lst[2]. Otherwise,\
    \ return -1.", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    )\n    end\n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        end\n    end\n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.0>\nnext_smallest([2,4,6,8,10,12,14,16,18,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the list that has the smallest value.", "    if length(lst) == 0 \n     \
    \   return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n   \
    \ else\n        smallest = lst[1]\n        for elt in lst[2:end]\n           \
    \ if elt < smallest \n                smallest = elt\n            end\n      \
    \  end\n        return smallest\n    end\nend", "    if length(lst) == 0 \n  \
    \      return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        return lst[findmin(lst)]\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ nothing\n    else \n        return lst[1]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    elseif length(lst) == 1 \n\
    \        return lst[1]\n    else\n        smallest = lst[1]\n        for i = 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if length(lst) == 0 \n        error(\"The list is\
    \ empty\") \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend ", "  \
    \  if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n  \
    \      smallest = lst[1]\n        for i = 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>", "    if length(lst) == 0 \n        return\
    \ Nothing \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend ", "  \
    \  if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n    end\n\
    end", "    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i in 2:length(lst)\n            if lst[i] < smallest \n   \
    \             smallest = lst[i]\n                smallest_index = i\n        \
    \    end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend ", "    if length(lst) == 0 \n   \
    \     return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n \
    \   else \n        smallest = lst[1]\n        for element in lst[2:end] \n   \
    \         if element < smallest \n                smallest = element \n      \
    \      end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n  \
    \  elseif length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else\n        smallest = lst[1]\n        for elt in lst[2:end]\n\
    \            if elt < smallest \n                smallest = elt\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    else \n        smallest =\
    \ minimum(lst)\n        lst = filter(x -> x != smallest, lst)\n        smallest\
    \ = minimum(lst)\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the list that is closest to zero. \n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no elements that are equally close, return -1.\n\
    If there are multiple elements that are equally close, return the index of the\
    \ smallest one.\nIf there are no ", "    if length(lst) == 0 \n        return\
    \ nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([", "    if length(lst) == 0 \n        return Nothing\n    elseif\
    \ length(lst) == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n\
    \        for i = 2:length(lst)\n            if lst[i] < smallest \n          \
    \      smallest = lst[i]\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of the list that satisfies a given condition. For example, given [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return 4 because 4 is the first element of the list that\
    \ satisfies the condition lst[i]%2 == 0.", "    if length(lst) == 0 \n       \
    \ return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\
    \ \n        smallest = lst[1]\n        for i in 2:length(lst)\n            if\
    \ lst[i] < smallest \n                smallest = lst[i]\n            end\n   \
    \     end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(lst) == 0 \n        return Nothing \n    else \n        smallest\
    \ = lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i] \n            else \n                break\
    \ \n        end \n        return smallest \nend \n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a tags=julia,list |>\nA more efficient solution is to use sortperm:\n\
    <code>\njulia> function next_smallest(lst)\n           return lst[sortperm(lst)[2]]\n\
    \       end\nnext_smallest (generic function with 1 method)", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in the list that satisfy\
    \ the condition $x^2 + y^2 \\leq z^2$. Test it on $x^2 + y^2 = z^2$ and $x^2 +\
    \ y^2 = z^3$.", "    smallest = lst[1]\n    for i in 2:length(lst)\n        if\
    \ lst[i] < smallest\n            smallest = lst[i]\n        end\n    end\n   \
    \ return smallest\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to find the second smallest element in a list, not the\
    \ first one.\n<|/ c |>\n<| c |>\nI edited the answer to make it more clear. Thanks\
    \ for pointing out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(lst)\
    \ == 0 \n        error(\"List is empty\") \n    else \n        smallest = lst[1]\n\
    \        for i in 2:length(lst) \n            if lst[i] < smallest \n        \
    \        smallest = lst[i] \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i]\n           \
    \ end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend ", "    if length(lst) == 0 \n   \
    \     return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n \
    \   else \n        smallest = lst[1]\n        for i in 2:length(lst) \n      \
    \      if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for index in 2:length(lst)\n            if lst[index] < smallest\
    \ \n                smallest = lst[index]\n                smallest_index = index\n\
    \            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        smallest_index = 2\n        for index in 2:length(lst)\n \
    \           if lst[index] < smallest \n                smallest = lst[index]\n\
    \                smallest_index = index\n            end\n        end\n      \
    \  return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(lst) == 0 \n        error(\"The list is empty\") \n    else \n      \
    \  smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the first element of a list that satisfies a given\
    \ condition. \nFor example, \nif lst = [1,2,3,4,5,6,7,8,9,10], and cond=x>3, then\
    \ the function should return 3 because lst[3] is greater than 3.", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \      end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        error(\"List is empty\"\
    ) \n    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n  \
    \          if lst[i] < smallest \n                smallest = lst[i] \n       \
    \     end\n        end\n        return smallest\n    end\nend", "    if length(lst)\
    \ == 0 \n        return nothing\n    else \n        smallest = lst[1]\n      \
    \  for i in 2:length(lst)\n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the 3rd smallest element\
    \ of the list.\nReturn nothing if there is no such element.\nHint: Use a for loop\
    \ and a counter.", "    if length(lst) == 0 \n        return Nothing \n    else\
    \ \n        smallest = lst[1] \n        for i in 2:length(lst) \n            if\
    \ lst[i] < smallest \n                smallest = lst[i] \n            end\n  \
    \      end\n        return smallest \n    end\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have a list of negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| c |>\nYes, it does work. `next_smallest([-10, -5, -1,\
    \ -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-21`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for negative numbers. `next_smallest([-10, -5, -1, -4,\
    \ -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead of `-21`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| a dscore=4 |>\nThe answer by is correct, but I thought\
    \ I'd add some explanation.\nThe reason why this works is because Julia's sort\
    \ function sorts ascending by default. \nThe function next_smallest is then called\
    \ on the sorted array and returns the 2nd smallest element of the array. \n<code>\n\
    julia> next_smallest([-10, -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17,\
    \ -21])\n-21\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work\
    \ if you have a list of negative numbers. `next_smallest([-10, -5, -1, -4, -7,\
    \ -6, -9, -12, -13, -14, -15, -16, -17, -2", "    if length(lst) == 0 \n     \
    \   error(\"The list is empty\") \n    else \n        smallest = lst[1] \n   \
    \     for i in 2:length(lst) \n            if lst[i] < smallest \n           \
    \     smallest = lst[i] \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the 2nd largest element\
    \ of the list.\nReturn None if there is no such element.\nHint: Use a for loop.",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \      end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        error(\"The list is\
    \ empty\")\n    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst)\
    \ == 2 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        return lst[findmin(lst)]\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else \n        smallest =\
    \ lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend", "    if length(lst) == 0 \n        return Nothing \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend",
  "    if length(lst) == 0 \n        return Nothing \n    else \n        smallest\
    \ = lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i] \n            else \n                return\
    \ smallest \n            end \n        end \n    end \nend \n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not answer the question. OP wants to find the 2nd smallest\
    \ element in the list. Your code returns the smallest element in the list.\n<|/\
    \ c |>\n<| c |>\nThe question asks for the 2nd smallest element. Your code returns\
    \ the smallest element in the list.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ the 2nd smallest element. Your code returns the smallest element in the list.\n\
    <|/ c |>\n<| c |>\nThe question asks for the 2nd smallest element. Your code returns\
    \ the smallest element in the list.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ the 2nd smallest element. Your code returns the smallest element in the list.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "    if length(lst) == 0 \n        error(\"\
    The list is empty\") \n    else \n        smallest = lst[1] \n        for i in\
    \ 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i] \n            end \n        end \n        return smallest \n    end\
    \ \nend ", "    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</code>\n<|/ a |>\n<| a tags=julia,sorting |>\n<code>", "    if\
    \ length(lst) == 0 \n        Nothing \n    else \n        lst[end-1] \n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        Nothing\n\
    \    else\n        lst[end-1]\n    end\nend", "    if length(lst) == 0 \n    \
    \    return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n  \
    \  else \n        return lst[findmin(lst)]\nend", "    if length(lst) == 0 \n\
    \        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i]\n           \
    \ end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        Nothing\n    else\n        lst[end-1]\n    end\n\
    end", "    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for ele in lst[2:end]\n            if ele < smallest \n                smallest\
    \ = ele\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0 \n        error(\"The list is empty\")\n    end\n    smallest\
    \ = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n        if\
    \ lst[index] < smallest \n            smallest = lst[index]\n            smallest_index\
    \ = index\n        end\n    end\n    return smallest\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for el in lst[2:end] \n\
    \            if el < smallest \n                smallest = el\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest", "    if length(lst) == 0 \n        return\
    \ nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n  \
    \      smallest = lst[1]\n        smallest_index = 2\n        for i = 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \          smallest_index = i\n            end\n        end\n        return smallest\n\
    \    end\nend", "    if length(lst) == 0 \n        return Nothing\n    else if\
    \ length(lst) == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n\
    \        for i in 2:length(lst)\n            if lst[i] < smallest \n         \
    \       smallest = lst[i]\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       return lst[findmin(lst)]\nend", "    if length(lst) == 0 \n        error(\"\
    The list is empty\")\n    elseif length(lst) == 1 \n        return lst[1]\n  \
    \  else\n        smallest = lst[1]\n        for el in lst[2:end]\n           \
    \ if el < smallest \n                smallest = el\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0 \n        error(\"list empty\") \n    else \n        lst[1]\
    \ \n    end\nend", "    if length(lst) == 0 \n        error(\"The list cannot\
    \ be empty\")\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for\
    \ index in 2:length(lst)\n        if lst[index] < smallest \n            smallest\
    \ = lst[index]\n            smallest_index = index\n        end\n    end\n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing \n    else \n        smallest = lst[1] \n    \
    \    for i in 2:length(lst) \n            if lst[i] < smallest \n            \
    \    smallest = lst[i] \n            end \n        end \n        return smallest\
    \ \n    end \nend ", "    if length(lst) == 0 \n        return Nothing\n    elseif\
    \ length(lst) == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n   \
    \     return lst[1]\n    elseif length(lst) > 2 \n        smallest = lst[1]\n\
    \        for i = 2:length(lst) \n            if lst[i] < smallest \n         \
    \       smallest = lst[i]\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a given predicate.", "    if length(lst) ==\
    \ 0 \n        error(\"List is empty\") \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.3>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for elt in lst[2:end]\
    \ \n            if elt < smallest \n                smallest = elt\n         \
    \   end\n        end\n        return smallest\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid the\
    \ if/else statement and just return the value directly. Something like `return\
    \ lst[findfirst(elt -> elt < smallest, lst)]`\n<|/ c |>\n<| c |>\nYes, you can\
    \ do that, but I find it less readable than `if/else` statements.\n<|/ c |>\n\
    <| a tags=julia |>\nI like to use filter for this:\n<code>\njulia> function next_smallest(lst)\n\
    \           return filter(x -> x < lst[1], lst)[2]\n       end\nnext_smallest\
    \ (generic function with 1 method)", "    if length(lst) == 0 \n        error(\"\
    List is empty\") \n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \      end\n        end\n        return smallest\n    end\nend", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>", " \
    \   if length(lst) == 0 \n        error(\"The list is empty\")\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    elseif length(lst) > 2 \n        smallest = lst[1]\n        for i = 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a function that returns the 2nd smallest\
    \ element of a vector:\n<code>", "    if length(lst) == 0 \n        return Nothing\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst) ==\
    \ 2 \n        return lst[1]\n    elseif length(lst) > 2 \n        smallest = lst[1]\n\
    \        smallest_index = 2\n        for index in 2:length(lst)\n            if\
    \ lst[index] < smallest \n                smallest = lst[index]\n            \
    \    smallest_index = index\n            end\n        end\n        return smallest\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to find the 2nd smallest element in the list, not just the first one.\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing it out. I'll update\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(lst) == 0 \n\
    \        return nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else\n        smallest = lst[1]\n        for i in 2:length(lst)\n       \
    \     if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend", "    if length(lst) == 0\
    \ \n        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i]\n           \
    \ end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the list that is closest to zero.\nIf there\
    \ are multiple elements that are equally close, return the first one.\nIf there\
    \ are no elements that are equally close, return None.\nFor example, if the list\
    \ is [-1,0,1,2,3], the function should return 1.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 3.\nIf the list is [-1,0,1,2,3], the function should\
    \ return None.\nIf the list is [-1,0,1,2,3], the function should return -1.\n\
    If the list is [-1,0,1,2,3], the function should return 0.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 2.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 4.\nIf the list is [-1,0,1,2,3], the function should return 5.\nIf the\
    \ list is [-1,0,1,2,3], the function should return 6.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 7.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 8.\nIf the list is [-1,0,1,2,3], the function should return 9.\nIf the\
    \ list is [-1,0,1,2,3], the function should return 10.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 11.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 12.\nIf the list is [-1,0,1,2,3], the function should return 13.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 14.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 15.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 16.\nIf the list is [-1,0,1,2,3], the function should return 17.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 18.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 19.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 20.\nIf the list is [-1,0,1,2,3], the function should return 21.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 22.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 23.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 24.\nIf the list is [-1,0,1,2,3], the function should return 25.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 26.\nIf the list is [-1,0,",
  "    if length(lst) == 0 \n        return Nothing\n    elseif length(lst) == 1 \n\
    \        return lst[1]\n    elseif lst[1] < lst[2] \n        return lst[1]\n \
    \   elseif lst[1] > lst[2] \n        return lst[2]\n    end\nend", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i = 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n  \
    \  else if length(lst) == 1 \n        return lst[1]\n    else \n        smallest\
    \ = lst[1]\n        for el in lst[2:end]\n            if el < smallest \n    \
    \            smallest = el\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        error(\"The list is empty\") \n    else \n        smallest = lst[1]\n\
    \        for i in 2:length(lst) \n            if lst[i] < smallest \n        \
    \        smallest = lst[i] \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,6,8,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the list that is closest to zero. \nFor example, if the list is [-1,0,1,2,3],\
    \ the function should return 1.", "    if length(lst) == 0 \n        return nothing\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst) ==\
    \ 2 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ e in lst[2:end]\n            if e < smallest \n                smallest = e\n\
    \            end\n        end\n        return smallest\n    end\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,list |>\n<code>", "    if length(lst) == 0 \n      \
    \  error(\"The list is empty\")\n    end\n    smallest = lst[1]\n    smallest_index\
    \ = 2\n    for index in 2:length(lst)\n        if lst[index] < smallest \n   \
    \         smallest = lst[index]\n            smallest_index = index\n        end\n\
    \    end\n    return smallest\nend\n</code>\n<|/ a tags=julia,list |>\n<| c |>\n\
    This doesn't work if you have a list of negative numbers. For example, `next_smallest([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `-5` instead of `0`.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I will fix the answer.\n<|/ c |>\n<| a tags=julia,list\
    \ |>\n<code>", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    )\n    elseif length(lst) == 1 \n        lst[1]\n    else\n        smallest =\
    \ lst[1]\n        for elem in lst[2:end]\n            if elem < smallest \n  \
    \              smallest = elem\n            end\n        end\n        smallest\n\
    \    end\nend", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    ) \n    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n  \
    \          if lst[i] < smallest \n                smallest = lst[i] \n       \
    \     end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    smallest = minimum(lst)\n    smallest_index = findfirst(x\
    \ -> x == smallest, lst)\n    if smallest_index == nothing\n        smallest_index\
    \ = 1\n    end\n    next_smallest = lst[smallest_index + 1]\n    return next_smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,", "    if length(lst) == 0 \n       \
    \ return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\
    \ \n        return lst[findmin(lst)]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        return lst[findmin(lst)]\nend",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n \
    \       smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.\n\
    Hint: Use a for loop to iterate over the list.", "    smallest = minimum(lst)\n\
    \    smallest_index = findfirst(x -> x == smallest, lst)\n    if smallest_index\
    \ == nothing\n        return nothing\n    else\n        return lst[smallest_index\
    \ + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.\n\
    Hint: Use a for loop.", "    if length(lst) == 0 \n        return Nothing\n  \
    \  else if length(lst) == 1 \n        return lst[1]\n    else \n        smallest\
    \ = lst[1]\n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there\
    \ are duplicates in the list. For example, `next_smallest([1,2,2,3])` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, you are right. My bad. I will edit\
    \ my answer.\n<|/ c |>\n<| a |>\n<code>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else \n        smallest = minimum(lst)\n        lst = filter(x\
    \ -> x != smallest, lst)\n        smallest = minimum(lst)\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return Nothing\n    elseif length(lst) == 1 \n        return lst[1]\n\
    \    else\n        smallest = lst[1]\n        for i in 2:length(lst)\n       \
    \     if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,",
  "    if length(lst) == 0 \n        return Nothing\n    elseif length(lst) == 1 \n\
    \        return lst[1]\n    else\n        smallest = lst[1]\n        for i = 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \      end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        error(\"The list is\
    \ empty\") \n    else \n        lst[end-1] \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i] < smallest\n\
    \            smallest = lst[i]\n        else\n            break\n        end\n\
    \    end\n    return smallest\nend", "    if length(lst) == 0 \n        return\
    \ nothing\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index\
    \ in 2:length(lst)\n        if lst[index] < smallest \n            smallest =\
    \ lst[index]\n            smallest_index = index\n        end\n    end\n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    smallest = lst[1]\n\
    \    for i in lst[2:end]\n        if i < smallest\n            smallest = i\n\
    \        end\n    end\n    smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the 2nd largest element of the list.\nReturn None if there is no such\
    \ element.\nHint: Use a for loop.", "    if length(lst) == 0 \n        return\
    \ Nothing \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest = minimum(lst)\n    smallest_index\
    \ = findfirst(x -> x == smallest, lst)\n    if smallest_index == nothing\n   \
    \     return nothing\n    else\n        return lst[smallest_index + 1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        error(\"\
    The list has no elements\")\n    end\n    smallest = lst[1]\n    smallest_index\
    \ = 2\n    for index in 2:length(lst)\n        if lst[index] < smallest \n   \
    \         smallest = lst[index]\n            smallest_index = index\n        end\n\
    \    end\n    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-", "    if length(lst)\
    \ == 0 \n        Nothing\n    elseif length(lst) == 1 \n        lst[1]\n    elseif\
    \ length(lst) == 2 \n        lst[1]\n    elseif length(lst) > 2 \n        lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the list that is closest to 0.", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n  \
    \      smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend", "    if length(lst) == 0 \n        return\
    \ nothing\n    elseif length(lst) == 1 \n        return lst[1]\n    else\n   \
    \     smallest = lst[1]\n        smallest_index = 2\n        for index in 2:length(lst)\n\
    \            if lst[index] < smallest \n                smallest = lst[index]\n\
    \                smallest_index = index\n            end\n        end\n      \
    \  return smallest\n    end\nend", "    if length(lst) == 0 \n        error(\"\
    list is empty\") \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.0>", "    if length(lst) == 0 \n        return Nothing\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for ele in lst[2:end]\n            if ele < smallest \n  \
    \              smallest = ele\n            end\n        end\n        return smallest\n\
    \    end\nend", "    if length(lst) == 0 \n        error(\"list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ nothing\n    else \n        return lst[findfirst(x -> x < lst[end], lst[end-1:end])+1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "  \
    \  if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      lst[1]\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\")\n    elseif length(lst) == 1 \n\
    \        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    else\n        smallest = lst[1]\n        for i in 2:length(lst)\n       \
    \     if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"List is empty\")\n    end\n    smallest\
    \ = minimum(lst)\n    lst = filter(x -> x != smallest, lst)\n    if length(lst)\
    \ == 0 \n        error(\"List is empty\")\n    end\n    smallest = minimum(lst)\n\
    \    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        lst = lst[2:end]\n   \
    \     for elt in lst\n            if elt < smallest\n                smallest\
    \ = elt\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>", "  \
    \  if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n  \
    \      smallest = lst[1]\n        for elt in lst[2:end]\n            if elt <\
    \ smallest \n                smallest = elt\n            end\n        end\n  \
    \      return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\n", "    if length(lst) == 0 \n        return\
    \ nothing\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function next_largest() that returns the 2nd largest element\
    \ of the list.\nReturn None if there is no such element.\nHint: Use a for loop.",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      lst[1] \n    end\nend", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else \n        smallest = lst[1]\n      \
    \  for i in 2:length(lst)\n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else\n        smallest = lst[1]\n        for i in 2:length(lst)\n       \
    \     if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend", "    if length(lst) == 0\
    \ \n        error(\"The list is empty\") \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,3,5,7,11,13,17,19])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the first\
    \ element of the list that matches the given predicate.", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1]\n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for el\
    \ in lst[2:end] \n            if el < smallest \n                smallest = el\
    \ \n            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\
    \ \n    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n \
    \           if lst[i] < smallest \n                smallest = lst[i] \n      \
    \      end\n        end\n        return smallest \n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ external packages.\n<|/ c |>\n<| c |>\nI added a solution that does not use\
    \ any external packages.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any external packages.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does not use any external packages.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any external packages.\n<|/ c |>\n<| a |>\n\
    Here is a solution without using any external packages:\n<code>", "    if length(lst)\
    \ == 0 \n        return nothing\n    else \n        smallest = lst[1]\n      \
    \  for i in 2:length(lst)\n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        lst = lst[2:end]\n        for el\
    \ in lst\n            if el < smallest \n                smallest = el\n     \
    \       end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        error(\"The list is\
    \ empty\")\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index\
    \ in 2:length(lst)\n        if lst[index] < smallest \n            smallest =\
    \ lst[index]\n            smallest_index = index\n        end\n    end\n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    ) \n    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n  \
    \          if lst[i] < smallest \n                smallest = lst[i] \n       \
    \     end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([2,4,6,8,10,12,14,16,18,20])\n</cell>\n\
    <text>\nExercise 5\nWrite a function that returns the index of the element in\
    \ the list that is closest to zero.", "    if length(lst) == 0 \n        error(\"\
    List is empty\") \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend ", "  \
    \  if length(lst) == 0 \n        return Nothing \n    else \n        smallest\
    \ = lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i] \n            end \n        end \n     \
    \   return smallest \n    end \nend ", "    if length(lst) == 0 \n        error(\"\
    List is empty\") \n    else \n        lst[1] \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing \n    else \n        smallest\
    \ = lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i] \n            end\n        end\n       \
    \ return smallest \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nThe answer by is correct, but I wanted to point out that you can also use\
    \ sort! to sort a vector in-place:\n<code>\njulia> sort!([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe answer by is\
    \ correct, but I wanted to point out that you can also use sort! to sort a vector\
    \ in-place:\n<code>\njulia> sort!([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        return lst[findmin(lst)]\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else \n        smallest\
    \ = lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the list that is closest to x. Return -1 if there is no such element.", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for element\
    \ in lst[2:end] \n            if element < smallest \n                smallest\
    \ = element \n            end\n        end\n        return smallest\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n  \
    \  else if length(lst) == 1 \n        return lst[1]\n    else \n        smallest\
    \ = lst[1]\n        for i in 2:length(lst) \n            if lst[i] < smallest\
    \ \n                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    smallest\
    \ = lst[1]\n    smallest_index = 2\n    for i in lst[2:end]\n        if i < smallest\n\
    \            smallest = i\n            smallest_index = i\n        end\n    end\n\
    \    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of the list that is larger than a given value.", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1]\n        for i in 2:length(lst)\n            if lst[i] < smallest \n\
    \                smallest = lst[i]\n            end\n        end\n        return\
    \ smallest\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not answer\
    \ the question. He wants to find the second smallest element of a vector, not\
    \ the smallest element of a vector.\n<|/ c |>\n<| c |>\nThe question was edited\
    \ after I posted my answer. My answer was based on the original question. My answer\
    \ was also based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      lst[1]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        Nothing\n    else\n        lst[end-1]\n    end\nend", "    if length(lst)\
    \ == 0 \n        error(\"The list is empty\") \n    else \n        smallest =\
    \ lst[1] \n        for i in 2:length(lst) \n            if lst[i] < smallest \n\
    \                smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend ", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for el in lst[2:end]\n            if el < smallest \n    \
    \            smallest = el\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        for i\
    \ in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the nth smallest element of a list.\nIf there are less than n elements\
    \ in the list, return None.\nIf there are more than n elements in the list, return\
    \ the last element in the list.\nIf there are less than n or more than n elements\
    \ in the list, raise an error.\nHint: Use a for loop.", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        for i = 2:length(lst)\n       \
    \     if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"The list cannot be empty\")\n    end\n\
    \    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </code>\n<|/ a tags=julia,list |>\n<| a dscore=2 |>\nThe most efficient way is\
    \ to use sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 1\n 2", "    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        error(\"\
    The list is empty\")\n    end\n    smallest = lst[1]\n    smallest_index = 2\n\
    \    for index in 2:length(lst)\n        if lst[index] < smallest \n         \
    \   smallest = lst[index]\n            smallest_index = index\n        end\n \
    \   end\n    return smallest_index\nend", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n  \
    \      smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list\
    \ |>\nThe shortest solution I could come up with is this:\n<code>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,",
  "    if length(lst) == 0 \n        return Nothing\n    elseif length(lst) == 1 \n\
    \        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i = 2:length(lst)\n            if lst[i] < smallest \n    \
    \            smallest = lst[i]\n                smallest_index = i\n         \
    \   end\n        end\n        return smallest\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,sorting |>\n<code>", "    if length(lst) == 0 \n       \
    \ return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else\n\
    \        smallest = lst[1]\n        smallest_index = 2\n        for i = 2:length(lst)\n\
    \            if lst[i] < smallest \n                smallest = lst[i]\n      \
    \          smallest_index = i\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given predicate.", "    if length(lst) == 0 \n    \
    \    return Nothing\n    elseif length(lst) == 1 \n        return lst[1]\n   \
    \ else\n        smallest = lst[1]\n        for element in lst[2:end]\n       \
    \     if element < smallest \n                smallest = element\n           \
    \ end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.4>", " \
    \   if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n \
    \       lst[end-1] \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(lst) == 0 \n        error(\"The list cannot be empty\")\n    end\n  \
    \  smallest = lst[1]\n    smallest_index = 2\n    for i in 2:length(lst)\n   \
    \     if lst[i] < smallest \n            smallest = lst[i]\n            smallest_index\
    \ = i\n        end\n    end\n    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.4>", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i in 2:length(lst)\n            if lst[i] < smallest \n   \
    \             smallest = lst[i]\n                smallest_index = i\n        \
    \    end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        error(\"\
    The list cannot be empty\")\n    end\n    smallest = lst[1]\n    smallest_index\
    \ = 2\n    for index in 2:length(lst)\n        if lst[index] < smallest \n   \
    \         smallest = lst[index]\n            smallest_index = index\n        end\n\
    \    end\n    return smallest\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1 \n\
    \        return lst[1]\n    else \n        smallest = lst[1]\n        for i in\
    \ 2:length(lst)\n            if lst[i] < smallest \n                smallest =\
    \ lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    smallest = minimum(lst)\n    smallest_index\
    \ = findfirst(x -> x < smallest, lst)\n    if smallest_index == nothing\n    \
    \    smallest_index = 1\n    end\n    smallest_index += 1\n    if smallest_index\
    \ > length(lst)\n        smallest_index = 1\n    end\n    return lst[smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the list that is closest to x. \nIf there are multiple elements that are equally\
    \ close, return the first one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf x is greater than all the elements in the list, return -1.\n\
    If x is less than all the elements in the list, return -1.\nIf x is equal to the\
    \ element in the list, return 0.\nIf x is greater than or equal to all the elements\
    \ in the list, return -1.\nIf x is less than or equal to all the elements in the\
    \ list, return -1.\nIf x is equal to all the elements in the list, return 0.\n\
    If x is greater than all the elements in the list, return -1.\nIf x is less than\
    \ all the elements in the list, return -1.\nIf x is equal to all the elements\
    \ in the list, return 0.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x is less than all the elements in the list, return -1.\nIf x is equal\
    \ to all the elements in the list, return 0.\nIf x is greater than all the elements\
    \ in the list, return -1.\nIf x is less than all the elements in the list, return\
    \ -1.\nIf x is equal to all the elements in the list, return 0.\nIf x is greater\
    \ than all the elements in the list, return -1.\nIf x is less than all the elements\
    \ in the list, return -1.\nIf x is equal to all the elements in the list, return\
    \ 0.\nIf x is greater than all the elements in the list, return -1.\nIf x is less\
    \ than all the elements in the list, return -1.\nIf x is equal to all the elements\
    \ in the list, return 0.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x is less than all the elements in the list, return -1.\nIf x is equal\
    \ to all the elements in the list, return 0.\nIf x is greater than all the elements\
    \ in the list, return -1.\nIf x is less than all the elements in the list, return\
    \ -1.\nIf x is equal to all the elements in the list, return 0.\nIf x is greater\
    \ than all the elements in the list, return -1.\nIf x is less than all the elements\
    \ in the list, return -1.\nIf x is equal to all the elements in the list, return\
    \ 0.\nIf x is greater than all the elements in the list, return -1.\nIf x is less\
    \ than all the elements in the list, return -1.\nIf x is equal to all the elements\
    \ in the list, return 0.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x ", "    if length(lst) == 0 \n        error(\"The list is empty\"\
    ) \n    else \n        lst[1]\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
